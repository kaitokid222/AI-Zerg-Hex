//==================================================================================================
// 
// Generated Map Script
// 
// Name:   AI Zerg Hex
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"

//--------------------------------------------------------------------------------------------------
// Library: MD5_Hash
//--------------------------------------------------------------------------------------------------
// Function Declarations
void lib1_gf_InitializeHashInput ();
void lib1_gf_AddBooleanToHashInput (bool lp_boolean);
void lib1_gf_AddByteToHashInput (byte lp_byte);
void lib1_gf_AddBytesToHashInput (byte lp_byte, int lp_amount);
void lib1_gf_AddIntegerToHashInput (int lp_integer);
void lib1_gf_AddIntegersToHashInput (int lp_integer, int lp_amount);
void lib1_gf_AddRealToHashInput (fixed lp_real);
void lib1_gf_AddStringToHashInput (string lp_string);
void lib1_gf_AddUnitToHashInput (unit lp_unit);
string lib1_gf_GenerateMD5HashCode ();
string lib1_gf_GenerateSHA256HashCode ();

//--------------------------------------------------------------------------------------------------
// Library: MD5_Hash
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Global Script
//--------------------------------------------------------------------------------------------------
// Copyright (C) 2011 by Danny de Jong
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// Hash Input
byte[1024] HashInputData;
int HashInputSize = 0;
int GetHashInputLittleEndianInt( int position )
{
    int temp;
    int result;
    position *= 4;
    result = HashInputData[position];
    temp = HashInputData[position + 1];
    result |= temp << 8;
    temp = HashInputData[position + 2];
    result |= temp << 16;
    temp = HashInputData[position + 3];
    result |= temp << 24;
    return result;
}
int GetHashInputBigEndianInt( int position )
{
    int temp;
    int result;
    position *= 4;
    temp = HashInputData[position];
    result = temp << 24;
    temp = HashInputData[position + 1];
    result |= temp << 16;
    temp = HashInputData[position + 2];
    result |= temp << 8;
    temp = HashInputData[position + 3];
    result |= temp;
    return result;
}
// ASCII conversion
string asciiTable = "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff";
byte CharToAsciiCode(string charContainingString, int charPosition)
{
    return StringFind( asciiTable, StringSub( charContainingString, charPosition + 1, charPosition + 1), c_stringCase );
}
//  Hex Conversion
string[16] HexTable;
string GetHexChar( int number )
{
    return HexTable[number];
}
string GetUnsignedLittleEndianHexRepresentation( int unsignedInt )
{
    string representation = "";
    representation += GetHexChar( ( unsignedInt & 0x000000F0 ) >> 4 );
    representation += GetHexChar( ( unsignedInt & 0x0000000F ) );
    representation += GetHexChar( ( unsignedInt & 0x0000F000 ) >> 12 );
    representation += GetHexChar( ( unsignedInt & 0x00000F00) >> 8 );
    representation += GetHexChar( ( unsignedInt & 0x00F00000 ) >> 20 );
    representation += GetHexChar( ( unsignedInt & 0x000F0000) >> 16 );
    if ( unsignedInt >= 0 )
    {
        representation += GetHexChar( unsignedInt >> 28 );
    }
    else
    {
        unsignedInt += 0x7FFFFFFF + 1;
        representation += GetHexChar( 0x8 + ( unsignedInt >> 28 ) );
    }
    representation += GetHexChar( ( unsignedInt & 0x0F000000) >> 24 );
    return representation;
}
string GetUnsignedHexRepresentation( int unsignedInt )
{   
    string representation = "";
    
    if ( unsignedInt >= 0 )
    {
        representation += GetHexChar( unsignedInt >> 28 );
    }
    else
    {
        unsignedInt += 0x7FFFFFFF + 1;
        representation += GetHexChar( 0x8 + ( unsignedInt >> 28 ) );
    }
    representation += GetHexChar( ( unsignedInt & 0x0F000000) >> 24 );
    representation += GetHexChar( ( unsignedInt & 0x00F00000 ) >> 20 );
    representation += GetHexChar( ( unsignedInt & 0x000F0000) >> 16 );
    representation += GetHexChar( ( unsignedInt & 0x0000F000 ) >> 12 );
    representation += GetHexChar( ( unsignedInt & 0x00000F00) >> 8 );
    representation += GetHexChar( ( unsignedInt & 0x000000F0 ) >> 4 );
    representation += GetHexChar( ( unsignedInt & 0x0000000F ) );
    return representation;
}
// Resolve data function
int GetFixedDataAsInt(fixed fixedVar)
{
    int data;
    data= ( FixedToInt(fixedVar) << 12 );
    fixedVar -= data;
    data|= FixedToInt( fixedVar* Pow2(12) );
    return data;
}
//  Operations
int UnsignedRightShift( int input, int shift )  // Right shift pads bit 1's when the value is under zero for signed integers. So this is the work-around.
{
    return input >> shift & ~( -1 << ( 32 - shift  ) );
}
int UnsignedLeftRotate( int input, int rotation )
{
    rotation = ModI( rotation, 32 );
    return ( input << rotation ) | UnsignedRightShift (input,  32 - rotation );
}
int UnsignedRightRotate( int input, int rotation )
{
    rotation = ModI( rotation, 32 );
    return UnsignedRightShift( input, rotation ) | ( input << ( 32 - rotation ) ); 
}
int UnsignedLeftRotate32( int input, int rotation ) // Optimized version for rotation within range 0 =< x =< 32
{
    return ( input << rotation ) | UnsignedRightShift (input,  32 - rotation );
}
int UnsignedRightRotate32( int input, int rotation ) // Optimized version for rotation within range 0 =< x =< 32
{
    return UnsignedRightShift( input, rotation ) | ( input << ( 32 - rotation ) ); 
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MD5 Script
//--------------------------------------------------------------------------------------------------
// Copyright (C) 2011 by Danny de Jong
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
int Md5F( int b, int c, int d )
{
    return d ^ ( b & ( c ^ d ) );
}
int Md5G( int b, int c, int d )
{
    return c ^ ( d & ( b ^ c ) );
}
int Md5H( int b, int c, int d )
{
    return b ^ c ^ d;
}
int Md5I( int b, int c, int d )
{
    return c ^ (b | (~d));
}
int Md5FF( int a, int b, int c, int d, int w, int r, int k )
{
    return UnsignedLeftRotate32( ( a + Md5F( b, c, d ) + k + w ), r ) + b;
}
int Md5GG( int a, int b, int c, int d, int w, int r, int k )
{
    return UnsignedLeftRotate32( ( a + Md5G( b, c, d ) + k + w ), r ) + b;
}
int Md5HH( int a, int b, int c, int d, int w, int r, int k )
{
    return UnsignedLeftRotate32( ( a + Md5H( b, c, d ) + k + w ), r ) + b;
}
int Md5II( int a, int b, int c, int d, int w, int r, int k )
{
    return UnsignedLeftRotate32( ( a + Md5I( b, c, d ) + k + w ), r ) + b;
}
string GenerateMd5HashCode()
{    
    //  Variables
    int h0 = 0x67452301;
    int h1 = 0x0E000000 << 4 | 0x0FCDAB89;
    int h2 = 0x09000000 << 4 | 0x08BADCFE;
    int h3 = 0x10325476;
    int a; int b; int c; int d;
    int i = 0; int j = 0;
    int messageNBits;
    int paddingLength;
    //  Prepare message
    messageNBits = HashInputSize * 8;
    HashInputData[HashInputSize] = 0x80;
    HashInputSize += 1;
    paddingLength =  56 - ModI( HashInputSize, 64 );
    if ( paddingLength < 0 )
    {
        paddingLength += 64;
    }
    while ( i < paddingLength )
    {
        HashInputData[HashInputSize] = 0;
        HashInputSize += 1;
        i += 1;
    }
    //Note: You might want to change this when the hash input increases in size.
    HashInputData[HashInputSize] = messageNBits;
    HashInputSize += 1;
    HashInputData[HashInputSize] = messageNBits >> 8;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    //  Loop
    i = 0;
    while ( i < ( HashInputSize - 1 ) )
    {
        a = h0;
        b = h1;
        c = h2;
        d = h3;
        a = Md5FF( a, b, c, d, GetHashInputLittleEndianInt( j ), 7, 0x0d000000 << 4 | 0x076aa478 );
        d = Md5FF( d, a, b, c, GetHashInputLittleEndianInt( j + 1 ), 12, 0x0e000000 << 4 | 0x08c7b756 );
        c = Md5FF( c, d, a, b, GetHashInputLittleEndianInt( j + 2 ), 17, 0x242070db );
        b = Md5FF( b, c, d, a, GetHashInputLittleEndianInt( j + 3 ), 22, 0x0c000000 << 4 | 0x01bdceee );
        a = Md5FF( a, b, c, d, GetHashInputLittleEndianInt( j + 4 ), 7, 0x0f000000 << 4 | 0x057c0faf );
        d = Md5FF( d, a, b, c, GetHashInputLittleEndianInt( j + 5 ), 12, 0x4787c62a );
        c = Md5FF( c, d, a, b, GetHashInputLittleEndianInt( j + 6 ), 17, 0x0a000000 << 4 | 0x08304613 );
        b = Md5FF( b, c, d, a, GetHashInputLittleEndianInt( j + 7 ), 22, 0x0f000000 << 4 | 0x0d469501 );
        a = Md5FF( a, b, c, d, GetHashInputLittleEndianInt( j + 8 ), 7, 0x698098d8 );
        d = Md5FF( d, a, b, c, GetHashInputLittleEndianInt( j + 9 ), 12, 0x08000000 << 4 | 0x0b44f7af );
        c = Md5FF( c, d, a, b, GetHashInputLittleEndianInt( j + 10 ), 17, 0x0f000000 << 4 | 0x0fff5bb1 );
        b = Md5FF( b, c, d, a, GetHashInputLittleEndianInt( j + 11 ), 22, 0x08000000 << 4 | 0x095cd7be );
        a = Md5FF( a, b, c, d, GetHashInputLittleEndianInt( j + 12 ), 7, 0x6b901122 );
        d = Md5FF( d, a, b, c, GetHashInputLittleEndianInt( j + 13 ), 12, 0x0f000000 << 4 | 0x0d987193 );
        c = Md5FF( c, d, a, b, GetHashInputLittleEndianInt( j+ 14 ), 17, 0x0a000000 << 4 | 0x0679438e );
        b = Md5FF( b, c, d, a, GetHashInputLittleEndianInt( j + 15 ), 22, 0x49b40821 );
        a = Md5GG( a, b, c, d, GetHashInputLittleEndianInt( j + 1 ), 5, 0x0f000000 << 4 | 0x061e2562 );
        d = Md5GG( d, a, b, c, GetHashInputLittleEndianInt( j + 6 ), 9, 0x0c000000 << 4 | 0x0040b340 );
        c = Md5GG( c, d, a, b, GetHashInputLittleEndianInt( j + 11 ), 14, 0x265e5a51 );
        b = Md5GG( b, c, d, a, GetHashInputLittleEndianInt( j ), 20, 0x0e000000 << 4 | 0x09b6c7aa );
        a = Md5GG( a, b, c, d, GetHashInputLittleEndianInt( j + 5 ), 5, 0x0d000000 << 4 | 0x062f105d );
        d = Md5GG( d, a, b, c, GetHashInputLittleEndianInt( j + 10 ), 9, 0x02441453 );
        c = Md5GG( c, d, a, b, GetHashInputLittleEndianInt( j + 15 ), 14, 0x0d000000 << 4 | 0x08a1e681 );
        b = Md5GG( b, c, d, a, GetHashInputLittleEndianInt( j + 4 ), 20, 0x0e000000 << 4 | 0x07d3fbc8 );
        a = Md5GG( a, b, c, d, GetHashInputLittleEndianInt( j + 9 ), 5, 0x21e1cde6 );
        d = Md5GG( d, a, b, c, GetHashInputLittleEndianInt( j + 14 ), 9, 0x0c000000 << 4 | 0x033707d6 );
        c = Md5GG( c, d, a, b, GetHashInputLittleEndianInt( j + 3 ), 14, 0x0f000000 << 4 | 0x04d50d87 );
        b = Md5GG( b, c, d, a, GetHashInputLittleEndianInt( j + 8 ), 20, 0x455a14ed );
        a = Md5GG( a, b, c, d, GetHashInputLittleEndianInt( j + 13 ), 5, 0x0a000000 << 4 | 0x09e3e905 );
        d = Md5GG( d, a, b, c, GetHashInputLittleEndianInt( j + 2 ), 9, 0x0f000000 << 4 | 0x0cefa3f8 );
        c = Md5GG( c, d, a, b, GetHashInputLittleEndianInt( j + 7 ), 14,  0x676f02d9 );
        b = Md5GG( b, c, d, a, GetHashInputLittleEndianInt( j + 12 ), 20, 0x08000000 << 4 | 0x0d2a4c8a );
        a = Md5HH( a, b, c, d, GetHashInputLittleEndianInt( j + 5 ), 4, 0x0f000000 << 4 | 0x0ffa3942 );
        d = Md5HH( d, a, b, c, GetHashInputLittleEndianInt( j + 8 ), 11, 0x08000000 << 4 | 0x0771f681 );
        c = Md5HH( c, d, a, b, GetHashInputLittleEndianInt( j + 11 ), 16, 0x6d9d6122 );
        b = Md5HH( b, c, d, a, GetHashInputLittleEndianInt( j + 14 ), 23, 0x0f000000 << 4 | 0x0de5380c );
        a = Md5HH( a, b, c, d, GetHashInputLittleEndianInt( j + 1 ), 4, 0x0a000000 << 4 | 0x04beea44 );
        d = Md5HH( d, a, b, c, GetHashInputLittleEndianInt( j + 4 ), 11, 0x4bdecfa9 );
        c = Md5HH( c, d, a, b, GetHashInputLittleEndianInt( j + 7 ), 16, 0x0f000000 << 4 | 0x06bb4b60 );
        b = Md5HH( b, c, d, a, GetHashInputLittleEndianInt( j + 10 ), 23, 0x0b000000 << 4 | 0x0ebfbc70 );
        a = Md5HH( a, b, c, d, GetHashInputLittleEndianInt( j + 13 ), 4, 0x289b7ec6 );
        d = Md5HH( d, a, b, c, GetHashInputLittleEndianInt( j + 0 ), 11, 0x0e000000 << 4 | 0x0aa127fa );
        c = Md5HH( c, d, a, b, GetHashInputLittleEndianInt( j + 3 ), 16, 0x0d000000 << 4 | 0x04ef3085 );
        b = Md5HH( b, c, d, a, GetHashInputLittleEndianInt( j + 6 ), 23, 0x04881d05 );
        a = Md5HH( a, b, c, d, GetHashInputLittleEndianInt( j + 9 ), 4, 0x0d000000 << 4 | 0x09d4d039 );
        d = Md5HH( d, a, b, c, GetHashInputLittleEndianInt( j + 12 ), 11, 0x0e000000 << 4 | 0x06db99e5 );
        c = Md5HH( c, d, a, b, GetHashInputLittleEndianInt( j + 15 ), 16, 0x1fa27cf8 );
        b = Md5HH( b, c, d, a, GetHashInputLittleEndianInt( j + 2 ), 23, 0x0c000000 << 4 | 0x04ac5665 );
        a = Md5II( a, b, c, d, GetHashInputLittleEndianInt( j ), 6, 0x0f000000 << 4 | 0x04292244 );
        d = Md5II( d, a, b, c, GetHashInputLittleEndianInt( j + 7 ), 10, 0x432aff97 );
        c = Md5II( c, d, a, b, GetHashInputLittleEndianInt( j + 14 ), 15, 0x0a000000 << 4 | 0x0b9423a7 );
        b = Md5II( b, c, d, a, GetHashInputLittleEndianInt( j + 5 ), 21, 0x0f000000 << 4 | 0x0c93a039 );
        a = Md5II( a, b, c, d, GetHashInputLittleEndianInt( j + 12 ), 6, 0x655b59c3 );
        d = Md5II( d, a, b, c, GetHashInputLittleEndianInt( j + 3 ), 10, 0x08000000 << 4 | 0x0f0ccc92 );
        c = Md5II( c, d, a, b, GetHashInputLittleEndianInt( j + 10 ), 15, 0x0f000000 << 4 | 0x0feff47d );
        b = Md5II( b, c, d, a, GetHashInputLittleEndianInt( j + 1 ), 21, 0x08000000 << 4 | 0x05845dd1 );
        a = Md5II( a, b, c, d, GetHashInputLittleEndianInt( j + 8 ), 6, 0x6fa87e4f );
        d = Md5II( d, a, b, c, GetHashInputLittleEndianInt( j + 15 ), 10, 0x0f000000 << 4 | 0x0e2ce6e0 );
        c = Md5II( c, d, a, b, GetHashInputLittleEndianInt( j + 6 ), 15, 0x0a000000 << 4 | 0x03014314 );
        b = Md5II( b, c, d, a, GetHashInputLittleEndianInt( j + 13 ), 21, 0x4e0811a1 );
        a = Md5II( a, b, c, d, GetHashInputLittleEndianInt( j + 4 ), 6, 0x0f000000 << 4 | 0x07537e82 );
        d = Md5II( d, a, b, c, GetHashInputLittleEndianInt( j + 11 ), 10, 0x0b000000 << 4 | 0x0d3af235 );
        c = Md5II( c, d, a, b, GetHashInputLittleEndianInt( j + 2 ), 15, 0x2ad7d2bb );
        b = Md5II( b, c, d, a, GetHashInputLittleEndianInt( j + 9 ), 21, 0x0e000000 << 4 | 0x0b86d391 );
        h0 += a;
        h1 += b;
        h2 += c;
        h3 += d;
        i += 64;
        j += 16;
    }
    
    return GetUnsignedLittleEndianHexRepresentation( h0 ) + GetUnsignedLittleEndianHexRepresentation( h1 ) + GetUnsignedLittleEndianHexRepresentation( h2 ) + GetUnsignedLittleEndianHexRepresentation( h3 );
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SHA256 Script
//--------------------------------------------------------------------------------------------------
// Copyright (C) 2011 by Danny de Jong
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
int Sha256Ch( int x, int y, int z )
{
    return ( x & y ) ^ ( ~x & z );
}
int Sha256Maj( int x, int y, int z )
{
    return ( x & y ) ^ ( x & z ) ^ ( y & z );
}
int Sha256CapitalSigma0( int x )
{
    return UnsignedRightRotate32( x, 2 ) ^ UnsignedRightRotate32( x, 13 ) ^ UnsignedRightRotate32( x, 22 );
}
int Sha256CapitalSigma1( int x )
{
    return UnsignedRightRotate32( x, 6 ) ^ UnsignedRightRotate32( x, 11 ) ^ UnsignedRightRotate32( x, 25 );
}
int Sha256Sigma0( int x )
{
    return UnsignedRightRotate32( x, 7 ) ^ UnsignedRightRotate32( x, 18 ) ^ UnsignedRightShift( x, 3 );
}
int Sha256Sigma1( int x )
{
    return UnsignedRightRotate32( x, 17 ) ^ UnsignedRightRotate32( x, 19 ) ^ UnsignedRightShift( x, 10 );
}
int Sha256T0( int e, int f, int g, int h, int k, int w )
{
    return h + Sha256CapitalSigma1( e ) + Sha256Ch( e, f, g ) + k + w;
}
int Sha256T1( int a, int b, int c )
{
    return Sha256CapitalSigma0( a ) + Sha256Maj( a, b, c );
}
string GenerateSha256HashCode()
{
    //  Variables
    int h0 = 0x6a09e667;
    int h1 = 0x0b000000 << 4 | 0x0b67ae85;
    int h2 = 0x3c6ef372;
    int h3 = 0x0a000000 << 4 | 0x054ff53a;
    int h4 = 0x510e527f;
    int h5 = 0x09000000 << 4 | 0x0b05688c;
    int h6 = 0x1f83d9ab;
    int h7 = 0x5be0cd19;
    int a; int b; int c; int d; int e; int f; int g; int h; int t0; int t1;
    int[64] w;
    int i = 0; int j = 0; int k = 0;
    int messageNBits;
    int paddingLength;
    //  Prepare message
    messageNBits = HashInputSize * 8;
    HashInputData[HashInputSize] = 0x80;
    HashInputSize += 1;
    paddingLength =  56 - ModI( HashInputSize, 64 );
    if ( paddingLength < 0 )
    {
        paddingLength += 64;
    }
    while ( i < paddingLength )
    {
        HashInputData[HashInputSize] = 0;
        HashInputSize += 1;
        i += 1;
    }
    //Note: You might want to change this when the hash input increases in size.
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = messageNBits >> 8;
    HashInputSize += 1;
    HashInputData[HashInputSize] = messageNBits;
    HashInputSize += 1;
    //  Loop
    i = 0;
    while ( i < ( HashInputSize - 1 ) )
    {   
        //  Working Variables
        a = h0;
        b = h1;
        c = h2;
        d = h3;
        e = h4;
        f = h5;
        g = h6;
        h = h7;
        //  Preparing Extra Message Schedule
        j = 0;
        while ( j < 16 )
        {
            w[j] = GetHashInputBigEndianInt( k );
            j += 1;
            k += 1;
        }
        while ( j < 64 )
        {
            w[j] =  Sha256Sigma1( w[j - 2] ) +
            w[j - 7] +
            Sha256Sigma0( w[j - 15] ) +
            w[j - 16];
            
            j += 1;
        }
        // 0 to 15
        t0 = Sha256T0( e, f, g, h, 0x428a2f98, w[0] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0; i += 1;
        t0 = Sha256T0( d, e, f, g, 0x71374491, w[1] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0; i += 1;
        t0 = Sha256T0( c, d, e, f, 0x0b000000 << 4 | 0x05c0fbcf, w[2] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0; i += 1;
        t0 = Sha256T0( b, c, d, e, 0x0e000000 << 4 | 0x09b5dba5, w[3] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0; i += 1;
        t0 = Sha256T0( a, b, c, d, 0x3956c25b, w[4] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0; i += 1;
        t0 = Sha256T0( h, a, b, c, 0x59f111f1, w[5] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0; i += 1;
        t0 = Sha256T0( g, h, a, b, 0x09000000 << 4 | 0x023f82a4, w[6] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0; i += 1;
        t0 = Sha256T0( f, g, h, a, 0x0a000000 << 4 | 0x0b1c5ed5, w[7] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0; i += 1;
        t0 = Sha256T0( e, f, g, h, 0x0d000000 << 4 | 0x0807aa98, w[8] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0; i += 1;
        t0 = Sha256T0( d, e, f, g, 0x12835b01, w[9] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0; i += 1;
        t0 = Sha256T0( c, d, e, f, 0x243185be, w[10] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0; i += 1;
        t0 = Sha256T0( b, c, d, e, 0x550c7dc3, w[11] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0; i += 1;
        t0 = Sha256T0( a, b, c, d, 0x72be5d74, w[12] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0; i += 1;
        t0 = Sha256T0( h, a, b, c, 0x08000000 << 4 | 0x00deb1fe, w[13] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0; i += 1;
        t0 = Sha256T0( g, h, a, b, 0x09000000 << 4 | 0x0bdc06a7, w[14] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0; i += 1;
        t0 = Sha256T0( f, g, h, a, 0x0c000000 << 4 | 0x019bf174, w[15] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        // 16 to 31
        t0 = Sha256T0( e, f, g, h, 0x0e000000 << 4 | 0x049b69c1, w[16] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0;
        t0 = Sha256T0( d, e, f, g, 0x0e000000 << 4 | 0x0fbe4786, w[17] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0;
        t0 = Sha256T0( c, d, e, f, 0x0fc19dc6, w[18] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0;
        t0 = Sha256T0( b, c, d, e, 0x240ca1cc, w[19] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0;
        t0 = Sha256T0( a, b, c, d, 0x2de92c6f, w[20] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0;
        t0 = Sha256T0( h, a, b, c, 0x4a7484aa, w[21] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0;
        t0 = Sha256T0( g, h, a, b, 0x5cb0a9dc, w[22] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0;
        t0 = Sha256T0( f, g, h, a, 0x76f988da, w[23] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        t0 = Sha256T0( e, f, g, h, 0x09000000 << 4 | 0x083e5152, w[24] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0;
        t0 = Sha256T0( d, e, f, g, 0x0a000000 << 4 | 0x0831c66d, w[25] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0;
        t0 = Sha256T0( c, d, e, f, 0x0b000000 << 4 | 0x000327c8, w[26] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0;
        t0 = Sha256T0( b, c, d, e, 0x0b000000 << 4 | 0x0f597fc7, w[27] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0;
        t0 = Sha256T0( a, b, c, d, 0x0c000000 << 4 | 0x06e00bf3, w[28] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0;
        t0 = Sha256T0( h, a, b, c, 0x0d000000 << 4 | 0x05a79147, w[29] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0;
        t0 = Sha256T0( g, h, a, b, 0x06ca6351, w[30] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0;
        t0 = Sha256T0( f, g, h, a, 0x14292967, w[31] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        // 32 to 47
        t0 = Sha256T0( e, f, g, h, 0x27b70a85, w[32] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0;
        t0 = Sha256T0( d, e, f, g, 0x2e1b2138, w[33] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0;
        t0 = Sha256T0( c, d, e, f, 0x4d2c6dfc, w[34] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0;
        t0 = Sha256T0( b, c, d, e, 0x53380d13, w[35] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0;
        t0 = Sha256T0( a, b, c, d, 0x650a7354, w[36] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0;
        t0 = Sha256T0( h, a, b, c, 0x766a0abb, w[37] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0;
        t0 = Sha256T0( g, h, a, b, 0x08000000 << 4 | 0x01c2c92e, w[38] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0;
        t0 = Sha256T0( f, g, h, a, 0x09000000 << 4 | 0x02722c85, w[39] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        t0 = Sha256T0( e, f, g, h, 0x0a000000 << 4 | 0x02bfe8a1, w[40] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0;
        t0 = Sha256T0( d, e, f, g, 0x0a000000 << 4 | 0x081a664b, w[41] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0;
        t0 = Sha256T0( c, d, e, f, 0x0c000000 << 4 | 0x024b8b70, w[42] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0;
        t0 = Sha256T0( b, c, d, e, 0x0c000000 << 4 | 0x076c51a3, w[43] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0;
        t0 = Sha256T0( a, b, c, d, 0x0d000000 << 4 | 0x0192e819, w[44] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0;
        t0 = Sha256T0( h, a, b, c, 0x0d000000 << 4 | 0x06990624, w[45] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0;
        t0 = Sha256T0( g, h, a, b, 0x0f000000 << 4 | 0x040e3585, w[46] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0;
        t0 = Sha256T0( f, g, h, a, 0x106aa070, w[47] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        // 48 to 63
        t0 = Sha256T0( e, f, g, h, 0x19a4c116, w[48] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0;
        t0 = Sha256T0( d, e, f, g, 0x1e376c08, w[49] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0;
        t0 = Sha256T0( c, d, e, f, 0x2748774c, w[50] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0;
        t0 = Sha256T0( b, c, d, e, 0x34b0bcb5, w[51] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0;
        t0 = Sha256T0( a, b, c, d, 0x391c0cb3, w[52] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0;
        t0 = Sha256T0( h, a, b, c, 0x4ed8aa4a, w[53] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0;
        t0 = Sha256T0( g, h, a, b, 0x5b9cca4f, w[54] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0;
        t0 = Sha256T0( f, g, h, a, 0x682e6ff3, w[55] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        t0 = Sha256T0( e, f, g, h, 0x748f82ee, w[56] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0;
        t0 = Sha256T0( d, e, f, g, 0x78a5636f, w[57] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0;
        t0 = Sha256T0( c, d, e, f, 0x08000000 << 4 | 0x04c87814, w[58] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0;
        t0 = Sha256T0( b, c, d, e, 0x08000000 << 4 | 0x0cc70208, w[59] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0;
        t0 = Sha256T0( a, b, c, d, 0x09000000 << 4 | 0x00befffa, w[60] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0;
        t0 = Sha256T0( h, a, b, c, 0x0a000000 << 4 | 0x04506ceb, w[61] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0;
        t0 = Sha256T0( g, h, a, b, 0x0b000000 << 4 | 0x0ef9a3f7, w[62] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0;
        t0 = Sha256T0( f, g, h, a, 0x0c000000 << 4 | 0x067178f2, w[63] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        h0 += a;
        h1 += b;
        h2 += c;
        h3 += d;
        h4 += e;
        h5 += f;
        h6 += g;
        h7 += h;
        i += 49;
    }
    return  GetUnsignedHexRepresentation(h0) + 
            GetUnsignedHexRepresentation(h1) + 
            GetUnsignedHexRepresentation(h2) + 
            GetUnsignedHexRepresentation(h3) + 
            GetUnsignedHexRepresentation(h4) + 
            GetUnsignedHexRepresentation(h5) + 
            GetUnsignedHexRepresentation(h6) + 
            GetUnsignedHexRepresentation(h7);
}

void lib1_InitCustomScript () {
}

// Functions
void lib1_gf_InitializeHashInput () {
    // Variable Declarations
    string lv_emptyString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_emptyString = "";

    // Implementation
    HashInputSize = 0;
    if ( HexTable[0] == "" )
    {
        HexTable[0] = "0"; HexTable[1] = "1"; HexTable[2] = "2"; HexTable[3] = "3";
        HexTable[4] = "4"; HexTable[5] = "5"; HexTable[6] = "6"; HexTable[7] = "7";
        HexTable[8] = "8"; HexTable[9] = "9"; HexTable[10] = "a"; HexTable[11] = "b";
        HexTable[12] = "c"; HexTable[13] = "d"; HexTable[14] = "e"; HexTable[15] = "f";
    }
}

void lib1_gf_AddBooleanToHashInput (bool lp_boolean) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_AddByteToHashInput(BoolToInt( lp_boolean ));
}

void lib1_gf_AddByteToHashInput (byte lp_byte) {
    // Automatic Variable Declarations
    // Implementation
    HashInputData[HashInputSize] = lp_byte;
    HashInputSize += 1;
}

void lib1_gf_AddBytesToHashInput (byte lp_byte, int lp_amount) {
    // Automatic Variable Declarations
    int auto16027E3F_ae;
    int auto16027E3F_var;

    // Implementation
    auto16027E3F_ae = lp_amount;
    auto16027E3F_var = 1;
    for ( ; auto16027E3F_var <= auto16027E3F_ae; auto16027E3F_var += 1 ) {
        lib1_gf_AddByteToHashInput(lp_byte);
    }
}

void lib1_gf_AddIntegerToHashInput (int lp_integer) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_AddByteToHashInput(lp_integer);
    lib1_gf_AddByteToHashInput(lp_integer >> 8);
    lib1_gf_AddByteToHashInput(lp_integer >> 16);
    lib1_gf_AddByteToHashInput(lp_integer >> 24);
}

void lib1_gf_AddIntegersToHashInput (int lp_integer, int lp_amount) {
    // Automatic Variable Declarations
    int autoB1E99E46_ae;
    int autoB1E99E46_var;

    // Implementation
    autoB1E99E46_ae = lp_amount;
    autoB1E99E46_var = 1;
    for ( ; autoB1E99E46_var <= autoB1E99E46_ae; autoB1E99E46_var += 1 ) {
        lib1_gf_AddIntegerToHashInput(lp_integer);
    }
}

void lib1_gf_AddRealToHashInput (fixed lp_real) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_AddIntegerToHashInput(GetFixedDataAsInt( lp_real ));
}

void lib1_gf_AddStringToHashInput (string lp_string) {
    // Automatic Variable Declarations
    int auto0D6B39C3_ae;
    int auto0D6B39C3_var;

    // Implementation
    auto0D6B39C3_ae = (StringLength(lp_string) - 1);
    auto0D6B39C3_var = 0;
    for ( ; auto0D6B39C3_var <= auto0D6B39C3_ae; auto0D6B39C3_var += 1 ) {
        lib1_gf_AddByteToHashInput(CharToAsciiCode( lp_string, IntLoopCurrent() ));
    }
}

void lib1_gf_AddUnitToHashInput (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_AddStringToHashInput((UnitGetType(lp_unit)));
    lib1_gf_AddRealToHashInput(UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent));
    lib1_gf_AddRealToHashInput(UnitGetPropertyFixed(lp_unit, c_unitPropShields, c_unitPropCurrent));
    lib1_gf_AddRealToHashInput(UnitGetPropertyFixed(lp_unit, c_unitPropEnergy, c_unitPropCurrent));
}

string lib1_gf_GenerateMD5HashCode () {
    // Automatic Variable Declarations
    // Implementation
    return GenerateMd5HashCode();
}

string lib1_gf_GenerateSHA256HashCode () {
    // Automatic Variable Declarations
    // Implementation
    return GenerateSha256HashCode();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitLib_completed = true;

    lib1_InitLibraries();
    lib1_InitCustomScript();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    lib1_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_team {
    int lv_size;
    playergroup lv_player_group;
};

struct gs_tgai_vars {
    unit lv_cc;
    unitgroup lv_builder;
    unitgroup lv_manufacturer;
    unitgroup lv_units;
};

struct gs_player {
    int lv_team;
    int lv_position;
    bool lv_alive;
    int lv_games;
    int lv_elo;
    int lv_skinpoints;
    int lv_gas_extraction;
    int lv_energy_ups;
    int lv_lb_row;
    string lv_icon;
    bool lv_did_elo_reset;
    bank lv_bank;
    bool lv_lost_elo;
    int lv_killed_pumpkins;
    bool lv_voted;
    int lv_eliteskin;
    int lv_elopenalty;
    unitgroup lv_support_units;
    string lv_support_type;
    bool lv_has_solar_regen_upgrade;
    bool lv_has_extended_batteries_upgrade;
    int lv_solar_weapons;
    int lv_old_timer;
    bool lv_has_locator_upgrade;
    bool lv_has_pickup_doubler;
    int lv_karax_level;
    int lv_last_recorded_strength;
    bool lv_weak_karax;
    int lv_has_marshall_skin;
    int lv_blood_stacks;
    int lv_tutorial_stage;
    string lv_tutorial_stage_state;
    int lv_wants_tutorial;
    int lv_pet_score;
    int lv_weather;
    int lv__3v3_zerg_pid;
    int lv__3v3_nemesis_terran;
    int lv__3v3_terrazine_doubler;
    int lv__3v3_terrazine_income;
    int lv__3v3_hug_stacks;
    int lv_xp;
    int lv_more_cash_drop_level;
    bool lv_left_the_game;
    bool lv_forced_random_mid;
    bool lv_probius_increased_income;
    bool lv_wantkarax;
};

struct gs_afterlife_zerg_positions {
    point[7] lv_big_spines;
    point[3] lv_tumors;
    point lv_spawner;
};

struct gs_TerranIncomeData {
    int lv_collected_minerals_last;
    int lv_collected_vespene_last;
    int lv_minerals_diff;
    int lv_vespene_diff;
};

struct gs_terrandata {
    int lv_strength;
    fixed lv_avg_apm;
    fixed lv_build_value;
    fixed lv_army_value;
    fixed lv_tech_value;
};

struct gs_zcc_stack_backup {
    int lv_firelings;
    int lv_infused;
    int lv_banelings;
    int lv_torras;
    int lv_larva;
};

struct gs_zcc_spawn {
    int lv_spawn_count;
    fixed lv_current_spawn_amount;
    string lv_unit_type;
};

struct gs_strikeling_groups {
    int lv_side;
    unitgroup lv_spawners;
    bool lv_done_main_targets;
    bool lv_cluster_full;
};

struct gs_outer_nests {
    point lv_position;
};

struct gs_dead_creep {
    string lv_unit_type;
    point lv_position;
};

struct gs_hazard_zone {
    region lv_area;
    int lv_timestamp;
    bool lv_deprecated;
};

struct gs_bonus_gasses {
    string lv_status;
    point lv_position;
    point lv_army_point;
    int lv_player;
};

struct gs_neighbours {
    int lv_left;
    int lv_right;
};

struct gs_weak_player {
    bool lv_is_weak;
};

struct gs_special_unit {
    unit lv_unit;
    int lv_birthtime;
    int lv_birthdays;
};

struct gs_hives {
    unit lv_unit;
    fixed lv_damage;
};

struct gs_hydra_group {
    point lv_point;
    point lv_pointb;
    unitgroup lv_units;
    unit lv_nest;
    unit lv_nestb;
    int lv_stock;
};

struct gs_infestors {
    point lv_point;
    unit lv_spine;
    unitgroup lv_unit_group;
};

struct gs_mgc_positions {
    unitgroup lv_ug_all;
    unitgroup lv_ug_spawners;
    point[4][4] lv_position_sets;
    int lv_state;
};

struct gs_spawnergroups {
    unitgroup lv_left;
    unitgroup lv_right;
    unitgroup lv_front;
    unitgroup lv_all;
};

struct gs_zerg_sector {
    unitgroup lv_terran_units;
    unitgroup lv_zerg_orderable;
    int lv_threat_score;
};

struct gs_banelings_groups {
    point lv_position;
    unitgroup lv_unit_group;
};

struct gs_initial_map_state {
    point lv_position;
    string lv_type;
    int lv_owner;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
point[7] gv_next_positions;
int gv_t1_spawner_count;
int gv_t2_spawner_count;
gs_team[3] gv_teams;
unitgroup gv_attack_drones;
gs_tgai_vars[7] gv_tgai_vars;
bool gv_no_genetron_players;
playergroup gv_terrans;
int gv_player_count;
int[7] gv_positions;
gs_player[7] gv_players;
point[7] gv_command_center_position;
gs_afterlife_zerg_positions[7] gv_afterlife_zerg_positions;
playergroup gv_dead_players;
unitgroup gv_transmission_units;
int[7][4] gv_cash_drops;
int[7] gv_blood_dialog_item;
int[7] gv_reward;
int[7] gv_dialog_terranIncome;
int[7] gv_dialog_terranIncome_minerals;
int[7] gv_dialog_terranIncome_vespene;
int[7] gv_dialog_terranIncome_terrazine;
gs_TerranIncomeData[7] gv_TerranIncome;
int[7] gv_terran_score_playerranking;
gs_terrandata[7] gv_terrandata;
int gv_leaderboard;
int gv_positions_taken;
int[7] gv_position_set;
int[7][14] gv_objectives;
int[7][6] gv_bonus_objectives;
actor[7][16] gv_weather_data_array;
int[7] gv_weather_region_settings;
bool gv_first_time_a_team_is_dead;
point[9][9] gv_fw_grid;
int[7] gv__3v3_objective_kill_hive;
int[7] gv__3v3_objective_kill_other_team;
int[7] gv__3v3_help_with_zagara;
playergroup gv_terrans_team_top;
playergroup gv_terrans_team_bottom;
playergroup gv_zerg_team_top;
playergroup gv_zerg_team_bottom;
int[3][3] gv__3v3_pos_taken;
int[3] gv__3v3_pos_taken_cnt;
playergroup gv_terrans_team_top_open_access_units;
playergroup gv_terrans_team_bottom_open_access_units;
int[7][3] gv__3v3_player_elo_scores;
int gv__3v3_player_elo_scores_cnt;
gs_zcc_stack_backup[7] gv_zcc_stack_backup;
bool gv_zcc_spawn_intialized;
gs_zcc_spawn[7][31] gv_zcc_spawn;
int gv_nydus_zcc_ratio;
unitgroup gv_nydus_team_top;
unitgroup gv_nydus_team_bottom;
int gv_top_bruta;
int gv_bottom_bruta;
bool gv_build_top_next;
unitgroup gv_flying_rally_group;
bool gv_is_3v3;
int gv_debug_mode;
bool gv_practice_mode;
bool gv_game_has_ended;
int gv_reward_related_deaths;
int gv_difficulty;
int gv_voted_difficulty;
bool gv_is_winter;
bool gv_is_af_event;
bool gv_is_thxg;
int gv_rtv_thxg;
int gv_heart_count;
int gv_zerg_pumpkins;
int gv_sapper_level;
int[7] gv_plasma_rounds;
unitgroup gv_hell_forces_north;
unitgroup gv_hell_forces_south;
bool gv_wizard_action_cooldown;
int gv_wizard_ug_counter;
bool gv_is_night;
int gv_last_daytime_switch_time;
bool gv_long_night;
int gv_night_length;
int gv_interval_cutelings;
bool gv_voted_event;
int gv_rtv;
int gv_rtv_halloween;
int gv_rtv_xmas;
int gv_rtv_hny;
int gv_rtv_eastern;
int gv_rtv_crazyminions;
int gv_rtv_night_king;
int gv_rtv_vday;
bool gv_is_halloween;
bool gv_is_xmas;
bool gv_is_hny;
bool gv_is_eastern;
bool gv_is_crazyminions;
bool gv_is_night_king;
bool gv_is_vday;
bool gv_mutator_mega_mecha_hydras;
bool gv_mutator_mecha_buildings;
bool gv_mutator_overlords;
bool gv_mutator_massalisks;
bool gv_mutator_active;
int gv_game_timer_setting;
int gv_timelabel;
int gv_game_timer;
int gv_timer_countdown_dialog;
int gv_timer_countdown_dialog_item;
int gv_heatmap_top_threat;
point gv_heatmap_top_threat_position;
int[7] gv_heatmap_push_threat_positions;
gs_strikeling_groups[5] gv_strikeling_groups;
bool gv_strikelings_built_initially;
playergroup gv_zerg;
int gv_nest_snipe_cd;
gs_dead_creep[101] gv_dead_creep;
int gv_dead_creep_count;
unitgroup gv_extra_tumors;
unitgroup gv_outer_tumors;
unitgroup gv_outer_nests;
gs_outer_nests[7] gv_outer_nest;
gs_hazard_zone[17] gv_hazard_zones;
int gv_hazard_zones_count;
int gv_deprecated_hazard_zones_count;
bool gv_ai_building_drone;
point[7][3] gv_defensive_egg_spawn_points;
point[7][3] gv_front_egg_spawn_points;
int gv_defensive_egg_spawn_cooldown;
int gv_f2_cooldown;
unitgroup gv_f2_unit_group;
int gv_cloud_cd;
gs_bonus_gasses[13] gv_bonus_gasses;
gs_neighbours[7] gv_neighbour_positions;
gs_weak_player[7] gv_weak_players;
int gv_f2_check_cooldown;
unitgroup gv_highground_invaders;
int gv_highground_invader_count;
unitgroup gv_special_units;
unitgroup gv_old_special_units;
int gv_special_unit_count;
gs_special_unit[1000] gv_special_unit_array;
unitgroup[21] gv_observed_units;
bool gv_did_f2;
bool gv_want_f2;
int gv_f2_tick;
gs_hives[3] gv_hives;
int gv_hydra_peacetime;
bool gv_hydra_peacetime_reduction;
unitgroup gv_hydras_north;
unitgroup gv_hydras_south;
gs_hydra_group[7] gv_hydra_groups;
bool gv_hydra_action_cooldown;
unitgroup gv_outer_smallspines;
int gv_very_early_leaver_count;
int gv_debt;
gs_infestors[13] gv_infestors;
unitgroup gv_extra_infestors;
unitgroup gv_reserved_infestors;
unitgroup gv_feeding_infestors;
int gv_mgc_type;
gs_mgc_positions[9] gv_mgc_positions;
int gv_mgc_warfield_base_count;
int gv_mgc_demon_fort_count;
unitgroup gv_egg_cluster_large_spines;
point[7] gv_defensive_egg_cluster_positions;
int[7] gv_defensive_egg_cluster_marker;
int gv_mgc_position_count;
bool gv_omega_active;
int gv_omega_target_player;
int gv_omega_placement_cooldown;
int gv_omega_ping;
unit gv_omega_unit;
int[7] gv_t1_spawner_distro;
int[7] gv_spawner_distro;
int gv_strikeling_build_failure_count;
bool gv_strikeling_build_given_up;
string gv_build;
int gv_req_beastlings;
int gv_req_ravs;
int gv_req_infused;
int gv_req_torra;
point[7][51] gv_tdead_extra_positions_t2;
int[7] gv_tdead_extra_positions_t2_counts;
point[7][51] gv_tdead_extra_positions_t3;
int[7] gv_tdead_extra_positions_t3_counts;
point[7][51] gv_tdead_extra_positions_creep_sources;
int[7] gv_tdead_extra_positions_creep_sources_counts;
point[7][51] gv_tdead_extra_positions_spines;
int[7] gv_tdead_extra_positions_spines_count;
point[7][51] gv_tdead_extra_positions_bnests;
int[7] gv_tdead_extra_positions_bnests_count;
point[7][152] gv_extra_t1_positions;
int[7] gv_extra_t1_positions_counts;
point[1001] gv_possible_positions_t1;
int gv_possible_positions_t1_count;
int gv_possible_positions_t1_free;
point[1001] gv_possible_positions_t1_dead;
int gv_possible_positions_t1_dead_count;
point[501] gv_possible_positions_t2;
int gv_possible_positions_t2_count;
int gv_possible_positions_t2_free;
point[501] gv_possible_positions_t2_dead;
int gv_possible_positions_t2_dead_count;
point[501] gv_possible_positions_t3;
int gv_possible_positions_t3_count;
int gv_possible_positions_t3_free;
point[501] gv_possible_positions_t3_dead;
int gv_possible_positions_t3_dead_count;
point[501] gv_possible_positions_strikelings;
int gv_possible_positions_strikelings_count;
int gv_possible_positions_strikelings_free;
point[501] gv_possible_positions_strikelings_dead;
int gv_possible_positions_strikelings_dead_count;
point[51] gv_possible_positions_special;
int gv_possible_positions_special_count;
int gv_possible_positions_special_free;
point[51] gv_possible_positions_special_dead;
int gv_possible_positions_special_dead_count;
point[51] gv_possible_positions_extractor;
int gv_possible_positions_extractor_count;
int gv_possible_positions_extractor_free;
point[7] gv_nest_repositions;
int gv_placement_mode;
int gv_supply_target_player_position;
gs_spawnergroups[7] gv_spawnergroups;
int gv_restored;
int gv_upgrade_sets_left;
int[3] gv_early_upgraded_positions;
gs_zerg_sector[7] gv_heatmap;
int gv_kerrigan_respawn_cooldown_timer;
unit gv_kerrigan_unit;
unit gv_kerrigan_cocoon;
int gv_kerrigan_action_cd;
int gv_crushing_grip_cd;
int gv_zerg_drop_cd;
int gv_viper_cloud_cd;
int gv_armor_level;
int gv_supply_upgrades;
int gv_smith_last_used_effect_id;
bool gv_firelings_enabled;
int gv_firelings_upgrade_level;
int gv_firelings_difficulty;
bool gv_banelings_enabled;
int gv_banelings_activation_offset;
gs_banelings_groups[11] gv_banelings_groups;
int gv_banelings_groups_max;
int gv_banelings_max_units_in_group;
bool gv_start_scale_zerg;
int gv_scale_zerg_max;
int gv_scale_zerg_stage;
gs_initial_map_state[1000] gv_initial_map_state;
int gv_initial_map_state_count;
bool gv_is_setup_phase;
int gv_infestor_dead_count;
bool gv_mass_infestor_death_exception;
int gv_mass_infestor_death_exception_cooldown;
int gv_zhg_recruit_phase;
unitgroup gv_zhg_prefuse_infestors;
unitgroup gv_zhg_hydras;
unitgroup gv_prefuse_infestors_nests;
point[5] gv_prefuse_infestors_nests_coords;
int gv_tbp_dialog;
int gv_tbp_dialog_info;
int gv_tbp_zerg_flags;
int[14] gv_tbp_dialog_info_rows;
int[13] gv_tbp_labels_terran;
int[9] gv_tbp_player_picked_terran;
int[7] gv_tbp_player_bonus_picks;
int gv_tbp_player_picked_terran_count;
int gv_tbp_button_terran_random;
int gv_tbp_button_terran_infested;
int gv_tbp_button_terran_v3x;
int gv_tbp_button_terran_probius;
int gv_tbp_button_terran_ht;
int gv_tbp_button_terran_karax;
int gv_tbp_button_terran_chaos;
int gv_tbp_button_terran_cash;
int gv_tbp_button_terran_raynor;
int gv_tbp_button_terran_marauder;
int gv_tbp_button_terran_artanis;
int gv_tbp_button_terran_tank;
int gv_tbp_button_terran_wizard;
int gv_tbp_button_terran_genetron;
int gv_tbp_progress_bar;
int gv_tbp_extra_vote_dialog;
int[7] gv_difficulty_offset_votes;
int gv_difficulty_offset_votes_result;
int gv_tbp_extra_vote_dialog_difficulty_offset_plus;
int gv_tbp_extra_vote_dialog_difficulty_offset_minus;
int gv_tbp_extra_vote_dialog_difficulty_offset_neutral;
int[7] gv_tbp_mutator_votes;
int gv_tbp_mutator_vote_result;
int gv_tbp_extra_vote_dialog_mutator_vote_yes;
int gv_tbp_extra_vote_dialog_mutator_vote_no;
int[7] gv_tbp_mgc_votes;
int gv_tbp_mgc_vote_result;
int gv_tbp_mgc_vote_dialog_yes;
int gv_tbp_mgc_vote_dialog_no;
int[7] gv_tbp_zterran_votes;
int gv_tbp_zterran_vote_result;
int gv_tbp_extra_vote_dialog_zterran_vote_yes;
int gv_tbp_extra_vote_dialog_zterran_vote_no;
int[7] gv_tbp_torment_votes;
int gv_tbp_tv_p1;
int gv_tbp_tv_p2;
int gv_tbp_tv_p3;
int gv_tbp_tv_p4;
int gv_tbp_tv_p5;
int gv_tbp_toplist_frame_dialog;
int[7] gv_tbp_minimap_position_picks;
int[13] gv_tbp_minimap_position_picks_cross;
int gv_tbp_minimap_dialog;
int[7] gv_tbp_minimap_buttons;
int[7] gv_tbp_minimap_add_archon_buttons;
int[7] gv_tbp_minimap_remove_archon_buttons;
int[7] gv_tbp_minimap_archon_slot_buttons;
int gv_tbp_minimap_button_random;
int gv_ic_unit_count;
int[7] gv_ic_terran_combat_unit_counts;
int gv_ic_terran_combat_unit_total_count;

void InitGlobals () {
    int init_i;
    int init_j;

    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_teams[init_i].lv_player_group = PlayerGroupEmpty();
    }
    gv_attack_drones = UnitGroupEmpty();
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_tgai_vars[init_i].lv_builder = UnitGroupEmpty();
        gv_tgai_vars[init_i].lv_manufacturer = UnitGroupEmpty();
        gv_tgai_vars[init_i].lv_units = UnitGroupEmpty();
    }
    gv_terrans = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_players[init_i].lv_support_units = UnitGroupEmpty();
        gv_players[init_i].lv_support_type = "";
        gv_players[init_i].lv_tutorial_stage = 1;
        gv_players[init_i].lv_tutorial_stage_state = "";
        gv_players[init_i].lv_wants_tutorial = 1;
        gv_players[init_i].lv__3v3_terrazine_doubler = 1;
        gv_players[init_i].lv__3v3_terrazine_income = 36;
    }
    gv_dead_players = PlayerGroupEmpty();
    gv_transmission_units = UnitGroupEmpty();
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_blood_dialog_item[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_reward[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_dialog_terranIncome[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_dialog_terranIncome_minerals[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_dialog_terranIncome_vespene[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_dialog_terranIncome_terrazine[init_i] = c_invalidDialogControlId;
    }
    gv_leaderboard = c_boardNone;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        for (init_j = 0; init_j <= 13; init_j += 1) {
            gv_objectives[init_i][init_j] = c_invalidObjectiveId;
        }
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            gv_bonus_objectives[init_i][init_j] = c_invalidObjectiveId;
        }
    }
    gv_first_time_a_team_is_dead = true;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv__3v3_objective_kill_hive[init_i] = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv__3v3_objective_kill_other_team[init_i] = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv__3v3_help_with_zagara[init_i] = c_invalidObjectiveId;
    }
    gv_terrans_team_top = PlayerGroupEmpty();
    gv_terrans_team_bottom = PlayerGroupEmpty();
    gv_zerg_team_top = PlayerGroupEmpty();
    gv_zerg_team_bottom = PlayerGroupEmpty();
    gv_terrans_team_top_open_access_units = PlayerGroupEmpty();
    gv_terrans_team_bottom_open_access_units = PlayerGroupEmpty();
    gv_nydus_zcc_ratio = 20;
    gv_nydus_team_top = UnitGroupEmpty();
    gv_nydus_team_bottom = UnitGroupEmpty();
    gv_flying_rally_group = UnitGroupEmpty();
    gv_sapper_level = 1;
    gv_hell_forces_north = UnitGroupEmpty();
    gv_hell_forces_south = UnitGroupEmpty();
    gv_wizard_ug_counter = 1;
    gv_night_length = 240;
    gv_interval_cutelings = 60;
    gv_timelabel = c_invalidDialogControlId;
    gv_timer_countdown_dialog = c_invalidDialogId;
    gv_timer_countdown_dialog_item = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_strikeling_groups[init_i].lv_spawners = UnitGroupEmpty();
    }
    gv_zerg = PlayerGroupEmpty();
    gv_extra_tumors = UnitGroupEmpty();
    gv_outer_tumors = UnitGroupEmpty();
    gv_outer_nests = UnitGroupEmpty();
    gv_f2_unit_group = UnitGroupEmpty();
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_bonus_gasses[init_i].lv_status = "blocked";
    }
    gv_highground_invaders = UnitGroupEmpty();
    gv_special_units = UnitGroupEmpty();
    gv_old_special_units = UnitGroupEmpty();
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_observed_units[init_i] = UnitGroupEmpty();
    }
    gv_hydra_peacetime = (7 * 60);
    gv_hydras_north = UnitGroupEmpty();
    gv_hydras_south = UnitGroupEmpty();
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_hydra_groups[init_i].lv_units = UnitGroupEmpty();
    }
    gv_outer_smallspines = UnitGroupEmpty();
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_infestors[init_i].lv_unit_group = UnitGroupEmpty();
    }
    gv_extra_infestors = UnitGroupEmpty();
    gv_reserved_infestors = UnitGroupEmpty();
    gv_feeding_infestors = UnitGroupEmpty();
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_mgc_positions[init_i].lv_ug_all = UnitGroupEmpty();
        gv_mgc_positions[init_i].lv_ug_spawners = UnitGroupEmpty();
    }
    gv_egg_cluster_large_spines = UnitGroupEmpty();
    gv_omega_ping = c_invalidPingId;
    gv_build = "";
    gv_req_beastlings = 4;
    gv_req_ravs = 4;
    gv_req_infused = 6;
    gv_req_torra = 6;
    gv_placement_mode = 1;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_spawnergroups[init_i].lv_left = UnitGroupEmpty();
        gv_spawnergroups[init_i].lv_right = UnitGroupEmpty();
        gv_spawnergroups[init_i].lv_front = UnitGroupEmpty();
        gv_spawnergroups[init_i].lv_all = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_heatmap[init_i].lv_terran_units = UnitGroupEmpty();
        gv_heatmap[init_i].lv_zerg_orderable = UnitGroupEmpty();
    }
    gv_zerg_drop_cd = 180;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_banelings_groups[init_i].lv_unit_group = UnitGroupEmpty();
    }
    gv_is_setup_phase = true;
    gv_zhg_prefuse_infestors = UnitGroupEmpty();
    gv_zhg_hydras = UnitGroupEmpty();
    gv_prefuse_infestors_nests = UnitGroupEmpty();
    gv_tbp_dialog = c_invalidDialogId;
    gv_tbp_dialog_info = c_invalidDialogId;
    gv_tbp_zerg_flags = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 13; init_i += 1) {
        gv_tbp_dialog_info_rows[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_tbp_labels_terran[init_i] = c_invalidDialogControlId;
    }
    gv_tbp_button_terran_random = c_invalidDialogControlId;
    gv_tbp_button_terran_infested = c_invalidDialogControlId;
    gv_tbp_button_terran_v3x = c_invalidDialogControlId;
    gv_tbp_button_terran_probius = c_invalidDialogControlId;
    gv_tbp_button_terran_ht = c_invalidDialogControlId;
    gv_tbp_button_terran_karax = c_invalidDialogControlId;
    gv_tbp_button_terran_chaos = c_invalidDialogControlId;
    gv_tbp_button_terran_cash = c_invalidDialogControlId;
    gv_tbp_button_terran_raynor = c_invalidDialogControlId;
    gv_tbp_button_terran_marauder = c_invalidDialogControlId;
    gv_tbp_button_terran_artanis = c_invalidDialogControlId;
    gv_tbp_button_terran_tank = c_invalidDialogControlId;
    gv_tbp_button_terran_wizard = c_invalidDialogControlId;
    gv_tbp_button_terran_genetron = c_invalidDialogControlId;
    gv_tbp_progress_bar = c_invalidDialogControlId;
    gv_tbp_extra_vote_dialog = c_invalidDialogId;
    gv_tbp_extra_vote_dialog_difficulty_offset_plus = c_invalidDialogControlId;
    gv_tbp_extra_vote_dialog_difficulty_offset_minus = c_invalidDialogControlId;
    gv_tbp_extra_vote_dialog_difficulty_offset_neutral = c_invalidDialogControlId;
    gv_tbp_extra_vote_dialog_mutator_vote_yes = c_invalidDialogControlId;
    gv_tbp_extra_vote_dialog_mutator_vote_no = c_invalidDialogControlId;
    gv_tbp_mgc_vote_dialog_yes = c_invalidDialogControlId;
    gv_tbp_mgc_vote_dialog_no = c_invalidDialogControlId;
    gv_tbp_extra_vote_dialog_zterran_vote_yes = c_invalidDialogControlId;
    gv_tbp_extra_vote_dialog_zterran_vote_no = c_invalidDialogControlId;
    gv_tbp_tv_p1 = c_invalidDialogControlId;
    gv_tbp_tv_p2 = c_invalidDialogControlId;
    gv_tbp_tv_p3 = c_invalidDialogControlId;
    gv_tbp_tv_p4 = c_invalidDialogControlId;
    gv_tbp_tv_p5 = c_invalidDialogControlId;
    gv_tbp_toplist_frame_dialog = c_invalidDialogId;
    gv_tbp_minimap_dialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_tbp_minimap_buttons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_tbp_minimap_add_archon_buttons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_tbp_minimap_remove_archon_buttons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_tbp_minimap_archon_slot_buttons[init_i] = c_invalidDialogControlId;
    }
    gv_tbp_minimap_button_random = c_invalidDialogControlId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_add_zerg_apm (int lp_actions);
point gf_get_free_position (string lp_type);
int gf_get_smallest_team ();
void gf_settle_teams ();
void gf_add_player_to_team (int lp_player);
int gf_get_team_average_elo (int lp_team);
int gf_calc_new_elo (int lp_winner_elo, int lp_loser_elo, string lp_output);
bool gf_is_bigspine_fortified (unit lp_bigspine);
bool gf_player_vulnerable_to_dronerush (int lp_player);
void gf_init_tgai_players ();
void gf_tgai_issue_orders_to_genetron_ai ();
void gf_tgai_build_combat_unit (int lp_player);
bool gf_unit_is_in_pocketbase (unit lp_u);
void gf_add_afterlife_zerg_positions (unit lp_ice, int lp_closest_player);
void gf_handle_dead_player_afterlife_start (int lp_player);
void gf_create_afterlife_zerg_position (int lp_p);
void gf_Game_Banks_handler (string lp_action, int lp_player, int lp_elo, int lp_weather, int lp_xp);
string gf_create_bank_data_csum (int lp_player);
void gf_create_clean_bank (int lp_player);
void gf_save_csum (int lp_player);
void gf_remove_transmission_units ();
void gf_apply_support ();
void gf_apply_support_casual ();
void gf_apply_support_3v3 ();
void gf_create_special_forces_for_player (int lp_player);
void gf_create_tank_support_forplayer (int lp_player);
void gf_disable_unit_pickup (unit lp_unit);
void gf_artanis_timed_event ();
void gf_create_artanis_support_forplayer (int lp_player);
void gf_command_artanis_support_for_player (int lp_player);
void gf_create_cash_transporter (int lp_sender);
void gf_run_cash_bonus_check ();
bool gf_player_is_chaos (int lp_player);
int gf_get_player_blood (int lp_player);
void gf_Handle_blood_pickup (int lp_player, point lp_position, int lp_size);
void gf_update_blood_panel (int lp_player);
void gf_heal_and_stack (unit lp_unit, int lp_heal_value);
void gf_make_player_genetron (int lp_player);
void gf_marauder_timed_event ();
void gf_create_marauder_support_forplayer (int lp_player);
void gf_command_marauder_support_for_player (int lp_player);
bool gf_player_selected_prebuilt (int lp_player);
void gf_Apply_or_remove_base (int lp_player);
void gf_clean_bases ();
void gf_create_probius_support_forplayer (int lp_player);
void gf_end_raynor_support ();
void gf_create_raynor_support_forplayer (int lp_player);
void gf_make_player_protoss (int lp_player);
void gf_better_casual_upgrade ();
void gf_Rebind_from_bank (int lp_p);
void gf_create_income_dialog ();
void gf_update_income_for_player (int lp_player);
void gf_update_reward_panel (int lp_player);
string gf_get_difficulty_icon ();
string gf_get_difficulty_label ();
void gf_reset_terrandata ();
void gf_update_terrandata ();
void gf_Game_create_leaderboard ();
void gf_Game_update_leaderboard ();
string gf_elo_to_rank_icon (int lp_elo, int lp_games);
string gf_level_to_rank_icon (int lp_level, int lp_games);
void gf_create_karax_for_player (int lp_player, point lp_p);
void gf_buff_players ();
void gf_restore_ranked_vanilla ();
void gf_disable_non_vanilla_content_for_player (int lp_player);
void gf_apply_smod ();
bool gf_is_player_banned (int lp_player);
void gf_kill_banned_player ();
void gf_Major_rock_exploit ();
void gf_set_position_set (int lp_pcount);
int gf_get_random_free_position ();
void gf_settle_player (int lp_player);
void gf_handle_collection_skins ();
void gf_Handle_Elite_Skins ();
void gf_handle_player_tutorial_stages ();
bool gf_is_stage_done (int lp_player, int lp_stage);
bool gf_is_bonus_objective_done (int lp_goal_id, int lp_player);
void gf_remove_tutorial_after_death (int lp_player_id);
void gf_init_weather ();
bool gf_is_player_donor (int lp_player);
void gf_Create_weather (int lp_player_position, int lp_type, bool lp_xl);
void gf_Remove_weather (int lp_player_position);
void gf__3v3_player_left (int lp_player);
void gf__3v3_player_died (int lp_player);
int gf_number_alive_player_in_group (playergroup lp_player_group);
void gf_reposition_flying_rally (int lp_player);
void gf_one_team_is_dead_event ();
void gf_fill_fw_grid ();
void gf_shot_fireworks (int lp_waves);
void gf_end_game_3v3 ();
void gf_flush_privileges_3v3_OAU ();
bool gf_did_top_win ();
bool gf_did_bottom_win ();
bool gf_is_terrans_team_bottom_dead ();
bool gf_is_terrans_team_top_dead ();
bool gf_is_terrans_team_top_playing ();
bool gf_is_terrans_team_bottom_playing ();
bool gf_is_top_hive_dead ();
bool gf_is_bottom_hive_dead ();
bool gf_can_cross_middle_in_3v3 (unit lp_unit_param);
void gf_init_3v3 ();
void gf_manage_3v3_triggers (bool lp_enable);
void gf_disable_uneeded_triggers_for_3v3 ();
void gf_create_3v3_objectives ();
void gf_settle_3v3_player ();
int gf_get_lobby_setting_player_distro ();
int gf_get_random_free_3v3_position (int lp_player);
void gf_set_3v3_alliances ();
void gf_first_group_give_control_to_second_group (playergroup lp_group1, playergroup lp_group2);
int gf__3v3_get_alternative_terran_if_nemesis_doesnt_exist (int lp_pid);
void gf_set_elo_based_team ();
int gf_get_player_elo_rating (int lp_player_id);
bool gf_is_closer_to_average_elo_rating (int lp_average_rating, int lp_closest_rating, int lp_player1, int lp_player2, int lp_player3);
int gf_get_team_average_elo_rating (int lp_player1, int lp_player2, int lp_player3);
int gf_get_average_elo_rating ();
void gf_distribute_players_based_on_their_elo ();
void gf_magic ();
fixed gf_get_terrazine_income (int lp_player_id);
fixed gf_get_terrazine_multiplier (int lp_player_id);
void gf_create_zagara (int lp_player);
void gf_Update_Hugs_Upgrade (int lp_player);
void gf_remove_count_dummy_stack (int lp_pid, string lp_ut);
void gf_update_zcc_spawn (int lp_player_id, string lp_unit_type);
void gf_initialize_zcc_spawn ();
void gf_spawn_3v3_zerg_unit (int lp_player_id, int lp_unit_count, string lp_unit_type);
void gf_zcc_model_swap (unitgroup lp_units);
unitgroup gf_get_nydus_of_team (int lp_player_id);
int gf_get_integer_of_unit_type (string lp_unit_type);
point gf_get_zcc_spawn_point (int lp_player_id, string lp_unit_type);
fixed gf_get_zcc_spawn_rate (int lp_player_id, string lp_unit_type, int lp_spawn_count);
unit gf_get_random_flying_rally_of_player (int lp_player);
int gf__3v3_get_target_or_random_enemy_terran_position (int lp_pid);
bool gf_can_build_bruta_3v3 (int lp_player_id);
int gf_get_position_of_alive_player_with_least_spawners_from_group (playergroup lp_player_group);
int gf_where_to_build_next_spawner_3v3 ();
void gf_update_start_spawners_3v3 ();
int gf_get_max_spawners_of_rally (unit lp_rally, int lp_number_of_spawners, int lp_number_of_rally);
unit gf_get_closest_not_full_rally (point lp_point, unitgroup lp_flying_rally_group);
void gf_manage_spawners_3v3 (int lp_player_position);
bool gf_is_overseer (unit lp_unit);
void gf_init_3v3_flying_rally ();
void gf_init_mecha_nydus_spawn_point ();
void gf_create_flying_rally (int lp_player_id, int lp_rally_position);
point gf_get_point_of_flying_rally (unit lp_unit);
fixed gf_get_left_zerg_ratio_of_player (int lp_player);
unitgroup gf_get_flying_rally_group_of_player (int lp_player);
string gf_get_zerg_rally_point_unit_type ();
fixed gf_get_rally_ratio (unit lp_overseer);
bool gf_is_left_rally (unit lp_rally);
unitgroup gf_get_flying_rally_of_team (int lp_player_position);
void gf_init_3v3_vision ();
void gf_give_3v3_vision (unit lp_unit);
bool gf_can_share_zerg_vision (unit lp_unit);
void gf_reveal_top_hide_bottom (unit lp_unit);
void gf_reveal_bottom_hide_top (unit lp_unit);
bool gf_is_3v3 ();
bool gf_is_3v3_local_test ();
region gf_get_region_of_influence_3v3 (int lp_player_position);
bool gf_is_in_zerg_highgrounds (unit lp_unit);
playergroup gf_get_team_of_player (int lp_player_id);
int gf_get_terran_id_from_zpid (int lp_zpid);
bool gf_is_same_region_of_influence (point lp_point, unit lp_unit);
int gf_get_position_of_random_alive_player_from_group (playergroup lp_player_group);
bool gf_is_pvp ();
bool gf_is_player_dev (int lp_player);
int gf_roll_dice ();
int gf_flip_coin ();
void gf_Create_game ();
void gf_set_up_visibility ();
void gf_set_up_difficulty_init_modifiers ();
void gf_set_up_variables_init ();
void gf_set_up_modify_players_init ();
int gf_get_player_at_position (int lp_position);
void gf_finalise_map ();
void gf_change_ownerships ();
void gf_replace_geysers ();
void gf_spawn_critter ();
bool gf_is_game_over ();
bool gf_is_terran_dead ();
bool gf_is_zerg_dead ();
int gf_get_winning_team ();
int gf_get_reward_elo_count (int lp_player_id);
int gf_get_base_penalty_elo_count ();
int gf_elo_to_rank_number (int lp_player_id);
void gf_end_game (int lp_winner);
void gf_rebalance_zerg_after_early_terran_death (int lp_player_id);
int gf_get_ranked_difficulty ();
void gf_AnalysePlayerDifficultyVotes ();
fixed gf_get_pvote_difficulty (int lp_p);
fixed gf_get_elo_difficulty (int lp_player);
bool gf_is_average_vote ();
int gf_get_real_difficulty ();
int gf_transform_voted_difficulty_real (fixed lp_voted_difficulty_real);
bool gf_is_winter ();
void gf_winter_make_snow ();
void gf_Enable_AF_Event ();
void gf_af_replace_spawners ();
void gf_af_initial_model_swap ();
void gf_af_model_swap (unit lp_unit);
bool gf_is_af_event ();
void gf_enable_thxg_setting ();
bool gf_is_thxg ();
int gf_thxg_get_turkey_color (unit lp_unit);
void gf_spawn_turkey ();
void gf_init_event ();
int gf_get_lobby_event_setting ();
void gf_revealpickup (unit lp_item);
void gf_enable_vday_settings ();
void gf_spawn_heart ();
void gf_enable_halloween_settings ();
void gf_disable_halloween_settings ();
void gf_spawn_sappers ();
bool gf_can_spawn_smith ();
bool gf_can_spawn_smith_for_player (int lp_player);
void gf_enable_xmas_settings ();
void gf_enable_hny_settings ();
void gf_enable_crazyminions_settings ();
void gf_defend_point_with_wizard (point lp_point, int lp_groupindex, unit lp_target_unit);
unit gf_get_wizard_from_group (int lp_group);
void gf_enable_nightking_settings ();
void gf_create_overlord_wave ();
void gf_make_night ();
void gf_make_day ();
void gf_decrease_terran_vision ();
void gf_restore_terran_vision ();
void gf_handle_cuteling_event ();
void gf_SpawnCutelings (int lp_amount, point lp_spawn_point);
void gf_handle_votes (int lp_player, string lp_event);
int gf_get_current_event_as_typeint ();
int gf_get_voted_event_as_typeint ();
bool gf_is_event ();
bool gf_is_halloween ();
bool gf_is_xmas ();
bool gf_is_hny ();
bool gf_is_eastern ();
bool gf_is_crazyminions ();
bool gf_is_night_king ();
bool gf_is_vday ();
bool gf_is_sunday ();
int gf_get_mutator_id_for_today ();
int gf_get_day_of_year ();
bool gf_is_leap_year (int lp_year);
void gf_apply_mutator (int lp_mutator_id);
void gf_kill_terran_team ();
void gf_timer_terran_death ();
int gf_get_timer_setting ();
text gf_convert_int_to_text_with_leading_zero (int lp_int);
void gf_update_timer ();
void gf_create_timer_countdown_dialog ();
void gf_generate_heatmap_results ();
void gf_add_strikeling_spawner_to_group (unit lp_strikeling_spawner);
void gf_handle_strikelings ();
void gf_inject_left_strike_positions ();
void gf_try_kill_nest (unit lp_nest);
void gf_create_creep_source_groups ();
void gf_rebuild_dead_creep_array (unit lp_unit);
void gf_try_regrow_creep ();
bool gf_is_area_around_point_save_nest (point lp_position);
void gf_dodge_stasis (point lp_target);
void gf_add_hazard_zone (region lp_region);
void gf_check_hazard_zones ();
void gf_refresh_hazard_zone_array ();
bool gf_is_hazard_zone_deprecated (int lp_array_key);
bool gf_is_point_in_hazard_zone (point lp_point);
void gf_build_drone ();
unit gf_get_drone ();
int gf_get_number_of_ready_drones ();
unitgroup gf_get_all_ready_drones ();
int gf_get_egg_spawn_unit_set_multiplier ();
int gf_get_egg_count_defensive_spawn ();
int gf_get_egg_count_front_spawn ();
int gf_get_egg_spawn_egg_type ();
int gf_get_egg_spawn_egg_value (int lp_et);
int gf_get_egg_spawn_egg_amount (int lp_et);
void gf_spawn_eggs (int lp_position, int lp_egg_count, int lp_front);
void gf_spawn_unit_from_egg (int lp_et, point lp_origin, point lp_target);
void gf_define_egg_spawn_points ();
void gf_f2_point (point lp_point, bool lp_force);
bool gf_unit_is_in_zerg_highground (unit lp_u);
void gf_scout_bonus_gasses ();
void gf_attack_a_bonus_gas ();
void gf_refresh_bonus_gasses_data ();
int gf_get_random_taken_gas ();
void gf_update_pet_score ();
void gf_define_neighbour_positions ();
bool gf_is_weak (int lp_player);
bool gf_has_neighbour_isnt_weak (int lp_player);
int gf_get_neighbour_isnt_weak (int lp_player);
void gf_attack_neighbour (int lp_origin, int lp_target);
string gf_get_angle_of_neighbour (int lp_origin, int lp_target);
void gf_handle_dead_player_areas ();
void gf_attack_highground_invaders ();
void gf_flush_special_unit_array ();
void gf_check_unit_age ();
void gf_order_old_units ();
void gf_observe_or_kill_unit (unit lp_unit);
int gf_get_observed_unit_index (unit lp_unit);
void gf_try_f2_mid ();
void gf_define_hives ();
unit gf_get_hive ();
unitgroup gf_get_hives ();
int gf_get_hive_g_int (unit lp_unit);
void gf_HiveDamageRecieved (fixed lp_damage, unit lp_hive);
void gf_define_hydra_variables ();
void gf_try_buy_hydras ();
void gf_attack_point_with_hydra_group (point lp_point, int lp_groupindex);
void gf_send_hydra_home (unit lp_hydra);
int gf_get_hydras_groupindex (unit lp_hydra);
int gf_get_new_hydra_groupindex (unit lp_hydra);
int gf_outer_nest_death_stock_increase ();
void gf_increase_hydra_stock ();
bool gf_player_has_many_reapers (int lp_player);
void gf_add_zerg_income ();
void gf_try_prefuse ();
void gf_set_infestors_points ();
void gf_get_infestors ();
int gf_get_infestor_group_i (point lp_position);
int gf_get_infestors_group (unit lp_unit);
void gf_gather_infestor_groups ();
void gf_send_infestor_home (unit lp_unit, point lp_attack_pos);
void gf_infestor_heal (unit lp_unit, unit lp_target);
unit gf_get_ready_infestor (unitgroup lp_group);
void gf_move_edge_infestor_gatherpoint (int lp_gint);
int gf_get_spines_group (unit lp_unit);
unit gf_get_one_infestor ();
unit gf_get_infestor_for_infused ();
unit gf_get_infestor_for_torra ();
void gf_move_infestors (int lp_infestors_group_id);
void gf_add_infestors_to_local_group (int lp_infestors_group_id);
void gf_reserve_infestors ();
void gf_mgc_set_crisis_type (int lp_type);
string gf_mgc_get_crisis_name_by_type (int lp_t);
void gf_mgc_add_position_set (unit lp_creep_source);
void gf_mgc_handle_midgame_crisis_position_creation ();
void gf_mgc_create_mgc_position ();
void gf_create_new_warfield_base ();
void gf_create_new_demon_fort ();
void gf_Create_wave_and_send_from_to (int lp_spawner_type, point lp_origin, point lp_target);
void gf_create_new_egg_cluster ();
void gf_create_defensive_egg_cluster (int lp_position);
void gf_handle_defensive_egg_cluster_markers ();
void gf_buy_omega ();
void gf_place_cocoon (int lp_target_terran);
void gf_order_omega (unit lp_omega);
void gf_omega_data_cleanup ();
point gf_get_closest_possible_omega_spawn (int lp_terran);
bool gf_is_spawner (unit lp_local_unit);
bool gf_is_spawner_unit (unit lp_local_unit);
int gf_get_closest_position (point lp_position);
int gf_get_alive_player_count ();
bool gf_is_area_around_point_safe (point lp_position);
int gf_ai_get_random_player ();
int gf_ai_get_strongest_player ();
int gf_ai_get_weakest_player ();
int gf_get_closest_alive_player_position (point lp_position);
int gf_get_closest_alive_player_position_from_group (point lp_position, playergroup lp_player_group);
point gf_get_command_center_point_from_player_position (int lp_player_position);
int gf_get_free_supply ();
int gf_get_total_spawner_count ();
int gf_get_total_t1_spawner_count ();
void gf_build_spawner_every_2_seconds ();
void gf_build_spawners_fast_e2s ();
int gf_get_max_allowed_spawner_count ();
void gf_build_spawner (unit lp_drone, int lp_target_player);
void gf_strikeling_build_failure_directive ();
void gf_set_build ();
void gf_kill_random_t1_spawner ();
void gf_kill_random_slowling_spawner ();
void gf_kill_random_creeper_spawner ();
void gf_kill_random_tankling_spawner ();
void gf_get_possible_positions ();
point gf_get_closest_free_position_to_player_of_type (int lp_player_position, string lp_type);
void gf_update_free_position_counts ();
void gf_reconstruct_possible_positions_array ();
void gf_inject_extra_positions (int lp_position);
int gf_get_position_of_alive_player_with_least_spawners ();
int gf_get_position_of_alive_player_with_most_spawners ();
int gf_where_toplace_next_spawner ();
int gf_get_rr_target_position ();
void gf_add_default_rallies ();
int gf_get_frosty_spawner_count ();
void gf_focus_weakest ();
void gf_add_spawner_to_left (unit lp_spawner, int lp_player_position);
void gf_add_spawner_to_right (unit lp_spawner, int lp_player_position);
void gf_add_spawner_to_front (unit lp_spawner, int lp_player_position);
void gf_manage_spawners (int lp_player_position);
bool gf_player_has_yard_in_exception_area (int lp_player);
void gf_handle_yard_exception ();
void gf_yard_exception_rerally (int lp_player);
void gf_rerally_dead_player_spawners (int lp_dead_player);
void gf_reassign_spawner_to_othergroup (unit lp_spawner, int lp_origin, int lp_target);
void gf_check_flank_rallies ();
bool gf_is_path_blocked (point lp_origin, point lp_target);
point gf_get_new_valid_rally_point (int lp_position, point lp_old_point);
void gf_rerally_left (int lp_player);
void gf_rerally_right (int lp_player);
void gf_rerally_start_spawners ();
void gf_restore_improved_default_rallies ();
void gf_upgrade_a_spawner ();
void gf_upgrade_start_spawners ();
int gf_get_early_spawner_upgrade_set_count ();
int gf_get_hottest_sector ();
unit gf_get_kerrigan_unit ();
int gf_get_kerrigan_position_sector ();
void gf_process_sector_data ();
void gf_kerrigan_jump_towards_position (point lp_target);
void gf_kerrigan_go_to_lane (int lp_sector);
void gf_torment_1_game_modifiers ();
void gf_torment_2_game_modifiers ();
void gf_spawn_viper ();
void gf_torment_4_game_modifiers ();
void gf_upgrade_a_spawner_instant_t5 (unit lp_u);
void gf_get_armor ();
void gf_get_attackup ();
void gf_get_speed ();
void gf_try_buy_supply ();
void gf_get_unit_upgrades ();
void gf_smith_doing_stuff (unit lp_unit, int lp_owner, point lp_position);
void gf_smith_remove_last_used_effect (unit lp_unit);
unitgroup gf_smith_get_upgradeable_units (int lp_owner, point lp_position);
unitgroup gf_smith_get_chargeable_units (int lp_owner, point lp_position);
bool gf_is_front_path_blocked (int lp_player);
string gf_afterlife_get_hero_unit_type (int lp_player);
void gf_firelings_set_vars ();
int gf_banelings_get_baneling_group_i_start ();
int gf_banelings_get_baneling_group_i_max ();
int gf_banelings_get_smallest_group_as_int_id ();
bool gf_banelings_spawners_left ();
unitgroup gf_banelings_get_all_unassigned_banelings_as_ug ();
void gf_banelings_init_vars ();
void gf_banelings_activate_spawners ();
void gf_banelings_manage ();
void gf_scale_zerg (int lp_percent);
void gf_scale_zerg_start_init ();
void gf_save_initial_map_state ();
bool gf_check_infestor_dead_directive_override ();
void gf_try_prefuse_handler ();
void gf_cleanup_prefuse_infestor_group ();
void gf_inject_extra_nest_positions ();
void gf_recruit_defensive_hg_hydras ();
void gf_recruit_defensive_hg_infestors ();
void gf_order_defensive_hg_hydras ();
void gf_Init_Player_Toplists ();
void gf_Generate_Toplist ();
text gf_generate_name_string_text ();
string gf_generate_game_data_hash ();
void gf_save_game_in_toplist ();
int gf_get_level_from_xp (int lp_xp);
int gf_get_needed_xp (int lp_level);
void gf_Disable_timed_triggers ();
void gf_Enable_timed_triggers ();
int gf_tbp_get_difficulty_offset_vote_result ();
int gf_tbp_get_mutator_vote_result ();
int gf_tbp_mgc_get_vote_result ();
int gf_tbp_get_zterran_vote_result ();
int gf_tbp_get_tv_winner_vote ();
void gf_torment_special_units_refresh (int lp_d);
void gf_tbp_archon_create_player_slot (int lp_position, int lp_player);
void gf_tbp_archon_create_add_player_slot (int lp_position, int lp_player);
void gf_tbp_archon_create_remove_player_slot (int lp_position, int lp_player);
void gf_tbp_archon_remove_add_player_slot (int lp_position, int lp_player);
void gf_tbp_archon_remove_remove_player_slot (int lp_position, int lp_player);
void gf_tbp_archon_remove_player_slot (int lp_position, int lp_player);
void gf_tbp_make_player_position_random (int lp_player);
void gf_disable_button_for_all_players (int lp_position);
void gf_disable_all_buttons_for_player (int lp_player);
int gf_tbp_get_used_button_pos_id (int lp_button);
int gf_tbp_get_used_add_archon_button_pos_id (int lp_button);
int gf_tbp_get_used_remove_archon_button_pos_id (int lp_button);
int gf_tbp_get_used_archon_slot_button_pos_id (int lp_button);
text gf_get_bonus_name_text_from_bid (int lp_bonus_int);
void gf_tbp_refresh_dialog_labels ();
string gf_tbp_transform_xp_string (int lp_pxp, int lp_nxp);
string gf_tbp_transform_flags (int lp_player);
string gf_tbp_get_zerg_flag_string ();
void gf_ic_check_zerg_units ();
void gf_ic_check_terran_units ();
bool gf_is_zerg_unit_broken (unit lp_u);
bool gf_is_terran_combat_unit_broken (unit lp_u);
bool gf_is_unittype_terran_combat_unit (string lp_ut);
int gf_ic_all_Zerg_unit_count ();
int gf_ic_update_terran_combat_unit_counts ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_tgaievery6s;
trigger gt_TombstoneMineralUpgradeFinished;
trigger gt_StoptherainUpgradefinished;
trigger gt_transporterbecameidle;
trigger gt_disable_transporter_trigger;
trigger gt_Cashtransporterbecameidle;
trigger gt_MoreCashPickupResearchFinished;
trigger gt_choaslordcreated;
trigger gt_choasmarinecreated;
trigger gt_cultistcreated;
trigger gt_playercollectsblood;
trigger gt_playercollectsbloodbig;
trigger gt_Manufacturerdies;
trigger gt_Manufacturerfinished;
trigger gt_SelectBomberAbilityUsed;
trigger gt_SelectInfestedMarineAbilityUsed;
trigger gt_Infestedbuildingfinished;
trigger gt_Infestedmaybestuck;
trigger gt_PowerAuraGotClicked;
trigger gt_AttackAuraGotClicked;
trigger gt_DefenseAuraGotClicked;
trigger gt_InactiveStateGotClicked;
trigger gt_use_tank_ability;
trigger gt_use_tank_attack;
trigger gt_aftestpublic;
trigger gt_rtv;
trigger gt_rtvhalloween;
trigger gt_rtvxmas;
trigger gt_rtvhny;
trigger gt_rtvvday;
trigger gt_rtvthxg;
trigger gt_clear;
trigger gt_debug;
trigger gt_debug_elo;
trigger gt_debug_lag;
trigger gt_energy;
trigger gt_help;
trigger gt_karax;
trigger gt_drone;
trigger gt_money;
trigger gt_money_zerg;
trigger gt_reveal;
trigger gt_italis;
trigger gt_inf;
trigger gt_immortal;
trigger gt_eggclustertest;
trigger gt_createfrostyspawners;
trigger gt_makemegenetron;
trigger gt_cheat;
trigger gt_disabletutorial;
trigger gt_tutorial;
trigger gt_Playerbindsunits;
trigger gt_Techlabfinished;
trigger gt_KaraxDeathTimer;
trigger gt_testforced_mid_buff;
trigger gt_Veterangetspromoted;
trigger gt_SkinJimmygotselected;
trigger gt_SkinMadaxegotselected;
trigger gt_SkinUltimategotselected;
trigger gt_Skinmarshallgotselected;
trigger gt_TechLabWarpItalisCost;
trigger gt_TechLabChargeApply;
trigger gt_IonCannonNotification;
trigger gt_GasExtractionFinished;
trigger gt_probiusincreasedincomefinished;
trigger gt_probiuspylonfinished;
trigger gt_EnergyUpgradeFinished;
trigger gt_PickupLocatorUpgradeFinished;
trigger gt_PickupDoublerUpgradeFinished;
trigger gt_ConyardFinished;
trigger gt_NoWeathergotselected;
trigger gt_Raingotselected;
trigger gt_Snowgotselected;
trigger gt_Ashgotselected;
trigger gt_hive_top_killed;
trigger gt_hive_bottom_killed;
trigger gt_testfw;
trigger gt_remove_invalid_ion;
trigger gt_protect_top_hive_from_allies;
trigger gt_protect_bottom_hive_from_allies;
trigger gt_firewall_kill;
trigger gt_update_3v3_objectives;
trigger gt_CocoonorOmegadies3v3;
trigger gt_Cocoongotspawned3v3;
trigger gt_Cocoonspawnfinished3v3;
trigger gt_TerrazineIncome;
trigger gt_zagara_death_timer;
trigger gt_MechaUpgradefinished;
trigger gt_Larvadies;
trigger gt_Larvamutatesintobuilding;
trigger gt_zccbuilt;
trigger gt_zccdies;
trigger gt_PeriodicZCCSpawn;
trigger gt_SpawnZCCUnit3v3;
trigger gt_ZCCupgrades;
trigger gt_Nydusfinished;
trigger gt_Nydusdied;
trigger gt_zerg_rally_center;
trigger gt_zerg_rally_left;
trigger gt_zerg_rally_right;
trigger gt_zerg_rally_equal_on;
trigger gt_zerg_rally_minus_on;
trigger gt_zerg_rally_plus_on;
trigger gt_relocate_spawners_rally_action;
trigger gt__3v3test;
trigger gt_CCdestroyed;
trigger gt_playerleavesgame;
trigger gt_af_relevant_building_finished;
trigger gt_spawnturkey;
trigger gt_turkeydies;
trigger gt_spawnheart;
trigger gt_playercollectsheart;
trigger gt_grabaheart;
trigger gt_killapumpkin;
trigger gt_spawnpumpkin;
trigger gt_pumpkindies;
trigger gt_playercollectsbonuscard;
trigger gt_spawnpresent;
trigger gt_playercollectspresent;
trigger gt_grabapresent;
trigger gt_spawnhappynewyeargift;
trigger gt_playercollectshappynewyeargift;
trigger gt_grabahnygift;
trigger gt_removeallfireworks;
trigger gt_spawnhellforces;
trigger gt_buildinggetsattackedtrydefendwithwizards;
trigger gt_resetwizardactioncooldown;
trigger gt_removefortdebrisactorfix;
trigger gt_changedaytime;
trigger gt_SolarWeaponsfinished;
trigger gt_Overlorddies;
trigger gt_timer;
trigger gt_sendbuggohome;
trigger gt_nestislowhealth;
trigger gt_creepsourcedied;
trigger gt_creepsourcerebuildstarted;
trigger gt_checkhazardzones;
trigger gt_stasisgotused;
trigger gt_drone_finished;
trigger gt_EggSpawnTriggerDummy;
trigger gt_Checkbridgesevery45s;
trigger gt_spinegetsattacked;
trigger gt_buildinggetsattacked;
trigger gt_checkplayerseveryminute;
trigger gt_Terranenterszerghighground;
trigger gt_invaderleaveszerghighground;
trigger gt_invaderdies;
trigger gt_specialunitgotborn;
trigger gt_everyfiveminutes;
trigger gt_every45seconds;
trigger gt_useidleunits;
trigger gt_f2triggerevery5s;
trigger gt_IonCannonApplyPermaDamage;
trigger gt_hydragotborn;
trigger gt_hydragetsattacked;
trigger gt_buildinggetsattackedtrydefendwithhydras;
trigger gt_checkhydras;
trigger gt_nestdied;
trigger gt_add_infestor_to_group;
trigger gt_spinedies;
trigger gt_infestorgetsattacked;
trigger gt_Feedidleinfestorsevery21s;
trigger gt_spawnwarfieldforces;
trigger gt_EggClusterTriggerDummy;
trigger gt_Cocoongotspawned;
trigger gt_Cocoonspawnfinished;
trigger gt_CocoonorOmegadies;
trigger gt_TryOmegaOrderRefresh;
trigger gt_extractordies;
trigger gt_spawner_started;
trigger gt_spawnerdies;
trigger gt_spawner_finished;
trigger gt_checkflankrallies;
trigger gt_Unitenterssector;
trigger gt_Unitleavessector;
trigger gt_updatethreatscoreevery5s;
trigger gt_defendlanewithkerrigan;
trigger gt_Kerrigangetsattacked;
trigger gt_ReduceKerriganCooldowns;
trigger gt_defendsectorwithkerrigan;
trigger gt_CocoonCountdownhappend;
trigger gt_Kerrigandied;
trigger gt_Kerrigancocoondied;
trigger gt_instantlyupgradethespawner;
trigger gt_GapGenerationDummyEffecthappend;
trigger gt_Vipergetsattacked;
trigger gt_ViperCloudgotused;
trigger gt_ZergSupplyUpgrade;
trigger gt_ZergArmor;
trigger gt_adddefenseup;
trigger gt_entrypoint;
trigger gt_SmithdoingstuffTriggerDummy;
trigger gt_testdev55;
trigger gt_wantkarax;
trigger gt_testdevnovaequipment;
trigger gt_afterlife_hero_died;
trigger gt_SporeCrawlerwantstoshoot;
trigger gt_Infestordied;
trigger gt_tbp_dialog_minimap_interaction;
trigger gt_tbp_dialog_minimap_add_archon_button_interaction;
trigger gt_tbp_dialog_minimap_remove_archon_button_interaction;
trigger gt_tbp_dialog_minimap_archon_slot_button_interaction;
trigger gt_tbp_create;
trigger gt_tbp_dialog_interaction;
trigger gt_tbp_dialog_extra_vote_difficulty_offset_interaction;
trigger gt_tbp_dialog_extra_vote_torment_level_interaction;
trigger gt_tbp_dialog_extra_vote_mutator_vote;
trigger gt_tbp_dialog_extra_vote_zterran_vote;
trigger gt_tbp_dialog_extra_vote_mgc_vote;
trigger gt_everysecond;
trigger gt_everytwoseconds;
trigger gt_everythreeseconds;
trigger gt_everyfiveseconds;
trigger gt_everytenseconds;
trigger gt_every15seconds;
trigger gt_every30seconds;
trigger gt_everyminute;
trigger gt_every90seconds;
trigger gt_every3minutes;
trigger gt_every15minutes;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_add_zerg_apm (int lp_actions) {
    // Variable Declarations
    int lv_current_apm;
    int lv_new_apm;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_current_apm = PlayerScoreValueGetAsInt(7, "APM");
    lv_new_apm = (lv_current_apm + lp_actions);

    // Implementation
    if ((lp_actions > 0)) {
        PlayerScoreValueSetFromInt(7, "APM", lv_new_apm);
    }

}

point gf_get_free_position (string lp_type) {
    // Variable Declarations
    int lv_kind;
    int lv_limit;
    int lv_r;
    point lv_p;
    point lv_return;
    int lv_d;

    // Automatic Variable Declarations
    int autoE005F202_val;

    // Variable Initialization

    // Implementation
    if (((lp_type == "SlowlingSpawner") || (lp_type == "StrikelingSpawner") || (lp_type == "TanklingSpawner") || (lp_type == "CreeperSpawner"))) {
        lv_kind = 1;
        lv_limit = 248;
    }
    else if (((lp_type == "RoachSpawner") || (lp_type == "PrimalRoachSpawner"))) {
        lv_kind = 2;
        lv_limit = 122;
    }
    else if (((lp_type == "UltraliskSpawner") || (lp_type == "BrutaliskSpawner"))) {
        lv_kind = 3;
        lv_limit = 28;
    }
    else if ((lp_type == "MineralExtractor")) {
        lv_kind = 4;
        lv_limit = 30;
    }
    else if (((lp_type == "BeastlingSpawner") || (lp_type == "BanelingSpawner") || (lp_type == "RavatorSpawner") || (lp_type == "InfusedRoachSpawner") || (lp_type == "TorraliskSpawner"))) {
        lv_kind = 5;
        lv_limit = 20;
    }
    while ((lv_d == 0)) {
        lv_r = RandomInt(1, lv_limit);
        autoE005F202_val = lv_kind;
        if (autoE005F202_val == 1) {
            lv_p = gv_possible_positions_t1[lv_r];
        }
        else if (autoE005F202_val == 2) {
            lv_p = gv_possible_positions_t2[lv_r];
        }
        else if (autoE005F202_val == 3) {
            lv_p = gv_possible_positions_t3[lv_r];
        }
        else if (autoE005F202_val == 4) {
            lv_p = gv_possible_positions_extractor[lv_r];
        }
        else if (autoE005F202_val == 5) {
            lv_p = gv_possible_positions_special[lv_r];
        }
        else {
        }
        if ((UnitTypePlacementTestsFromPoint(lp_type, 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
            lv_return = lv_p;
            lv_d += 1;
        }

    }
    return lv_return;
}

int gf_get_smallest_team () {
    // Variable Declarations
    int lv_return;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_teams[1].lv_size == gv_teams[2].lv_size)) {
        lv_return = 1;
    }
    else {
        if ((gv_teams[1].lv_size < gv_teams[2].lv_size)) {
            lv_return = 1;
        }
        else {
            lv_return = 2;
        }
    }
    return lv_return;
}

void gf_settle_teams () {
    // Variable Declarations
    int lv_team;
    int lv_settled;

    // Automatic Variable Declarations
    playergroup auto1960A217_g;
    int auto1960A217_var;

    // Variable Initialization
    lv_team = 1;

    // Implementation
    while ((lv_team <= 2)) {
        lv_settled = 0;
        auto1960A217_g = PlayerGroupActive();
        auto1960A217_var = -1;
        while (true) {
            auto1960A217_var = PlayerGroupNextPlayer(auto1960A217_g, auto1960A217_var);
            if (auto1960A217_var < 0) { break; }
            if ((gv_players[auto1960A217_var].lv_team == lv_team)) {
                if ((lv_team == 1)) {
                    if ((gv_teams[lv_team].lv_size == 1)) {
                        gv_players[auto1960A217_var].lv_position = 2;
                        lv_settled += 1;
                    }
                    else {
                        if ((gv_teams[lv_team].lv_size == 2)) {
                            if ((lv_settled == 0)) {
                                gv_players[auto1960A217_var].lv_position = 1;
                                lv_settled += 1;
                            }
                            else {
                                gv_players[auto1960A217_var].lv_position = 3;
                                lv_settled += 1;
                            }
                        }
                        else {
                            if ((lv_settled == 0)) {
                                gv_players[auto1960A217_var].lv_position = 1;
                                lv_settled += 1;
                            }
                            else {
                                if ((lv_settled == 1)) {
                                    gv_players[auto1960A217_var].lv_position = 2;
                                    lv_settled += 1;
                                }
                                else {
                                    gv_players[auto1960A217_var].lv_position = 3;
                                    lv_settled += 1;
                                }
                            }
                        }
                    }
                }
                else {
                    if ((gv_teams[lv_team].lv_size == 1)) {
                        gv_players[auto1960A217_var].lv_position = 5;
                        lv_settled += 1;
                    }
                    else {
                        if ((gv_teams[lv_team].lv_size == 2)) {
                            if ((lv_settled == 0)) {
                                gv_players[auto1960A217_var].lv_position = 4;
                                lv_settled += 1;
                            }
                            else {
                                gv_players[auto1960A217_var].lv_position = 6;
                                lv_settled += 1;
                            }
                        }
                        else {
                            if ((lv_settled == 0)) {
                                gv_players[auto1960A217_var].lv_position = 4;
                                lv_settled += 1;
                            }
                            else {
                                if ((lv_settled == 1)) {
                                    gv_players[auto1960A217_var].lv_position = 5;
                                    lv_settled += 1;
                                }
                                else {
                                    gv_players[auto1960A217_var].lv_position = 6;
                                    lv_settled += 1;
                                }
                            }
                        }
                    }
                }
            }

        }
        lv_team += 1;
    }
}

void gf_add_player_to_team (int lp_player) {
    // Variable Declarations
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_team = gf_get_smallest_team();

    // Implementation
    PlayerGroupAdd(gv_teams[lv_team].lv_player_group, lp_player);
    gv_teams[lv_team].lv_size = (gv_teams[lv_team].lv_size + 1);
    gv_players[lp_player].lv_team = lv_team;
}

int gf_get_team_average_elo (int lp_team) {
    // Variable Declarations
    int lv_i;
    int lv_elo;
    int lv_return;

    // Automatic Variable Declarations
    playergroup autoE4C7F6C4_g;
    int autoE4C7F6C4_var;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    autoE4C7F6C4_g = PlayerGroupActive();
    autoE4C7F6C4_var = -1;
    while (true) {
        autoE4C7F6C4_var = PlayerGroupNextPlayer(autoE4C7F6C4_g, autoE4C7F6C4_var);
        if (autoE4C7F6C4_var < 0) { break; }
        if ((gv_players[autoE4C7F6C4_var].lv_team == lp_team)) {
            lv_elo = (lv_elo + gv_players[autoE4C7F6C4_var].lv_elo);
        }

    }
    if ((lv_elo > 0)) {
        lv_return = RoundI((lv_elo / gv_teams[lp_team].lv_size));
    }

    return lv_return;
}

int gf_calc_new_elo (int lp_winner_elo, int lp_loser_elo, string lp_output) {
    // Variable Declarations
    int lv_difference;
    int lv_return;
    int lv_pott;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pott = 10;

    // Implementation
    if ((lp_winner_elo != lp_loser_elo)) {
        if (((lp_winner_elo - lp_loser_elo) >= 200)) {
            lv_difference = 1;
        }

    }

    if ((lv_difference != 0)) {
        lv_pott = (lv_pott - 3);
    }

    if ((lp_output == "win")) {
        lv_return = lv_pott;
    }
    else {
        lv_return = lv_pott;
    }
    return lv_return;
}

bool gf_is_bigspine_fortified (unit lp_bigspine) {
    // Variable Declarations
    point[100] lv_drone_goal_array;
    int lv_drone_goal_count;
    int lv_limit;
    int lv_i;
    int lv_j;
    bool lv_taken;
    bool lv_return;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;
    lv_j = 1;

    // Implementation
    return lv_return;
}

bool gf_player_vulnerable_to_dronerush (int lp_player) {
    // Variable Declarations
    int lv_player_position;
    int lv_gas_count;
    int lv_shocktrooper_count;
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player_position = gv_players[lp_player].lv_position;

    // Implementation
    if ((gv_players[lp_player].lv_support_type != "Raynor") && (gv_players[lp_player].lv_support_type != "Tank") && (gv_players[lp_player].lv_support_type != "Artanis") && (gv_difficulty >= 4)) {
        lv_shocktrooper_count = UnitGroupCount(UnitGroup("ShockTrooper", lp_player, RegionFromName(("geysers p" + IntToString(lv_player_position))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        if ((lv_shocktrooper_count == 0)) {
            lv_gas_count = UnitGroupCount(UnitGroup("Refinery2", lp_player, RegionFromName(("geysers p" + IntToString(lv_player_position))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            if ((lv_gas_count >= 2)) {
                lv_r = true;
            }

        }

    }

    return lv_r;
}

void gf_init_tgai_players () {
    // Variable Declarations
    int lv_tgai_count;

    // Automatic Variable Declarations
    playergroup auto86BC7113_g;
    int auto86BC7113_var;

    // Variable Initialization

    // Implementation
    auto86BC7113_g = gv_terrans;
    auto86BC7113_var = -1;
    while (true) {
        auto86BC7113_var = PlayerGroupNextPlayer(auto86BC7113_g, auto86BC7113_var);
        if (auto86BC7113_var < 0) { break; }
        if ((gv_players[auto86BC7113_var].lv_support_type == "Genetron")) {
            lv_tgai_count += 1;
            gv_tgai_vars[auto86BC7113_var].lv_cc = UnitGroupRandomUnit(UnitGroup("CommandCenter2", auto86BC7113_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            UnitGroupAddUnitGroup(gv_tgai_vars[auto86BC7113_var].lv_manufacturer, UnitGroup("Manufacturer", auto86BC7113_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitGroupAddUnitGroup(gv_tgai_vars[auto86BC7113_var].lv_builder, UnitGroup("ACR", auto86BC7113_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitGroupAddUnitGroup(gv_tgai_vars[auto86BC7113_var].lv_units, UnitGroup("Spitfire", auto86BC7113_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitIssueOrder(UnitGroupRandomUnit(UnitGroup("Repulsor", auto86BC7113_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), Order(AbilityCommand("RepulsorBurrow", 0)), c_orderQueueAddToEnd);
        }

    }
    if ((lv_tgai_count == 0)) {
        gv_no_genetron_players = true;
    }

}

void gf_tgai_issue_orders_to_genetron_ai () {
    // Automatic Variable Declarations
    playergroup auto230BB815_g;
    int auto230BB815_var;

    // Implementation
    auto230BB815_g = gv_terrans;
    auto230BB815_var = -1;
    while (true) {
        auto230BB815_var = PlayerGroupNextPlayer(auto230BB815_g, auto230BB815_var);
        if (auto230BB815_var < 0) { break; }
        if ((gv_players[auto230BB815_var].lv_support_type == "Genetron")) {
            gf_tgai_build_combat_unit(auto230BB815_var);
        }

    }
}

void gf_tgai_build_combat_unit (int lp_player) {
    // Variable Declarations
    point lv_rally_point;

    // Automatic Variable Declarations
    unitgroup autoF9C5B154_g;
    int autoF9C5B154_u;
    unit autoF9C5B154_var;

    // Variable Initialization

    // Implementation
    lv_rally_point = PointFromName(("Zerg Rally " + IntToString(gv_players[lp_player].lv_position)));
    autoF9C5B154_g = gv_tgai_vars[lp_player].lv_manufacturer;
    autoF9C5B154_u = UnitGroupCount(autoF9C5B154_g, c_unitCountAll);
    for (;; autoF9C5B154_u -= 1) {
        autoF9C5B154_var = UnitGroupUnitFromEnd(autoF9C5B154_g, autoF9C5B154_u);
        if (autoF9C5B154_var == null) { break; }
        if ((UnitOrderCount(autoF9C5B154_var) == 0)) {
            UnitIssueOrder(autoF9C5B154_var, OrderTargetingPoint(AbilityCommand("Rally", 0), lv_rally_point), c_orderQueueReplace);
            UnitIssueOrder(autoF9C5B154_var, Order(AbilityCommand("GenetronTrainEdit", 0)), c_orderQueueAddToEnd);
        }

    }
}

bool gf_unit_is_in_pocketbase (unit lp_u) {
    // Variable Declarations
    int lv_i;
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        if ((libNtve_gf_UnitInRegion(lp_u, RegionFromName(("pocketbase " + IntToString(lv_i)))) == true)) {
            lv_r = true;
            lv_i += 6;
        }

        lv_i += 1;
    }
    return lv_r;
}

void gf_add_afterlife_zerg_positions (unit lp_ice, int lp_closest_player) {
    // Variable Declarations
    unitgroup lv_local_ug;
    int lv_spine_count;
    int lv_tumor_count;

    // Automatic Variable Declarations
    unitgroup auto80D529EB_g;
    int auto80D529EB_u;
    unit auto80D529EB_var;

    // Variable Initialization
    lv_local_ug = UnitGroupEmpty();

    // Implementation
    gv_afterlife_zerg_positions[lp_closest_player].lv_spawner = UnitGetPosition(lp_ice);
    lv_local_ug = UnitGroup(null, 0, RegionCircle(gv_afterlife_zerg_positions[lp_closest_player].lv_spawner, 15.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto80D529EB_g = lv_local_ug;
    auto80D529EB_u = UnitGroupCount(auto80D529EB_g, c_unitCountAll);
    for (;; auto80D529EB_u -= 1) {
        auto80D529EB_var = UnitGroupUnitFromEnd(auto80D529EB_g, auto80D529EB_u);
        if (auto80D529EB_var == null) { break; }
        if (((UnitGetType(auto80D529EB_var) == "InfestedDominionHousing2") || (UnitGetType(auto80D529EB_var) == "BraxisAlphaDestructible2x2"))) {
            if ((UnitGetType(auto80D529EB_var) == "InfestedDominionHousing2")) {
                lv_spine_count = (lv_spine_count + 1);
                gv_afterlife_zerg_positions[lp_closest_player].lv_big_spines[lv_spine_count] = UnitGetPosition(auto80D529EB_var);
                UnitRemove(auto80D529EB_var);
            }
            else {
                lv_tumor_count = (lv_tumor_count + 1);
                gv_afterlife_zerg_positions[lp_closest_player].lv_tumors[lv_tumor_count] = UnitGetPosition(auto80D529EB_var);
                UnitRemove(auto80D529EB_var);
            }
        }

    }
    UnitRemove(lp_ice);
}

void gf_handle_dead_player_afterlife_start (int lp_player) {
    // Variable Declarations
    int lv_elo;
    int lv_position;
    point lv_no_point;
    int lv_level;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_elo = gv_players[EventPlayer()].lv_elo;
    lv_i = 1;

    // Implementation
    PlayerGroupAdd(gv_dead_players, lp_player);
    lv_position = gv_players[lp_player].lv_position;
    gf_Remove_weather(lv_position);
    gv_players[lp_player].lv_weather = 0;
    gf_create_karax_for_player(lp_player, lv_no_point);
    gf_create_afterlife_zerg_position(lv_position);
    libNtve_gf_SetAllianceAspectForPlayerGroup(gv_dead_players, c_allianceIdControl, false);
    UISetFrameVisible(gv_dead_players, c_syncFrameTypeAllianceButton, false);
    while ((lv_i <= 6)) {
        if ((lv_i != lp_player)) {
            PlayerSetAlliance(lp_player, c_allianceIdControl, lv_i, false);
        }

        lv_i += 1;
    }
}

void gf_create_afterlife_zerg_position (int lp_p) {
    // Variable Declarations
    int lv_i;
    unit lv_gu;
    point lv_gp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumor2", 0, 7, gv_afterlife_zerg_positions[lp_p].lv_tumors[lv_i]);
        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= 2)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LargeSpineCrawler", 0, 7, gv_afterlife_zerg_positions[lp_p].lv_big_spines[lv_i]);
        lv_i += 1;
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SlowlingSpawner", 0, 7, gv_afterlife_zerg_positions[lp_p].lv_spawner);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(lp_p)))), c_orderQueueReplace);
    lv_gu = UnitGroupUnit(UnitGroup("GeyserBlocker", c_playerAny, RegionCircle(UnitGetPosition(UnitLastCreated()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_gu != null)) {
        lv_gp = UnitGetPosition(lv_gu);
        UnitRemove(lv_gu);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "VespeneGeyser", 0, 0, lv_gp);
    }

}

void gf_Game_Banks_handler (string lp_action, int lp_player, int lp_elo, int lp_weather, int lp_xp) {
    // Variable Declarations
    int lv_used_elo;
    string lv_csum_str;

    // Automatic Variable Declarations
    string autoBCFCD9D4_val;
    playergroup auto55E1911B_g;
    int auto55E1911B_var;

    // Variable Initialization
    lv_csum_str = "";

    // Implementation
    autoBCFCD9D4_val = lp_action;
    if (autoBCFCD9D4_val == "load") {
        auto55E1911B_g = gv_terrans;
        auto55E1911B_var = -1;
        while (true) {
            auto55E1911B_var = PlayerGroupNextPlayer(auto55E1911B_g, auto55E1911B_var);
            if (auto55E1911B_var < 0) { break; }
            BankLoad("hextvt", auto55E1911B_var);
            lv_csum_str = BankValueGetAsString(BankLastCreated(), "Player", "CS");
            if ((BankVerify(BankLastCreated()) == true)) {
                gv_players[auto55E1911B_var].lv_bank = BankLastCreated();
                gv_players[auto55E1911B_var].lv_elo = BankValueGetAsInt(BankLastCreated(), "Player", "Elo");
                gv_players[auto55E1911B_var].lv_games = BankValueGetAsInt(BankLastCreated(), "Player", "Games");
                gv_players[auto55E1911B_var].lv_skinpoints = BankValueGetAsInt(BankLastCreated(), "Player", "Sp");
                gv_players[auto55E1911B_var].lv_has_marshall_skin = BankValueGetAsInt(BankLastCreated(), "Player", "ResetPromoSkin");
                gv_players[auto55E1911B_var].lv_weather = BankValueGetAsInt(BankLastCreated(), "Player", "Weather");
                gv_players[auto55E1911B_var].lv_xp = BankValueGetAsInt(BankLastCreated(), "Player", "XP");
                if ((lv_csum_str != gf_create_bank_data_csum(auto55E1911B_var))) {
                }

            }
            else {
                gf_create_clean_bank(auto55E1911B_var);
            }
        }
    }
    else if (autoBCFCD9D4_val == "save") {
        if ((lp_player > 0)) {
            if ((lp_elo <= 0)) {
                lv_used_elo = 850;
            }
            else {
                lv_used_elo = lp_elo;
            }
            BankValueSetFromInt(gv_players[lp_player].lv_bank, "Player", "Elo", lv_used_elo);
            BankValueSetFromString(BankLastCreated(), "Player", "CS", gf_create_bank_data_csum(lp_player));
            BankOptionSet(gv_players[lp_player].lv_bank, c_bankOptionSignature, true);
            BankSave(gv_players[lp_player].lv_bank);
        }

    }
    else if (autoBCFCD9D4_val == "addgame") {
        if ((lp_player > 0)) {
            BankValueSetFromInt(gv_players[lp_player].lv_bank, "Player", "Games", (gv_players[lp_player].lv_games + 1));
            BankValueSetFromString(BankLastCreated(), "Player", "CS", gf_create_bank_data_csum(lp_player));
            BankOptionSet(gv_players[lp_player].lv_bank, c_bankOptionSignature, true);
            BankSave(gv_players[lp_player].lv_bank);
        }

    }
    else if (autoBCFCD9D4_val == "addsp") {
        if ((lp_player > 0)) {
            BankValueSetFromInt(gv_players[lp_player].lv_bank, "Player", "Sp", (gv_players[lp_player].lv_skinpoints + 1));
            BankOptionSet(gv_players[lp_player].lv_bank, c_bankOptionSignature, true);
            BankSave(gv_players[lp_player].lv_bank);
        }

    }
    else if (autoBCFCD9D4_val == "addspecialskin") {
        if ((lp_player > 0)) {
            BankValueSetFromInt(gv_players[lp_player].lv_bank, "Player", "ResetPromoSkin", 1);
            BankOptionSet(gv_players[lp_player].lv_bank, c_bankOptionSignature, true);
            BankSave(gv_players[lp_player].lv_bank);
        }

    }
    else if (autoBCFCD9D4_val == "changeweather") {
        if ((lp_player > 0)) {
            BankValueSetFromInt(gv_players[lp_player].lv_bank, "Player", "Weather", lp_weather);
            BankOptionSet(gv_players[lp_player].lv_bank, c_bankOptionSignature, true);
            BankSave(gv_players[lp_player].lv_bank);
        }

    }
    else if (autoBCFCD9D4_val == "addxp") {
        if ((lp_player > 0)) {
            BankValueSetFromInt(gv_players[lp_player].lv_bank, "Player", "XP", (gv_players[lp_player].lv_xp + lp_xp));
            BankOptionSet(gv_players[lp_player].lv_bank, c_bankOptionSignature, true);
            BankSave(gv_players[lp_player].lv_bank);
        }

    }
    else {
    }
}

string gf_create_bank_data_csum (int lp_player) {
    // Variable Declarations
    string lv_r;
    int lv_s;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_r = "";
    lv_s = 35451;

    // Implementation
    lv_r = (IntToString(lv_s) + (IntToString(((gv_players[lp_player].lv_elo + 1) * (gv_players[lp_player].lv_games + 1))) + IntToString(lv_s)));
    return lv_r;
}

void gf_create_clean_bank (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    gv_players[lp_player].lv_elo = 1100;
    gv_players[lp_player].lv_games = 0;
    gv_players[lp_player].lv_skinpoints = 0;
    gv_players[lp_player].lv_has_marshall_skin = 0;
    gv_players[lp_player].lv_weather = 0;
    gv_players[lp_player].lv_xp = 0;
    BankValueSetFromInt(BankLastCreated(), "Player", "Elo", gv_players[lp_player].lv_elo);
    BankValueSetFromInt(BankLastCreated(), "Player", "Games", gv_players[lp_player].lv_games);
    BankValueSetFromInt(BankLastCreated(), "Player", "Sp", gv_players[lp_player].lv_skinpoints);
    BankValueSetFromInt(BankLastCreated(), "Player", "ResetPromoSkin", gv_players[lp_player].lv_has_marshall_skin);
    BankValueSetFromInt(BankLastCreated(), "Player", "Weather", gv_players[lp_player].lv_weather);
    BankValueSetFromInt(BankLastCreated(), "Player", "XP", gv_players[lp_player].lv_xp);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    BankSave(BankLastCreated());
    BankLoad("hextvt", lp_player);
    gv_players[lp_player].lv_bank = BankLastCreated();
}

void gf_save_csum (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    BankValueSetFromString(BankLastCreated(), "Player", "CS", gf_create_bank_data_csum(lp_player));
    BankOptionSet(gv_players[lp_player].lv_bank, c_bankOptionSignature, true);
    BankSave(gv_players[lp_player].lv_bank);
}

void gf_remove_transmission_units () {
    // Automatic Variable Declarations
    unitgroup auto6E3BB46A_g;
    int auto6E3BB46A_u;
    unit auto6E3BB46A_var;

    // Implementation
    if (((GameGetMissionTime() == 45.0) || (GameGetMissionTime() == (30 + (11 * 60))))) {
        auto6E3BB46A_g = gv_transmission_units;
        auto6E3BB46A_u = UnitGroupCount(auto6E3BB46A_g, c_unitCountAll);
        for (;; auto6E3BB46A_u -= 1) {
            auto6E3BB46A_var = UnitGroupUnitFromEnd(auto6E3BB46A_g, auto6E3BB46A_u);
            if (auto6E3BB46A_var == null) { break; }
            UnitRemove(auto6E3BB46A_var);
        }
    }

}

void gf_apply_support () {
    // Automatic Variable Declarations
    // Implementation
    gf_apply_support_casual();
}

void gf_apply_support_casual () {
    // Variable Declarations
    int lv_picked_bonus_int;
    unit lv_generator;
    int lv_penalty;
    int lv_o_pen;
    unit lv_portrait_unit;
    point lv_p;
    point lv_pg;
    point lv_target_middle;
    point lv_target_middle2;
    int lv_i;
    int lv_j;
    unit lv_barracks;

    // Automatic Variable Declarations
    playergroup auto18D3D132_g;
    int auto18D3D132_var;
    string auto166FA2A2_val;
    int auto4C710A49_val;
    unitgroup auto376916DE_g;
    int auto376916DE_u;
    unit auto376916DE_var;
    unitgroup autoDBE3DB51_g;
    int autoDBE3DB51_u;
    unit autoDBE3DB51_var;
    unitgroup auto148588C3_g;
    int auto148588C3_u;
    unit auto148588C3_var;
    unitgroup autoAF2ED8BB_g;
    int autoAF2ED8BB_u;
    unit autoAF2ED8BB_var;
    unitgroup auto647456EF_g;
    int auto647456EF_u;
    unit auto647456EF_var;
    unitgroup auto24C4542F_g;
    int auto24C4542F_u;
    unit auto24C4542F_var;
    unitgroup auto134AAC57_g;
    int auto134AAC57_u;
    unit auto134AAC57_var;
    unitgroup autoD6363266_g;
    int autoD6363266_u;
    unit autoD6363266_var;

    // Variable Initialization
    lv_i = 1;
    lv_j = 1;

    // Implementation
    auto18D3D132_g = gv_terrans;
    auto18D3D132_var = -1;
    while (true) {
        auto18D3D132_var = PlayerGroupNextPlayer(auto18D3D132_g, auto18D3D132_var);
        if (auto18D3D132_var < 0) { break; }
        lv_o_pen = gv_players[auto18D3D132_var].lv_elopenalty;
        auto166FA2A2_val = GameAttributePlayerValue("5", auto18D3D132_var);
        if (auto166FA2A2_val == "0001") {
            lv_picked_bonus_int = 0;
        }
        else if (auto166FA2A2_val == "0012") {
            lv_picked_bonus_int = 1;
            lv_penalty = (1 * gv_difficulty);
        }
        else if (auto166FA2A2_val == "0009") {
            lv_picked_bonus_int = 2;
        }
        else if (auto166FA2A2_val == "0011") {
            lv_picked_bonus_int = 3;
        }
        else if (auto166FA2A2_val == "0006") {
            lv_picked_bonus_int = 4;
        }
        else if (auto166FA2A2_val == "0007") {
            lv_picked_bonus_int = 5;
        }
        else if (auto166FA2A2_val == "0008") {
            lv_picked_bonus_int = 6;
        }
        else if (auto166FA2A2_val == "0002") {
            lv_picked_bonus_int = 7;
        }
        else if (auto166FA2A2_val == "0004") {
            lv_picked_bonus_int = 8;
        }
        else if (auto166FA2A2_val == "0003") {
            lv_picked_bonus_int = 9;
        }
        else if (auto166FA2A2_val == "0005") {
            lv_picked_bonus_int = 10;
        }
        else if (auto166FA2A2_val == "0010") {
            lv_picked_bonus_int = 11;
        }
        else if (auto166FA2A2_val == "0014") {
            lv_picked_bonus_int = 12;
        }
        else if (auto166FA2A2_val == "0013") {
            lv_picked_bonus_int = 13;
        }
        else {
        }
        if ((lv_picked_bonus_int > 1)) {
            lv_penalty = (3 * gv_difficulty);
        }

        lv_penalty = 0;
        lv_picked_bonus_int = gv_tbp_player_bonus_picks[auto18D3D132_var];
        if ((lv_picked_bonus_int == 1)) {
            lv_picked_bonus_int = RandomInt(2, 12);
            if (((lv_picked_bonus_int == 9))) {
                lv_picked_bonus_int = 5;
            }

        }

        auto4C710A49_val = lv_picked_bonus_int;
        if (auto4C710A49_val == 2) {
            gv_players[auto18D3D132_var].lv_support_type = "Army";
            lv_barracks = UnitGroupUnit(UnitGroup("Barracks2", auto18D3D132_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
            UnitBehaviorAdd(lv_barracks, "BloodStacks", lv_barracks, 10);
            gf_update_blood_panel(auto18D3D132_var);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("BarracksTrain2", 13), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("BarracksTrain2", 14), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("BarracksTrain2", 15), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("BarracksTrain2", 16), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ArmoryResearch2", 24), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("BuildBuilderScalingStructures", 11), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("BarracksTrain2", 0), false);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("BarracksTrain2", 1), false);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ArmoryResearch2", 17), false);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("BarracksTrain2", 7), false);
            auto376916DE_g = UnitGroup("Marine2", auto18D3D132_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto376916DE_u = UnitGroupCount(auto376916DE_g, c_unitCountAll);
            for (;; auto376916DE_u -= 1) {
                auto376916DE_var = UnitGroupUnitFromEnd(auto376916DE_g, auto376916DE_u);
                if (auto376916DE_var == null) { break; }
                lv_p = UnitGetPosition(auto376916DE_var);
                UnitRemove(auto376916DE_var);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosCultist", 0, auto18D3D132_var, lv_p);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosSpaceMarine", 0, auto18D3D132_var, lv_p);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosSlave", 0, auto18D3D132_var, lv_p);
            }
            CatalogReferenceSet("Button,ResearchOvercharge,AlertTooltip", auto18D3D132_var, "Enables <c val=\"ffff8a\">Elite Marines</c> and <c val=\"ffff8a\">Chaos Space Marines</c> to use the Overcharge and Stimpack ability.");
            CatalogReferenceSet("Button,ResearchOvercharge,Tooltip", auto18D3D132_var, "Enables <c val=\"ffff8a\">Elite Marines</c> and <c val=\"ffff8a\">Chaos Space Marines</c> to use the Overcharge and Stimpack ability.");
            CatalogReferenceSet("Button,ResearchPenetratingLaser,AlertTooltip", auto18D3D132_var, "Upgrades all <c val=\"ffff8a\">Marines</c>, <c val=\"ffff8a\">Reaper</c> and <c val=\"ffff8a\">Bolter</c> weapons to deal +1 damage.");
            CatalogReferenceSet("Button,ResearchPenetratingLaser,Tooltip", auto18D3D132_var, "Upgrades all <c val=\"ffff8a\">Marines</c>, <c val=\"ffff8a\">Reaper</c> and <c val=\"ffff8a\">Bolter</c> weapons to deal +1 damage.");
            CatalogReferenceSet("Button,UpgradeCombatShield,AlertTooltip", auto18D3D132_var, "Upgrades the shield of Veteran and Elite Marines.<n/><n/><c val=\"ffff8a\">Veteran Marines</c> gain +30 life.<n/><c val=\"ffff8a\">Elite Marines</c> gain +50 life.<n/><c val=\"ffff8a\">Chaos Space Marines</c> gain +35 life.<n/><c val=\"ffff8a\">Chaos Lord</c> gain +175 life.");
            CatalogReferenceSet("Button,UpgradeCombatShield,Tooltip", auto18D3D132_var, "Upgrades the shield of Veteran and Elite Marines.<n/><n/><c val=\"ffff8a\">Veteran Marines</c> gain +30 life.<n/><c val=\"ffff8a\">Elite Marines</c> gain +50 life.<n/><c val=\"ffff8a\">Chaos Space Marines</c> gain +35 life.<n/><c val=\"ffff8a\">Chaos Lord</c> gain +175 life.");
            CatalogReferenceSet("Button,ResearchMobileSquadTraining,AlertTooltip", auto18D3D132_var, "Allows <c val=\"ffff8a\">Marines</c> to be promoted anywhere on the map instead of having to be near the Barracks.<n/>Reduces recruit time of <c val=\"ffff8a\">Chaos Forces</c>.");
            CatalogReferenceSet("Button,ResearchMobileSquadTraining,Tooltip", auto18D3D132_var, "Allows <c val=\"ffff8a\">Marines</c> to be promoted anywhere on the map instead of having to be near the Barracks.<n/>Reduces recruit time of <c val=\"ffff8a\">Chaos Forces</c>.");
        }
        else if (auto4C710A49_val == 3) {
            gv_players[auto18D3D132_var].lv_support_type = "Hightech";
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("CommandCenterTrain2", 8), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("BuildBuilderScalingStructures", 4), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("UpgradeToAdvancedGate", 0), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ArmoryResearch2", 1), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ArmoryResearch2", 6), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ArmoryResearch2", 21), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("BuildBuilderScalingStructures", 5), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("GeneratorResearch", 5), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("BuildBuilder", 23), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ArmoryResearch3", 3), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ArmoryResearch3", 4), true);
            autoDBE3DB51_g = UnitGroup("Battery", auto18D3D132_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoDBE3DB51_u = UnitGroupCount(autoDBE3DB51_g, c_unitCountAll);
            for (;; autoDBE3DB51_u -= 1) {
                autoDBE3DB51_var = UnitGroupUnitFromEnd(autoDBE3DB51_g, autoDBE3DB51_u);
                if (autoDBE3DB51_var == null) { break; }
                lv_p = UnitGetPosition(autoDBE3DB51_var);
                UnitRemove(autoDBE3DB51_var);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, auto18D3D132_var, lv_p);
            }
            auto148588C3_g = UnitGroup("Marine2", auto18D3D132_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto148588C3_u = UnitGroupCount(auto148588C3_g, c_unitCountAll);
            for (;; auto148588C3_u -= 1) {
                auto148588C3_var = UnitGroupUnitFromEnd(auto148588C3_g, auto148588C3_u);
                if (auto148588C3_var == null) { break; }
                lv_p = UnitGetPosition(auto148588C3_var);
                UnitRemove(auto148588C3_var);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShockTrooper", 0, auto18D3D132_var, lv_p);
            }
            autoAF2ED8BB_g = UnitGroup("ShockTrooper", auto18D3D132_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
            autoAF2ED8BB_u = UnitGroupCount(autoAF2ED8BB_g, c_unitCountAll);
            for (;; autoAF2ED8BB_u -= 1) {
                autoAF2ED8BB_var = UnitGroupUnitFromEnd(autoAF2ED8BB_g, autoAF2ED8BB_u);
                if (autoAF2ED8BB_var == null) { break; }
                lv_p = UnitGetPosition(autoAF2ED8BB_var);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "FirebatZergHex", 0, auto18D3D132_var, lv_p);
            }
            auto647456EF_g = UnitGroup("Generator", auto18D3D132_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto647456EF_u = UnitGroupCount(auto647456EF_g, c_unitCountAll);
            for (;; auto647456EF_u -= 1) {
                auto647456EF_var = UnitGroupUnitFromEnd(auto647456EF_g, auto647456EF_u);
                if (auto647456EF_var == null) { break; }
                UnitBehaviorAdd(auto647456EF_var, "HighTechBuff", auto647456EF_var, 1);
            }
        }
        else if (auto4C710A49_val == 4) {
            gv_players[auto18D3D132_var].lv_support_type = "v3x";
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ConstructionYardResearch", 4), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("BuildBuilderScalingStructures", 3), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ConstructionYardResearch", 7), false);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ConstructionYardResearch", 8), false);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ConstructionYardResearch", 9), false);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ConstructionYardTrain", 0), false);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("BarracksTrain2", 6), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ArmoryResearch2", 17), false);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("BarracksTrain2", 7), false);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("BarracksTrain2", 11), true);
            CatalogReferenceSet("Unit,Marine2,CostResource[Minerals]", auto18D3D132_var, "15");
            CatalogReferenceSet("Unit,VeteranMarine,CostResource[Minerals]", auto18D3D132_var, "35");
            CatalogReferenceSet("Unit,EliteMarine,CostResource[Minerals]", auto18D3D132_var, "100");
            CatalogReferenceSet("Unit,EliteMarineSkin1,CostResource[Minerals]", auto18D3D132_var, "100");
            CatalogReferenceSet("Unit,EliteMarineSkin2,CostResource[Minerals]", auto18D3D132_var, "100");
            CatalogReferenceSet("Unit,EliteMarineSkin3,CostResource[Minerals]", auto18D3D132_var, "100");
            CatalogReferenceSet("Unit,EliteMarineSkin4,CostResource[Minerals]", auto18D3D132_var, "100");
            CatalogReferenceSet("Abil,ConstructionYardResearch,InfoArray[Research2].Resource[Vespene]", auto18D3D132_var, "50");
            PlayerModifyPropertyInt(auto18D3D132_var, c_playerPropMinerals, c_playerPropOperSubtract, 1);
            PlayerModifyPropertyInt(auto18D3D132_var, c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(auto18D3D132_var, c_playerPropMinerals) + 25));
            PlayerModifyPropertyInt(auto18D3D132_var, c_playerPropVespene, c_playerPropOperSetTo, (PlayerGetPropertyInt(auto18D3D132_var, c_playerPropVespene) + 25));
        }
        else if (auto4C710A49_val == 5) {
            gv_players[auto18D3D132_var].lv_support_type = "Cash";
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ConyardOrderCashUpgrade", 0), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("CashPickupResearch", 0), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("CashPickupResearch", 3), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("CashPickupResearch", 4), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("CashPickupResearch", 5), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("CashPickupResearch", 6), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("CashPickupResearch", 7), true);
            lv_i = 1;
            PlayerModifyPropertyInt(auto18D3D132_var, c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(auto18D3D132_var, c_playerPropMinerals) + 0));
            PlayerModifyPropertyInt(auto18D3D132_var, c_playerPropVespene, c_playerPropOperSetTo, (PlayerGetPropertyInt(auto18D3D132_var, c_playerPropVespene) + 0));
            lv_target_middle = PointFromName(("Zerg Rally " + IntToString(gv_players[auto18D3D132_var].lv_position)));
            gv_cash_drops[auto18D3D132_var][1] = 3;
            gv_cash_drops[auto18D3D132_var][2] = 3;
            gv_cash_drops[auto18D3D132_var][3] = 3;
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "PickupPalletGas", 0, auto18D3D132_var, lv_target_middle);
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "PickupPalletMinerals", 0, auto18D3D132_var, lv_target_middle);
            while ((lv_i <= 6)) {
                if ((gv_players[gf_get_player_at_position(lv_i)].lv_alive == true)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GasTrader", 0, gf_get_player_at_position(lv_i), PointFromName(("Zerg Rally " + IntToString(lv_i))));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralTrader", 0, gf_get_player_at_position(lv_i), PointFromName(("Zerg Rally " + IntToString(lv_i))));
                }

                lv_i = (lv_i + 1);
            }
        }
        else if (auto4C710A49_val == 6) {
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("CommandCenterTrain2", 6), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ArmoryResearch2", 18), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ConstructionYardResearch", 13), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ConstructionYardOrderUpgradeFortificationInfested", 0), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ArmoryResearch2", 22), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ArmoryResearch2", 23), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ConstructionYardOrderUpgradeFortification", 0), false);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("CommandCenterTrain2", 0), false);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ArmoryResearch2", 17), false);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("BarracksTrain2", 7), false);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("InstantDischarge", 0), false);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ArmoryResearch2", 14), false);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ArmoryResearch2", 15), false);
            PlayerModifyPropertyInt(auto18D3D132_var, c_playerPropMinerals, c_playerPropOperAdd, 160);
            PlayerModifyPropertyInt(auto18D3D132_var, c_playerPropVespene, c_playerPropOperAdd, 100);
            gv_players[auto18D3D132_var].lv_support_type = "Infested";
            auto24C4542F_g = UnitGroup("Builder", auto18D3D132_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto24C4542F_u = UnitGroupCount(auto24C4542F_g, c_unitCountAll);
            for (;; auto24C4542F_u -= 1) {
                auto24C4542F_var = UnitGroupUnitFromEnd(auto24C4542F_g, auto24C4542F_u);
                if (auto24C4542F_var == null) { break; }
                lv_p = UnitGetPosition(auto24C4542F_var);
                UnitRemove(auto24C4542F_var);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedBuilder", 0, auto18D3D132_var, lv_p);
            }
            UnitRemove(UnitGroupClosestToPoint(UnitGroup("RocksBE", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 6), UnitGetPosition(UnitGroupUnit(UnitGroup("CommandCenter2", auto18D3D132_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1))));
            CatalogReferenceSet("Button,Fortification,AlertTooltip", auto18D3D132_var, "Increases the durability of walls and structures, also increasing the repair rate of Defenders by 2 hp/s.<n/><n/><c val=\"E8E191\">Walls and Gates</c>: +30% health and +1 armor.<n/><c val=\"E8E191\">Tech Structures</c>: +35 hp.<n/><c val=\"E8E191\">Other</c>: +20 hp. <c val=\"C0C0C0\">(Fruit Farm excluded)</c><n/><c val=\"E8E191\">Infested Marines</c>: +15 hp.<n/><n/>Can be upgraded 50 times.");
            CatalogReferenceSet("Button,Fortification,Tooltip", auto18D3D132_var, "Increases the durability of walls and structures, also increasing the repair rate of Defenders by 2 hp/s.<n/><n/><c val=\"E8E191\">Walls and Gates</c>: +30% health and +1 armor.<n/><c val=\"E8E191\">Tech Structures</c>: +35 hp.<n/><c val=\"E8E191\">Other</c>: +20 hp. <c val=\"C0C0C0\">(Fruit Farm excluded)</c><n/><c val=\"E8E191\">Infested Marines</c>: +15 hp.<n/><n/>Can be upgraded 50 times.");
            CatalogReferenceSet("Button,FortificationIssue,Tooltip", auto18D3D132_var, "Increases the durability of walls and structures, also increasing the repair rate of Defenders by 2 hp/s.<n/><n/><c val=\"E8E191\">Walls and Gates</c>: +30% health and +1 armor.<n/><c val=\"E8E191\">Tech Structures</c>: +35 hp.<n/><c val=\"E8E191\">Other</c>: +20 hp. <c val=\"C0C0C0\">(Fruit Farm excluded)</c><n/><c val=\"E8E191\">Infested Marines</c>: +15 hp.<n/><n/>Can be upgraded 50 times.");
            CatalogReferenceSet("Button,FortificationIssue,AlertTooltip", auto18D3D132_var, "Increases the durability of walls and structures, also increasing the repair rate of Defenders by 2 hp/s.<n/><n/><c val=\"E8E191\">Walls and Gates</c>: +30% health and +1 armor.<n/><c val=\"E8E191\">Tech Structures</c>: +35 hp.<n/><c val=\"E8E191\">Other</c>: +20 hp. <c val=\"C0C0C0\">(Fruit Farm excluded)</c><n/><c val=\"E8E191\">Infested Marines</c>: +15 hp.<n/><n/>Can be upgraded 50 times.");
            CatalogReferenceSet("Abil,ConstructionYardResearch,InfoArray[Research1].Button.Requirements", auto18D3D132_var, "UpgradeFortificationInfested");
        }
        else if (auto4C710A49_val == 7) {
            gf_create_raynor_support_forplayer(auto18D3D132_var);
            TechTreeUpgradeAddLevel(auto18D3D132_var, "MarineShatteringLaser", 1);
            TechTreeUpgradeAddLevel(auto18D3D132_var, "MarineOverclockedRifles", 1);
            TechTreeUpgradeAddLevel(auto18D3D132_var, "MarineOvercharge", 1);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Raynor", c_unitCreateIgnorePlacement, 0, PointFromId(304274518));
            lv_portrait_unit = UnitLastCreated();
            UnitGroupAdd(gv_transmission_units, lv_portrait_unit);
            TransmissionSendForPlayerSelect(PlayerGroupSingle(auto18D3D132_var), TransmissionSourceFromUnit(lv_portrait_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/601B2700"), StringExternal("Param/Value/5E96B5E9"), 15.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
            gv_players[auto18D3D132_var].lv_support_type = "Raynor";
        }
        else if (auto4C710A49_val == 8) {
            gf_create_marauder_support_forplayer(auto18D3D132_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskMarauder", 0, auto18D3D132_var, PointFromName(("Zerg Rally " + IntToString(gv_players[auto18D3D132_var].lv_position))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", c_unitCreateIgnorePlacement, 0, PointFromId(304274518));
            lv_portrait_unit = UnitLastCreated();
            UnitGroupAdd(gv_transmission_units, lv_portrait_unit);
            TransmissionSendForPlayerSelect(PlayerGroupSingle(auto18D3D132_var), TransmissionSourceFromUnit(lv_portrait_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/1ABE11AF"), StringExternal("Param/Value/BC5DC004"), 15.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
            gv_players[auto18D3D132_var].lv_support_type = "Marauder";
        }
        else if (auto4C710A49_val == 9) {
            gf_create_artanis_support_forplayer(auto18D3D132_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Artanis", c_unitCreateIgnorePlacement, 0, PointFromId(304274518));
            lv_portrait_unit = UnitLastCreated();
            UnitGroupAdd(gv_transmission_units, lv_portrait_unit);
            TransmissionSendForPlayerSelect(PlayerGroupSingle(auto18D3D132_var), TransmissionSourceFromUnit(lv_portrait_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/9FA748C7"), StringExternal("Param/Value/E1ED0B77"), 15.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
            gv_players[auto18D3D132_var].lv_support_type = "Artanis";
        }
        else if (auto4C710A49_val == 10) {
            gf_create_tank_support_forplayer(auto18D3D132_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank2", c_unitCreateIgnorePlacement, 0, PointFromId(304274518));
            lv_portrait_unit = UnitLastCreated();
            UnitGroupAdd(gv_transmission_units, lv_portrait_unit);
            TransmissionSendForPlayerSelect(PlayerGroupSingle(auto18D3D132_var), TransmissionSourceFromUnit(lv_portrait_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/A6791F10"), StringExternal("Param/Value/B66CF96D"), 5.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
            gv_players[auto18D3D132_var].lv_support_type = "Tank";
        }
        else if (auto4C710A49_val == 11) {
            gf_create_probius_support_forplayer(auto18D3D132_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probius", c_unitCreateIgnorePlacement, 0, PointFromId(304274518));
            lv_portrait_unit = UnitLastCreated();
            UnitGroupAdd(gv_transmission_units, lv_portrait_unit);
            TransmissionSendForPlayerSelect(PlayerGroupSingle(auto18D3D132_var), TransmissionSourceFromUnit(lv_portrait_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/D8768EEA"), StringExternal("Param/Value/50F21B3E"), 5.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("CommandCenterTrain2", 7), true);
            TechTreeAbilityAllow(auto18D3D132_var, AbilityCommand("ArmoryResearch3", 2), true);
            gv_players[auto18D3D132_var].lv_support_type = "Probius";
        }
        else if (auto4C710A49_val == 12) {
            lv_p = UnitGroupCenterOfGroup(UnitGroup("Marine2", auto18D3D132_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            auto134AAC57_g = UnitGroup("Marine2", auto18D3D132_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto134AAC57_u = UnitGroupCount(auto134AAC57_g, c_unitCountAll);
            for (;; auto134AAC57_u -= 1) {
                auto134AAC57_var = UnitGroupUnitFromEnd(auto134AAC57_g, auto134AAC57_u);
                if (auto134AAC57_var == null) { break; }
                UnitRemove(auto134AAC57_var);
            }
            autoD6363266_g = UnitGroup("Battery", auto18D3D132_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoD6363266_u = UnitGroupCount(autoD6363266_g, c_unitCountAll);
            for (;; autoD6363266_u -= 1) {
                autoD6363266_var = UnitGroupUnitFromEnd(autoD6363266_g, autoD6363266_u);
                if (autoD6363266_var == null) { break; }
                UnitRemove(autoD6363266_var);
            }
            gf_create_karax_for_player(auto18D3D132_var, lv_p);
            gv_players[auto18D3D132_var].lv_support_type = "Karax";
        }
        else if (auto4C710A49_val == 13) {
            gv_players[auto18D3D132_var].lv_support_type = "Wizard";
        }
        else if (auto4C710A49_val == 14) {
            gf_make_player_genetron(auto18D3D132_var);
            gv_players[auto18D3D132_var].lv_support_type = "Genetron";
        }
        else {
        }
        lv_penalty = (lv_penalty + lv_o_pen);
        if ((lv_penalty > (gv_difficulty * 10))) {
            lv_penalty = (gv_difficulty * 10);
        }

        gv_players[auto18D3D132_var].lv_elopenalty = lv_penalty;
    }
}

void gf_apply_support_3v3 () {
    // Variable Declarations
    int lv_picked_bonus_int;
    unit lv_generator;
    int lv_penalty;
    int lv_o_pen;
    unit lv_portrait_unit;
    point lv_p;
    point lv_target_middle;
    point lv_target_middle2;
    int lv_i;
    unit lv_barracks;

    // Automatic Variable Declarations
    playergroup auto4A0E4D9D_g;
    int auto4A0E4D9D_var;
    string auto29B4316B_val;
    int auto62D37381_val;
    unitgroup auto5610767C_g;
    int auto5610767C_u;
    unit auto5610767C_var;
    unitgroup autoBC011C41_g;
    int autoBC011C41_u;
    unit autoBC011C41_var;
    unitgroup autoE414EAEC_g;
    int autoE414EAEC_u;
    unit autoE414EAEC_var;
    unitgroup autoA744CA74_g;
    int autoA744CA74_u;
    unit autoA744CA74_var;
    unitgroup auto8E300475_g;
    int auto8E300475_u;
    unit auto8E300475_var;
    unitgroup autoDD8B82FF_g;
    int autoDD8B82FF_u;
    unit autoDD8B82FF_var;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    auto4A0E4D9D_g = gv_terrans;
    auto4A0E4D9D_var = -1;
    while (true) {
        auto4A0E4D9D_var = PlayerGroupNextPlayer(auto4A0E4D9D_g, auto4A0E4D9D_var);
        if (auto4A0E4D9D_var < 0) { break; }
        lv_o_pen = gv_players[auto4A0E4D9D_var].lv_elopenalty;
        auto29B4316B_val = GameAttributePlayerValue("10", auto4A0E4D9D_var);
        if (auto29B4316B_val == "0001") {
            lv_picked_bonus_int = 0;
        }
        else if (auto29B4316B_val == "0012") {
            lv_picked_bonus_int = 1;
            lv_penalty = (1 * gv_difficulty);
        }
        else if (auto29B4316B_val == "0009") {
            lv_picked_bonus_int = 2;
        }
        else if (auto29B4316B_val == "0011") {
            lv_picked_bonus_int = 3;
        }
        else if (auto29B4316B_val == "0006") {
            lv_picked_bonus_int = 4;
        }
        else if (auto29B4316B_val == "0007") {
            lv_picked_bonus_int = 5;
        }
        else if (auto29B4316B_val == "0008") {
            lv_picked_bonus_int = 6;
        }
        else if (auto29B4316B_val == "0003") {
            lv_picked_bonus_int = 7;
        }
        else if (auto29B4316B_val == "0005") {
            lv_picked_bonus_int = 8;
        }
        else if (auto29B4316B_val == "0010") {
            lv_picked_bonus_int = 9;
        }
        else if (auto29B4316B_val == "0002") {
            lv_picked_bonus_int = 10;
        }
        else if (auto29B4316B_val == "0013") {
            lv_picked_bonus_int = 11;
        }
        else {
        }
        if ((lv_picked_bonus_int > 1)) {
            lv_penalty = (3 * gv_difficulty);
        }

        if ((lv_picked_bonus_int == 1)) {
            lv_picked_bonus_int = RandomInt(2, 10);
        }

        auto62D37381_val = lv_picked_bonus_int;
        if (auto62D37381_val == 2) {
            gv_players[auto4A0E4D9D_var].lv_support_type = "Army";
            lv_barracks = UnitGroupUnit(UnitGroup("Barracks2", auto4A0E4D9D_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
            UnitBehaviorAdd(lv_barracks, "BloodStacks", lv_barracks, 10);
            gf_update_blood_panel(auto4A0E4D9D_var);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("BarracksTrain2", 13), true);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("BarracksTrain2", 14), true);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("BarracksTrain2", 15), true);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("BarracksTrain2", 16), true);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("BarracksTrain2", 0), false);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("BarracksTrain2", 1), false);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("ArmoryResearch2", 17), false);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("BarracksTrain2", 7), false);
            auto5610767C_g = UnitGroup("Marine2", auto4A0E4D9D_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto5610767C_u = UnitGroupCount(auto5610767C_g, c_unitCountAll);
            for (;; auto5610767C_u -= 1) {
                auto5610767C_var = UnitGroupUnitFromEnd(auto5610767C_g, auto5610767C_u);
                if (auto5610767C_var == null) { break; }
                lv_p = UnitGetPosition(auto5610767C_var);
                UnitRemove(auto5610767C_var);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosCultist", 0, auto4A0E4D9D_var, lv_p);
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "ChaosSlave", 0, auto4A0E4D9D_var, PointFromName(("Zerg Rally " + IntToString(gv_players[auto4A0E4D9D_var].lv_position))));
            CatalogReferenceSet("Button,ResearchOvercharge,AlertTooltip", auto4A0E4D9D_var, "Enables <c val=\"ffff8a\">Elite Marines</c> and <c val=\"ffff8a\">Chaos Space Marines</c> to use the Overcharge and Stimpack ability.");
            CatalogReferenceSet("Button,ResearchOvercharge,Tooltip", auto4A0E4D9D_var, "Enables <c val=\"ffff8a\">Elite Marines</c> and <c val=\"ffff8a\">Chaos Space Marines</c> to use the Overcharge and Stimpack ability.");
            CatalogReferenceSet("Button,ResearchPenetratingLaser,AlertTooltip", auto4A0E4D9D_var, "Upgrades all <c val=\"ffff8a\">Marines</c>, <c val=\"ffff8a\">Reaper</c> and <c val=\"ffff8a\">Bolter</c> weapons to deal +1 damage.");
            CatalogReferenceSet("Button,ResearchPenetratingLaser,Tooltip", auto4A0E4D9D_var, "Upgrades all <c val=\"ffff8a\">Marines</c>, <c val=\"ffff8a\">Reaper</c> and <c val=\"ffff8a\">Bolter</c> weapons to deal +1 damage.");
            CatalogReferenceSet("Button,UpgradeCombatShield,AlertTooltip", auto4A0E4D9D_var, "Upgrades the shield of Veteran and Elite Marines.<n/><n/><c val=\"ffff8a\">Veteran Marines</c> gain +30 life.<n/><c val=\"ffff8a\">Elite Marines</c> gain +50 life.<n/><c val=\"ffff8a\">Chaos Space Marines</c> gain +35 life.<n/><c val=\"ffff8a\">Chaos Lord</c> gain +175 life.");
            CatalogReferenceSet("Button,UpgradeCombatShield,Tooltip", auto4A0E4D9D_var, "Upgrades the shield of Veteran and Elite Marines.<n/><n/><c val=\"ffff8a\">Veteran Marines</c> gain +30 life.<n/><c val=\"ffff8a\">Elite Marines</c> gain +50 life.<n/><c val=\"ffff8a\">Chaos Space Marines</c> gain +35 life.<n/><c val=\"ffff8a\">Chaos Lord</c> gain +175 life.");
            CatalogReferenceSet("Button,ResearchMobileSquadTraining,AlertTooltip", auto4A0E4D9D_var, "Allows <c val=\"ffff8a\">Marines</c> to be promoted anywhere on the map instead of having to be near the Barracks.<n/>Reduces recruit time of <c val=\"ffff8a\">Chaos Forces</c>.");
            CatalogReferenceSet("Button,ResearchMobileSquadTraining,Tooltip", auto4A0E4D9D_var, "Allows <c val=\"ffff8a\">Marines</c> to be promoted anywhere on the map instead of having to be near the Barracks.<n/>Reduces recruit time of <c val=\"ffff8a\">Chaos Forces</c>.");
        }
        else if (auto62D37381_val == 3) {
            gv_players[auto4A0E4D9D_var].lv_support_type = "Hightech";
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("CommandCenterTrain2", 8), true);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("BuildBuilderScalingStructures", 4), true);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("UpgradeToAdvancedGate", 0), true);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("ArmoryResearch2", 1), true);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("ArmoryResearch2", 6), true);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("ArmoryResearch2", 21), true);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("BuildBuilderScalingStructures", 5), true);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("GeneratorResearch", 5), true);
            autoBC011C41_g = UnitGroup("Battery", auto4A0E4D9D_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoBC011C41_u = UnitGroupCount(autoBC011C41_g, c_unitCountAll);
            for (;; autoBC011C41_u -= 1) {
                autoBC011C41_var = UnitGroupUnitFromEnd(autoBC011C41_g, autoBC011C41_u);
                if (autoBC011C41_var == null) { break; }
                lv_p = UnitGetPosition(autoBC011C41_var);
                UnitRemove(autoBC011C41_var);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, auto4A0E4D9D_var, lv_p);
            }
            autoE414EAEC_g = UnitGroup("Marine2", auto4A0E4D9D_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoE414EAEC_u = UnitGroupCount(autoE414EAEC_g, c_unitCountAll);
            for (;; autoE414EAEC_u -= 1) {
                autoE414EAEC_var = UnitGroupUnitFromEnd(autoE414EAEC_g, autoE414EAEC_u);
                if (autoE414EAEC_var == null) { break; }
                lv_p = UnitGetPosition(autoE414EAEC_var);
                UnitRemove(autoE414EAEC_var);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShockTrooper", 0, auto4A0E4D9D_var, lv_p);
            }
        }
        else if (auto62D37381_val == 4) {
            gv_players[auto4A0E4D9D_var].lv_support_type = "3x";
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("ConstructionYardResearch", 4), true);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("BuildBuilderScalingStructures", 3), true);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("ConstructionYardResearch", 7), false);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("ConstructionYardResearch", 8), false);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("ConstructionYardResearch", 9), false);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("ConstructionYardTrain", 0), false);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("BarracksTrain2", 6), true);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("ArmoryResearch2", 17), false);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("BarracksTrain2", 7), false);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("BarracksTrain2", 11), true);
            CatalogReferenceSet("Unit,Marine2,CostResource[Minerals]", auto4A0E4D9D_var, "15");
            PlayerModifyPropertyInt(auto4A0E4D9D_var, c_playerPropMinerals, c_playerPropOperSubtract, 1);
            PlayerModifyPropertyInt(auto4A0E4D9D_var, c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(auto4A0E4D9D_var, c_playerPropMinerals) + 25));
            PlayerModifyPropertyInt(auto4A0E4D9D_var, c_playerPropVespene, c_playerPropOperSetTo, (PlayerGetPropertyInt(auto4A0E4D9D_var, c_playerPropVespene) + 25));
        }
        else if (auto62D37381_val == 5) {
            lv_i = 1;
            PlayerModifyPropertyInt(auto4A0E4D9D_var, c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(auto4A0E4D9D_var, c_playerPropMinerals) + 200));
            PlayerModifyPropertyInt(auto4A0E4D9D_var, c_playerPropVespene, c_playerPropOperSetTo, (PlayerGetPropertyInt(auto4A0E4D9D_var, c_playerPropVespene) + 200));
        }
        else if (auto62D37381_val == 6) {
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("CommandCenterTrain2", 6), true);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("ArmoryResearch2", 18), true);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("CommandCenterTrain2", 0), false);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("ArmoryResearch2", 17), false);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("BarracksTrain2", 7), false);
            PlayerModifyPropertyInt(auto4A0E4D9D_var, c_playerPropMinerals, c_playerPropOperAdd, 180);
            PlayerModifyPropertyInt(auto4A0E4D9D_var, c_playerPropVespene, c_playerPropOperAdd, 50);
            gv_players[auto4A0E4D9D_var].lv_support_type = "Infested";
            autoA744CA74_g = UnitGroup("Builder", auto4A0E4D9D_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoA744CA74_u = UnitGroupCount(autoA744CA74_g, c_unitCountAll);
            for (;; autoA744CA74_u -= 1) {
                autoA744CA74_var = UnitGroupUnitFromEnd(autoA744CA74_g, autoA744CA74_u);
                if (autoA744CA74_var == null) { break; }
                lv_p = UnitGetPosition(autoA744CA74_var);
                UnitRemove(autoA744CA74_var);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedBuilder", 0, auto4A0E4D9D_var, lv_p);
            }
            CatalogReferenceSet("Button,Fortification,AlertTooltip", auto4A0E4D9D_var, "Increases the durability of walls and structures, also increasing the repair rate of Defenders by 2 hp/s.<n/><n/><c val=\"E8E191\">Walls and Gates</c>: +30% health and +1 armor.<n/><c val=\"E8E191\">Tech Structures</c>: +35 hp.<n/><c val=\"E8E191\">Other</c>: +20 hp. <c val=\"C0C0C0\">(Fruit Farm excluded)</c><n/><c val=\"E8E191\">Infested Marines</c>: +15 hp.<n/><n/>Can be upgraded 30 times.");
            CatalogReferenceSet("Button,Fortification,Tooltip", auto4A0E4D9D_var, "Increases the durability of walls and structures, also increasing the repair rate of Defenders by 2 hp/s.<n/><n/><c val=\"E8E191\">Walls and Gates</c>: +30% health and +1 armor.<n/><c val=\"E8E191\">Tech Structures</c>: +35 hp.<n/><c val=\"E8E191\">Other</c>: +20 hp. <c val=\"C0C0C0\">(Fruit Farm excluded)</c><n/><c val=\"E8E191\">Infested Marines</c>: +15 hp.<n/><n/>Can be upgraded 30 times.");
        }
        else if (auto62D37381_val == 7) {
            gf_create_artanis_support_forplayer(auto4A0E4D9D_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Artanis", c_unitCreateIgnorePlacement, 0, PointFromId(304274518));
            lv_portrait_unit = UnitLastCreated();
            UnitGroupAdd(gv_transmission_units, lv_portrait_unit);
            TransmissionSendForPlayerSelect(PlayerGroupSingle(auto4A0E4D9D_var), TransmissionSourceFromUnit(lv_portrait_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/EF4330DB"), StringExternal("Param/Value/BC764C77"), 15.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
            gv_players[auto4A0E4D9D_var].lv_support_type = "Artanis";
        }
        else if (auto62D37381_val == 8) {
            gf_create_tank_support_forplayer(auto4A0E4D9D_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank2", c_unitCreateIgnorePlacement, 0, PointFromId(304274518));
            lv_portrait_unit = UnitLastCreated();
            UnitGroupAdd(gv_transmission_units, lv_portrait_unit);
            TransmissionSendForPlayerSelect(PlayerGroupSingle(auto4A0E4D9D_var), TransmissionSourceFromUnit(lv_portrait_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/051D4070"), StringExternal("Param/Value/70429A66"), 5.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
            gv_players[auto4A0E4D9D_var].lv_support_type = "Tank";
        }
        else if (auto62D37381_val == 9) {
            gf_create_probius_support_forplayer(auto4A0E4D9D_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probius", c_unitCreateIgnorePlacement, 0, PointFromId(304274518));
            lv_portrait_unit = UnitLastCreated();
            UnitGroupAdd(gv_transmission_units, lv_portrait_unit);
            TransmissionSendForPlayerSelect(PlayerGroupSingle(auto4A0E4D9D_var), TransmissionSourceFromUnit(lv_portrait_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/03FAEE65"), StringExternal("Param/Value/37EA8BE1"), 5.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
            TechTreeAbilityAllow(auto4A0E4D9D_var, AbilityCommand("CommandCenterTrain2", 7), true);
            gv_players[auto4A0E4D9D_var].lv_support_type = "Probius";
        }
        else if (auto62D37381_val == 10) {
            lv_p = UnitGroupCenterOfGroup(UnitGroup("Marine2", auto4A0E4D9D_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            auto8E300475_g = UnitGroup("Marine2", auto4A0E4D9D_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto8E300475_u = UnitGroupCount(auto8E300475_g, c_unitCountAll);
            for (;; auto8E300475_u -= 1) {
                auto8E300475_var = UnitGroupUnitFromEnd(auto8E300475_g, auto8E300475_u);
                if (auto8E300475_var == null) { break; }
                UnitRemove(auto8E300475_var);
            }
            autoDD8B82FF_g = UnitGroup("Battery", auto4A0E4D9D_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoDD8B82FF_u = UnitGroupCount(autoDD8B82FF_g, c_unitCountAll);
            for (;; autoDD8B82FF_u -= 1) {
                autoDD8B82FF_var = UnitGroupUnitFromEnd(autoDD8B82FF_g, autoDD8B82FF_u);
                if (autoDD8B82FF_var == null) { break; }
                UnitRemove(autoDD8B82FF_var);
            }
            gf_create_karax_for_player(auto4A0E4D9D_var, lv_p);
            gv_players[auto4A0E4D9D_var].lv_support_type = "Karax";
        }
        else if (auto62D37381_val == 11) {
            gv_players[auto4A0E4D9D_var].lv_support_type = "Prebuilt";
        }
        else {
        }
        lv_penalty = (lv_penalty + lv_o_pen);
        if ((lv_penalty > (gv_difficulty * 10))) {
            lv_penalty = (gv_difficulty * 10);
        }

        gv_players[auto4A0E4D9D_var].lv_elopenalty = lv_penalty;
    }
}

void gf_create_special_forces_for_player (int lp_player) {
    // Variable Declarations
    int lv_player_position;
    point lv_spawn_left;
    point lv_spawn_right;
    point lv_spawn_middle;
    point lv_target_middle;
    int lv_i;
    unitgroup lv_ug;
    unit lv_mv;
    string lv_elite_skin;

    // Automatic Variable Declarations
    int auto21C3FBCA_val;
    int autoA3DB3F40_val;
    int auto7C597BF2_val;
    int auto65FD6009_val;

    // Variable Initialization
    lv_player_position = gv_players[lp_player].lv_position;
    lv_i = 1;
    lv_ug = UnitGroupEmpty();

    // Implementation
    if ((gv_players[lp_player].lv_eliteskin != 0)) {
        autoA3DB3F40_val = gv_players[lp_player].lv_eliteskin;
        if (autoA3DB3F40_val == 1) {
            lv_elite_skin = "EliteMarineSkin1";
        }
        else if (autoA3DB3F40_val == 2) {
            lv_elite_skin = "EliteMarineSkin3";
        }
        else if (autoA3DB3F40_val == 3) {
            lv_elite_skin = "EliteMarineSkin2";
        }
        else if (autoA3DB3F40_val == 4) {
            lv_elite_skin = "EliteMarineSkin4";
        }
        else {
        }
    }
    else {
        auto21C3FBCA_val = RandomInt(1, 3);
        if (auto21C3FBCA_val == 1) {
            lv_elite_skin = "EliteMarineSkin1";
        }
        else if (auto21C3FBCA_val == 2) {
            lv_elite_skin = "EliteMarineSkin2";
        }
        else if (auto21C3FBCA_val == 3) {
            lv_elite_skin = "EliteMarineSkin3";
        }
        else {
        }
        if ((gv_players[lp_player].lv_has_marshall_skin == 1)) {
            lv_elite_skin = "EliteMarineSkin4";
        }

    }
    auto7C597BF2_val = lv_player_position;
    if (auto7C597BF2_val == 1) {
        lv_spawn_right = PointFromId(1304502023);
        lv_spawn_left = PointFromId(1654796346);
    }
    else if (auto7C597BF2_val == 2) {
        lv_spawn_right = PointFromId(427204689);
        lv_spawn_left = PointFromId(1304502023);
    }
    else if (auto7C597BF2_val == 3) {
        lv_spawn_right = PointFromId(1375552357);
        lv_spawn_left = PointFromId(427204689);
    }
    else if (auto7C597BF2_val == 4) {
        lv_spawn_right = PointFromId(1304502023);
        lv_spawn_left = PointFromId(1654796346);
    }
    else if (auto7C597BF2_val == 5) {
        lv_spawn_right = PointFromId(1654796346);
        lv_spawn_left = PointFromId(1375552357);
    }
    else if (auto7C597BF2_val == 6) {
        lv_spawn_right = PointFromId(1375552357);
        lv_spawn_left = PointFromId(427204689);
    }
    else {
    }
    lv_spawn_middle = MidPoint(lv_spawn_left, lv_spawn_right);
    lv_target_middle = libNtve_gf_PointOffsetTowardsPoint(MidPoint(PointFromName(("Zerg Flank Rally Right Pre " + IntToString(lv_player_position))), PointFromName(("Zerg Flank Rally Left Pre " + IntToString(lv_player_position)))), 2.4, PointFromName(("Zerg Rally " + IntToString(lv_player_position))));
    if ((lv_player_position != 2) && (lv_player_position != 5)) {
        auto65FD6009_val = lv_player_position;
        if (auto65FD6009_val == 1) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(1304502023));
        }
        else if (auto65FD6009_val == 3) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(427204689));
        }
        else if (auto65FD6009_val == 4) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(1654796346));
        }
        else if (auto65FD6009_val == 6) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(1375552357));
        }
        else {
        }
    }

    lv_i = 1;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hercules", 0, lp_player, lv_spawn_middle);
    libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
    lv_mv = UnitLastCreated();
    while ((lv_i <= 40)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosSpaceMarine", c_unitCreateIgnorePlacement, lp_player, lv_spawn_middle);
        UnitIssueOrder(lv_mv, OrderTargetingUnit(AbilityCommand("HerculesTransport", 0), UnitLastCreated()), c_orderQueueAddToEnd);
        lv_i += 1;
    }
    UnitIssueOrder(lv_mv, OrderTargetingPoint(AbilityCommand("HerculesTransport", 2), lv_target_middle), c_orderQueueAddToEnd);
}

void gf_create_tank_support_forplayer (int lp_player) {
    // Variable Declarations
    int lv_player_position;
    point lv_spawn_left;
    point lv_spawn_right;
    point lv_spawn_middle;
    point lv_target_middle;
    unit lv_mv;

    // Automatic Variable Declarations
    int autoC88B0451_val;
    int auto537E0BCC_val;

    // Variable Initialization
    lv_player_position = gv_players[lp_player].lv_position;

    // Implementation
    autoC88B0451_val = lv_player_position;
    if (autoC88B0451_val == 1) {
        lv_spawn_right = PointFromId(1304502023);
        lv_spawn_left = PointFromId(1654796346);
    }
    else if (autoC88B0451_val == 2) {
        lv_spawn_right = PointFromId(427204689);
        lv_spawn_left = PointFromId(1304502023);
    }
    else if (autoC88B0451_val == 3) {
        lv_spawn_right = PointFromId(1375552357);
        lv_spawn_left = PointFromId(427204689);
    }
    else if (autoC88B0451_val == 4) {
        lv_spawn_right = PointFromId(1304502023);
        lv_spawn_left = PointFromId(1654796346);
    }
    else if (autoC88B0451_val == 5) {
        lv_spawn_right = PointFromId(1654796346);
        lv_spawn_left = PointFromId(1375552357);
    }
    else if (autoC88B0451_val == 6) {
        lv_spawn_right = PointFromId(1375552357);
        lv_spawn_left = PointFromId(427204689);
    }
    else {
    }
    lv_spawn_middle = MidPoint(lv_spawn_left, lv_spawn_right);
    lv_target_middle = PointFromName(("Zerg Rally " + IntToString(lv_player_position)));
    if ((lv_player_position != 2) && (lv_player_position != 5)) {
        auto537E0BCC_val = lv_player_position;
        if (auto537E0BCC_val == 1) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(1304502023));
        }
        else if (auto537E0BCC_val == 3) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(427204689));
        }
        else if (auto537E0BCC_val == 4) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(1654796346));
        }
        else if (auto537E0BCC_val == 6) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(1375552357));
        }
        else {
        }
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Medivac", 0, lp_player, lv_spawn_middle);
    lv_mv = UnitLastCreated();
    UnitSetPropertyFixed(lv_mv, c_unitPropEnergyMax, 200.0);
    UnitSetPropertyFixed(lv_mv, c_unitPropEnergy, 200.0);
    UnitSetPropertyFixed(lv_mv, c_unitPropEnergyRegen, 2.0);
    UnitAbilityRemove(lv_mv, "TransferEnergyBattery");
    UnitBehaviorAdd(lv_mv, "MedivacTimedLife", lv_mv, 1);
    libNtve_gf_MakeUnitUncommandable(lv_mv, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank2", c_unitCreateIgnorePlacement, lp_player, lv_spawn_middle);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    if ((gf_is_3v3() == false)) {
        TechTreeUpgradeAddLevel(lp_player, "SiegeTankRange", 1);
        TechTreeUpgradeAddLevel(lp_player, "SiegeTankPlasmaShards", 1);
    }

    TechTreeUpgradeAddLevel(lp_player, "SiegeTankModulation", 1);
    UnitIssueOrder(lv_mv, OrderTargetingUnit(AbilityCommand("MedivacTransport", 0), UnitLastCreated()), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighDensityBattery", c_unitCreateIgnorePlacement, lp_player, lv_spawn_middle);
    UnitIssueOrder(lv_mv, OrderTargetingUnit(AbilityCommand("MedivacTransport", 0), UnitLastCreated()), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_mv, OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), lv_target_middle), c_orderQueueAddToEnd);
}

void gf_disable_unit_pickup (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitAbilityRemove(lp_unit, "MedivacTransport");
    UnitAbilityRemove(lp_unit, "WarpPrismTransport");
}

void gf_artanis_timed_event () {
    // Variable Declarations
    unit lv_portrait_unit;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoFC808D7A_g;
    int autoFC808D7A_u;
    unit autoFC808D7A_var;

    // Variable Initialization

    // Implementation
    if ((GameGetMissionTime() == 60.0)) {
        while ((lv_i <= 6)) {
            if ((gv_players[lv_i].lv_support_type == "Artanis")) {
                gf_command_artanis_support_for_player(lv_i);
            }

            lv_i += 1;
        }
    }

    if ((GameGetMissionTime() == 105.0)) {
        while ((lv_i <= 6)) {
            if ((gv_players[lv_i].lv_support_type == "Artanis")) {
                autoFC808D7A_g = gv_players[lv_i].lv_support_units;
                autoFC808D7A_u = UnitGroupCount(autoFC808D7A_g, c_unitCountAll);
                for (;; autoFC808D7A_u -= 1) {
                    autoFC808D7A_var = UnitGroupUnitFromEnd(autoFC808D7A_g, autoFC808D7A_u);
                    if (autoFC808D7A_var == null) { break; }
                    UnitRemove(autoFC808D7A_var);
                }
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Artanis", c_unitCreateIgnorePlacement, 0, PointFromId(304274518));
                lv_portrait_unit = UnitLastCreated();
                UnitGroupAdd(gv_transmission_units, lv_portrait_unit);
                TransmissionSendForPlayerSelect(PlayerGroupSingle(lv_i), TransmissionSourceFromUnit(lv_portrait_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/01F40F98"), StringExternal("Param/Value/309BF701"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
            }

            lv_i += 1;
        }
    }

    if ((GameGetMissionTime() == (15 * 60))) {
        while ((lv_i <= 6)) {
            if ((gv_players[lv_i].lv_support_type == "Artanis") && (gv_players[lv_i].lv_alive == true)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Italis", c_unitCreateIgnorePlacement, lv_i, PointFromName(("Zerg Rally " + IntToString(gv_players[lv_i].lv_position))));
            }

            lv_i += 1;
        }
    }

    if ((GameGetMissionTime() == (25 * 60))) {
        while ((lv_i <= 6)) {
            if ((gv_players[lv_i].lv_support_type == "Artanis") && (gv_players[lv_i].lv_alive == true)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Italis", c_unitCreateIgnorePlacement, lv_i, PointFromName(("Zerg Rally " + IntToString(gv_players[lv_i].lv_position))));
            }

            lv_i += 1;
        }
    }

}

void gf_create_artanis_support_forplayer (int lp_player) {
    // Variable Declarations
    int lv_player_position;
    point lv_spawn_left;
    point lv_spawn_right;
    point lv_spawn_middle;
    point lv_target_middle;
    int lv_i;
    int lv_j;
    unit lv_mv;

    // Automatic Variable Declarations
    int auto08011786_val;
    int autoF196F3FE_val;

    // Variable Initialization
    lv_player_position = gv_players[lp_player].lv_position;
    lv_i = 1;
    lv_j = 1;

    // Implementation
    auto08011786_val = lv_player_position;
    if (auto08011786_val == 1) {
        lv_spawn_right = PointFromId(1304502023);
        lv_spawn_left = PointFromId(1654796346);
    }
    else if (auto08011786_val == 2) {
        lv_spawn_right = PointFromId(427204689);
        lv_spawn_left = PointFromId(1304502023);
    }
    else if (auto08011786_val == 3) {
        lv_spawn_right = PointFromId(1375552357);
        lv_spawn_left = PointFromId(427204689);
    }
    else if (auto08011786_val == 4) {
        lv_spawn_right = PointFromId(1304502023);
        lv_spawn_left = PointFromId(1654796346);
    }
    else if (auto08011786_val == 5) {
        lv_spawn_right = PointFromId(1654796346);
        lv_spawn_left = PointFromId(1375552357);
    }
    else if (auto08011786_val == 6) {
        lv_spawn_right = PointFromId(1375552357);
        lv_spawn_left = PointFromId(427204689);
    }
    else {
    }
    lv_spawn_middle = MidPoint(lv_spawn_left, lv_spawn_right);
    lv_target_middle = libNtve_gf_PointOffsetTowardsPoint(MidPoint(PointFromName(("Zerg Flank Rally Right Pre " + IntToString(lv_player_position))), PointFromName(("Zerg Flank Rally Left Pre " + IntToString(lv_player_position)))), 16.0, PointFromName(("Zerg Rally " + IntToString(lv_player_position))));
    if ((lv_player_position != 2) && (lv_player_position != 5)) {
        autoF196F3FE_val = lv_player_position;
        if (autoF196F3FE_val == 1) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(1304502023));
        }
        else if (autoF196F3FE_val == 3) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(427204689));
        }
        else if (autoF196F3FE_val == 4) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(1654796346));
        }
        else if (autoF196F3FE_val == 6) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(1375552357));
        }
        else {
        }
    }

    while ((lv_j <= 3)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, lp_player, lv_spawn_middle);
        UnitGroupAdd(gv_players[lp_player].lv_support_units, UnitLastCreated());
        libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
        lv_mv = UnitLastCreated();
        lv_i = 1;
        while ((lv_i <= 4)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", c_unitCreateIgnorePlacement, lp_player, lv_spawn_middle);
            UnitGroupAdd(gv_players[lp_player].lv_support_units, UnitLastCreated());
            libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
            UnitIssueOrder(lv_mv, OrderTargetingUnit(AbilityCommand("WarpPrismTransport", 0), UnitLastCreated()), c_orderQueueAddToEnd);
            lv_i += 1;
        }
        UnitIssueOrder(lv_mv, OrderTargetingPoint(AbilityCommand("WarpPrismTransport", 2), lv_target_middle), c_orderQueueAddToEnd);
        lv_j += 1;
    }
}

void gf_command_artanis_support_for_player (int lp_player) {
    int init_i;

    // Variable Declarations
    int lv_player_position;
    unitgroup lv_spawners;
    unitgroup lv_zealots;
    unitgroup[5] lv_atkg;
    unitgroup lv_prisms;
    int lv_i;
    int lv_j;
    int lv_k;

    // Automatic Variable Declarations
    unitgroup auto4BD3A47C_g;
    int auto4BD3A47C_u;
    unit auto4BD3A47C_var;

    // Variable Initialization
    lv_player_position = gv_players[lp_player].lv_position;
    lv_spawners = UnitGroup(null, 7, RegionFromName(("spawner player zerg " + IntToString(lv_player_position))), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_zealots = gv_players[lp_player].lv_support_units;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_atkg[init_i] = UnitGroupEmpty();
    }
    lv_prisms = UnitGroupEmpty();
    lv_i = 1;
    lv_j = 1;
    lv_k = 1;

    // Implementation
    auto4BD3A47C_g = lv_zealots;
    auto4BD3A47C_u = UnitGroupCount(auto4BD3A47C_g, c_unitCountAll);
    for (;; auto4BD3A47C_u -= 1) {
        auto4BD3A47C_var = UnitGroupUnitFromEnd(auto4BD3A47C_g, auto4BD3A47C_u);
        if (auto4BD3A47C_var == null) { break; }
        if ((UnitGetType(auto4BD3A47C_var) == "Zealot")) {
            if (((lv_i == 4) || (lv_i == 7) || (lv_i == 10))) {
                lv_j += 1;
            }

            UnitGroupAdd(lv_atkg[lv_j], auto4BD3A47C_var);
            lv_i += 1;
        }
        else {
            UnitGroupAdd(lv_prisms, auto4BD3A47C_var);
        }
    }
    while ((lv_k <= 4)) {
        UnitGroupIssueOrder(lv_atkg[lv_k], OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupUnit(lv_spawners, lv_k)), c_orderQueueReplace);
        UnitGroupIssueOrder(lv_atkg[lv_k], OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupRandomUnit(lv_prisms, c_unitCountAlive))), c_orderQueueAddToEnd);
        lv_k += 1;
    }
}

void gf_create_cash_transporter (int lp_sender) {
    // Variable Declarations
    point lv_spawn_left;
    point lv_spawn_right;
    point lv_spawn_middle;
    point lv_target_middle;
    int lv_i;
    int lv_current_player_position;
    bool lv_send;

    // Automatic Variable Declarations
    int autoD5A88B1E_val;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        lv_send = false;
        lv_current_player_position = 0;
        if ((lv_i == lp_sender)) {
            lv_send = true;
        }
        else {
            if ((gv_players[lp_sender].lv_more_cash_drop_level >= 4) && (gv_players[lv_i].lv_alive == true)) {
                lv_send = true;
            }

        }
        if ((lv_send == true)) {
            lv_current_player_position = gv_players[lv_i].lv_position;
            autoD5A88B1E_val = lv_current_player_position;
            if (autoD5A88B1E_val == 1) {
                lv_spawn_right = PointFromId(1304502023);
                lv_spawn_left = PointFromId(1654796346);
            }
            else if (autoD5A88B1E_val == 2) {
                lv_spawn_right = PointFromId(427204689);
                lv_spawn_left = PointFromId(1304502023);
            }
            else if (autoD5A88B1E_val == 3) {
                lv_spawn_right = PointFromId(1375552357);
                lv_spawn_left = PointFromId(427204689);
            }
            else if (autoD5A88B1E_val == 4) {
                lv_spawn_right = PointFromId(1304502023);
                lv_spawn_left = PointFromId(1654796346);
            }
            else if (autoD5A88B1E_val == 5) {
                lv_spawn_right = PointFromId(1654796346);
                lv_spawn_left = PointFromId(1375552357);
            }
            else if (autoD5A88B1E_val == 6) {
                lv_spawn_right = PointFromId(1375552357);
                lv_spawn_left = PointFromId(427204689);
            }
            else {
            }
            lv_spawn_middle = MidPoint(lv_spawn_left, lv_spawn_right);
            lv_target_middle = PointFromName(("Zerg Rally " + IntToString(lv_current_player_position)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CashTransporter", 0, lp_sender, lv_spawn_middle);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_target_middle), c_orderQueueReplace);
            libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
        }

        lv_i += 1;
    }
}

void gf_run_cash_bonus_check () {
    // Variable Declarations
    int lv_i;
    fixed lv_game_time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;
    lv_game_time = GameGetMissionTime();

    // Implementation
    while ((lv_i <= 6)) {
        if ((gv_players[lv_i].lv_support_type == "Cash") && (gv_players[lv_i].lv_alive == true)) {
            if ((gv_cash_drops[lv_i][3] <= 0)) {
                gf_create_cash_transporter(lv_i);
                if ((gv_players[lv_i].lv_more_cash_drop_level >= 3)) {
                    gv_cash_drops[lv_i][3] += 2;
                }
                else {
                    gv_cash_drops[lv_i][3] += 3;
                }
            }
            else {
                gv_cash_drops[lv_i][3] -= 1;
            }
        }

        lv_i += 1;
    }
}

bool gf_player_is_chaos (int lp_player) {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((GameAttributePlayerValue("5", lp_player) == "0009") || (GameAttributePlayerValue("10", lp_player) == "0009") || (gv_players[lp_player].lv_support_type == "Army"))) {
        lv_r = true;
    }

    return lv_r;
}

int gf_get_player_blood (int lp_player) {
    // Variable Declarations
    int lv_r;
    unit lv_barracks;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_barracks = UnitGroupUnit(UnitGroup("Barracks2", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    lv_r = UnitBehaviorCount(lv_barracks, "BloodStacks");
    return lv_r;
}

void gf_Handle_blood_pickup (int lp_player, point lp_position, int lp_size) {
    // Variable Declarations
    region lv_region;
    unitgroup lv_group;
    unitgroup lv_group2;
    unit lv_unit;
    int lv_lost_hp;
    int lv_heal_value;
    unit lv_barracks;
    unit lv_lord;
    int lv_value;
    int lv_drop_heal_max;
    int lv_u_vital;
    int lv_diff;

    // Automatic Variable Declarations
    unitgroup auto979547B1_g;
    int auto979547B1_u;
    unit auto979547B1_var;

    // Variable Initialization
    lv_group = UnitGroupEmpty();
    lv_group2 = UnitGroupEmpty();
    lv_value = 2;
    lv_drop_heal_max = 15;

    // Implementation
    if ((lp_size == 1)) {
        lv_value = 10;
        lv_drop_heal_max = 75;
    }

    lv_region = RegionCircle(lp_position, 7.0);
    lv_group = UnitGroup("ChaosSpaceMarine", lp_player, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_group2 = UnitGroup("ChaosCultist", lp_player, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_group, lv_group2);
    lv_lord = UnitGroupUnit(UnitGroup("ChaosLord", lp_player, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    if ((lv_lord != null)) {
        UnitGroupAdd(lv_group, lv_lord);
    }

    auto979547B1_g = lv_group;
    auto979547B1_u = UnitGroupCount(auto979547B1_g, c_unitCountAll);
    for (;; auto979547B1_u -= 1) {
        auto979547B1_var = UnitGroupUnitFromEnd(auto979547B1_g, auto979547B1_u);
        if (auto979547B1_var == null) { break; }
        if ((UnitGetPropertyInt(auto979547B1_var, c_unitPropLifePercent, c_unitPropCurrent) == 100)) {
            UnitGroupRemove(lv_group, auto979547B1_var);
        }
        else {
            lv_u_vital = UnitGetPropertyInt(auto979547B1_var, c_unitPropLife, c_unitPropNormal);
            if ((UnitHasBehavior2(auto979547B1_var, "ConsumedBlood") == true)) {
                lv_u_vital += 25;
            }

            if ((TechTreeUpgradeCount(lp_player, "LotsofBlood", c_techCountCompleteOnly) == 1)) {
                lv_u_vital += 30;
            }

            if ((UnitGetType(auto979547B1_var) == "ChaosLord")) {
                lv_u_vital += (gf_get_player_blood(lp_player) * 2);
            }

            if ((((lv_value == 1) && ((lv_u_vital - UnitGetPropertyInt(auto979547B1_var, c_unitPropLife, c_unitPropCurrent)) < lv_drop_heal_max)) || ((lv_value == 5) && ((lv_u_vital - UnitGetPropertyInt(auto979547B1_var, c_unitPropLife, c_unitPropCurrent)) < 50)))) {
                UnitGroupRemove(lv_group, auto979547B1_var);
            }

        }
    }
    if ((UnitGroupCount(lv_group, c_unitCountAlive) > 0)) {
        lv_unit = UnitGroupClosestToPoint(lv_group, lp_position);
        lv_u_vital = UnitGetPropertyInt(lv_unit, c_unitPropLife, c_unitPropNormal);
        if ((UnitHasBehavior2(lv_unit, "ConsumedBlood") == true)) {
            lv_u_vital += 25;
        }

        if ((TechTreeUpgradeCount(lp_player, "LotsofBlood", c_techCountCompleteOnly) == 1)) {
            lv_u_vital += 30;
        }

        if ((UnitGetType(lv_unit) == "ChaosLord")) {
            lv_u_vital += (gf_get_player_blood(lp_player) * 2);
        }

        lv_lost_hp = (lv_u_vital - UnitGetPropertyInt(lv_unit, c_unitPropLife, c_unitPropCurrent));
        if ((lv_lost_hp >= lv_drop_heal_max)) {
            lv_heal_value = lv_drop_heal_max;
        }
        else {
            lv_heal_value = lv_lost_hp;
        }
        gf_heal_and_stack(lv_unit, lv_heal_value);
    }
    else {
        lv_barracks = UnitGroupUnit(UnitGroup("Barracks2", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
        if ((UnitBehaviorCount(lv_barracks, "BloodStacks") < 1000)) {
            UnitBehaviorAdd(lv_barracks, "BloodStacks", lv_barracks, lv_value);
            if ((UnitBehaviorCount(lv_barracks, "BloodStacks") > 1000)) {
                lv_diff = (gf_get_player_blood(lp_player) - 1000);
                UnitBehaviorRemove(lv_barracks, "BloodStacks", lv_diff);
            }

            if ((lv_lord != null)) {
                UnitBehaviorAdd(lv_lord, "ChaosLordStacks", lv_lord, lv_value);
                if ((lv_diff > 0)) {
                    UnitBehaviorRemove(lv_lord, "ChaosLordStacks", lv_diff);
                }

            }

        }

    }
}

void gf_update_blood_panel (int lp_player) {
    // Variable Declarations
    int lv_blood;
    text lv_indicator_string_text;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_blood = gf_get_player_blood(lp_player);
    if ((TechTreeUpgradeCount(lp_player, "LotsofBlood", c_techCountCompleteOnly) == 1)) {
        if ((lv_blood < 100)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "LotsofBlood", 0);
        }

    }
    else {
        if ((lv_blood >= 100)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "LotsofBlood", 1);
        }

    }
    lv_indicator_string_text = (IntToText(lv_blood) + (StringExternal("Param/Value/D7EE7D5C") + StringExternal("Param/Value/91B741E3")));
    libNtve_gf_SetDialogItemText(gv_blood_dialog_item[lp_player], lv_indicator_string_text, PlayerGroupSingle(lp_player));
}

void gf_heal_and_stack (unit lp_unit, int lp_heal_value) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetPropertyFixed(lp_unit, c_unitPropLife, (UnitGetPropertyInt(lp_unit, c_unitPropLife, c_unitPropCurrent) + lp_heal_value));
    if ((lp_heal_value > 15)) {
        if ((UnitGetType(lp_unit) == "ChaosSpaceMarine")) {
            if ((UnitHasBehavior2(lp_unit, "ConsumedBlood") == false)) {
                UnitBehaviorAdd(lp_unit, "ConsumedBlood", lp_unit, 1);
            }

            if ((UnitHasBehavior2(lp_unit, "ConsumedBlood2") == false)) {
                UnitBehaviorAdd(lp_unit, "ConsumedBlood2", lp_unit, 1);
            }

            if ((UnitHasBehavior2(lp_unit, "ConsumedBlood3") == false)) {
                UnitBehaviorAdd(lp_unit, "ConsumedBlood3", lp_unit, 1);
            }

        }

    }
    else {
        if ((UnitGetType(lp_unit) == "ChaosSpaceMarine")) {
            if ((UnitHasBehavior2(lp_unit, "ConsumedBlood") == false)) {
                UnitBehaviorAdd(lp_unit, "ConsumedBlood", lp_unit, 1);
            }
            else {
                if ((UnitHasBehavior2(lp_unit, "ConsumedBlood2") == false)) {
                    UnitBehaviorAdd(lp_unit, "ConsumedBlood2", lp_unit, 1);
                }
                else {
                    if ((UnitHasBehavior2(lp_unit, "ConsumedBlood3") == false)) {
                        UnitBehaviorAdd(lp_unit, "ConsumedBlood3", lp_unit, 1);
                    }

                }
            }
        }

    }
}

void gf_make_player_genetron (int lp_player) {
    // Variable Declarations
    point lv_p;
    point lv_pg;
    int lv_j;

    // Automatic Variable Declarations
    unitgroup autoCB32F4E1_g;
    int autoCB32F4E1_u;
    unit autoCB32F4E1_var;
    unitgroup auto9719E789_g;
    int auto9719E789_u;
    unit auto9719E789_var;
    unitgroup autoC5DD49A6_g;
    int autoC5DD49A6_u;
    unit autoC5DD49A6_var;
    unitgroup auto33F7AD77_g;
    int auto33F7AD77_u;
    unit auto33F7AD77_var;
    unitgroup auto986DE394_g;
    int auto986DE394_u;
    unit auto986DE394_var;
    unitgroup auto5D51EC76_g;
    int auto5D51EC76_u;
    unit auto5D51EC76_var;
    unitgroup auto62700E6B_g;
    int auto62700E6B_u;
    unit auto62700E6B_var;

    // Variable Initialization
    lv_j = 1;

    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("CommandCenterTrain2", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CommandCenterTrain2", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CommandCenterTrain2", 2), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("TrainTradersCasual", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("TrainTraders", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("TrainTradersCasual", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("TrainTraders", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CommandCenterTrain2", 4), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CommandCenterTrain2", 11), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProcessingCoreTrain", 1), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CoreSystemRecharge", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("GenetronResearchEdit", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("GenetronResearchEdit", 1), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("GenetronTrainEdit", 5), true);
    autoCB32F4E1_g = UnitGroup("CommandCenter2", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCB32F4E1_u = UnitGroupCount(autoCB32F4E1_g, c_unitCountAll);
    for (;; autoCB32F4E1_u -= 1) {
        autoCB32F4E1_var = UnitGroupUnitFromEnd(autoCB32F4E1_g, autoCB32F4E1_u);
        if (autoCB32F4E1_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(autoCB32F4E1_var), "ModelSwap ProcessingCore");
        UnitBehaviorAdd(autoCB32F4E1_var, "GenetronEnergyStateNotFull", autoCB32F4E1_var, 1);
        UnitBehaviorAdd(autoCB32F4E1_var, "GenetronPowerSupplyTracker", autoCB32F4E1_var, 1);
        UnitBehaviorAdd(autoCB32F4E1_var, "TrackAndMirrorGenetronPowerSupply", autoCB32F4E1_var, 1);
        UnitBehaviorAdd(autoCB32F4E1_var, "ProcessingCorePower", autoCB32F4E1_var, 1);
        UnitAbilityAdd(autoCB32F4E1_var, "Scion_DisplayCooldownDummy");
    }
    auto9719E789_g = UnitGroup("Generator", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9719E789_u = UnitGroupCount(auto9719E789_g, c_unitCountAll);
    for (;; auto9719E789_u -= 1) {
        auto9719E789_var = UnitGroupUnitFromEnd(auto9719E789_g, auto9719E789_u);
        if (auto9719E789_var == null) { break; }
        UnitRemove(auto9719E789_var);
    }
    autoC5DD49A6_g = UnitGroup("TerranGate", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC5DD49A6_u = UnitGroupCount(autoC5DD49A6_g, c_unitCountAll);
    for (;; autoC5DD49A6_u -= 1) {
        autoC5DD49A6_var = UnitGroupUnitFromEnd(autoC5DD49A6_g, autoC5DD49A6_u);
        if (autoC5DD49A6_var == null) { break; }
        lv_p = UnitGetPosition(autoC5DD49A6_var);
        UnitRemove(autoC5DD49A6_var);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Repulsor", 0, lp_player, lv_p);
    }
    auto33F7AD77_g = UnitGroup("Barracks2", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto33F7AD77_u = UnitGroupCount(auto33F7AD77_g, c_unitCountAll);
    for (;; auto33F7AD77_u -= 1) {
        auto33F7AD77_var = UnitGroupUnitFromEnd(auto33F7AD77_g, auto33F7AD77_u);
        if (auto33F7AD77_var == null) { break; }
        lv_p = UnitGetPosition(auto33F7AD77_var);
        UnitRemove(auto33F7AD77_var);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Manufacturer", 0, lp_player, lv_p);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    }
    auto986DE394_g = UnitGroup("Battery", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto986DE394_u = UnitGroupCount(auto986DE394_g, c_unitCountAll);
    for (;; auto986DE394_u -= 1) {
        auto986DE394_var = UnitGroupUnitFromEnd(auto986DE394_g, auto986DE394_u);
        if (auto986DE394_var == null) { break; }
        UnitRemove(auto986DE394_var);
    }
    auto5D51EC76_g = UnitGroup("Marine2", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5D51EC76_u = UnitGroupCount(auto5D51EC76_g, c_unitCountAll);
    for (;; auto5D51EC76_u -= 1) {
        auto5D51EC76_var = UnitGroupUnitFromEnd(auto5D51EC76_g, auto5D51EC76_u);
        if (auto5D51EC76_var == null) { break; }
        lv_p = UnitGetPosition(auto5D51EC76_var);
        UnitRemove(auto5D51EC76_var);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spitfire", 0, lp_player, lv_p);
    }
    auto62700E6B_g = UnitGroup("Builder", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto62700E6B_u = UnitGroupCount(auto62700E6B_g, c_unitCountAll);
    for (;; auto62700E6B_u -= 1) {
        auto62700E6B_var = UnitGroupUnitFromEnd(auto62700E6B_g, auto62700E6B_u);
        if (auto62700E6B_var == null) { break; }
        lv_p = UnitGetPosition(auto62700E6B_var);
        UnitRemove(auto62700E6B_var);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ACR", 0, lp_player, lv_p);
    }
}

void gf_marauder_timed_event () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameGetMissionTime() == 60.0)) {
        while ((lv_i <= 6)) {
            if ((gv_players[lv_i].lv_support_type == "Marauder")) {
                gf_command_marauder_support_for_player(lv_i);
            }

            lv_i += 1;
        }
    }

}

void gf_create_marauder_support_forplayer (int lp_player) {
    // Variable Declarations
    int lv_player_position;
    point lv_spawn_left;
    point lv_spawn_right;
    point lv_spawn_middle;
    point lv_target_middle;
    int lv_i;
    int lv_j;
    unit lv_mv;

    // Automatic Variable Declarations
    int autoF0E1AE5D_val;
    int auto00041DFA_val;

    // Variable Initialization
    lv_player_position = gv_players[lp_player].lv_position;
    lv_i = 1;
    lv_j = 1;

    // Implementation
    autoF0E1AE5D_val = lv_player_position;
    if (autoF0E1AE5D_val == 1) {
        lv_spawn_right = PointFromId(1304502023);
        lv_spawn_left = PointFromId(1654796346);
    }
    else if (autoF0E1AE5D_val == 2) {
        lv_spawn_right = PointFromId(427204689);
        lv_spawn_left = PointFromId(1304502023);
    }
    else if (autoF0E1AE5D_val == 3) {
        lv_spawn_right = PointFromId(1375552357);
        lv_spawn_left = PointFromId(427204689);
    }
    else if (autoF0E1AE5D_val == 4) {
        lv_spawn_right = PointFromId(1304502023);
        lv_spawn_left = PointFromId(1654796346);
    }
    else if (autoF0E1AE5D_val == 5) {
        lv_spawn_right = PointFromId(1654796346);
        lv_spawn_left = PointFromId(1375552357);
    }
    else if (autoF0E1AE5D_val == 6) {
        lv_spawn_right = PointFromId(1375552357);
        lv_spawn_left = PointFromId(427204689);
    }
    else {
    }
    lv_spawn_middle = MidPoint(lv_spawn_left, lv_spawn_right);
    lv_target_middle = libNtve_gf_PointOffsetTowardsPoint(MidPoint(PointFromName(("Zerg Flank Rally Right Pre " + IntToString(lv_player_position))), PointFromName(("Zerg Flank Rally Left Pre " + IntToString(lv_player_position)))), 16.0, PointFromName(("Zerg Rally " + IntToString(lv_player_position))));
    if ((lv_player_position != 2) && (lv_player_position != 5)) {
        auto00041DFA_val = lv_player_position;
        if (auto00041DFA_val == 1) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(1304502023));
        }
        else if (auto00041DFA_val == 3) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(427204689));
        }
        else if (auto00041DFA_val == 4) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(1654796346));
        }
        else if (auto00041DFA_val == 6) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(1375552357));
        }
        else {
        }
    }

    while ((lv_j <= 4)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Medivac", 0, lp_player, lv_spawn_middle);
        UnitGroupAdd(gv_players[lp_player].lv_support_units, UnitLastCreated());
        libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
        lv_mv = UnitLastCreated();
        lv_i = 1;
        while ((lv_i <= 8)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", c_unitCreateIgnorePlacement, lp_player, lv_spawn_middle);
            UnitGroupAdd(gv_players[lp_player].lv_support_units, UnitLastCreated());
            libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
            UnitIssueOrder(lv_mv, OrderTargetingUnit(AbilityCommand("WarpPrismTransport", 0), UnitLastCreated()), c_orderQueueAddToEnd);
            lv_i += 1;
        }
        UnitIssueOrder(lv_mv, OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), lv_target_middle), c_orderQueueAddToEnd);
        lv_j += 1;
    }
}

void gf_command_marauder_support_for_player (int lp_player) {
    // Variable Declarations
    int lv_player_position;
    unitgroup lv_marauders;
    point lv_p;

    // Automatic Variable Declarations
    unitgroup auto74FCEF93_g;
    int auto74FCEF93_u;
    unit auto74FCEF93_var;

    // Variable Initialization
    lv_player_position = gv_players[lp_player].lv_position;
    lv_marauders = gv_players[lp_player].lv_support_units;

    // Implementation
    if (((lv_player_position == 1) || (lv_player_position == 2) || (lv_player_position == 3))) {
        lv_p = PointFromId(1352576071);
    }
    else {
        lv_p = PointFromId(1723757530);
    }
    auto74FCEF93_g = lv_marauders;
    auto74FCEF93_u = UnitGroupCount(auto74FCEF93_g, c_unitCountAll);
    for (;; auto74FCEF93_u -= 1) {
        auto74FCEF93_var = UnitGroupUnitFromEnd(auto74FCEF93_g, auto74FCEF93_u);
        if (auto74FCEF93_var == null) { break; }
        if ((UnitGetType(auto74FCEF93_var) == "Medivac")) {
            UnitRemove(auto74FCEF93_var);
        }

    }
    UnitGroupIssueOrder(lv_marauders, OrderTargetingPoint(AbilityCommand("attack", 0), lv_p), c_orderQueueReplace);
}

bool gf_player_selected_prebuilt (int lp_player) {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((GameAttributePlayerValue("5", lp_player) == "0013") || (GameAttributePlayerValue("10", lp_player) == "0013") || (gv_players[lp_player].lv_support_type == "Prebuilt"))) {
        lv_r = true;
    }

    return lv_r;
}

void gf_Apply_or_remove_base (int lp_player) {
    // Variable Declarations
    unitgroup lv_ug;
    unitgroup lv_tug;
    point[51] lv_ffparr;
    int lv_ffparr_cnt;
    point[51] lv_cfparr;
    int lv_cfparr_cnt;
    point[501] lv_wparr;
    int lv_wparr_cnt;
    point[501] lv_agparr;
    int lv_agparr_cnt;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoF7F77DD2_g;
    int autoF7F77DD2_u;
    unit autoF7F77DD2_var;
    unitgroup auto34568FAA_g;
    int auto34568FAA_u;
    unit auto34568FAA_var;
    unitgroup autoB36E851C_g;
    int autoB36E851C_u;
    unit autoB36E851C_var;
    unitgroup auto7D1F62D0_g;
    int auto7D1F62D0_u;
    unit auto7D1F62D0_var;
    unitgroup auto84ED5014_g;
    int auto84ED5014_u;
    unit auto84ED5014_var;
    unitgroup auto9DDA0DBC_g;
    int auto9DDA0DBC_u;
    unit auto9DDA0DBC_var;
    unitgroup autoB93E2363_g;
    int autoB93E2363_u;
    unit autoB93E2363_var;
    unitgroup autoB09AE083_g;
    int autoB09AE083_u;
    unit autoB09AE083_var;
    unitgroup auto67133A14_g;
    int auto67133A14_u;
    unit auto67133A14_var;
    unitgroup autoCCAFDBC2_g;
    int autoCCAFDBC2_u;
    unit autoCCAFDBC2_var;
    unitgroup auto511ED979_g;
    int auto511ED979_u;
    unit auto511ED979_var;

    // Variable Initialization
    lv_ug = UnitGroupEmpty();
    lv_tug = UnitGroupEmpty();
    lv_i = 1;

    // Implementation
    lv_ug = UnitGroup("Wall2", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF7F77DD2_g = lv_ug;
    autoF7F77DD2_u = UnitGroupCount(autoF7F77DD2_g, c_unitCountAll);
    for (;; autoF7F77DD2_u -= 1) {
        autoF7F77DD2_var = UnitGroupUnitFromEnd(autoF7F77DD2_g, autoF7F77DD2_u);
        if (autoF7F77DD2_var == null) { break; }
        if ((gf_get_closest_position(UnitGetPosition(autoF7F77DD2_var)) == gv_players[lp_player].lv_position)) {
            UnitGroupAdd(lv_tug, autoF7F77DD2_var);
        }

    }
    lv_ug = UnitGroup("TerranAdvancedGate", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto34568FAA_g = lv_ug;
    auto34568FAA_u = UnitGroupCount(auto34568FAA_g, c_unitCountAll);
    for (;; auto34568FAA_u -= 1) {
        auto34568FAA_var = UnitGroupUnitFromEnd(auto34568FAA_g, auto34568FAA_u);
        if (auto34568FAA_var == null) { break; }
        if ((gf_get_closest_position(UnitGetPosition(auto34568FAA_var)) == gv_players[lp_player].lv_position)) {
            UnitGroupAdd(lv_tug, auto34568FAA_var);
        }

    }
    lv_ug = UnitGroup("FruitFarm", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB36E851C_g = lv_ug;
    autoB36E851C_u = UnitGroupCount(autoB36E851C_g, c_unitCountAll);
    for (;; autoB36E851C_u -= 1) {
        autoB36E851C_var = UnitGroupUnitFromEnd(autoB36E851C_g, autoB36E851C_u);
        if (autoB36E851C_var == null) { break; }
        if ((gf_get_closest_position(UnitGetPosition(autoB36E851C_var)) == gv_players[lp_player].lv_position)) {
            UnitGroupAdd(lv_tug, autoB36E851C_var);
        }

    }
    lv_ug = UnitGroup("ConstructionYard", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7D1F62D0_g = lv_ug;
    auto7D1F62D0_u = UnitGroupCount(auto7D1F62D0_g, c_unitCountAll);
    for (;; auto7D1F62D0_u -= 1) {
        auto7D1F62D0_var = UnitGroupUnitFromEnd(auto7D1F62D0_g, auto7D1F62D0_u);
        if (auto7D1F62D0_var == null) { break; }
        if ((gf_get_closest_position(UnitGetPosition(auto7D1F62D0_var)) == gv_players[lp_player].lv_position)) {
            UnitGroupAdd(lv_tug, auto7D1F62D0_var);
        }

    }
    lv_ug = UnitGroup("Armory2", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto84ED5014_g = lv_ug;
    auto84ED5014_u = UnitGroupCount(auto84ED5014_g, c_unitCountAll);
    for (;; auto84ED5014_u -= 1) {
        auto84ED5014_var = UnitGroupUnitFromEnd(auto84ED5014_g, auto84ED5014_u);
        if (auto84ED5014_var == null) { break; }
        if ((gf_get_closest_position(UnitGetPosition(auto84ED5014_var)) == gv_players[lp_player].lv_position)) {
            UnitGroupAdd(lv_tug, auto84ED5014_var);
        }

    }
    lv_ug = UnitGroup("TechLab3", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9DDA0DBC_g = lv_ug;
    auto9DDA0DBC_u = UnitGroupCount(auto9DDA0DBC_g, c_unitCountAll);
    for (;; auto9DDA0DBC_u -= 1) {
        auto9DDA0DBC_var = UnitGroupUnitFromEnd(auto9DDA0DBC_g, auto9DDA0DBC_u);
        if (auto9DDA0DBC_var == null) { break; }
        if ((gf_get_closest_position(UnitGetPosition(auto9DDA0DBC_var)) == gv_players[lp_player].lv_position)) {
            UnitGroupAdd(lv_tug, auto9DDA0DBC_var);
        }

    }
    lv_ug = UnitGroup("CowFarm", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB93E2363_g = lv_ug;
    autoB93E2363_u = UnitGroupCount(autoB93E2363_g, c_unitCountAll);
    for (;; autoB93E2363_u -= 1) {
        autoB93E2363_var = UnitGroupUnitFromEnd(autoB93E2363_g, autoB93E2363_u);
        if (autoB93E2363_var == null) { break; }
        if ((gf_get_closest_position(UnitGetPosition(autoB93E2363_var)) == gv_players[lp_player].lv_position)) {
            UnitGroupAdd(lv_tug, autoB93E2363_var);
        }

    }
    lv_ug = UnitGroup("PowerPylon", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB09AE083_g = lv_ug;
    autoB09AE083_u = UnitGroupCount(autoB09AE083_g, c_unitCountAll);
    for (;; autoB09AE083_u -= 1) {
        autoB09AE083_var = UnitGroupUnitFromEnd(autoB09AE083_g, autoB09AE083_u);
        if (autoB09AE083_var == null) { break; }
        if ((gf_get_closest_position(UnitGetPosition(autoB09AE083_var)) == gv_players[lp_player].lv_position)) {
            UnitGroupAdd(lv_tug, autoB09AE083_var);
        }

    }
    lv_ug = UnitGroup("Defender", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto67133A14_g = lv_ug;
    auto67133A14_u = UnitGroupCount(auto67133A14_g, c_unitCountAll);
    for (;; auto67133A14_u -= 1) {
        auto67133A14_var = UnitGroupUnitFromEnd(auto67133A14_g, auto67133A14_u);
        if (auto67133A14_var == null) { break; }
        if ((gf_get_closest_position(UnitGetPosition(auto67133A14_var)) == gv_players[lp_player].lv_position)) {
            UnitGroupAdd(lv_tug, auto67133A14_var);
        }

    }
    if ((GameAttributeGameValue("1") != "0002") && ((gf_player_selected_prebuilt(lp_player) == true) || (gv_players[lp_player].lv_games < 5))) {
        autoCCAFDBC2_g = lv_tug;
        autoCCAFDBC2_u = UnitGroupCount(autoCCAFDBC2_g, c_unitCountAll);
        for (;; autoCCAFDBC2_u -= 1) {
            autoCCAFDBC2_var = UnitGroupUnitFromEnd(autoCCAFDBC2_g, autoCCAFDBC2_u);
            if (autoCCAFDBC2_var == null) { break; }
            UnitSetOwner(autoCCAFDBC2_var, lp_player, true);
            if ((UnitGetType(autoCCAFDBC2_var) == "FruitFarm")) {
                lv_ffparr_cnt = (lv_ffparr_cnt + 1);
                lv_ffparr[lv_ffparr_cnt] = UnitGetPosition(autoCCAFDBC2_var);
                UnitRemove(autoCCAFDBC2_var);
            }

            if ((UnitGetType(autoCCAFDBC2_var) == "CowFarm")) {
                lv_cfparr_cnt = (lv_cfparr_cnt + 1);
                lv_cfparr[lv_cfparr_cnt] = UnitGetPosition(autoCCAFDBC2_var);
                UnitRemove(autoCCAFDBC2_var);
            }

            if ((UnitGetType(autoCCAFDBC2_var) == "Wall2")) {
                lv_wparr_cnt = (lv_wparr_cnt + 1);
                lv_wparr[lv_wparr_cnt] = UnitGetPosition(autoCCAFDBC2_var);
                UnitRemove(autoCCAFDBC2_var);
            }

            if ((UnitGetType(autoCCAFDBC2_var) == "TerranAdvancedGate")) {
                lv_agparr_cnt = (lv_agparr_cnt + 1);
                lv_agparr[lv_agparr_cnt] = UnitGetPosition(autoCCAFDBC2_var);
                UnitRemove(autoCCAFDBC2_var);
            }

            if ((UnitGetType(autoCCAFDBC2_var) == "ConstructionYard")) {
                UnitBehaviorAdd(autoCCAFDBC2_var, "CanExtractGas", autoCCAFDBC2_var, 1);
            }

            if ((gf_is_3v3() == true) && ((UnitGetType(autoCCAFDBC2_var) == "Defender") || (UnitGetType(autoCCAFDBC2_var) == "Armory2") || (UnitGetType(autoCCAFDBC2_var) == "TechLab3") || (UnitGetType(autoCCAFDBC2_var) == "ConstructionYard"))) {
                UnitRemove(autoCCAFDBC2_var);
            }

        }
        while ((lv_i <= lv_ffparr_cnt)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FruitFarm", 0, lp_player, lv_ffparr[lv_i]);
            lv_i = (lv_i + 1);
        }
        lv_i = 1;
        while ((lv_i <= lv_cfparr_cnt)) {
            lv_i = (lv_i + 1);
        }
        lv_i = 1;
        while ((lv_i <= lv_wparr_cnt)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Wall2", 0, lp_player, lv_wparr[lv_i]);
            lv_i = (lv_i + 1);
        }
        lv_i = 1;
        while ((lv_i <= lv_agparr_cnt)) {
            if ((gf_is_3v3() == false)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranAdvancedGate", 0, lp_player, lv_agparr[lv_i]);
                UnitBehaviorAdd(UnitLastCreated(), "Automated", UnitLastCreated(), 1);
            }

            lv_i = (lv_i + 1);
        }
    }
    else {
        auto511ED979_g = lv_tug;
        auto511ED979_u = UnitGroupCount(auto511ED979_g, c_unitCountAll);
        for (;; auto511ED979_u -= 1) {
            auto511ED979_var = UnitGroupUnitFromEnd(auto511ED979_g, auto511ED979_u);
            if (auto511ED979_var == null) { break; }
            UnitRemove(auto511ED979_var);
        }
    }
}

void gf_clean_bases () {
    // Variable Declarations
    unitgroup lv_ug;
    unitgroup lv_tug;

    // Automatic Variable Declarations
    unitgroup auto2241C8FB_g;
    int auto2241C8FB_u;
    unit auto2241C8FB_var;
    unitgroup autoE8B01293_g;
    int autoE8B01293_u;
    unit autoE8B01293_var;
    unitgroup auto72D6D290_g;
    int auto72D6D290_u;
    unit auto72D6D290_var;
    unitgroup autoADE019D7_g;
    int autoADE019D7_u;
    unit autoADE019D7_var;
    unitgroup auto8ABF13BE_g;
    int auto8ABF13BE_u;
    unit auto8ABF13BE_var;
    unitgroup auto0FB59699_g;
    int auto0FB59699_u;
    unit auto0FB59699_var;
    unitgroup autoFB1F5D19_g;
    int autoFB1F5D19_u;
    unit autoFB1F5D19_var;
    unitgroup auto68C167DA_g;
    int auto68C167DA_u;
    unit auto68C167DA_var;
    unitgroup auto6BF0462F_g;
    int auto6BF0462F_u;
    unit auto6BF0462F_var;
    unitgroup auto23EFCBC2_g;
    int auto23EFCBC2_u;
    unit auto23EFCBC2_var;
    unitgroup autoDADFF07B_g;
    int autoDADFF07B_u;
    unit autoDADFF07B_var;

    // Variable Initialization
    lv_ug = UnitGroupEmpty();
    lv_tug = UnitGroupEmpty();

    // Implementation
    lv_ug = UnitGroup("Wall2", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2241C8FB_g = lv_ug;
    auto2241C8FB_u = UnitGroupCount(auto2241C8FB_g, c_unitCountAll);
    for (;; auto2241C8FB_u -= 1) {
        auto2241C8FB_var = UnitGroupUnitFromEnd(auto2241C8FB_g, auto2241C8FB_u);
        if (auto2241C8FB_var == null) { break; }
        if ((gv_players[gf_get_player_at_position(gf_get_closest_position(UnitGetPosition(auto2241C8FB_var)))].lv_alive == false)) {
            UnitGroupAdd(lv_tug, auto2241C8FB_var);
        }

    }
    lv_ug = UnitGroup("TerranAdvancedGate", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE8B01293_g = lv_ug;
    autoE8B01293_u = UnitGroupCount(autoE8B01293_g, c_unitCountAll);
    for (;; autoE8B01293_u -= 1) {
        autoE8B01293_var = UnitGroupUnitFromEnd(autoE8B01293_g, autoE8B01293_u);
        if (autoE8B01293_var == null) { break; }
        if ((gv_players[gf_get_player_at_position(gf_get_closest_position(UnitGetPosition(autoE8B01293_var)))].lv_alive == false)) {
            UnitGroupAdd(lv_tug, autoE8B01293_var);
        }

    }
    lv_ug = UnitGroup("FruitFarm", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto72D6D290_g = lv_ug;
    auto72D6D290_u = UnitGroupCount(auto72D6D290_g, c_unitCountAll);
    for (;; auto72D6D290_u -= 1) {
        auto72D6D290_var = UnitGroupUnitFromEnd(auto72D6D290_g, auto72D6D290_u);
        if (auto72D6D290_var == null) { break; }
        if ((gv_players[gf_get_player_at_position(gf_get_closest_position(UnitGetPosition(auto72D6D290_var)))].lv_alive == false)) {
            UnitGroupAdd(lv_tug, auto72D6D290_var);
        }

    }
    lv_ug = UnitGroup("ConstructionYard", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoADE019D7_g = lv_ug;
    autoADE019D7_u = UnitGroupCount(autoADE019D7_g, c_unitCountAll);
    for (;; autoADE019D7_u -= 1) {
        autoADE019D7_var = UnitGroupUnitFromEnd(autoADE019D7_g, autoADE019D7_u);
        if (autoADE019D7_var == null) { break; }
        if ((gv_players[gf_get_player_at_position(gf_get_closest_position(UnitGetPosition(autoADE019D7_var)))].lv_alive == false)) {
            UnitGroupAdd(lv_tug, autoADE019D7_var);
        }

    }
    lv_ug = UnitGroup("Armory2", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8ABF13BE_g = lv_ug;
    auto8ABF13BE_u = UnitGroupCount(auto8ABF13BE_g, c_unitCountAll);
    for (;; auto8ABF13BE_u -= 1) {
        auto8ABF13BE_var = UnitGroupUnitFromEnd(auto8ABF13BE_g, auto8ABF13BE_u);
        if (auto8ABF13BE_var == null) { break; }
        if ((gv_players[gf_get_player_at_position(gf_get_closest_position(UnitGetPosition(auto8ABF13BE_var)))].lv_alive == false)) {
            UnitGroupAdd(lv_tug, auto8ABF13BE_var);
        }

    }
    lv_ug = UnitGroup("TechLab3", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0FB59699_g = lv_ug;
    auto0FB59699_u = UnitGroupCount(auto0FB59699_g, c_unitCountAll);
    for (;; auto0FB59699_u -= 1) {
        auto0FB59699_var = UnitGroupUnitFromEnd(auto0FB59699_g, auto0FB59699_u);
        if (auto0FB59699_var == null) { break; }
        if ((gv_players[gf_get_player_at_position(gf_get_closest_position(UnitGetPosition(auto0FB59699_var)))].lv_alive == false)) {
            UnitGroupAdd(lv_tug, auto0FB59699_var);
        }

    }
    lv_ug = UnitGroup("CowFarm", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFB1F5D19_g = lv_ug;
    autoFB1F5D19_u = UnitGroupCount(autoFB1F5D19_g, c_unitCountAll);
    for (;; autoFB1F5D19_u -= 1) {
        autoFB1F5D19_var = UnitGroupUnitFromEnd(autoFB1F5D19_g, autoFB1F5D19_u);
        if (autoFB1F5D19_var == null) { break; }
        if ((gv_players[gf_get_player_at_position(gf_get_closest_position(UnitGetPosition(autoFB1F5D19_var)))].lv_alive == false)) {
            UnitGroupAdd(lv_tug, autoFB1F5D19_var);
        }

    }
    lv_ug = UnitGroup("PowerPylon", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto68C167DA_g = lv_ug;
    auto68C167DA_u = UnitGroupCount(auto68C167DA_g, c_unitCountAll);
    for (;; auto68C167DA_u -= 1) {
        auto68C167DA_var = UnitGroupUnitFromEnd(auto68C167DA_g, auto68C167DA_u);
        if (auto68C167DA_var == null) { break; }
        if ((gv_players[gf_get_player_at_position(gf_get_closest_position(UnitGetPosition(auto68C167DA_var)))].lv_alive == false)) {
            UnitGroupAdd(lv_tug, auto68C167DA_var);
        }

    }
    lv_ug = UnitGroup("Defender", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6BF0462F_g = lv_ug;
    auto6BF0462F_u = UnitGroupCount(auto6BF0462F_g, c_unitCountAll);
    for (;; auto6BF0462F_u -= 1) {
        auto6BF0462F_var = UnitGroupUnitFromEnd(auto6BF0462F_g, auto6BF0462F_u);
        if (auto6BF0462F_var == null) { break; }
        if ((gv_players[gf_get_player_at_position(gf_get_closest_position(UnitGetPosition(auto6BF0462F_var)))].lv_alive == false)) {
            UnitGroupAdd(lv_tug, auto6BF0462F_var);
        }

    }
    lv_ug = UnitGroup("Fruit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto23EFCBC2_g = lv_ug;
    auto23EFCBC2_u = UnitGroupCount(auto23EFCBC2_g, c_unitCountAll);
    for (;; auto23EFCBC2_u -= 1) {
        auto23EFCBC2_var = UnitGroupUnitFromEnd(auto23EFCBC2_g, auto23EFCBC2_u);
        if (auto23EFCBC2_var == null) { break; }
        UnitGroupAdd(lv_tug, auto23EFCBC2_var);
    }
    autoDADFF07B_g = lv_tug;
    autoDADFF07B_u = UnitGroupCount(autoDADFF07B_g, c_unitCountAll);
    for (;; autoDADFF07B_u -= 1) {
        autoDADFF07B_var = UnitGroupUnitFromEnd(autoDADFF07B_g, autoDADFF07B_u);
        if (autoDADFF07B_var == null) { break; }
        UnitRemove(autoDADFF07B_var);
    }
}

void gf_create_probius_support_forplayer (int lp_player) {
    // Variable Declarations
    int lv_player_position;
    point lv_target_middle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player_position = gv_players[lp_player].lv_position;

    // Implementation
    lv_target_middle = PointFromName(("Zerg Rally " + IntToString(lv_player_position)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probius", 0, lp_player, lv_target_middle);
}

void gf_end_raynor_support () {
    // Variable Declarations
    int lv_i;
    unit lv_portrait_unit;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    unitgroup auto6D3BF18F_g;
    int auto6D3BF18F_u;
    unit auto6D3BF18F_var;

    // Variable Initialization
    lv_ug = UnitGroupEmpty();

    // Implementation
    if ((GameGetMissionTime() == ((11 * 60) + 20))) {
        while ((lv_i <= 6)) {
            if ((gv_players[lv_i].lv_support_type == "Raynor")) {
                lv_ug = null;
                auto6D3BF18F_g = gv_players[lv_i].lv_support_units;
                auto6D3BF18F_u = UnitGroupCount(auto6D3BF18F_g, c_unitCountAll);
                for (;; auto6D3BF18F_u -= 1) {
                    auto6D3BF18F_var = UnitGroupUnitFromEnd(auto6D3BF18F_g, auto6D3BF18F_u);
                    if (auto6D3BF18F_var == null) { break; }
                    if ((UnitGetType(auto6D3BF18F_var) == "Medivac")) {
                        UnitRemove(auto6D3BF18F_var);
                    }
                    else {
                        UnitGroupRemove(gv_players[lv_i].lv_support_units, auto6D3BF18F_var);
                        libNtve_gf_MakeUnitUncommandable(auto6D3BF18F_var, false);
                        UnitGroupAdd(lv_ug, auto6D3BF18F_var);
                    }
                }
                UnitGroupIssueOrder(lv_ug, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Zerg Rally " + IntToString(gv_players[lv_i].lv_position)))), c_orderQueueReplace);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Raynor", c_unitCreateIgnorePlacement, 0, PointFromId(304274518));
                lv_portrait_unit = UnitLastCreated();
                UnitGroupAdd(gv_transmission_units, lv_portrait_unit);
                TransmissionSendForPlayerSelect(PlayerGroupSingle(lv_i), TransmissionSourceFromUnit(lv_portrait_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/CFCFEF2C"), StringExternal("Param/Value/6CE7ACA7"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
            }

            lv_i += 1;
        }
    }

}

void gf_create_raynor_support_forplayer (int lp_player) {
    // Variable Declarations
    int lv_player_position;
    point lv_spawn_left;
    point lv_spawn_right;
    point lv_spawn_middle;
    point lv_target_middle;
    int lv_i;
    unitgroup lv_ug;
    unit lv_mv;
    string lv_elite_skin;
    int lv_count;

    // Automatic Variable Declarations
    int autoBEE5EC04_val;
    int autoA9292D35_val;
    int auto84E9D644_val;

    // Variable Initialization
    lv_player_position = gv_players[lp_player].lv_position;
    lv_i = 1;
    lv_ug = UnitGroupEmpty();

    // Implementation
    autoBEE5EC04_val = RandomInt(1, 4);
    if (autoBEE5EC04_val == 1) {
        lv_elite_skin = "EliteMarineSkin1";
    }
    else if (autoBEE5EC04_val == 2) {
        lv_elite_skin = "EliteMarineSkin2";
    }
    else if (autoBEE5EC04_val == 3) {
        lv_elite_skin = "EliteMarineSkin3";
    }
    else if (autoBEE5EC04_val == 4) {
        lv_elite_skin = "EliteMarineSkin4";
    }
    else {
    }
    if ((gv_players[lp_player].lv_has_marshall_skin == 1)) {
        lv_elite_skin = "EliteMarineSkin4";
    }

    TechTreeAbilityAllow(lp_player, AbilityCommand("CCSkinSwitcher", 1), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CCSkinSwitcher", 2), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CCSkinSwitcher", 3), true);
    autoA9292D35_val = lv_player_position;
    if (autoA9292D35_val == 1) {
        lv_spawn_right = PointFromId(1304502023);
        lv_spawn_left = PointFromId(1654796346);
    }
    else if (autoA9292D35_val == 2) {
        lv_spawn_right = PointFromId(427204689);
        lv_spawn_left = PointFromId(1304502023);
    }
    else if (autoA9292D35_val == 3) {
        lv_spawn_right = PointFromId(1375552357);
        lv_spawn_left = PointFromId(427204689);
    }
    else if (autoA9292D35_val == 4) {
        lv_spawn_right = PointFromId(1304502023);
        lv_spawn_left = PointFromId(1654796346);
    }
    else if (autoA9292D35_val == 5) {
        lv_spawn_right = PointFromId(1654796346);
        lv_spawn_left = PointFromId(1375552357);
    }
    else if (autoA9292D35_val == 6) {
        lv_spawn_right = PointFromId(1375552357);
        lv_spawn_left = PointFromId(427204689);
    }
    else {
    }
    lv_spawn_middle = MidPoint(lv_spawn_left, lv_spawn_right);
    lv_target_middle = libNtve_gf_PointOffsetTowardsPoint(MidPoint(PointFromName(("Zerg Flank Rally Right Pre " + IntToString(lv_player_position))), PointFromName(("Zerg Flank Rally Left Pre " + IntToString(lv_player_position)))), 2.4, PointFromName(("Zerg Rally " + IntToString(lv_player_position))));
    if ((lv_player_position != 2) && (lv_player_position != 5)) {
        auto84E9D644_val = lv_player_position;
        if (auto84E9D644_val == 1) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(1304502023));
        }
        else if (auto84E9D644_val == 3) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(427204689));
        }
        else if (auto84E9D644_val == 4) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(1654796346));
        }
        else if (auto84E9D644_val == 6) {
            lv_spawn_middle = libNtve_gf_PointOffsetTowardsPoint(lv_spawn_middle, 11.0, PointFromId(1375552357));
        }
        else {
        }
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Medivac", 0, lp_player, lv_spawn_right);
    UnitBehaviorAdd(UnitLastCreated(), "UnlimitedEnergy", UnitLastCreated(), 1);
    libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
    UnitGroupAdd(gv_players[lp_player].lv_support_units, UnitLastCreated());
    lv_mv = UnitLastCreated();
    lv_count = 8;
    if ((gv_difficulty <= 4)) {
        lv_count = 5;
    }

    while ((lv_i <= lv_count)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_elite_skin, c_unitCreateIgnorePlacement, lp_player, lv_spawn_right);
        UnitGroupAdd(lv_ug, UnitLastCreated());
        UnitGroupAdd(gv_players[lp_player].lv_support_units, UnitLastCreated());
        libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
        UnitIssueOrder(lv_mv, OrderTargetingUnit(AbilityCommand("MedivacTransport", 0), UnitLastCreated()), c_orderQueueAddToEnd);
        lv_i += 1;
    }
    UnitIssueOrder(lv_mv, OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), PointFromName(("Zerg Flank Rally Right Pre " + IntToString(lv_player_position)))), c_orderQueueAddToEnd);
    lv_i = 1;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Medivac", 0, lp_player, lv_spawn_left);
    UnitBehaviorAdd(UnitLastCreated(), "UnlimitedEnergy", UnitLastCreated(), 1);
    libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
    UnitGroupAdd(gv_players[lp_player].lv_support_units, UnitLastCreated());
    lv_mv = UnitLastCreated();
    while ((lv_i <= lv_count)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_elite_skin, c_unitCreateIgnorePlacement, lp_player, lv_spawn_left);
        UnitGroupAdd(lv_ug, UnitLastCreated());
        UnitGroupAdd(gv_players[lp_player].lv_support_units, UnitLastCreated());
        libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
        UnitIssueOrder(lv_mv, OrderTargetingUnit(AbilityCommand("MedivacTransport", 0), UnitLastCreated()), c_orderQueueAddToEnd);
        lv_i += 1;
    }
    UnitIssueOrder(lv_mv, OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), libNtve_gf_PointOffsetTowardsPoint(PointFromName(("Zerg Flank Rally Left Pre " + IntToString(lv_player_position))), 2.5, PointFromName(("Zerg Flank Rally Right Pre " + IntToString(lv_player_position))))), c_orderQueueAddToEnd);
    lv_i = 1;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Medivac", 0, lp_player, lv_spawn_middle);
    UnitBehaviorAdd(UnitLastCreated(), "UnlimitedEnergy", UnitLastCreated(), 1);
    libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
    UnitGroupAdd(gv_players[lp_player].lv_support_units, UnitLastCreated());
    lv_mv = UnitLastCreated();
    while ((lv_i <= lv_count)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_elite_skin, c_unitCreateIgnorePlacement, lp_player, lv_spawn_middle);
        UnitGroupAdd(lv_ug, UnitLastCreated());
        UnitGroupAdd(gv_players[lp_player].lv_support_units, UnitLastCreated());
        libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
        UnitIssueOrder(lv_mv, OrderTargetingUnit(AbilityCommand("MedivacTransport", 0), UnitLastCreated()), c_orderQueueAddToEnd);
        lv_i += 1;
    }
    UnitIssueOrder(lv_mv, OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), lv_target_middle), c_orderQueueAddToEnd);
}

void gf_make_player_protoss (int lp_player) {
    // Variable Declarations
    int lv_player_position;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player_position = gv_players[lp_player].lv_position;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", 0, lp_player, PointFromName(("Zerg Rally " + IntToString(lv_player_position))));
}

void gf_better_casual_upgrade () {
    // Automatic Variable Declarations
    playergroup auto657C0B98_g;
    int auto657C0B98_var;

    // Implementation
    auto657C0B98_g = gv_terrans;
    auto657C0B98_var = -1;
    while (true) {
        auto657C0B98_var = PlayerGroupNextPlayer(auto657C0B98_g, auto657C0B98_var);
        if (auto657C0B98_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto657C0B98_var, "CasualTraderImprovement", 1);
        TechTreeUpgradeAddLevel(auto657C0B98_var, "CasualNoCollide", 1);
        TechTreeUpgradeAddLevel(auto657C0B98_var, "SiegeTankBetterVersion", 1);
        CatalogReferenceSet("Button,FragmentBlast,AlertTooltip", auto657C0B98_var, "Lays down a carpet of plasma fragments dealing high damage and leaves a fire which periodically damages enemies within the vicinity.<n/><n/><c val=\"ffff8a\">Modulated:</c><n/>Increase area width by 75% with equal impact density.");
        CatalogReferenceSet("Button,FragmentBlast,Tooltip", auto657C0B98_var, "Lays down a carpet of plasma fragments dealing high damage and leaves a fire which periodically damages enemies within the vicinity.<n/><n/><c val=\"ffff8a\">Modulated:</c><n/>Increase area width by 75% with equal impact density.");
        CatalogReferenceSet("Button,PlasmaCannonT1,AlertTooltip", auto657C0B98_var, "Fires a long range plasma cannon to deal damage in blast radius. Can be upgraded with <c val=\"ffff8a\">Plasma Shards</c> to include the outer impact area.<n/><n/><c val=\"ffff8a\">Damage with Modulation levels:<n/>(0)</c> <c val=\"F0E2AC\">225/150 damage, radius 3.0/5.0.</c><n/><c val=\"ffff8a\">(1)</c> 325/210 damage, radius 3.5/6.5.<n/><c val=\"ffff8a\">(2)</c> 375/240 damage, radius 4.0/10.0.");
        CatalogReferenceSet("Button,PlasmaCannonT1,Tooltip", auto657C0B98_var, "Fires a long range plasma cannon to deal damage in blast radius. Can be upgraded with <c val=\"ffff8a\">Plasma Shards</c> to include the outer impact area.<n/><n/><c val=\"ffff8a\">Damage with Modulation levels:<n/>(0)</c> <c val=\"F0E2AC\">225/150 damage, radius 3.0/5.0.</c><n/><c val=\"ffff8a\">(1)</c> 325/210 damage, radius 3.5/6.5.<n/><c val=\"ffff8a\">(2)</c> 375/240 damage, radius 4.0/10.0");
        CatalogReferenceSet("Button,PlasmaCannonT2,AlertTooltip", auto657C0B98_var, "Fires a long range plasma cannon to deal damage in blast radius. Can be upgraded with <c val=\"ffff8a\">Plasma Shards</c> to include the outer impact area.<n/><n/><c val=\"ffff8a\">Damage with Modulation levels:<n/>(0)</c> 225/150 damage, radius 3.0/5.0.</c><n/><c val=\"ffff8a\">(1)</c> <c val=\"F0E2AC\">325/210 damage, radius 3.5/6.5.</c><n/><c val=\"ffff8a\">(2)</c> 375/240 damage, radius 4.0/10.0.");
        CatalogReferenceSet("Button,PlasmaCannonT2,Tooltip", auto657C0B98_var, "Fires a long range plasma cannon to deal damage in blast radius. Can be upgraded with <c val=\"ffff8a\">Plasma Shards</c> to include the outer impact area.<n/><n/><c val=\"ffff8a\">Damage with Modulation levels:<n/>(0)</c> 225/150 damage, radius 3.0/5.0.</c><n/><c val=\"ffff8a\">(1)</c> <c val=\"F0E2AC\">325/210 damage, radius 3.5/6.5.</c><n/><c val=\"ffff8a\">(2)</c> 375/240 damage, radius 4.0/10.0.");
        CatalogReferenceSet("Button,PlasmaCannonT3,AlertTooltip", auto657C0B98_var, "Fires a long range plasma cannon to deal damage in blast radius. Can be upgraded with <c val=\"ffff8a\">Plasma Shards</c> to include the outer impact area.<n/><n/><c val=\"ffff8a\">Damage with Modulation levels:<n/>(0)</c> 225/150 damage, radius 3.0/5.0.</c><n/><c val=\"ffff8a\">(1)</c> 325/210 damage, radius 3.5/6.5.</c><n/><c val=\"ffff8a\">(2)</c> <c val=\"F0E2AC\">375/240 damage, radius 4.0/10.0.</c>");
        CatalogReferenceSet("Button,PlasmaCannonT3,Tooltip", auto657C0B98_var, "Fires a long range plasma cannon to deal damage in blast radius. Can be upgraded with <c val=\"ffff8a\">Plasma Shards</c> to include the outer impact area.<n/><n/><c val=\"ffff8a\">Damage with Modulation levels:<n/>(0)</c> 225/150 damage, radius 3.0/5.0.</c><n/><c val=\"ffff8a\">(1)</c> 325/210 damage, radius 3.5/6.5.</c><n/><c val=\"ffff8a\">(2)</c> <c val=\"F0E2AC\">375/240 damage, radius 4.0/10.0.</c>");
    }
}

void gf_Rebind_from_bank (int lp_p) {
    // Variable Declarations
    unitgroup lv_ug;
    int lv_i;
    string lv_kbs;

    // Automatic Variable Declarations
    unitgroup auto31850CC1_g;
    int auto31850CC1_u;
    unit auto31850CC1_var;

    // Variable Initialization
    lv_ug = UnitGroupEmpty();
    lv_kbs = "";

    // Implementation
    lv_ug = UnitGroup("CommandCenter2", lp_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_ug, UnitGroup("Generator", lp_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_ug, UnitGroup("Barracks2", lp_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto31850CC1_g = lv_ug;
    auto31850CC1_u = UnitGroupCount(auto31850CC1_g, c_unitCountAll);
    for (;; auto31850CC1_u -= 1) {
        auto31850CC1_var = UnitGroupUnitFromEnd(auto31850CC1_g, auto31850CC1_u);
        if (auto31850CC1_var == null) { break; }
        lv_i = 0;
        while ((lv_i <= 9)) {
            lv_kbs = BankValueGetAsString(gv_players[lp_p].lv_bank, "keybinds", ("key" + IntToString(lv_i)));
            if ((lv_kbs == (UnitGetType(auto31850CC1_var)))) {
                UnitControlGroupAddUnit(lp_p, lv_i, auto31850CC1_var);
                lv_i += 10;
            }
            else {
                lv_i += 1;
            }
        }
    }
}

void gf_create_income_dialog () {
    // Variable Declarations
    int lv_calculated_reward;
    text lv_indicator_string_text;

    // Automatic Variable Declarations
    playergroup auto4227153C_g;
    int auto4227153C_var;

    // Variable Initialization

    // Implementation
    auto4227153C_g = gv_terrans;
    auto4227153C_var = -1;
    while (true) {
        auto4227153C_var = PlayerGroupNextPlayer(auto4227153C_g, auto4227153C_var);
        if (auto4227153C_var < 0) { break; }
        DialogCreate(330, 78, c_anchorTop, -20, 0, true);
        gv_dialog_terranIncome[auto4227153C_var] = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 30, c_anchorTopLeft, 0, 6, StringExternal("Param/Value/1591E1A1"), "Assets\\Textures\\ui_emoticons_minerals.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 30, c_anchorTopLeft, 100, 6, StringExternal("Param/Value/47F4A801"), "Assets\\Textures\\ui_emoticons_gas.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 50, c_anchorTopLeft, 35, 0, StringExternal("Param/Value/BBDA8209"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
        gv_dialog_terranIncome_minerals[auto4227153C_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 50, c_anchorTopLeft, 135, 0, StringExternal("Param/Value/F6D337EE"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
        gv_dialog_terranIncome_vespene[auto4227153C_var] = DialogControlLastCreated();
        if ((gf_is_3v3() == true)) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 30, c_anchorTopLeft, 200, 6, StringExternal("Param/Value/68FAA8E1"), "Assets\\Textures\\ui_emoticons_zerg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 50, c_anchorTopLeft, 235, 0, StringExternal("Param/Value/8189B2A2"), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
            gv_dialog_terranIncome_terrazine[auto4227153C_var] = DialogControlLastCreated();
        }

        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto4227153C_var), true);
        if ((gv_difficulty <= 7)) {
            DialogCreate(330, 78, c_anchorTop, 180, 0, true);
        }
        else {
            DialogCreate(330, 78, c_anchorTop, 172, -18, true);
        }
        DialogSetImageVisible(DialogLastCreated(), false);
        if ((gv_difficulty <= 7)) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 43, 43, c_anchorTop, -20, 6, StringToText(gf_get_difficulty_label()), gf_get_difficulty_icon(), c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTop, -20, 6, StringToText(gf_get_difficulty_label()), gf_get_difficulty_icon(), c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        }
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto4227153C_var), true);
        DialogCreate(330, 78, c_anchorTop, 225, 0, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        if ((gv_build == "roach")) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 43, 43, c_anchorTop, -20, 6, StringToText("Roach Build"), "Assets\\Textures\\ui_emoticons_infested.dds", c_triggerImageTypeNineSlice, true, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else {
            if ((gv_build == "tanklings")) {
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 43, 43, c_anchorTop, -20, 6, StringToText("Tankling Build"), "Assets\\Textures\\ui_emoticons_locust.dds", c_triggerImageTypeNineSlice, true, Color(100,100,100), c_triggerBlendModeNormal);
            }
            else {
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 43, 43, c_anchorTop, -20, 6, StringToText("Normal Build"), "Assets\\Textures\\sc2_ui_loadingscreen_extended_raceindicator_random.dds", c_triggerImageTypeNineSlice, true, Color(100,100,100), c_triggerBlendModeNormal);
            }
        }
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto4227153C_var), true);
        lv_calculated_reward = gf_get_reward_elo_count(auto4227153C_var);
        lv_indicator_string_text = ((StringExternal("Param/Value/BFAD43E4") + IntToText(lv_calculated_reward)) + (StringExternal("Param/Value/8E8C6FC7") + (StringExternal("Param/Value/B6BD0980") + IntToText(gf_get_base_penalty_elo_count()))));
        DialogCreate(410, 78, c_anchorTop, 380, 0, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 43, 43, c_anchorTop, -20, 6, StringExternal("Param/Value/276336A3"), "Assets\\Textures\\hud_bg_mechanicicon_coin.dds", c_triggerImageTypeNineSlice, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 50, c_anchorTopLeft, 0, 0, lv_indicator_string_text, ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16Bold", PlayerGroupAll());
        gv_reward[auto4227153C_var] = DialogControlLastCreated();
        lv_indicator_string_text = (StringExternal("Param/Value/1960DBEA") + (StringExternal("Param/Value/082AB456") + StringExternal("Param/Value/68EED64B")));
        DialogCreate(410, 78, c_anchorTop, 500, 0, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 30, c_anchorTop, -25, 12, StringExternal("Param/Value/65A8DE5C"), "Assets\\Textures\\ui_emoticons_theart.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 50, c_anchorTopLeft, 190, 0, lv_indicator_string_text, ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16Bold", PlayerGroupAll());
        gv_blood_dialog_item[auto4227153C_var] = DialogControlLastCreated();
        if ((gf_player_is_chaos(auto4227153C_var) == true)) {
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto4227153C_var), true);
        }

    }
}

void gf_update_income_for_player (int lp_player) {
    // Variable Declarations
    int lv_collect_minerals;
    int lv_collect_vespene;
    int lv_collect_minerals_old;
    int lv_collect_vespene_old;
    int lv_calculated_reward;
    text lv_indicator_string_text;
    fixed lv_terrazine_income;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_collect_minerals_old = gv_TerranIncome[lp_player].lv_collected_minerals_last;
    lv_collect_vespene_old = gv_TerranIncome[lp_player].lv_collected_vespene_last;

    // Implementation
    lv_collect_minerals = PlayerGetPropertyInt(lp_player, c_playerPropMineralsCollected);
    lv_collect_vespene = PlayerGetPropertyInt(lp_player, c_playerPropVespeneCollected);
    gv_TerranIncome[lp_player].lv_minerals_diff = (lv_collect_minerals - lv_collect_minerals_old);
    gv_TerranIncome[lp_player].lv_vespene_diff = (lv_collect_vespene - lv_collect_vespene_old);
    libNtve_gf_SetDialogItemText(gv_dialog_terranIncome_minerals[lp_player], IntToText((gv_TerranIncome[lp_player].lv_minerals_diff * 6)), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_dialog_terranIncome_vespene[lp_player], IntToText((gv_TerranIncome[lp_player].lv_vespene_diff * 6)), PlayerGroupSingle(lp_player));
    gv_TerranIncome[lp_player].lv_collected_minerals_last = lv_collect_minerals;
    gv_TerranIncome[lp_player].lv_collected_vespene_last = lv_collect_vespene;
    if ((gf_is_3v3() == true)) {
        lv_terrazine_income = (gf_get_terrazine_income(lp_player) * 10.0);
        libNtve_gf_SetDialogItemText(gv_dialog_terranIncome_terrazine[lp_player], IntToText(FixedToInt(lv_terrazine_income)), PlayerGroupSingle(lp_player));
    }

}

void gf_update_reward_panel (int lp_player) {
    // Variable Declarations
    int lv_calculated_reward;
    text lv_indicator_string_text;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_calculated_reward = gf_get_reward_elo_count(lp_player);
    lv_indicator_string_text = ((StringExternal("Param/Value/D7EDDD9E") + IntToText(lv_calculated_reward)) + (StringExternal("Param/Value/92A71DC2") + (StringExternal("Param/Value/5962097F") + IntToText(gf_get_base_penalty_elo_count()))));
    libNtve_gf_SetDialogItemText(gv_reward[lp_player], lv_indicator_string_text, PlayerGroupSingle(lp_player));
}

string gf_get_difficulty_icon () {
    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    int autoE80A02CC_val;

    // Variable Initialization

    // Implementation
    lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_placement.dds";
    autoE80A02CC_val = gv_difficulty;
    if (autoE80A02CC_val == 1) {
        lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_bronze_3.dds";
    }
    else if (autoE80A02CC_val == 2) {
        lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_silver_3.dds";
    }
    else if (autoE80A02CC_val == 3) {
        lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_gold_3.dds";
    }
    else if (autoE80A02CC_val == 4) {
        lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_platinum_3.dds";
    }
    else if (autoE80A02CC_val == 5) {
        lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_diamond_3.dds";
    }
    else if (autoE80A02CC_val == 6) {
        lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_master_3.dds";
    }
    else if (autoE80A02CC_val == 7) {
        lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_grandmaster_3.dds";
    }
    else if (autoE80A02CC_val == 8) {
        lv_image = "Assets\\Textures\\hud_bg_killcounter_skull_tier1.dds";
    }
    else if (autoE80A02CC_val == 9) {
        lv_image = "Assets\\Textures\\hud_bg_killcounter_skull_tier2.dds";
    }
    else if (autoE80A02CC_val == 10) {
        lv_image = "Assets\\Textures\\hud_bg_killcounter_skull_tier3.dds";
    }
    else if (autoE80A02CC_val == 11) {
        lv_image = "Assets\\Textures\\hud_bg_killcounter_skull_tier4.dds";
    }
    else if (autoE80A02CC_val == 12) {
        lv_image = "Assets\\Textures\\hud_bg_killcounter_skull_tier5.dds";
    }
    else if (autoE80A02CC_val == 13) {
        lv_image = "Assets\\Textures\\hud_bg_killcounter_skull_tier6.dds";
    }
    else {
    }
    return lv_image;
}

string gf_get_difficulty_label () {
    // Variable Declarations
    string lv_string;

    // Automatic Variable Declarations
    int auto79CEC460_val;

    // Variable Initialization
    lv_string = "";

    // Implementation
    lv_string = "No Difficulty detected!";
    auto79CEC460_val = gv_difficulty;
    if (auto79CEC460_val == 1) {
        lv_string = "Easy";
    }
    else if (auto79CEC460_val == 2) {
        lv_string = "Medium";
    }
    else if (auto79CEC460_val == 3) {
        lv_string = "Hard";
    }
    else if (auto79CEC460_val == 4) {
        lv_string = "Harder";
    }
    else if (auto79CEC460_val == 5) {
        lv_string = "Expert";
    }
    else if (auto79CEC460_val == 6) {
        lv_string = "Brutal";
    }
    else if (auto79CEC460_val == 7) {
        lv_string = "Ultra Brutal";
    }
    else if (auto79CEC460_val == 8) {
        lv_string = "Torment";
    }
    else if (auto79CEC460_val == 9) {
        lv_string = "Torment 2";
    }
    else if (auto79CEC460_val == 10) {
        lv_string = "Torment 3";
    }
    else if (auto79CEC460_val == 11) {
        lv_string = "Torment 4";
    }
    else if (auto79CEC460_val == 12) {
        lv_string = "Torment 5";
    }
    else if (auto79CEC460_val == 13) {
        lv_string = "Smith";
    }
    else {
    }
    return lv_string;
}

void gf_reset_terrandata () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        gv_terrandata[lv_i].lv_strength = 0;
        gv_terrandata[lv_i].lv_build_value = 0.0;
        gv_terrandata[lv_i].lv_avg_apm = 0.0;
        gv_terrandata[lv_i].lv_army_value = 0.0;
        gv_terrandata[lv_i].lv_tech_value = 0.0;
        lv_i += 1;
    }
}

void gf_update_terrandata () {
    // Variable Declarations
    int lv_build_score;
    int lv_army_score;
    int lv_tech_score;
    fixed lv_gscore;

    // Automatic Variable Declarations
    playergroup autoB9CC52EA_g;
    int autoB9CC52EA_var;
    unitgroup auto1C9C533A_g;
    int auto1C9C533A_u;
    unit auto1C9C533A_var;
    unitgroup auto7B131CCB_g;
    int auto7B131CCB_u;
    unit auto7B131CCB_var;
    string auto8BE2F59A_val;

    // Variable Initialization

    // Implementation
    gf_reset_terrandata();
    autoB9CC52EA_g = gv_terrans;
    autoB9CC52EA_var = -1;
    while (true) {
        autoB9CC52EA_var = PlayerGroupNextPlayer(autoB9CC52EA_g, autoB9CC52EA_var);
        if (autoB9CC52EA_var < 0) { break; }
        if ((gv_players[autoB9CC52EA_var].lv_alive == true)) {
            lv_build_score = 0;
            gv_terrandata[autoB9CC52EA_var].lv_avg_apm = PlayerScoreValueGetAsInt(autoB9CC52EA_var, "APMAverage");
            if ((gv_terrandata[autoB9CC52EA_var].lv_avg_apm > 120.0)) {
                gv_terrandata[autoB9CC52EA_var].lv_avg_apm = 120.0;
            }

            auto1C9C533A_g = UnitGroup(null, autoB9CC52EA_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto1C9C533A_u = UnitGroupCount(auto1C9C533A_g, c_unitCountAll);
            for (;; auto1C9C533A_u -= 1) {
                auto1C9C533A_var = UnitGroupUnitFromEnd(auto1C9C533A_g, auto1C9C533A_u);
                if (auto1C9C533A_var == null) { break; }
                lv_build_score += UnitTypeGetCost(UnitGetType(auto1C9C533A_var), c_unitCostMinerals);
                lv_build_score += UnitTypeGetCost(UnitGetType(auto1C9C533A_var), c_unitCostVespene);
            }
            if ((lv_build_score > 1200)) {
                lv_build_score = 1200;
            }

            lv_army_score = 0;
            auto7B131CCB_g = UnitGroup(null, autoB9CC52EA_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto7B131CCB_u = UnitGroupCount(auto7B131CCB_g, c_unitCountAll);
            for (;; auto7B131CCB_u -= 1) {
                auto7B131CCB_var = UnitGroupUnitFromEnd(auto7B131CCB_g, auto7B131CCB_u);
                if (auto7B131CCB_var == null) { break; }
                auto8BE2F59A_val = UnitGetType(auto7B131CCB_var);
                if (auto8BE2F59A_val == "Marine2") {
                    lv_army_score += 1;
                }
                else if (auto8BE2F59A_val == "Reaper2") {
                    lv_army_score += 1;
                }
                else if (auto8BE2F59A_val == "VeteranMarine") {
                    lv_army_score += 2;
                }
                else if (auto8BE2F59A_val == "ChaosSpaceMarine") {
                    lv_army_score += 2;
                }
                else if (auto8BE2F59A_val == "ChaosCultist") {
                    lv_army_score += 2;
                }
                else if (auto8BE2F59A_val == "ChaosLord") {
                    lv_army_score += 15;
                }
                else if (auto8BE2F59A_val == "EliteMarine") {
                    lv_army_score += 3;
                }
                else if (auto8BE2F59A_val == "EliteMarineSkin1") {
                    lv_army_score += 3;
                }
                else if (auto8BE2F59A_val == "EliteMarineSkin2") {
                    lv_army_score += 3;
                }
                else if (auto8BE2F59A_val == "EliteMarineSkin3") {
                    lv_army_score += 3;
                }
                else if (auto8BE2F59A_val == "EliteMarineSkin4") {
                    lv_army_score += 3;
                }
                else if (auto8BE2F59A_val == "Battery") {
                    lv_army_score += 5;
                }
                else if (auto8BE2F59A_val == "HighDensityBattery") {
                    lv_army_score += 10;
                }
                else if (auto8BE2F59A_val == "AdvancedBattery") {
                    lv_army_score += 10;
                }
                else if (auto8BE2F59A_val == "AdvancedBatteryPylon") {
                    lv_army_score += 10;
                }
                else if (auto8BE2F59A_val == "ShockTrooper") {
                    lv_army_score += 2;
                }
                else if (auto8BE2F59A_val == "FirebatZergHex") {
                    lv_army_score += 2;
                }
                else if (auto8BE2F59A_val == "FirebatZergHexOld") {
                    lv_army_score += 2;
                }
                else if (auto8BE2F59A_val == "Italis") {
                    lv_army_score += 50;
                }
                else if (auto8BE2F59A_val == "SiegeTank2") {
                    lv_army_score += 50;
                }
                else if (auto8BE2F59A_val == "SiegeTank22") {
                    lv_army_score += 25;
                }
                else if (auto8BE2F59A_val == "SiegeTankSieged22") {
                    lv_army_score += 25;
                }
                else if (auto8BE2F59A_val == "SiegeTankSieged2") {
                    lv_army_score += 50;
                }
                else if (auto8BE2F59A_val == "Probius") {
                    lv_army_score += 10;
                }
                else {
                }
            }
            if ((lv_army_score > 300)) {
                lv_army_score = 300;
            }

            lv_tech_score = 0;
            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "MarineOvercharge", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += 10;
            }

            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "MarineShatteringLaser", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += 10;
            }

            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "MarineShatteringLaserUpgrade", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += 10;
            }

            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "MarinePenetratingLaser", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += 10;
            }

            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "UpgradedCombatShield", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += 10;
            }

            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "MarineConservationL1", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += 10;
            }

            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "MarineConservationL2", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += 10;
            }

            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "MarineConservationL3", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += 10;
            }

            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "MarineMobileSquadTraining", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += 10;
            }

            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "EliteScope", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += 10;
            }

            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "GasExtraction", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += 10;
            }

            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "GasExtraction2", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += 10;
            }

            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "GasExtraction3", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += 10;
            }

            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "PlasmaCannons", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += 10;
            }

            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "ImprovedFarming", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += 10;
            }

            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "ImprovedFarming2", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += 10;
            }

            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "Fortification", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += (TechTreeUpgradeCount(autoB9CC52EA_var, "Fortification", c_techCountQueuedOrBetter) * 10);
            }

            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "EnergyGeneration", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += (TechTreeUpgradeCount(autoB9CC52EA_var, "EnergyGeneration", c_techCountCompleteOnly) * 10);
            }

            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "EnergyCapacity", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += 10;
            }

            if ((TechTreeUpgradeCount(autoB9CC52EA_var, "EnergyGenerationCapacity", c_techCountCompleteOnly) > 0)) {
                lv_tech_score += 10;
            }

            if ((lv_tech_score > 800)) {
                lv_tech_score = 800;
            }

            lv_gscore = gv_players[autoB9CC52EA_var].lv_games;
            if ((lv_gscore > 100)) {
                lv_gscore = 100;
            }

            gv_terrandata[autoB9CC52EA_var].lv_army_value = (0.3 * (lv_army_score / 300.0));
            gv_terrandata[autoB9CC52EA_var].lv_build_value = (0.35 * (lv_build_score / 1200.0));
            gv_terrandata[autoB9CC52EA_var].lv_tech_value = (0.2 * (lv_tech_score / 800.0));
            gv_terrandata[autoB9CC52EA_var].lv_avg_apm = (0.1 * (gv_terrandata[autoB9CC52EA_var].lv_avg_apm / 120.0));
            lv_gscore = (0.05 * (lv_gscore / 100.0));
            gv_terrandata[autoB9CC52EA_var].lv_strength = FixedToInt((100.0 * (gv_terrandata[autoB9CC52EA_var].lv_army_value + (gv_terrandata[autoB9CC52EA_var].lv_build_value + ((gv_terrandata[autoB9CC52EA_var].lv_tech_value + (gv_terrandata[autoB9CC52EA_var].lv_avg_apm + lv_gscore)) + 0.0)))));
            gv_terran_score_playerranking[autoB9CC52EA_var] = gv_terrandata[autoB9CC52EA_var].lv_strength;
            gv_players[autoB9CC52EA_var].lv_last_recorded_strength = gv_terrandata[autoB9CC52EA_var].lv_strength;
        }

    }
    gf_Game_update_leaderboard();
}

void gf_Game_create_leaderboard () {
    // Variable Declarations
    int lv_row;
    int lv_i;

    // Automatic Variable Declarations
    playergroup autoD0BD21C2_g;
    int autoD0BD21C2_var;
    playergroup autoB2D8C610_g;
    int autoB2D8C610_var;
    playergroup auto54536D90_g;
    int auto54536D90_var;

    // Variable Initialization
    lv_row = 1;
    lv_i = 1;

    // Implementation
    if ((gf_is_3v3() == true)) {
        BoardCreate(3, (gv_player_count + 3), StringExternal("Param/Value/0D0BB8EB"), Color(100.00, 100.00, 100.00));
    }
    else {
        BoardCreate(3, (gv_player_count + 0), StringExternal("Param/Value/2050BD1F"), Color(100.00, 100.00, 100.00));
    }
    gv_leaderboard = BoardLastCreated();
    BoardItemSetText(gv_leaderboard, 1, c_boardRowHeader, StringExternal("Param/Value/53186217"));
    BoardItemSetText(gv_leaderboard, 3, c_boardRowHeader, StringExternal("Param/Value/24B67443"));
    if ((gf_is_3v3() == true)) {
        BoardItemSetText(gv_leaderboard, 1, lv_row, StringExternal("Param/Value/7AC785BA"));
        lv_row += 1;
        autoD0BD21C2_g = gv_terrans_team_top;
        autoD0BD21C2_var = -1;
        while (true) {
            autoD0BD21C2_var = PlayerGroupNextPlayer(autoD0BD21C2_g, autoD0BD21C2_var);
            if (autoD0BD21C2_var < 0) { break; }
            gv_players[autoD0BD21C2_var].lv_lb_row = lv_row;
            gv_players[autoD0BD21C2_var].lv_icon = gf_level_to_rank_icon(gf_get_level_from_xp(gv_players[autoD0BD21C2_var].lv_xp), gv_players[autoD0BD21C2_var].lv_games);
            BoardItemSetText(gv_leaderboard, 1, lv_row, PlayerName(autoD0BD21C2_var));
            BoardItemSetTextColor(gv_leaderboard, 1, lv_row, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoD0BD21C2_var, false)));
            BoardItemSetIcon(gv_leaderboard, 2, lv_row, gv_players[autoD0BD21C2_var].lv_icon, false);
            lv_row += 1;
        }
        lv_row += 1;
        BoardItemSetText(gv_leaderboard, 1, lv_row, StringExternal("Param/Value/9D33E8A0"));
        lv_row += 1;
        autoB2D8C610_g = gv_terrans_team_bottom;
        autoB2D8C610_var = -1;
        while (true) {
            autoB2D8C610_var = PlayerGroupNextPlayer(autoB2D8C610_g, autoB2D8C610_var);
            if (autoB2D8C610_var < 0) { break; }
            gv_players[autoB2D8C610_var].lv_lb_row = lv_row;
            gv_players[autoB2D8C610_var].lv_icon = gf_level_to_rank_icon(gf_get_level_from_xp(gv_players[autoB2D8C610_var].lv_xp), gv_players[autoB2D8C610_var].lv_games);
            BoardItemSetText(gv_leaderboard, 1, lv_row, PlayerName(autoB2D8C610_var));
            BoardItemSetTextColor(gv_leaderboard, 1, lv_row, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoB2D8C610_var, false)));
            BoardItemSetIcon(gv_leaderboard, 2, lv_row, gv_players[autoB2D8C610_var].lv_icon, false);
            lv_row += 1;
        }
    }
    else {
        auto54536D90_g = gv_terrans;
        auto54536D90_var = -1;
        while (true) {
            auto54536D90_var = PlayerGroupNextPlayer(auto54536D90_g, auto54536D90_var);
            if (auto54536D90_var < 0) { break; }
            gv_players[auto54536D90_var].lv_lb_row = lv_row;
            gv_players[auto54536D90_var].lv_icon = gf_level_to_rank_icon(gf_get_level_from_xp(gv_players[auto54536D90_var].lv_xp), gv_players[auto54536D90_var].lv_games);
            BoardItemSetText(gv_leaderboard, 1, lv_row, PlayerName(auto54536D90_var));
            BoardItemSetTextColor(gv_leaderboard, 1, lv_row, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto54536D90_var, false)));
            BoardItemSetIcon(gv_leaderboard, 2, lv_row, gv_players[auto54536D90_var].lv_icon, false);
            lv_row += 1;
        }
    }
}

void gf_Game_update_leaderboard () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup auto79E528E8_g;
    int auto79E528E8_var;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    auto79E528E8_g = gv_terrans;
    auto79E528E8_var = -1;
    while (true) {
        auto79E528E8_var = PlayerGroupNextPlayer(auto79E528E8_g, auto79E528E8_var);
        if (auto79E528E8_var < 0) { break; }
        if ((gv_players[auto79E528E8_var].lv_alive == true)) {
            BoardItemSetText(gv_leaderboard, 3, gv_players[auto79E528E8_var].lv_lb_row, IntToText(gv_terrandata[auto79E528E8_var].lv_strength));
        }
        else {
            BoardItemSetText(gv_leaderboard, 3, gv_players[auto79E528E8_var].lv_lb_row, StringExternal("Param/Value/DA4775B5"));
        }
    }
}

string gf_elo_to_rank_icon (int lp_elo, int lp_games) {
    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_games < 5)) {
        lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_placement.dds";
    }
    else {
        if ((lp_elo < 1000)) {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_bronze_3.dds";
        }
        else if ((lp_elo >= 1000) && (lp_elo < 1200)) {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_silver_3.dds";
        }
        else if ((lp_elo >= 1200) && (lp_elo < 1400)) {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_gold_3.dds";
        }
        else if ((lp_elo >= 1400) && (lp_elo < 1600)) {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_platinum_3.dds";
        }
        else if ((lp_elo >= 1600) && (lp_elo < 1900)) {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_diamond_3.dds";
        }
        else if ((lp_elo >= 1900) && (lp_elo < 2400)) {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_master_3.dds";
        }
        else if ((lp_elo >= 2400)) {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_grandmaster_3.dds";
        }
    }
    return lv_image;
}

string gf_level_to_rank_icon (int lp_level, int lp_games) {
    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    int autoB3BD61A2_val;

    // Variable Initialization

    // Implementation
    if ((lp_games < 5)) {
        lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_placement.dds";
    }
    else {
        autoB3BD61A2_val = lp_level;
        if (autoB3BD61A2_val == 1) {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_bronze_3.dds";
        }
        else if (autoB3BD61A2_val == 2) {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_silver_3.dds";
        }
        else if (autoB3BD61A2_val == 3) {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_gold_3.dds";
        }
        else if (autoB3BD61A2_val == 4) {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_platinum_3.dds";
        }
        else if (autoB3BD61A2_val == 5) {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_diamond_3.dds";
        }
        else if (autoB3BD61A2_val == 6) {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_master_3.dds";
        }
        else if (autoB3BD61A2_val == 7) {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_grandmaster_3.dds";
        }
        else if (autoB3BD61A2_val == 8) {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_grandmaster_3.dds";
        }
        else if (autoB3BD61A2_val == 9) {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_grandmaster_3.dds";
        }
        else if (autoB3BD61A2_val == 10) {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_grandmaster_3.dds";
        }
        else if (autoB3BD61A2_val == 11) {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_grandmaster_3.dds";
        }
        else if (autoB3BD61A2_val == 12) {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_grandmaster_3.dds";
        }
        else {
            lv_image = "Assets\\Textures\\ui_glues_icons_ladder_small_placement.dds";
        }
    }
    return lv_image;
}

void gf_create_karax_for_player (int lp_player, point lp_p) {
    // Variable Declarations
    string lv_ut;
    point lv_spawn_point;

    // Automatic Variable Declarations
    string autoA5D86290_val;

    // Variable Initialization

    // Implementation
    lv_ut = gf_afterlife_get_hero_unit_type(lp_player);
    if ((gv_players[lp_player].lv_wantkarax == true)) {
        lv_ut = "KaraxChampion";
    }

    if ((gv_players[lp_player].lv_alive == false)) {
        lv_spawn_point = PointFromName(("Zerg Rally " + IntToString(gv_players[gf_ai_get_random_player()].lv_position)));
    }
    else {
        lv_spawn_point = PointFromName(("Zerg Rally " + IntToString(gv_players[lp_player].lv_position)));
    }
    if ((lv_ut == "KaraxChampion")) {
        if ((UnitGroupCount(UnitGroup("KaraxChampion", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (PlayerStatus(lp_player) == c_playerStatusActive)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "KaraxChampion", c_unitCreateIgnorePlacement, lp_player, lv_spawn_point);
            if ((lp_p != null)) {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lp_p), c_orderQueueReplace);
            }

            if ((gv_players[lp_player].lv_alive == false)) {
                Wait(1.5, c_timeGame);
                CameraPan(lp_player, lv_spawn_point, 0.0, -1, 10.0, false);
            }

        }

    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_ut, c_unitCreateIgnorePlacement, lp_player, lv_spawn_point);
        UnitBehaviorAdd(UnitLastCreated(), "AfterlifeHeroTriggerNotice", UnitLastCreated(), 1);
        autoA5D86290_val = lv_ut;
        if (autoA5D86290_val == "SiegeTank2") {
            UnitBehaviorAdd(UnitLastCreated(), "UnlimitedEnergy", UnitLastCreated(), 1);
        }
        else if (autoA5D86290_val == "MengskMarauder") {
            UnitBehaviorAdd(UnitLastCreated(), "MarauderALSpeedBuff", UnitLastCreated(), 1);
        }
        else {
        }
        Wait(1.5, c_timeGame);
        CameraPan(lp_player, lv_spawn_point, 0.0, -1, 10.0, false);
    }
}

void gf_buff_players () {
    // Variable Declarations
    unit lv_generator;

    // Automatic Variable Declarations
    playergroup auto8BCA7656_g;
    int auto8BCA7656_var;
    int auto9CD13505_val;
    playergroup auto0709C50B_g;
    int auto0709C50B_var;

    // Variable Initialization

    // Implementation
    auto8BCA7656_g = gv_terrans;
    auto8BCA7656_var = -1;
    while (true) {
        auto8BCA7656_var = PlayerGroupNextPlayer(auto8BCA7656_g, auto8BCA7656_var);
        if (auto8BCA7656_var < 0) { break; }
        lv_generator = UnitGroupRandomUnit(UnitGroup("Generator", auto8BCA7656_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive);
        auto9CD13505_val = gv_difficulty;
        if (auto9CD13505_val == 1) {
            UnitSetPropertyFixed(lv_generator, c_unitPropEnergy, (UnitGetPropertyInt(lv_generator, c_unitPropEnergy, c_unitPropCurrent) + 1000));
            PlayerModifyPropertyInt(auto8BCA7656_var, c_playerPropMinerals, c_playerPropOperAdd, 20);
            PlayerModifyPropertyInt(auto8BCA7656_var, c_playerPropVespene, c_playerPropOperAdd, 80);
            if ((GameAttributeGameValue("1") == "0001")) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaper2", 0, auto8BCA7656_var, PointFromName(("Zerg Rally " + IntToString(gv_players[auto8BCA7656_var].lv_position))));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaper2", 0, auto8BCA7656_var, PointFromName(("Zerg Rally " + IntToString(gv_players[auto8BCA7656_var].lv_position))));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine2", 0, auto8BCA7656_var, PointFromName(("Zerg Rally " + IntToString(gv_players[auto8BCA7656_var].lv_position))));
            }

        }
        else if (auto9CD13505_val == 2) {
            UnitSetPropertyFixed(lv_generator, c_unitPropEnergy, (UnitGetPropertyInt(lv_generator, c_unitPropEnergy, c_unitPropCurrent) + 750));
            PlayerModifyPropertyInt(auto8BCA7656_var, c_playerPropMinerals, c_playerPropOperAdd, 15);
            PlayerModifyPropertyInt(auto8BCA7656_var, c_playerPropVespene, c_playerPropOperAdd, 60);
            if ((GameAttributeGameValue("1") == "0001")) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaper2", 0, auto8BCA7656_var, PointFromName(("Zerg Rally " + IntToString(gv_players[auto8BCA7656_var].lv_position))));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaper2", 0, auto8BCA7656_var, PointFromName(("Zerg Rally " + IntToString(gv_players[auto8BCA7656_var].lv_position))));
            }

        }
        else if (auto9CD13505_val == 3) {
            UnitSetPropertyFixed(lv_generator, c_unitPropEnergy, (UnitGetPropertyInt(lv_generator, c_unitPropEnergy, c_unitPropCurrent) + 500));
            PlayerModifyPropertyInt(auto8BCA7656_var, c_playerPropMinerals, c_playerPropOperAdd, 10);
            PlayerModifyPropertyInt(auto8BCA7656_var, c_playerPropVespene, c_playerPropOperAdd, 40);
            if ((GameAttributeGameValue("1") == "0001")) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaper2", 0, auto8BCA7656_var, PointFromName(("Zerg Rally " + IntToString(gv_players[auto8BCA7656_var].lv_position))));
            }

        }
        else if (auto9CD13505_val == 4) {
            UnitSetPropertyFixed(lv_generator, c_unitPropEnergy, (UnitGetPropertyInt(lv_generator, c_unitPropEnergy, c_unitPropCurrent) + 250));
            PlayerModifyPropertyInt(auto8BCA7656_var, c_playerPropMinerals, c_playerPropOperAdd, 5);
            PlayerModifyPropertyInt(auto8BCA7656_var, c_playerPropVespene, c_playerPropOperAdd, 20);
        }
        else {
        }
    }
    auto0709C50B_g = gv_terrans;
    auto0709C50B_var = -1;
    while (true) {
        auto0709C50B_var = PlayerGroupNextPlayer(auto0709C50B_g, auto0709C50B_var);
        if (auto0709C50B_var < 0) { break; }
        if ((gv_players[auto0709C50B_var].lv_forced_random_mid == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine2", 0, auto0709C50B_var, PointFromName(("Zerg Rally " + IntToString(gv_players[auto0709C50B_var].lv_position))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, auto0709C50B_var, PointFromName(("Zerg Rally " + IntToString(gv_players[auto0709C50B_var].lv_position))));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
            lv_generator = UnitGroupRandomUnit(UnitGroup("Generator", auto0709C50B_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive);
            UnitSetPropertyFixed(lv_generator, c_unitPropEnergy, (UnitGetPropertyInt(lv_generator, c_unitPropEnergy, c_unitPropCurrent) + 5000));
        }

    }
}

void gf_restore_ranked_vanilla () {
    // Automatic Variable Declarations
    playergroup autoBBAB6913_g;
    int autoBBAB6913_var;

    // Implementation
    autoBBAB6913_g = gv_terrans;
    autoBBAB6913_var = -1;
    while (true) {
        autoBBAB6913_var = PlayerGroupNextPlayer(autoBBAB6913_g, autoBBAB6913_var);
        if (autoBBAB6913_var < 0) { break; }
        CatalogReferenceSet("Abil,ArmoryResearch2,InfoArray[Research16].Resource[Vespene]", autoBBAB6913_var, IntToString(200));
        CatalogReferenceSet("Unit,Ultralisk2,LifeMax", autoBBAB6913_var, IntToString(150));
        CatalogReferenceSet("Unit,Ultralisk2,LifeStart", autoBBAB6913_var, IntToString(150));
        CatalogReferenceSet("Unit,Ultralisk2,Speed", autoBBAB6913_var, IntToString(2));
    }
}

void gf_disable_non_vanilla_content_for_player (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("CommandCenterTrain2", 6), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch2", 18), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("BuildBuilder", 20), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch2", 19), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch2", 20), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ConstructionYardResearch", 4), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("BuildBuilderScalingStructures", 3), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain2", 6), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain2", 11), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("BuildBuilder", 21), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CommandCenterTrain2", 7), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CommandCenterTrain2", 8), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("BuildBuilderScalingStructures", 4), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UpgradeToAdvancedGate", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch2", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch2", 6), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch2", 21), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("BuildBuilderScalingStructures", 5), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain2", 13), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain2", 15), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain2", 14), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain2", 16), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch2", 24), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("BuildBuilder", 22), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("BuildBuilderScalingStructures", 6), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ConstructionYardResearch", 10), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ConstructionYardResearch", 11), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ConstructionYardResearch", 12), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain2", 17), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("GeneratorResearch", 5), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain2", 18), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CommandCenterTrain2", 9), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ConstructionYardResearch", 13), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ConstructionYardOrderUpgradeFortificationInfested", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch2", 22), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch2", 23), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ConyardOrderCashUpgrade", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CashPickupResearch", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CashPickupResearch", 3), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CashPickupResearch", 4), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CashPickupResearch", 5), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CashPickupResearch", 6), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CashPickupResearch", 7), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CommandCenterTrain2", 11), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProcessingCoreTrain", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CoreSystemRecharge", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("GenetronTrainEdit", 5), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("GenetronResearchEdit", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("GenetronResearchEdit", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch3", 2), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("BuildBuilder", 23), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch3", 3), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch3", 4), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("BuildBuilderScalingStructures", 11), false);
    if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "SCV", "InnerRadius", c_playerAny) == 0.3125)) {
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, "ACR", "InnerRadius", lp_player, 0.3125);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, "Scavenger", "InnerRadius", lp_player, 0.3125);
    }

}

void gf_apply_smod () {
    // Variable Declarations
    unit lv_generator;
    int lv_penalty;

    // Automatic Variable Declarations
    playergroup auto1B5633FF_g;
    int auto1B5633FF_var;
    string auto8ECE5620_val;

    // Variable Initialization

    // Implementation
    auto1B5633FF_g = gv_terrans;
    auto1B5633FF_var = -1;
    while (true) {
        auto1B5633FF_var = PlayerGroupNextPlayer(auto1B5633FF_g, auto1B5633FF_var);
        if (auto1B5633FF_var < 0) { break; }
        auto8ECE5620_val = GameAttributePlayerValue("4", auto1B5633FF_var);
        if (auto8ECE5620_val == "0001") {
        }
        else if (auto8ECE5620_val == "0004") {
            PlayerModifyPropertyInt(auto1B5633FF_var, c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(auto1B5633FF_var, c_playerPropMinerals) + 30));
            PlayerModifyPropertyInt(auto1B5633FF_var, c_playerPropVespene, c_playerPropOperSetTo, (PlayerGetPropertyInt(auto1B5633FF_var, c_playerPropVespene) + 30));
            lv_penalty = (2 * gv_difficulty);
        }
        else if (auto8ECE5620_val == "0002") {
            PlayerModifyPropertyInt(auto1B5633FF_var, c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(auto1B5633FF_var, c_playerPropMinerals) + 30));
            PlayerModifyPropertyInt(auto1B5633FF_var, c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(auto1B5633FF_var, c_playerPropMinerals) * 2));
            PlayerModifyPropertyInt(auto1B5633FF_var, c_playerPropVespene, c_playerPropOperSetTo, (PlayerGetPropertyInt(auto1B5633FF_var, c_playerPropVespene) + 30));
            PlayerModifyPropertyInt(auto1B5633FF_var, c_playerPropVespene, c_playerPropOperSetTo, (PlayerGetPropertyInt(auto1B5633FF_var, c_playerPropVespene) * 2));
            lv_penalty = (3 * gv_difficulty);
        }
        else if (auto8ECE5620_val == "0003") {
            PlayerModifyPropertyInt(auto1B5633FF_var, c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(auto1B5633FF_var, c_playerPropMinerals) + 30));
            PlayerModifyPropertyInt(auto1B5633FF_var, c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(auto1B5633FF_var, c_playerPropMinerals) * 3));
            PlayerModifyPropertyInt(auto1B5633FF_var, c_playerPropVespene, c_playerPropOperSetTo, (PlayerGetPropertyInt(auto1B5633FF_var, c_playerPropVespene) + 30));
            PlayerModifyPropertyInt(auto1B5633FF_var, c_playerPropVespene, c_playerPropOperSetTo, (PlayerGetPropertyInt(auto1B5633FF_var, c_playerPropVespene) * 3));
            lv_penalty = (4 * gv_difficulty);
        }
        else {
        }
        if ((lv_penalty > (gv_difficulty * 10))) {
            lv_penalty = (gv_difficulty * 10);
        }

        gv_players[auto1B5633FF_var].lv_elopenalty = lv_penalty;
    }
}

bool gf_is_player_banned (int lp_player) {
    // Variable Declarations
    string lv_handle;
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_handle = "";

    // Implementation
    if ((gv_practice_mode == true)) {
    }
    else {
        lv_handle = PlayerHandle(lp_player);
    }
    return lv_r;
}

void gf_kill_banned_player () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto746E663A_g;
    int auto746E663A_u;
    unit auto746E663A_var;

    // Variable Initialization

    // Implementation
    if ((GameGetMissionTime() == 130.0)) {
        while ((lv_i <= 6)) {
            if ((gf_is_player_banned(lv_i) == true)) {
                auto746E663A_g = UnitGroup("CommandCenter2", lv_i, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto746E663A_u = UnitGroupCount(auto746E663A_g, c_unitCountAll);
                for (;; auto746E663A_u -= 1) {
                    auto746E663A_var = UnitGroupUnitFromEnd(auto746E663A_g, auto746E663A_u);
                    if (auto746E663A_var == null) { break; }
                    UnitKill(auto746E663A_var);
                }
            }

            lv_i += 1;
        }
    }

}

void gf_Major_rock_exploit () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoC4575226_g;
    int autoC4575226_u;
    unit autoC4575226_var;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        if ((gv_players[gf_get_player_at_position(lv_i)].lv_alive == false)) {
            autoC4575226_g = UnitGroup(null, c_playerAny, RegionFromName(("player " + IntToString(lv_i))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoC4575226_u = UnitGroupCount(autoC4575226_g, c_unitCountAll);
            for (;; autoC4575226_u -= 1) {
                autoC4575226_var = UnitGroupUnitFromEnd(autoC4575226_g, autoC4575226_u);
                if (autoC4575226_var == null) { break; }
                if (((UnitGetOwner(autoC4575226_var) == 0) || (UnitGetOwner(autoC4575226_var) == 7) || (UnitGetOwner(autoC4575226_var) > 7) || (gf_is_overseer(autoC4575226_var) == true) || (UnitGetType(autoC4575226_var) == "Medivac") || (UnitGetType(autoC4575226_var) == "Hercules") || (UnitGetType(autoC4575226_var) == "WarpPrism") || (UnitGetType(autoC4575226_var) == "Italis"))) {
                }
                else {
                    UnitKill(autoC4575226_var);
                }
            }
        }

        lv_i += 1;
    }
}

void gf_set_position_set (int lp_pcount) {
    // Variable Declarations
    int lv_cnt;
    int lv_rand;

    // Automatic Variable Declarations
    int auto0014EBC4_val;

    // Variable Initialization

    // Implementation
    lv_cnt = lp_pcount;
    if ((lv_cnt < 3)) {
        lv_rand = RandomInt(1, 2);
    }
    else {
        lv_rand = RandomInt(1, 2);
    }
    auto0014EBC4_val = lv_cnt;
    if (auto0014EBC4_val == 1) {
        if ((GameIsOnline() == true)) {
            gv_position_set[1] = gf_roll_dice();
        }
        else {
            gv_position_set[1] = 2;
        }
    }
    else if (auto0014EBC4_val == 2) {
        if ((lv_rand == 1)) {
            gv_position_set[1] = 1;
            gv_position_set[2] = 3;
        }
        else {
            gv_position_set[1] = 4;
            gv_position_set[2] = 6;
        }
    }
    else if (auto0014EBC4_val == 3) {
        if ((lv_rand == 1)) {
            gv_position_set[1] = 1;
            gv_position_set[2] = 2;
            gv_position_set[3] = 3;
        }
        else {
            gv_position_set[1] = 5;
            gv_position_set[2] = 4;
            gv_position_set[3] = 6;
        }
    }
    else if (auto0014EBC4_val == 4) {
        gv_position_set[1] = 1;
        gv_position_set[2] = 3;
        gv_position_set[3] = 4;
        gv_position_set[4] = 6;
    }
    else if (auto0014EBC4_val == 5) {
        gv_position_set[1] = 1;
        gv_position_set[2] = 3;
        gv_position_set[3] = 4;
        if ((lv_rand == 2)) {
            gv_position_set[4] = 2;
        }
        else {
            gv_position_set[4] = 5;
        }
        gv_position_set[5] = 6;
    }
    else if (auto0014EBC4_val == 6) {
        gv_position_set[1] = 1;
        gv_position_set[2] = 2;
        gv_position_set[3] = 3;
        gv_position_set[4] = 4;
        gv_position_set[5] = 5;
        gv_position_set[6] = 6;
    }
    else {
    }
    gf_define_neighbour_positions();
}

int gf_get_random_free_position () {
    // Variable Declarations
    int lv_return;
    int lv_rand;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_return == 0)) {
        lv_rand = RandomInt(1, 6);
        if ((gv_positions[lv_rand] == 0) && (gv_tbp_minimap_position_picks_cross[lv_rand] == 0)) {
            lv_return = lv_rand;
        }

    }
    return lv_return;
}

void gf_settle_player (int lp_player) {
    // Variable Declarations
    int lv_pos;
    int lv_i;
    int lv_k;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        if ((lv_i != 2) && (lv_i != 5) && (gv_tbp_minimap_position_picks_cross[lv_i] != 0)) {
            lv_k = (lv_k + 1);
        }

        lv_i += 1;
    }
    if ((gv_tbp_minimap_position_picks[lp_player] != 0)) {
        lv_pos = gv_tbp_minimap_position_picks[lp_player];
    }
    else {
        lv_pos = gf_get_random_free_position();
    }
    if ((gv_positions[lv_pos] == 0)) {
    }
    else {
        lv_pos = gf_get_random_free_position();
    }
    gv_players[lp_player].lv_position = lv_pos;
    gv_positions[lv_pos] = lp_player;
    if (((lv_pos == 2) || (lv_pos == 5)) && (lv_k >= 4)) {
        gv_players[lp_player].lv_forced_random_mid = true;
    }

    gv_positions_taken = (gv_positions_taken + 1);
}

void gf_handle_collection_skins () {
    // Variable Declarations
    point lv_p;

    // Automatic Variable Declarations
    playergroup auto43DC2AC2_g;
    int auto43DC2AC2_var;
    unitgroup auto56D6686B_g;
    int auto56D6686B_u;
    unit auto56D6686B_var;

    // Variable Initialization

    // Implementation
    auto43DC2AC2_g = gv_terrans;
    auto43DC2AC2_var = -1;
    while (true) {
        auto43DC2AC2_var = PlayerGroupNextPlayer(auto43DC2AC2_g, auto43DC2AC2_var);
        if (auto43DC2AC2_var < 0) { break; }
        if ((GameIsOnline() == true)) {
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, PlayerSkin(auto43DC2AC2_var), true);
        }

        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "MarineXPR", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "MarineJunker", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "MarineCovertOps", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "MarineUmojan", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "MarineRemastered", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "MarineSilver", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "SentryTaldarim", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "SentryGolden", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "SentryPurifier", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "SentryIhanrii", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "SupplyDepotXPR", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "SupplyDepotCovertOps", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "SupplyDepotSilver", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "ReaperJunker", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "ReaperCovertOps", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "ReaperUmojan", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "AdeptCE", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "AdeptTaldarim", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "AdeptPurifier", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "AdeptGolden", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "FleetBeaconTaldarim", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "FleetBeaconIhanrii", false);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto43DC2AC2_var, "ArmoryCovertOps", false);
        if ((CatalogLinkReplacement(auto43DC2AC2_var, c_gameCatalogModel, "SCV") != "SCV") && (GameAttributeGameValue("1") != "0002")) {
            CatalogReferenceSet("Unit,Builder,Speed", auto43DC2AC2_var, IntToString(4));
            CatalogReferenceSet("Unit,Builder,Sight", auto43DC2AC2_var, IntToString(15));
            CatalogReferenceSet("Unit,InfestedBuilder,Speed", auto43DC2AC2_var, IntToString(4));
            CatalogReferenceSet("Unit,InfestedBuilder,Sight", auto43DC2AC2_var, IntToString(15));
            CatalogReferenceSet("Unit,ACR,Speed", auto43DC2AC2_var, IntToString(4));
            CatalogReferenceSet("Unit,ACR,Sight", auto43DC2AC2_var, IntToString(15));
        }

        auto56D6686B_g = UnitGroup("Builder", auto43DC2AC2_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto56D6686B_u = UnitGroupCount(auto56D6686B_g, c_unitCountAll);
        for (;; auto56D6686B_u -= 1) {
            auto56D6686B_var = UnitGroupUnitFromEnd(auto56D6686B_g, auto56D6686B_u);
            if (auto56D6686B_var == null) { break; }
            lv_p = UnitGetPosition(auto56D6686B_var);
            UnitRemove(auto56D6686B_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Builder", 0, auto43DC2AC2_var, lv_p);
        }
        if ((CatalogLinkReplacement(auto43DC2AC2_var, c_gameCatalogModel, "SensorTower") != "SensorTower") && (GameAttributeGameValue("1") != "0002")) {
            TechTreeAbilityAllow(auto43DC2AC2_var, AbilityCommand("UpgradeToAdvancedGate", 0), true);
        }

    }
}

void gf_Handle_Elite_Skins () {
    // Variable Declarations
    int lv_level;

    // Automatic Variable Declarations
    playergroup autoAC933295_g;
    int autoAC933295_var;

    // Variable Initialization

    // Implementation
    autoAC933295_g = gv_terrans;
    autoAC933295_var = -1;
    while (true) {
        autoAC933295_var = PlayerGroupNextPlayer(autoAC933295_g, autoAC933295_var);
        if (autoAC933295_var < 0) { break; }
        TechTreeAbilityAllow(autoAC933295_var, AbilityCommand("BarracksTrain2", 8), false);
        TechTreeAbilityAllow(autoAC933295_var, AbilityCommand("BarracksTrain2", 9), false);
        TechTreeAbilityAllow(autoAC933295_var, AbilityCommand("BarracksTrain2", 10), false);
        TechTreeAbilityAllow(autoAC933295_var, AbilityCommand("BarracksTrain2", 12), false);
        TechTreeAbilityAllow(autoAC933295_var, AbilityCommand("CCSkinSwitcher", 0), false);
        TechTreeAbilityAllow(autoAC933295_var, AbilityCommand("CCSkinSwitcher", 1), false);
        TechTreeAbilityAllow(autoAC933295_var, AbilityCommand("CCSkinSwitcher", 2), false);
        TechTreeAbilityAllow(autoAC933295_var, AbilityCommand("CCSkinSwitcher", 3), false);
        TechTreeAbilityAllow(autoAC933295_var, AbilityCommand("CCSkinSwitcher", 4), false);
        lv_level = gf_get_level_from_xp(gv_players[autoAC933295_var].lv_xp);
        if ((lv_level < 2)) {
            if ((gv_players[autoAC933295_var].lv_has_marshall_skin == 1)) {
            }
            else {
                TechTreeUpgradeAddLevel(autoAC933295_var, "ChooseDefaultSkin", 1);
            }
        }
        else {
            if ((lv_level < 3)) {
                TechTreeAbilityAllow(autoAC933295_var, AbilityCommand("CCSkinSwitcher", 1), true);
            }
            else {
                if ((lv_level < 4)) {
                    TechTreeAbilityAllow(autoAC933295_var, AbilityCommand("CCSkinSwitcher", 1), true);
                    TechTreeAbilityAllow(autoAC933295_var, AbilityCommand("CCSkinSwitcher", 2), true);
                }
                else {
                    TechTreeAbilityAllow(autoAC933295_var, AbilityCommand("CCSkinSwitcher", 1), true);
                    TechTreeAbilityAllow(autoAC933295_var, AbilityCommand("CCSkinSwitcher", 2), true);
                    TechTreeAbilityAllow(autoAC933295_var, AbilityCommand("CCSkinSwitcher", 3), true);
                }
            }
        }
        if ((gv_players[autoAC933295_var].lv_has_marshall_skin == 1)) {
            TechTreeAbilityAllow(autoAC933295_var, AbilityCommand("CCSkinSwitcher", 4), true);
        }

    }
}

void gf_handle_player_tutorial_stages () {
    // Variable Declarations
    int lv_t_stage;
    string lv_t_stage_state;
    bool lv_stage_done;

    // Automatic Variable Declarations
    playergroup autoBB0CD46E_g;
    int autoBB0CD46E_var;
    int autoC364A719_val;
    int autoD993D287_val;

    // Variable Initialization
    lv_t_stage_state = "";

    // Implementation
    if ((GameGetMissionTime() > 5.0) && (gf_is_3v3() == false)) {
        autoBB0CD46E_g = gv_terrans;
        autoBB0CD46E_var = -1;
        while (true) {
            autoBB0CD46E_var = PlayerGroupNextPlayer(autoBB0CD46E_g, autoBB0CD46E_var);
            if (autoBB0CD46E_var < 0) { break; }
            if ((gv_players[autoBB0CD46E_var].lv_alive == true) && (gv_players[autoBB0CD46E_var].lv_wants_tutorial == 1)) {
                lv_t_stage = gv_players[autoBB0CD46E_var].lv_tutorial_stage;
                lv_t_stage_state = gv_players[autoBB0CD46E_var].lv_tutorial_stage_state;
                if ((lv_t_stage_state == "completed")) {
                    gv_players[autoBB0CD46E_var].lv_tutorial_stage = (lv_t_stage + 1);
                    lv_t_stage = (lv_t_stage + 1);
                }

                if ((((gv_players[autoBB0CD46E_var].lv_support_type == "Infested") && (lv_t_stage == 3)) || ((gv_players[autoBB0CD46E_var].lv_support_type == "Infested") && (lv_t_stage == 8)) || ((gv_players[autoBB0CD46E_var].lv_support_type == "Army") && (lv_t_stage == 11)))) {
                    gv_players[autoBB0CD46E_var].lv_tutorial_stage = (lv_t_stage + 1);
                    lv_t_stage = (lv_t_stage + 1);
                }

                if ((lv_t_stage_state != "open")) {
                    autoC364A719_val = lv_t_stage;
                    if (autoC364A719_val == 1) {
                        if ((gv_players[autoBB0CD46E_var].lv_support_type == "Infested")) {
                            ObjectiveCreateForPlayers(StringExternal("Param/Value/CD71BC83"), StringExternal("Param/Value/18078A08"), c_objectiveStateActive, true, PlayerGroupSingle(autoBB0CD46E_var));
                        }
                        else {
                            ObjectiveCreateForPlayers(StringExternal("Param/Value/505B530F"), StringExternal("Param/Value/E130816B"), c_objectiveStateActive, true, PlayerGroupSingle(autoBB0CD46E_var));
                        }
                    }
                    else if (autoC364A719_val == 2) {
                        ObjectiveCreateForPlayers(StringExternal("Param/Value/0A600D60"), StringExternal("Param/Value/3AC42E71"), c_objectiveStateActive, true, PlayerGroupSingle(autoBB0CD46E_var));
                    }
                    else if (autoC364A719_val == 3) {
                        ObjectiveCreateForPlayers(StringExternal("Param/Value/672D0B24"), StringExternal("Param/Value/FEB8A8BC"), c_objectiveStateActive, true, PlayerGroupSingle(autoBB0CD46E_var));
                    }
                    else if (autoC364A719_val == 4) {
                        ObjectiveCreateForPlayers(StringExternal("Param/Value/3B72249F"), StringExternal("Param/Value/65EC8428"), c_objectiveStateActive, true, PlayerGroupSingle(autoBB0CD46E_var));
                    }
                    else if (autoC364A719_val == 5) {
                        ObjectiveCreateForPlayers(StringExternal("Param/Value/9FA77B02"), StringExternal("Param/Value/A5BD5F19"), c_objectiveStateActive, true, PlayerGroupSingle(autoBB0CD46E_var));
                    }
                    else if (autoC364A719_val == 6) {
                        ObjectiveCreateForPlayers(StringExternal("Param/Value/8B2008D9"), StringExternal("Param/Value/D6830D23"), c_objectiveStateActive, true, PlayerGroupSingle(autoBB0CD46E_var));
                    }
                    else if (autoC364A719_val == 7) {
                        ObjectiveCreateForPlayers(StringExternal("Param/Value/BA3D5152"), StringExternal("Param/Value/F13DECF6"), c_objectiveStateActive, true, PlayerGroupSingle(autoBB0CD46E_var));
                    }
                    else if (autoC364A719_val == 8) {
                        ObjectiveCreateForPlayers(StringExternal("Param/Value/DEE1CE0C"), StringExternal("Param/Value/48B133B4"), c_objectiveStateActive, true, PlayerGroupSingle(autoBB0CD46E_var));
                    }
                    else if (autoC364A719_val == 9) {
                        ObjectiveCreateForPlayers(StringExternal("Param/Value/FDB8335E"), StringExternal("Param/Value/815C22D6"), c_objectiveStateActive, true, PlayerGroupSingle(autoBB0CD46E_var));
                    }
                    else if (autoC364A719_val == 10) {
                        ObjectiveCreateForPlayers(StringExternal("Param/Value/D245A8E3"), StringExternal("Param/Value/0489A3AB"), c_objectiveStateActive, true, PlayerGroupSingle(autoBB0CD46E_var));
                    }
                    else if (autoC364A719_val == 11) {
                        ObjectiveCreateForPlayers(StringExternal("Param/Value/FAAAD3C7"), StringExternal("Param/Value/F324A6BA"), c_objectiveStateActive, true, PlayerGroupSingle(autoBB0CD46E_var));
                    }
                    else if (autoC364A719_val == 12) {
                        if ((gf_is_3v3() == true)) {
                            ObjectiveCreateForPlayers(StringExternal("Param/Value/8EBA8549"), StringExternal("Param/Value/3EDE583D"), c_objectiveStateActive, true, PlayerGroupSingle(autoBB0CD46E_var));
                        }
                        else {
                            ObjectiveCreateForPlayers(StringExternal("Param/Value/03F781A4"), StringExternal("Param/Value/C00E4D10"), c_objectiveStateActive, true, PlayerGroupSingle(autoBB0CD46E_var));
                        }
                    }
                    else {
                    }
                    gv_objectives[autoBB0CD46E_var][lv_t_stage] = ObjectiveLastCreated();
                    gv_players[autoBB0CD46E_var].lv_tutorial_stage_state = "open";
                    if ((lv_t_stage >= 3)) {
                        ObjectiveSetState(gv_objectives[autoBB0CD46E_var][(lv_t_stage - 2)], c_objectiveStateHidden);
                        if ((lv_t_stage == 12)) {
                            ObjectiveSetState(gv_objectives[autoBB0CD46E_var][11], c_objectiveStateHidden);
                        }

                    }

                    autoD993D287_val = lv_t_stage;
                    if (autoD993D287_val == 2) {
                        ObjectiveCreateForPlayers(StringExternal("Param/Value/E82930A4"), StringExternal("Param/Value/6D92ED9A"), c_objectiveStateActive, false, PlayerGroupSingle(autoBB0CD46E_var));
                        gv_bonus_objectives[autoBB0CD46E_var][1] = ObjectiveLastCreated();
                        ObjectiveCreateForPlayers(StringExternal("Param/Value/D74E79EE"), StringExternal("Param/Value/D29E4895"), c_objectiveStateActive, false, PlayerGroupSingle(autoBB0CD46E_var));
                        gv_bonus_objectives[autoBB0CD46E_var][2] = ObjectiveLastCreated();
                    }
                    else if (autoD993D287_val == 5) {
                        ObjectiveCreateForPlayers(StringExternal("Param/Value/F80D3675"), StringExternal("Param/Value/EEBA0F70"), c_objectiveStateActive, false, PlayerGroupSingle(autoBB0CD46E_var));
                        gv_bonus_objectives[autoBB0CD46E_var][3] = ObjectiveLastCreated();
                    }
                    else if (autoD993D287_val == 8) {
                        ObjectiveCreateForPlayers(StringExternal("Param/Value/8245E6B9"), StringExternal("Param/Value/41E3533A"), c_objectiveStateActive, false, PlayerGroupSingle(autoBB0CD46E_var));
                        gv_bonus_objectives[autoBB0CD46E_var][4] = ObjectiveLastCreated();
                    }
                    else {
                    }
                }
                else {
                    lv_stage_done = gf_is_stage_done(autoBB0CD46E_var, lv_t_stage);
                    if ((lv_stage_done == true)) {
                        ObjectiveSetState(gv_objectives[autoBB0CD46E_var][lv_t_stage], c_objectiveStateCompleted);
                        gv_players[autoBB0CD46E_var].lv_tutorial_stage_state = "completed";
                    }

                    if ((lv_t_stage > 1)) {
                        if ((ObjectiveGetState(gv_bonus_objectives[autoBB0CD46E_var][1]) == c_objectiveStateActive)) {
                            if ((gf_is_bonus_objective_done(1, autoBB0CD46E_var) == true)) {
                                ObjectiveSetState(gv_bonus_objectives[autoBB0CD46E_var][1], c_objectiveStateCompleted);
                                ObjectiveSetState(gv_bonus_objectives[autoBB0CD46E_var][1], c_objectiveStateHidden);
                            }

                        }

                        if ((ObjectiveGetState(gv_bonus_objectives[autoBB0CD46E_var][2]) == c_objectiveStateActive)) {
                            if ((gf_is_bonus_objective_done(2, autoBB0CD46E_var) == true)) {
                                ObjectiveSetState(gv_bonus_objectives[autoBB0CD46E_var][2], c_objectiveStateCompleted);
                                ObjectiveSetState(gv_bonus_objectives[autoBB0CD46E_var][2], c_objectiveStateHidden);
                            }

                        }

                    }

                    if ((lv_t_stage > 4)) {
                        if ((ObjectiveGetState(gv_bonus_objectives[autoBB0CD46E_var][3]) == c_objectiveStateActive)) {
                            if ((gf_is_bonus_objective_done(3, autoBB0CD46E_var) == true)) {
                                ObjectiveSetState(gv_bonus_objectives[autoBB0CD46E_var][3], c_objectiveStateCompleted);
                                ObjectiveSetState(gv_bonus_objectives[autoBB0CD46E_var][3], c_objectiveStateHidden);
                            }

                        }

                    }

                    if ((lv_t_stage > 7)) {
                        if ((ObjectiveGetState(gv_bonus_objectives[autoBB0CD46E_var][4]) == c_objectiveStateActive)) {
                            if ((gf_is_bonus_objective_done(4, autoBB0CD46E_var) == true)) {
                                ObjectiveSetState(gv_bonus_objectives[autoBB0CD46E_var][4], c_objectiveStateCompleted);
                                ObjectiveSetState(gv_bonus_objectives[autoBB0CD46E_var][4], c_objectiveStateHidden);
                            }

                        }

                    }

                }
            }

        }
    }

}

bool gf_is_stage_done (int lp_player, int lp_stage) {
    // Variable Declarations
    bool lv_r;
    unitgroup lv_ug;
    int lv_uc;

    // Automatic Variable Declarations
    int auto5798BE61_val;
    unitgroup auto1D50175C_g;
    int auto1D50175C_u;
    unit auto1D50175C_var;
    unitgroup auto07A82CE5_g;
    int auto07A82CE5_u;
    unit auto07A82CE5_var;
    unitgroup auto4E91BEBB_g;
    int auto4E91BEBB_u;
    unit auto4E91BEBB_var;
    unitgroup auto46870AC2_g;
    int auto46870AC2_u;
    unit auto46870AC2_var;
    unitgroup auto55C3ACB0_g;
    int auto55C3ACB0_u;
    unit auto55C3ACB0_var;
    unitgroup auto0C345BC6_g;
    int auto0C345BC6_u;
    unit auto0C345BC6_var;
    unitgroup auto3CFCFA73_g;
    int auto3CFCFA73_u;
    unit auto3CFCFA73_var;
    unitgroup auto7A25A3B0_g;
    int auto7A25A3B0_u;
    unit auto7A25A3B0_var;
    unitgroup autoD0B72CA3_g;
    int autoD0B72CA3_u;
    unit autoD0B72CA3_var;

    // Variable Initialization
    lv_ug = UnitGroupEmpty();

    // Implementation
    auto5798BE61_val = lp_stage;
    if (auto5798BE61_val == 1) {
        if ((gv_players[lp_player].lv_support_type == "Infested")) {
            lv_ug = UnitGroup("GasVent", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }
        else {
            lv_ug = UnitGroup("Refinery2", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            UnitGroupAddUnitGroup(lv_ug, UnitGroup("UpgradedRefinery", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        }
        auto1D50175C_g = lv_ug;
        auto1D50175C_u = UnitGroupCount(auto1D50175C_g, c_unitCountAll);
        for (;; auto1D50175C_u -= 1) {
            auto1D50175C_var = UnitGroupUnitFromEnd(auto1D50175C_g, auto1D50175C_u);
            if (auto1D50175C_var == null) { break; }
            if ((libNtve_gf_UnitIsUnderConstruction(auto1D50175C_var) == true)) {
                UnitGroupRemove(lv_ug, auto1D50175C_var);
            }

        }
        lv_uc = UnitGroupCount(lv_ug, c_unitCountAlive);
        if ((lv_uc >= 3)) {
            lv_r = true;
        }

    }
    else if (auto5798BE61_val == 2) {
        lv_ug = UnitGroup("FruitFarm", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto07A82CE5_g = lv_ug;
        auto07A82CE5_u = UnitGroupCount(auto07A82CE5_g, c_unitCountAll);
        for (;; auto07A82CE5_u -= 1) {
            auto07A82CE5_var = UnitGroupUnitFromEnd(auto07A82CE5_g, auto07A82CE5_u);
            if (auto07A82CE5_var == null) { break; }
            if ((libNtve_gf_UnitIsUnderConstruction(auto07A82CE5_var) == true)) {
                UnitGroupRemove(lv_ug, auto07A82CE5_var);
            }

        }
        lv_uc = UnitGroupCount(lv_ug, c_unitCountAlive);
        if ((lv_uc >= 5)) {
            lv_r = true;
        }

    }
    else if (auto5798BE61_val == 3) {
        lv_ug = UnitGroup("Wall2", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4E91BEBB_g = lv_ug;
        auto4E91BEBB_u = UnitGroupCount(auto4E91BEBB_g, c_unitCountAll);
        for (;; auto4E91BEBB_u -= 1) {
            auto4E91BEBB_var = UnitGroupUnitFromEnd(auto4E91BEBB_g, auto4E91BEBB_u);
            if (auto4E91BEBB_var == null) { break; }
            if ((libNtve_gf_UnitIsUnderConstruction(auto4E91BEBB_var) == true)) {
                UnitGroupRemove(lv_ug, auto4E91BEBB_var);
            }

        }
        lv_uc = UnitGroupCount(lv_ug, c_unitCountAlive);
        if ((lv_uc >= 20)) {
            lv_r = true;
        }

    }
    else if (auto5798BE61_val == 4) {
        lv_ug = UnitGroup("SheepFarm", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto46870AC2_g = lv_ug;
        auto46870AC2_u = UnitGroupCount(auto46870AC2_g, c_unitCountAll);
        for (;; auto46870AC2_u -= 1) {
            auto46870AC2_var = UnitGroupUnitFromEnd(auto46870AC2_g, auto46870AC2_u);
            if (auto46870AC2_var == null) { break; }
            if ((libNtve_gf_UnitIsUnderConstruction(auto46870AC2_var) == true)) {
                UnitGroupRemove(lv_ug, auto46870AC2_var);
            }

        }
        lv_uc = UnitGroupCount(lv_ug, c_unitCountAlive);
        if ((lv_uc >= 3)) {
            lv_r = true;
        }

    }
    else if (auto5798BE61_val == 5) {
        lv_ug = UnitGroup("ConstructionYard", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto55C3ACB0_g = lv_ug;
        auto55C3ACB0_u = UnitGroupCount(auto55C3ACB0_g, c_unitCountAll);
        for (;; auto55C3ACB0_u -= 1) {
            auto55C3ACB0_var = UnitGroupUnitFromEnd(auto55C3ACB0_g, auto55C3ACB0_u);
            if (auto55C3ACB0_var == null) { break; }
            if ((libNtve_gf_UnitIsUnderConstruction(auto55C3ACB0_var) == true)) {
                UnitGroupRemove(lv_ug, auto55C3ACB0_var);
            }

        }
        lv_uc = UnitGroupCount(lv_ug, c_unitCountAlive);
        if ((lv_uc >= 1)) {
            lv_r = true;
        }

    }
    else if (auto5798BE61_val == 6) {
        lv_ug = UnitGroup("CowFarm", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0C345BC6_g = lv_ug;
        auto0C345BC6_u = UnitGroupCount(auto0C345BC6_g, c_unitCountAll);
        for (;; auto0C345BC6_u -= 1) {
            auto0C345BC6_var = UnitGroupUnitFromEnd(auto0C345BC6_g, auto0C345BC6_u);
            if (auto0C345BC6_var == null) { break; }
            if ((libNtve_gf_UnitIsUnderConstruction(auto0C345BC6_var) == true)) {
                UnitGroupRemove(lv_ug, auto0C345BC6_var);
            }

        }
        lv_uc = UnitGroupCount(lv_ug, c_unitCountAlive);
        if ((lv_uc >= 3)) {
            lv_r = true;
        }

    }
    else if (auto5798BE61_val == 7) {
        if ((gv_players[lp_player].lv_energy_ups >= 5)) {
            lv_r = true;
        }

    }
    else if (auto5798BE61_val == 8) {
        lv_ug = UnitGroup("SentryGun2", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3CFCFA73_g = lv_ug;
        auto3CFCFA73_u = UnitGroupCount(auto3CFCFA73_g, c_unitCountAll);
        for (;; auto3CFCFA73_u -= 1) {
            auto3CFCFA73_var = UnitGroupUnitFromEnd(auto3CFCFA73_g, auto3CFCFA73_u);
            if (auto3CFCFA73_var == null) { break; }
            if ((libNtve_gf_UnitIsUnderConstruction(auto3CFCFA73_var) == true)) {
                UnitGroupRemove(lv_ug, auto3CFCFA73_var);
            }

        }
        lv_uc = UnitGroupCount(lv_ug, c_unitCountAlive);
        if ((lv_uc >= 2)) {
            lv_r = true;
        }

    }
    else if (auto5798BE61_val == 9) {
        lv_ug = UnitGroup("TechLab3", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7A25A3B0_g = lv_ug;
        auto7A25A3B0_u = UnitGroupCount(auto7A25A3B0_g, c_unitCountAll);
        for (;; auto7A25A3B0_u -= 1) {
            auto7A25A3B0_var = UnitGroupUnitFromEnd(auto7A25A3B0_g, auto7A25A3B0_u);
            if (auto7A25A3B0_var == null) { break; }
            if ((libNtve_gf_UnitIsUnderConstruction(auto7A25A3B0_var) == true)) {
                UnitGroupRemove(lv_ug, auto7A25A3B0_var);
            }

        }
        lv_uc = UnitGroupCount(lv_ug, c_unitCountAlive);
        if ((lv_uc >= 1)) {
            lv_r = true;
        }

    }
    else if (auto5798BE61_val == 10) {
        lv_ug = UnitGroup("Armory2", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD0B72CA3_g = lv_ug;
        autoD0B72CA3_u = UnitGroupCount(autoD0B72CA3_g, c_unitCountAll);
        for (;; autoD0B72CA3_u -= 1) {
            autoD0B72CA3_var = UnitGroupUnitFromEnd(autoD0B72CA3_g, autoD0B72CA3_u);
            if (autoD0B72CA3_var == null) { break; }
            if ((libNtve_gf_UnitIsUnderConstruction(autoD0B72CA3_var) == true)) {
                UnitGroupRemove(lv_ug, autoD0B72CA3_var);
            }

        }
        lv_uc = UnitGroupCount(lv_ug, c_unitCountAlive);
        if ((lv_uc >= 1)) {
            lv_r = true;
        }

    }
    else if (auto5798BE61_val == 11) {
        lv_ug = UnitGroup("Marine2", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_ug, UnitGroup("VeteranMarine", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_ug, UnitGroup("EliteMarine", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_ug, UnitGroup("EliteMarineSkin1", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_ug, UnitGroup("EliteMarineSkin2", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_ug, UnitGroup("EliteMarineSkin3", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_ug, UnitGroup("EliteMarineSkin4", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        lv_uc = UnitGroupCount(lv_ug, c_unitCountAlive);
        if ((lv_uc >= 20)) {
            lv_r = true;
        }

    }
    else if (auto5798BE61_val == 12) {
        lv_ug = UnitGroup("Hive2", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_uc = UnitGroupCount(lv_ug, c_unitCountAlive);
        if ((lv_uc < 1)) {
            lv_r = true;
        }

    }
    else {
    }
    return lv_r;
}

bool gf_is_bonus_objective_done (int lp_goal_id, int lp_player) {
    // Variable Declarations
    bool lv_r;
    unitgroup lv_ug;
    int lv_uc;
    unit lv_rock;

    // Automatic Variable Declarations
    int autoE0BE339D_val;
    unitgroup autoEE9769E2_g;
    int autoEE9769E2_u;
    unit autoEE9769E2_var;

    // Variable Initialization
    lv_ug = UnitGroupEmpty();

    // Implementation
    autoE0BE339D_val = lp_goal_id;
    if (autoE0BE339D_val == 1) {
        lv_ug = UnitGroup("Reaper2", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_uc = UnitGroupCount(lv_ug, c_unitCountAlive);
        if ((lv_uc >= 5)) {
            lv_r = true;
        }

    }
    else if (autoE0BE339D_val == 2) {
        lv_ug = UnitGroup("RocksBE", c_playerAny, RegionFromName(("geysers p" + IntToString(gv_players[lp_player].lv_position))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_uc = UnitGroupCount(lv_ug, c_unitCountAlive);
        if ((lv_uc < 1)) {
            lv_r = true;
        }

    }
    else if (autoE0BE339D_val == 3) {
        lv_ug = UnitGroup("FruitFarm", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoEE9769E2_g = lv_ug;
        autoEE9769E2_u = UnitGroupCount(autoEE9769E2_g, c_unitCountAll);
        for (;; autoEE9769E2_u -= 1) {
            autoEE9769E2_var = UnitGroupUnitFromEnd(autoEE9769E2_g, autoEE9769E2_u);
            if (autoEE9769E2_var == null) { break; }
            if ((libNtve_gf_UnitIsUnderConstruction(autoEE9769E2_var) == true)) {
                UnitGroupRemove(lv_ug, autoEE9769E2_var);
            }

        }
        lv_uc = UnitGroupCount(lv_ug, c_unitCountAlive);
        if ((lv_uc >= 8)) {
            lv_r = true;
        }

    }
    else if (autoE0BE339D_val == 4) {
        lv_ug = UnitGroup("Battery", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_ug, UnitGroup("AdvancedBattery", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_ug, UnitGroup("AdvancedBatteryPylon", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_ug, UnitGroup("HighDensityBattery", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        lv_uc = UnitGroupCount(lv_ug, c_unitCountAlive);
        if ((lv_uc >= 2)) {
            lv_r = true;
        }

    }
    else {
    }
    return lv_r;
}

void gf_remove_tutorial_after_death (int lp_player_id) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_i <= gv_players[lp_player_id].lv_tutorial_stage)) {
        ObjectiveSetState(gv_objectives[lp_player_id][lv_i], c_objectiveStateHidden);
        lv_i += 1;
    }
    if ((gv_players[lp_player_id].lv_tutorial_stage >= 2)) {
        ObjectiveSetState(gv_bonus_objectives[lp_player_id][1], c_objectiveStateHidden);
        ObjectiveSetState(gv_bonus_objectives[lp_player_id][2], c_objectiveStateHidden);
    }

    if ((gv_players[lp_player_id].lv_tutorial_stage >= 5)) {
        ObjectiveSetState(gv_bonus_objectives[lp_player_id][3], c_objectiveStateHidden);
    }

    if ((gv_players[lp_player_id].lv_tutorial_stage >= 8)) {
        ObjectiveSetState(gv_bonus_objectives[lp_player_id][4], c_objectiveStateHidden);
    }

}

void gf_init_weather () {
    // Variable Declarations
    int lv_level;
    bool lv_xl;

    // Automatic Variable Declarations
    playergroup autoF51BFD51_g;
    int autoF51BFD51_var;
    int auto998EF399_val;

    // Variable Initialization

    // Implementation
    autoF51BFD51_g = gv_terrans;
    autoF51BFD51_var = -1;
    while (true) {
        autoF51BFD51_var = PlayerGroupNextPlayer(autoF51BFD51_g, autoF51BFD51_var);
        if (autoF51BFD51_var < 0) { break; }
        lv_level = gf_get_level_from_xp(gv_players[autoF51BFD51_var].lv_xp);
        if (((lv_level >= 6) || (GameIsOnline() == false))) {
            lv_xl = true;
        }

        if (((lv_level >= 5) || (gf_is_player_donor(autoF51BFD51_var) == true) || (GameIsOnline() == false))) {
            libNtve_gf_SetUpgradeLevelForPlayer(autoF51BFD51_var, "ChooseDonor", 1);
            if ((gv_players[autoF51BFD51_var].lv_weather > 0)) {
                auto998EF399_val = gv_players[autoF51BFD51_var].lv_weather;
                if (auto998EF399_val == 1) {
                    gf_Create_weather(gv_players[autoF51BFD51_var].lv_position, 1, lv_xl);
                    libNtve_gf_SetUpgradeLevelForPlayer(autoF51BFD51_var, "ChooseAsh", 1);
                }
                else if (auto998EF399_val == 2) {
                    gf_Create_weather(gv_players[autoF51BFD51_var].lv_position, 2, lv_xl);
                    libNtve_gf_SetUpgradeLevelForPlayer(autoF51BFD51_var, "ChooseRain", 1);
                }
                else if (auto998EF399_val == 3) {
                    gf_Create_weather(gv_players[autoF51BFD51_var].lv_position, 3, lv_xl);
                    libNtve_gf_SetUpgradeLevelForPlayer(autoF51BFD51_var, "ChooseSnow", 1);
                }
                else {
                }
            }
            else {
                libNtve_gf_SetUpgradeLevelForPlayer(autoF51BFD51_var, "ChooseNoWeather", 1);
            }
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(autoF51BFD51_var, "ChooseNoWeather", 1);
        }
    }
}

bool gf_is_player_donor (int lp_player) {
    // Variable Declarations
    string lv_handle;
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_handle = PlayerHandle(lp_player);

    // Implementation
    if (((lv_handle == "1-S2-1-10368735") || (lv_handle == "2-S2-1-8126100") || (lv_handle == "2-S2-1-9855724") || (lv_handle == "1-S2-1-12179488") || (lv_handle == "1-S2-1-1961200") || (lv_handle == "2-S2-1-10231202") || (lv_handle == "2-S2-1-8126100") || (lv_handle == "1-S2-1-10368735") || (lv_handle == "2-S2-1-1711029") || (lv_handle == "1-S2-1-4632135") || (lv_handle == "2-S2-1-4327789"))) {
        lv_r = true;
    }

    return lv_r;
}

void gf_Create_weather (int lp_player_position, int lp_type, bool lp_xl) {
    // Variable Declarations
    int lv_i;
    int lv_m;
    string lv_pn;

    // Automatic Variable Declarations
    int auto9A8FD1C4_val;

    // Variable Initialization
    lv_i = 1;
    lv_m = 9;
    lv_pn = "";

    // Implementation
    gf_Remove_weather(lp_player_position);
    gv_weather_region_settings[lp_player_position] = lp_type;
    if ((lp_xl == true)) {
        lv_m = 15;
    }

    while ((lv_i <= lv_m)) {
        lv_pn = "";
        lv_pn = ("Weather p" + (IntToString(lp_player_position) + (" " + IntToString(lv_i))));
        auto9A8FD1C4_val = lp_type;
        if (auto9A8FD1C4_val == 1) {
            libNtve_gf_CreateActorAtPoint("CharAshWeather", PointFromName(lv_pn));
        }
        else if (auto9A8FD1C4_val == 2) {
            libNtve_gf_CreateActorAtPoint("RainEmitterLarge", PointFromName(lv_pn));
        }
        else if (auto9A8FD1C4_val == 3) {
            libNtve_gf_CreateActorAtPoint("Snow", PointFromName(lv_pn));
        }
        else {
        }
        gv_weather_data_array[lp_player_position][lv_i] = libNtve_gf_ActorLastCreated();
        lv_i += 1;
    }
}

void gf_Remove_weather (int lp_player_position) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 15)) {
        ActorSend(gv_weather_data_array[lp_player_position][lv_i], "Destroy");
        lv_i += 1;
    }
}

void gf__3v3_player_left (int lp_player) {
    // Variable Declarations
    int lv_rally_player_position;
    point lv_rally_point;

    // Automatic Variable Declarations
    unitgroup auto249555DF_g;
    int auto249555DF_u;
    unit auto249555DF_var;

    // Variable Initialization

    // Implementation
    if ((PlayerGroupHasPlayer(gv_terrans_team_top, lp_player) == true)) {
        PlayerGroupAdd(gv_terrans_team_top_open_access_units, gv_players[lp_player].lv__3v3_zerg_pid);
    }
    else {
        PlayerGroupAdd(gv_terrans_team_bottom_open_access_units, gv_players[lp_player].lv__3v3_zerg_pid);
    }
    gf_flush_privileges_3v3_OAU();
    gf_reposition_flying_rally(lp_player);
    Wait(5.0, c_timeGame);
    auto249555DF_g = UnitGroup("ZaGara", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto249555DF_u = UnitGroupCount(auto249555DF_g, c_unitCountAll);
    for (;; auto249555DF_u -= 1) {
        auto249555DF_var = UnitGroupUnitFromEnd(auto249555DF_g, auto249555DF_u);
        if (auto249555DF_var == null) { break; }
        UnitRemove(auto249555DF_var);
    }
}

void gf__3v3_player_died (int lp_player) {
    // Variable Declarations
    playergroup lv_team_group;
    int lv_number_of_alive_ally;
    int lv_zerg_rally_player_position;

    // Automatic Variable Declarations
    playergroup auto39A90B85_g;
    int auto39A90B85_var;

    // Variable Initialization
    lv_team_group = PlayerGroupEmpty();

    // Implementation
    if ((gv_players[lp_player].lv_position <= 3)) {
        lv_team_group = gv_terrans_team_top;
    }
    else {
        lv_team_group = gv_terrans_team_bottom;
    }
    lv_number_of_alive_ally = gf_number_alive_player_in_group(lv_team_group);
    if ((lv_number_of_alive_ally > 0)) {
        auto39A90B85_g = lv_team_group;
        auto39A90B85_var = -1;
        while (true) {
            auto39A90B85_var = PlayerGroupNextPlayer(auto39A90B85_g, auto39A90B85_var);
            if (auto39A90B85_var < 0) { break; }
            if ((gv_players[auto39A90B85_var].lv_alive == true)) {
                PlayerModifyPropertyInt(auto39A90B85_var, c_playerPropTerrazine, c_playerPropOperAdd, (PlayerGetPropertyInt(lp_player, c_playerPropTerrazine) / lv_number_of_alive_ally));
                gv_players[auto39A90B85_var].lv__3v3_terrazine_income += (gv_players[lp_player].lv__3v3_terrazine_income / lv_number_of_alive_ally);
            }

        }
    }

    PlayerModifyPropertyInt(lp_player, c_playerPropTerrazine, c_playerPropOperSetTo, 0);
    gv_players[lp_player].lv__3v3_terrazine_income = 0;
    gf_create_zagara(lp_player);
    if ((gv_first_time_a_team_is_dead == true) && ((gf_is_terrans_team_bottom_dead() == true) || (gf_is_terrans_team_top_dead() == true))) {
        gv_first_time_a_team_is_dead = false;
        gf_one_team_is_dead_event();
    }

    gf_reposition_flying_rally(lp_player);
}

int gf_number_alive_player_in_group (playergroup lp_player_group) {
    // Variable Declarations
    int lv_result;

    // Automatic Variable Declarations
    playergroup autoA3E0A720_g;
    int autoA3E0A720_var;

    // Variable Initialization

    // Implementation
    autoA3E0A720_g = lp_player_group;
    autoA3E0A720_var = -1;
    while (true) {
        autoA3E0A720_var = PlayerGroupNextPlayer(autoA3E0A720_g, autoA3E0A720_var);
        if (autoA3E0A720_var < 0) { break; }
        if ((gv_players[autoA3E0A720_var].lv_alive == true)) {
            lv_result += 1;
        }

    }
    return lv_result;
}

void gf_reposition_flying_rally (int lp_player) {
    // Variable Declarations
    int lv_new_position;
    int lv_rally_player_position;

    // Automatic Variable Declarations
    unitgroup auto6EFC8815_g;
    int auto6EFC8815_u;
    unit auto6EFC8815_var;
    unitgroup autoD08DFA4D_g;
    int autoD08DFA4D_u;
    unit autoD08DFA4D_var;
    unitgroup autoF6CF6C80_g;
    int autoF6CF6C80_u;
    unit autoF6CF6C80_var;

    // Variable Initialization

    // Implementation
    if ((gv_players[lp_player].lv_position <= 3) && (gf_is_terrans_team_top_dead() == false)) {
        lv_new_position = gf_get_position_of_random_alive_player_from_group(gv_terrans_team_top);
        auto6EFC8815_g = gv_flying_rally_group;
        auto6EFC8815_u = UnitGroupCount(auto6EFC8815_g, c_unitCountAll);
        for (;; auto6EFC8815_u -= 1) {
            auto6EFC8815_var = UnitGroupUnitFromEnd(auto6EFC8815_g, auto6EFC8815_u);
            if (auto6EFC8815_var == null) { break; }
            lv_rally_player_position = FixedToInt(UnitGetCustomValue(auto6EFC8815_var, 1));
            if ((gv_players[lp_player].lv_position == lv_rally_player_position)) {
                UnitSetCustomValue(auto6EFC8815_var, 1, lv_new_position);
            }

        }
    }

    if ((gv_players[lp_player].lv_position >= 4) && (gf_is_terrans_team_bottom_dead() == false)) {
        lv_new_position = gf_get_position_of_random_alive_player_from_group(gv_terrans_team_bottom);
        autoD08DFA4D_g = gv_flying_rally_group;
        autoD08DFA4D_u = UnitGroupCount(autoD08DFA4D_g, c_unitCountAll);
        for (;; autoD08DFA4D_u -= 1) {
            autoD08DFA4D_var = UnitGroupUnitFromEnd(autoD08DFA4D_g, autoD08DFA4D_u);
            if (autoD08DFA4D_var == null) { break; }
            lv_rally_player_position = FixedToInt(UnitGetCustomValue(autoD08DFA4D_var, 1));
            if ((gv_players[lp_player].lv_position == lv_rally_player_position)) {
                UnitSetCustomValue(autoD08DFA4D_var, 1, lv_new_position);
            }

        }
    }

    if ((gf_is_terrans_team_bottom_playing() == true) && (gf_is_terrans_team_top_playing() == true)) {
    }
    else {
        autoF6CF6C80_g = gv_flying_rally_group;
        autoF6CF6C80_u = UnitGroupCount(autoF6CF6C80_g, c_unitCountAll);
        for (;; autoF6CF6C80_u -= 1) {
            autoF6CF6C80_var = UnitGroupUnitFromEnd(autoF6CF6C80_g, autoF6CF6C80_u);
            if (autoF6CF6C80_var == null) { break; }
            UnitSetPosition(autoF6CF6C80_var, gf_get_point_of_flying_rally(autoF6CF6C80_var), false);
            UnitBehaviorRemove(autoF6CF6C80_var, "SpawnFromCenter", c_unitBehaviorCountAll);
            UnitBehaviorRemove(autoF6CF6C80_var, "SpawnFromLeft", c_unitBehaviorCountAll);
            UnitBehaviorRemove(autoF6CF6C80_var, "SpawnFromRight", c_unitBehaviorCountAll);
            UnitBehaviorAdd(autoF6CF6C80_var, "SpawnFromCenter", autoF6CF6C80_var, 1);
            UnitBehaviorRemove(autoF6CF6C80_var, "ZergRallyEqual", c_unitBehaviorCountAll);
            UnitBehaviorRemove(autoF6CF6C80_var, "ZergRallyMinus", c_unitBehaviorCountAll);
            UnitBehaviorRemove(autoF6CF6C80_var, "ZergRallyPlus", c_unitBehaviorCountAll);
            UnitBehaviorAdd(autoF6CF6C80_var, "ZergRallyEqual", autoF6CF6C80_var, 1);
        }
    }
}

void gf_one_team_is_dead_event () {
    // Variable Declarations
    int lv_zerg_rally_player_position;

    // Automatic Variable Declarations
    playergroup auto81E63357_g;
    int auto81E63357_var;
    unitgroup autoA62D74AB_g;
    int autoA62D74AB_u;
    unit autoA62D74AB_var;
    unitgroup autoEA06CB41_g;
    int autoEA06CB41_u;
    unit autoEA06CB41_var;
    unitgroup auto3EB611F5_g;
    int auto3EB611F5_u;
    unit auto3EB611F5_var;
    playergroup autoA55255A5_g;
    int autoA55255A5_var;
    unitgroup auto4FE1F2AE_g;
    int auto4FE1F2AE_u;
    unit auto4FE1F2AE_var;
    unitgroup autoC766BFFC_g;
    int autoC766BFFC_u;
    unit autoC766BFFC_var;
    unitgroup auto65A5A223_g;
    int auto65A5A223_u;
    unit auto65A5A223_var;
    playergroup auto70122CC1_g;
    int auto70122CC1_var;
    unitgroup auto89F91751_g;
    int auto89F91751_u;
    unit auto89F91751_var;

    // Variable Initialization

    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/0530E671"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/142E685E"));
    Wait(2.0, c_timeGame);
    TriggerEnable(gt_PeriodicZCCSpawn, false);
    TriggerEnable(gt_SpawnZCCUnit3v3, false);
    TriggerEnable(gt_ZCCupgrades, false);
    TriggerEnable(gt_zccdies, false);
    TriggerEnable(gt_zccbuilt, false);
    TriggerEnable(gt_Nydusdied, false);
    TriggerEnable(gt_Nydusfinished, false);
    TriggerEnable(gt_MechaUpgradefinished, false);
    TriggerEnable(gt_Larvadies, false);
    TriggerEnable(gt_Larvamutatesintobuilding, false);
    auto81E63357_g = gv_terrans;
    auto81E63357_var = -1;
    while (true) {
        auto81E63357_var = PlayerGroupNextPlayer(auto81E63357_g, auto81E63357_var);
        if (auto81E63357_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto81E63357_var, "OtherTeamDead", 1);
    }
    autoA62D74AB_g = UnitGroup("HiveMindEmulator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA62D74AB_u = UnitGroupCount(autoA62D74AB_g, c_unitCountAll);
    for (;; autoA62D74AB_u -= 1) {
        autoA62D74AB_var = UnitGroupUnitFromEnd(autoA62D74AB_g, autoA62D74AB_u);
        if (autoA62D74AB_var == null) { break; }
        UnitKill(autoA62D74AB_var);
    }
    if ((gf_is_terrans_team_bottom_dead() == true)) {
        autoEA06CB41_g = gv_flying_rally_group;
        autoEA06CB41_u = UnitGroupCount(autoEA06CB41_g, c_unitCountAll);
        for (;; autoEA06CB41_u -= 1) {
            autoEA06CB41_var = UnitGroupUnitFromEnd(autoEA06CB41_g, autoEA06CB41_u);
            if (autoEA06CB41_var == null) { break; }
            lv_zerg_rally_player_position = FixedToInt(UnitGetCustomValue(autoEA06CB41_var, 1));
            if ((lv_zerg_rally_player_position >= 4)) {
                PingDestroy(libHots_gf_PingStoredForUnit(autoEA06CB41_var, 1));
                UnitGroupRemove(gv_flying_rally_group, autoEA06CB41_var);
                UnitRemove(autoEA06CB41_var);
            }

        }
        auto3EB611F5_g = UnitGroup(null, 7, gf_get_region_of_influence_3v3(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3EB611F5_u = UnitGroupCount(auto3EB611F5_g, c_unitCountAll);
        for (;; auto3EB611F5_u -= 1) {
            auto3EB611F5_var = UnitGroupUnitFromEnd(auto3EB611F5_g, auto3EB611F5_u);
            if (auto3EB611F5_var == null) { break; }
            if ((gf_is_in_zerg_highgrounds(auto3EB611F5_var) == false)) {
                UnitRemove(auto3EB611F5_var);
            }

        }
        autoA55255A5_g = gv_terrans_team_top;
        autoA55255A5_var = -1;
        while (true) {
            autoA55255A5_var = PlayerGroupNextPlayer(autoA55255A5_g, autoA55255A5_var);
            if (autoA55255A5_var < 0) { break; }
            auto4FE1F2AE_g = UnitGroup(null, gv_players[autoA55255A5_var].lv__3v3_zerg_pid, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto4FE1F2AE_u = UnitGroupCount(auto4FE1F2AE_g, c_unitCountAll);
            for (;; auto4FE1F2AE_u -= 1) {
                auto4FE1F2AE_var = UnitGroupUnitFromEnd(auto4FE1F2AE_g, auto4FE1F2AE_u);
                if (auto4FE1F2AE_var == null) { break; }
                UnitRemove(auto4FE1F2AE_var);
            }
            if ((gv_players[autoA55255A5_var].lv_alive == false)) {
                gf_create_karax_for_player(autoA55255A5_var, null);
            }

        }
    }

    if ((gf_is_terrans_team_top_dead() == true)) {
        autoC766BFFC_g = gv_flying_rally_group;
        autoC766BFFC_u = UnitGroupCount(autoC766BFFC_g, c_unitCountAll);
        for (;; autoC766BFFC_u -= 1) {
            autoC766BFFC_var = UnitGroupUnitFromEnd(autoC766BFFC_g, autoC766BFFC_u);
            if (autoC766BFFC_var == null) { break; }
            lv_zerg_rally_player_position = FixedToInt(UnitGetCustomValue(autoC766BFFC_var, 1));
            if ((lv_zerg_rally_player_position <= 3)) {
                PingDestroy(libHots_gf_PingStoredForUnit(autoC766BFFC_var, 1));
                UnitGroupRemove(gv_flying_rally_group, autoC766BFFC_var);
                UnitRemove(autoC766BFFC_var);
            }

        }
        auto65A5A223_g = UnitGroup(null, 7, gf_get_region_of_influence_3v3(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto65A5A223_u = UnitGroupCount(auto65A5A223_g, c_unitCountAll);
        for (;; auto65A5A223_u -= 1) {
            auto65A5A223_var = UnitGroupUnitFromEnd(auto65A5A223_g, auto65A5A223_u);
            if (auto65A5A223_var == null) { break; }
            if ((gf_is_in_zerg_highgrounds(auto65A5A223_var) == false)) {
                UnitRemove(auto65A5A223_var);
            }

        }
        auto70122CC1_g = gv_terrans_team_bottom;
        auto70122CC1_var = -1;
        while (true) {
            auto70122CC1_var = PlayerGroupNextPlayer(auto70122CC1_g, auto70122CC1_var);
            if (auto70122CC1_var < 0) { break; }
            auto89F91751_g = UnitGroup(null, gv_players[auto70122CC1_var].lv__3v3_zerg_pid, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto89F91751_u = UnitGroupCount(auto89F91751_g, c_unitCountAll);
            for (;; auto89F91751_u -= 1) {
                auto89F91751_var = UnitGroupUnitFromEnd(auto89F91751_g, auto89F91751_u);
                if (auto89F91751_var == null) { break; }
                UnitRemove(auto89F91751_var);
            }
            if ((gv_players[auto70122CC1_var].lv_alive == false)) {
                gf_create_karax_for_player(auto70122CC1_var, null);
            }

        }
    }

}

void gf_fill_fw_grid () {
    // Variable Declarations
    int lv_i;
    int lv_j;
    fixed lv_k;
    fixed lv_l;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;
    lv_j = 1;

    // Implementation
    while ((lv_i <= 8)) {
        lv_j = 1;
        lv_l = 0.0;
        while ((lv_j <= 8)) {
            gv_fw_grid[lv_i][lv_j] = Point((112.0 + lv_k), (130.0 - lv_l));
            lv_l += 2.0;
            lv_j += 1;
        }
        lv_k += 2.0;
        lv_i += 1;
    }
}

void gf_shot_fireworks (int lp_waves) {
    // Variable Declarations
    int lv_i;
    point[4] lv_used_points;

    // Automatic Variable Declarations
    playergroup autoE6C34CE4_g;
    int autoE6C34CE4_var;
    int autoFBAE9688_val;

    // Variable Initialization

    // Implementation
    autoE6C34CE4_g = gv_terrans;
    autoE6C34CE4_var = -1;
    while (true) {
        autoE6C34CE4_var = PlayerGroupNextPlayer(autoE6C34CE4_g, autoE6C34CE4_var);
        if (autoE6C34CE4_var < 0) { break; }
        VisRevealArea(autoE6C34CE4_var, RegionEntireMap(), 0.0, false);
        CameraPan(autoE6C34CE4_var, PointFromId(1910508930), 0.0, -1, 10.0, false);
    }
    while ((lv_i < lp_waves)) {
        lv_used_points[1] = gv_fw_grid[RandomInt(1, 8)][RandomInt(1, 8)];
        lv_used_points[2] = gv_fw_grid[RandomInt(1, 8)][RandomInt(1, 8)];
        lv_used_points[3] = gv_fw_grid[RandomInt(1, 8)][RandomInt(1, 8)];
        autoFBAE9688_val = RandomInt(1, 3);
        if (autoFBAE9688_val == 1) {
            Wait(0.125, c_timeGame);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksRed", c_unitCreateIgnorePlacement, 0, lv_used_points[1]);
            Wait(0.125, c_timeGame);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksYellow", c_unitCreateIgnorePlacement, 0, lv_used_points[2]);
            Wait(0.125, c_timeGame);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksBlue", c_unitCreateIgnorePlacement, 0, lv_used_points[3]);
        }
        else if (autoFBAE9688_val == 2) {
            Wait(0.125, c_timeGame);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksYellow", c_unitCreateIgnorePlacement, 0, lv_used_points[2]);
            Wait(0.125, c_timeGame);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksRed", c_unitCreateIgnorePlacement, 0, lv_used_points[1]);
            Wait(0.125, c_timeGame);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksBlue", c_unitCreateIgnorePlacement, 0, lv_used_points[3]);
        }
        else if (autoFBAE9688_val == 3) {
            Wait(0.125, c_timeGame);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksBlue", c_unitCreateIgnorePlacement, 0, lv_used_points[3]);
            Wait(0.125, c_timeGame);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksYellow", c_unitCreateIgnorePlacement, 0, lv_used_points[2]);
            Wait(0.125, c_timeGame);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksRed", c_unitCreateIgnorePlacement, 0, lv_used_points[1]);
        }
        else {
        }
        lv_i += 1;
    }
}

void gf_end_game_3v3 () {
    // Automatic Variable Declarations
    playergroup auto459C5D99_g;
    int auto459C5D99_var;
    playergroup auto36D4379E_g;
    int auto36D4379E_var;
    unitgroup auto68E5B62C_g;
    int auto68E5B62C_u;
    unit auto68E5B62C_var;
    playergroup auto49494231_g;
    int auto49494231_var;
    playergroup autoB48C9BF1_g;
    int autoB48C9BF1_var;
    playergroup autoA952AF91_g;
    int autoA952AF91_var;
    playergroup autoADE5D34D_g;
    int autoADE5D34D_var;
    playergroup auto2433D401_g;
    int auto2433D401_var;

    // Implementation
    if (((gf_did_top_win() == true) || (gf_did_bottom_win() == true))) {
        gf_shot_fireworks(15);
    }

    if ((gf_did_bottom_win() == true)) {
        auto459C5D99_g = gv_terrans_team_bottom;
        auto459C5D99_var = -1;
        while (true) {
            auto459C5D99_var = PlayerGroupNextPlayer(auto459C5D99_g, auto459C5D99_var);
            if (auto459C5D99_var < 0) { break; }
            gv_players[auto459C5D99_var].lv_elo = (gv_players[auto459C5D99_var].lv_elo + gf_get_reward_elo_count(auto459C5D99_var));
            gf_Game_Banks_handler("save", auto459C5D99_var, gv_players[auto459C5D99_var].lv_elo, 0, 0);
        }
    }

    if ((gf_did_top_win() == true)) {
        auto36D4379E_g = gv_terrans_team_top;
        auto36D4379E_var = -1;
        while (true) {
            auto36D4379E_var = PlayerGroupNextPlayer(auto36D4379E_g, auto36D4379E_var);
            if (auto36D4379E_var < 0) { break; }
            gv_players[auto36D4379E_var].lv_elo = (gv_players[auto36D4379E_var].lv_elo + gf_get_reward_elo_count(auto36D4379E_var));
            gf_Game_Banks_handler("save", auto36D4379E_var, gv_players[auto36D4379E_var].lv_elo, 0, 0);
        }
    }

    auto68E5B62C_g = UnitGroup("Hive2", 7, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto68E5B62C_u = UnitGroupCount(auto68E5B62C_g, c_unitCountAll);
    for (;; auto68E5B62C_u -= 1) {
        auto68E5B62C_var = UnitGroupUnitFromEnd(auto68E5B62C_g, auto68E5B62C_u);
        if (auto68E5B62C_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto68E5B62C_var, true);
    }
    Wait(3.0, c_timeGame);
    if (((gf_is_terran_dead() == true) || (gf_is_zerg_dead() == true))) {
        auto2433D401_g = gv_terrans;
        auto2433D401_var = -1;
        while (true) {
            auto2433D401_var = PlayerGroupNextPlayer(auto2433D401_g, auto2433D401_var);
            if (auto2433D401_var < 0) { break; }
            GameOver(auto2433D401_var, c_gameOverTie, true, true);
        }
    }
    else {
        if ((gf_did_bottom_win() == true)) {
            auto49494231_g = gv_terrans_team_top;
            auto49494231_var = -1;
            while (true) {
                auto49494231_var = PlayerGroupNextPlayer(auto49494231_g, auto49494231_var);
                if (auto49494231_var < 0) { break; }
                GameOver(auto49494231_var, c_gameOverDefeat, true, true);
            }
            autoB48C9BF1_g = gv_terrans_team_bottom;
            autoB48C9BF1_var = -1;
            while (true) {
                autoB48C9BF1_var = PlayerGroupNextPlayer(autoB48C9BF1_g, autoB48C9BF1_var);
                if (autoB48C9BF1_var < 0) { break; }
                GameOver(autoB48C9BF1_var, c_gameOverVictory, true, true);
            }
        }

        if ((gf_did_top_win() == true)) {
            autoA952AF91_g = gv_terrans_team_top;
            autoA952AF91_var = -1;
            while (true) {
                autoA952AF91_var = PlayerGroupNextPlayer(autoA952AF91_g, autoA952AF91_var);
                if (autoA952AF91_var < 0) { break; }
                GameOver(autoA952AF91_var, c_gameOverVictory, true, true);
            }
            autoADE5D34D_g = gv_terrans_team_bottom;
            autoADE5D34D_var = -1;
            while (true) {
                autoADE5D34D_var = PlayerGroupNextPlayer(autoADE5D34D_g, autoADE5D34D_var);
                if (autoADE5D34D_var < 0) { break; }
                GameOver(autoADE5D34D_var, c_gameOverDefeat, true, true);
            }
        }

    }
}

void gf_flush_privileges_3v3_OAU () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_terrans_team_top_open_access_units, gv_terrans_team_top, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_terrans_team_bottom_open_access_units, gv_terrans_team_bottom, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
}

bool gf_did_top_win () {
    // Variable Declarations
    bool lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gf_is_terrans_team_top_dead() == false) && ((gf_is_terrans_team_bottom_playing() == false) || (gf_is_terrans_team_bottom_dead() == true))) {
        lv_result = true;
    }

    return lv_result;
}

bool gf_did_bottom_win () {
    // Variable Declarations
    bool lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gf_is_terrans_team_bottom_dead() == false) && ((gf_is_terrans_team_top_playing() == false) || (gf_is_terrans_team_top_dead() == true))) {
        lv_result = true;
    }

    return lv_result;
}

bool gf_is_terrans_team_bottom_dead () {
    // Variable Declarations
    bool lv_return;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (true) {
        lv_return = true;
    }

    return lv_return;
}

bool gf_is_terrans_team_top_dead () {
    // Variable Declarations
    bool lv_return;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (true) {
        lv_return = true;
    }

    return lv_return;
}

bool gf_is_terrans_team_top_playing () {
    // Variable Declarations
    bool lv_return;

    // Automatic Variable Declarations
    playergroup auto0DE653F0_g;
    int auto0DE653F0_var;

    // Variable Initialization

    // Implementation
    auto0DE653F0_g = gv_terrans_team_top;
    auto0DE653F0_var = -1;
    while (true) {
        auto0DE653F0_var = PlayerGroupNextPlayer(auto0DE653F0_g, auto0DE653F0_var);
        if (auto0DE653F0_var < 0) { break; }
        if ((PlayerStatus(auto0DE653F0_var) == c_playerStatusActive)) {
            lv_return = true;
        }

    }
    return lv_return;
}

bool gf_is_terrans_team_bottom_playing () {
    // Variable Declarations
    bool lv_return;

    // Automatic Variable Declarations
    playergroup auto17C6E44C_g;
    int auto17C6E44C_var;

    // Variable Initialization

    // Implementation
    auto17C6E44C_g = gv_terrans_team_bottom;
    auto17C6E44C_var = -1;
    while (true) {
        auto17C6E44C_var = PlayerGroupNextPlayer(auto17C6E44C_g, auto17C6E44C_var);
        if (auto17C6E44C_var < 0) { break; }
        if ((PlayerStatus(auto17C6E44C_var) == c_playerStatusActive)) {
            lv_return = true;
        }

    }
    return lv_return;
}

bool gf_is_top_hive_dead () {
    // Variable Declarations
    bool lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(UnitFromId(706616818)) == false)) {
        lv_result = true;
    }

    return lv_result;
}

bool gf_is_bottom_hive_dead () {
    // Variable Declarations
    bool lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(UnitFromId(478555519)) == false)) {
        lv_result = true;
    }

    return lv_result;
}

bool gf_can_cross_middle_in_3v3 (unit lp_unit_param) {
    // Variable Declarations
    bool lv_result;
    string lv_unit_type;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit_type = UnitGetType(lp_unit_param);

    // Implementation
    if (((UnitTypeTestFlag(lv_unit_type, c_unitFlagMissile) == true) || (lv_unit_type == "SpaceBalls") || (lv_unit_type == "Medivac") || (lv_unit_type == "Buggo") || (lv_unit_type == "Hercules") || (lv_unit_type == "Overseer"))) {
        lv_result = true;
    }

    return lv_result;
}

void gf_init_3v3 () {
    // Variable Declarations
    int lv_player_id;
    int lv_player_position;
    unit lv_flying_rally;
    int lv_index;
    unit[5] lv_bs;
    int lv_zpid_position;
    point lv_point;
    region lv_region;

    // Automatic Variable Declarations
    unitgroup auto587CED75_g;
    int auto587CED75_u;
    unit auto587CED75_var;
    const int auto46451FDA_ae = 6;
    const int auto46451FDA_ai = 1;
    unitgroup auto8ADABB05_g;
    int auto8ADABB05_u;
    unit auto8ADABB05_var;
    unitgroup auto90631DD0_g;
    int auto90631DD0_u;
    unit auto90631DD0_var;
    unitgroup auto01291A3C_g;
    int auto01291A3C_u;
    unit auto01291A3C_var;

    // Variable Initialization
    lv_index = 1;

    // Implementation
    if ((gf_is_3v3() == true)) {
        UISetResourceVisible(PlayerGroupAll(), c_resourceTypeTerrazine, true);
        gf_fill_fw_grid();
        gf_set_3v3_alliances();
        lv_index = 1;
        for ( ; ( (auto46451FDA_ai >= 0 && lv_index <= auto46451FDA_ae) || (auto46451FDA_ai < 0 && lv_index >= auto46451FDA_ae) ) ; lv_index += auto46451FDA_ai ) {
            if ((gv_players[lv_index].lv_alive == true)) {
                TechTreeAbilityAllow(lv_index, AbilityCommand("BuildBuilder", 22), true);
                TechTreeAbilityAllow(lv_index, AbilityCommand("BuildBuilderScalingStructures", 6), true);
                TechTreeAbilityAllow(lv_index, AbilityCommand("ConstructionYardResearch", 10), true);
                TechTreeAbilityAllow(lv_index, AbilityCommand("ConstructionYardResearch", 11), true);
                TechTreeAbilityAllow(lv_index, AbilityCommand("ConstructionYardResearch", 12), true);
                TechTreeAbilityAllow(gv_players[lv_index].lv__3v3_zerg_pid, AbilityCommand("DestroyStructure", 0), false);
                TechTreeAbilityAllow(lv_index, AbilityCommand("BarracksTrain2", 18), true);
                PlayerModifyPropertyInt(lv_index, c_playerPropTerrazine, c_playerPropOperSetTo, 276);
                TechTreeUpgradeAddLevel(lv_index, "Mode3v3", 1);
                TechTreeUpgradeAddLevel(gv_players[lv_index].lv__3v3_zerg_pid, "Mode3v3", 1);
                TechTreeUpgradeAddLevel(gv_players[lv_index].lv__3v3_zerg_pid, "MechaZerg3v3", 1);
                CatalogReferenceSet("Button,Pylon,AlertTooltip", lv_index, "Provides powerful buffs and creates a powerfield for photon cannons.");
                CatalogReferenceSet("Button,Pylon,Tooltip", lv_index, "Provides powerful buffs and creates a powerfield for photon cannons.");
                lv_zpid_position = gf__3v3_get_target_or_random_enemy_terran_position(lv_index);
                lv_point = PointFromName(("Nydus" + IntToString(lv_zpid_position)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_players[lv_index].lv__3v3_zerg_pid, lv_point);
                lv_region = RegionFromName(("geysers p" + IntToString(gv_players[lv_index].lv_position)));
                auto8ADABB05_g = UnitGroup("Obelisk", c_playerAny, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto8ADABB05_u = UnitGroupCount(auto8ADABB05_g, c_unitCountAll);
                for (;; auto8ADABB05_u -= 1) {
                    auto8ADABB05_var = UnitGroupUnitFromEnd(auto8ADABB05_g, auto8ADABB05_u);
                    if (auto8ADABB05_var == null) { break; }
                    UnitSetOwner(auto8ADABB05_var, lv_index, true);
                }
            }

        }
        gf_init_3v3_flying_rally();
        gf_init_3v3_vision();
        gf_manage_3v3_triggers(true);
        gf_disable_uneeded_triggers_for_3v3();
        UnitSetPosition(UnitFromId(706616818), PointWithOffset(UnitGetPosition(UnitFromId(706616818)), 0.0, -3.0), false);
        UnitSetPosition(UnitFromId(478555519), PointWithOffset(UnitGetPosition(UnitFromId(478555519)), 0.0, 3.0), false);
        auto90631DD0_g = UnitGroup("Hive2", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto90631DD0_u = UnitGroupCount(auto90631DD0_g, c_unitCountAll);
        for (;; auto90631DD0_u -= 1) {
            auto90631DD0_var = UnitGroupUnitFromEnd(auto90631DD0_g, auto90631DD0_u);
            if (auto90631DD0_var == null) { break; }
            UnitSetPropertyFixed(auto90631DD0_var, c_unitPropShields, 5000.0);
            UnitSetPropertyFixed(auto90631DD0_var, c_unitPropShieldsMax, 5000.0);
            UnitSetPropertyFixed(auto90631DD0_var, c_unitPropShieldsRegen, 10.0);
            UnitBehaviorAdd(auto90631DD0_var, "HiveKilled", auto90631DD0_var, 1);
        }
        UnitSetPosition(UnitFromId(331028726), PointWithOffset(UnitGetPosition(UnitFromId(331028726)), -1.0, 0.0), false);
        UnitSetPosition(UnitFromId(1394953524), PointWithOffset(UnitGetPosition(UnitFromId(1394953524)), 1.0, 0.0), false);
        UnitSetPosition(UnitFromId(29537112), PointWithOffset(UnitGetPosition(UnitFromId(29537112)), 1.0, 0.0), false);
        UnitSetPosition(UnitFromId(506911406), PointWithOffset(UnitGetPosition(UnitFromId(506911406)), -1.0, 0.0), false);
        auto01291A3C_g = UnitGroup("Obelisk", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto01291A3C_u = UnitGroupCount(auto01291A3C_g, c_unitCountAll);
        for (;; auto01291A3C_u -= 1) {
            auto01291A3C_var = UnitGroupUnitFromEnd(auto01291A3C_g, auto01291A3C_u);
            if (auto01291A3C_var == null) { break; }
            UnitRemove(auto01291A3C_var);
        }
        Wait(5.0, c_timeGame);
        gf_create_3v3_objectives();
        Wait(15.0, c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/639B940A"));
        Wait(2.0, c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/D3211D20"));
        Wait(2.0, c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/9A19E1ED"));
        Wait(2.0, c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/9C0F1924"));
    }
    else {
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "DOM_Fire_Large_Long");
        auto587CED75_g = UnitGroup("Obelisk", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto587CED75_u = UnitGroupCount(auto587CED75_g, c_unitCountAll);
        for (;; auto587CED75_u -= 1) {
            auto587CED75_var = UnitGroupUnitFromEnd(auto587CED75_g, auto587CED75_u);
            if (auto587CED75_var == null) { break; }
            UnitRemove(auto587CED75_var);
        }
    }
}

void gf_manage_3v3_triggers (bool lp_enable) {
    // Variable Declarations
    bool lv_on_off;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_on_off = true;

    // Implementation
    if ((lp_enable == true)) {
        lv_on_off = true;
    }
    else {
        lv_on_off = false;
    }
    TriggerEnable(gt_firewall_kill, lv_on_off);
    TriggerEnable(gt_remove_invalid_ion, lv_on_off);
    TriggerEnable(gt_TerrazineIncome, lv_on_off);
    TriggerEnable(gt_PeriodicZCCSpawn, lv_on_off);
    TriggerEnable(gt_SpawnZCCUnit3v3, lv_on_off);
    TriggerEnable(gt_ZCCupgrades, lv_on_off);
    TriggerEnable(gt_zerg_rally_center, lv_on_off);
    TriggerEnable(gt_zerg_rally_left, lv_on_off);
    TriggerEnable(gt_zerg_rally_right, lv_on_off);
    TriggerEnable(gt_zerg_rally_equal_on, lv_on_off);
    TriggerEnable(gt_zerg_rally_minus_on, lv_on_off);
    TriggerEnable(gt_zerg_rally_plus_on, lv_on_off);
    TriggerEnable(gt_relocate_spawners_rally_action, lv_on_off);
    TriggerEnable(gt_zccdies, lv_on_off);
    TriggerEnable(gt_zccbuilt, lv_on_off);
    TriggerEnable(gt_zagara_death_timer, lv_on_off);
    TriggerEnable(gt_update_3v3_objectives, lv_on_off);
    TriggerEnable(gt_Nydusdied, lv_on_off);
    TriggerEnable(gt_Nydusfinished, lv_on_off);
    TriggerEnable(gt_protect_top_hive_from_allies, lv_on_off);
    TriggerEnable(gt_protect_bottom_hive_from_allies, lv_on_off);
    TriggerEnable(gt_hive_bottom_killed, lv_on_off);
    TriggerEnable(gt_hive_top_killed, lv_on_off);
    TriggerEnable(gt_MechaUpgradefinished, lv_on_off);
    TriggerEnable(gt_Larvadies, lv_on_off);
    TriggerEnable(gt_Larvamutatesintobuilding, lv_on_off);
    TriggerEnable(gt_CocoonorOmegadies3v3, lv_on_off);
    TriggerEnable(gt_Cocoongotspawned3v3, lv_on_off);
    TriggerEnable(gt_Cocoonspawnfinished3v3, lv_on_off);
}

void gf_disable_uneeded_triggers_for_3v3 () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(gt_checkflankrallies, false);
    TriggerEnable(gt_Checkbridgesevery45s, false);
    TriggerEnable(gt_checkplayerseveryminute, false);
    TriggerEnable(gt_checkplayerseveryminute, false);
    TriggerEnable(gt_specialunitgotborn, false);
    TriggerEnable(gt_everyfiveminutes, false);
    TriggerEnable(gt_every45seconds, false);
    TriggerEnable(gt_Terranenterszerghighground, false);
    TriggerEnable(gt_invaderleaveszerghighground, false);
    TriggerEnable(gt_invaderdies, false);
    TriggerEnable(gt_Cocoongotspawned, false);
    TriggerEnable(gt_Cocoonspawnfinished, false);
    TriggerEnable(gt_CocoonorOmegadies, false);
    TriggerEnable(gt_TryOmegaOrderRefresh, false);
    TriggerEnable(gt_f2triggerevery5s, false);
    TriggerEnable(gt_spinegetsattacked, false);
    TriggerEnable(gt_buildinggetsattacked, false);
    TriggerEnable(gt_buildinggetsattackedtrydefendwithwizards, false);
    TriggerEnable(gt_nestislowhealth, false);
    TriggerEnable(gt_buildinggetsattackedtrydefendwithhydras, false);
    TriggerEnable(gt_hydragetsattacked, false);
    TriggerEnable(gt_checkhydras, false);
    TriggerEnable(gt_hydragotborn, false);
    TriggerEnable(gt_nestdied, false);
    TriggerEnable(gt_infestorgetsattacked, false);
    TriggerEnable(gt_spinedies, false);
    TriggerEnable(gt_add_infestor_to_group, false);
    TriggerEnable(gt_Feedidleinfestorsevery21s, false);
}

void gf_create_3v3_objectives () {
    // Variable Declarations
    playergroup lv_player_group;

    // Automatic Variable Declarations
    playergroup auto18CFFB66_g;
    int auto18CFFB66_var;

    // Variable Initialization
    lv_player_group = PlayerGroupEmpty();

    // Implementation
    auto18CFFB66_g = gv_terrans;
    auto18CFFB66_var = -1;
    while (true) {
        auto18CFFB66_var = PlayerGroupNextPlayer(auto18CFFB66_g, auto18CFFB66_var);
        if (auto18CFFB66_var < 0) { break; }
        lv_player_group = PlayerGroupSingle(auto18CFFB66_var);
        ObjectiveCreateForPlayers(StringExternal("Param/Value/01AD00A3"), StringExternal("Param/Value/74473846"), c_objectiveStateActive, true, lv_player_group);
        gv__3v3_objective_kill_other_team[auto18CFFB66_var] = ObjectiveLastCreated();
        ObjectiveCreateForPlayers(StringExternal("Param/Value/B50ED78D"), StringExternal("Param/Value/740F8555"), c_objectiveStateActive, false, lv_player_group);
        gv__3v3_objective_kill_hive[auto18CFFB66_var] = ObjectiveLastCreated();
        ObjectiveCreateForPlayers(StringExternal("Param/Value/A4896498"), StringExternal("Param/Value/A34587B0"), c_objectiveStateActive, false, lv_player_group);
        gv__3v3_help_with_zagara[auto18CFFB66_var] = ObjectiveLastCreated();
    }
}

void gf_settle_3v3_player () {
    // Automatic Variable Declarations
    playergroup autoD188B6BD_g;
    int autoD188B6BD_var;
    playergroup autoFC29BE83_g;
    int autoFC29BE83_var;

    // Implementation
    if ((gf_get_lobby_setting_player_distro() == 2)) {
        gf_set_elo_based_team();
    }
    else {
        autoD188B6BD_g = gv_terrans;
        autoD188B6BD_var = -1;
        while (true) {
            autoD188B6BD_var = PlayerGroupNextPlayer(autoD188B6BD_g, autoD188B6BD_var);
            if (autoD188B6BD_var < 0) { break; }
            if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), autoD188B6BD_var) == true)) {
                PlayerGroupAdd(gv_terrans_team_top, autoD188B6BD_var);
            }
            else {
                PlayerGroupAdd(gv_terrans_team_bottom, autoD188B6BD_var);
            }
        }
    }
    autoFC29BE83_g = gv_terrans;
    autoFC29BE83_var = -1;
    while (true) {
        autoFC29BE83_var = PlayerGroupNextPlayer(autoFC29BE83_g, autoFC29BE83_var);
        if (autoFC29BE83_var < 0) { break; }
        gf_settle_player(autoFC29BE83_var);
    }
}

int gf_get_lobby_setting_player_distro () {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    string auto101046E3_val;

    // Variable Initialization
    lv_r = 1;

    // Implementation
    auto101046E3_val = GameAttributeGameValue("9");
    if (auto101046E3_val == "0001") {
        lv_r = 1;
    }
    else if (auto101046E3_val == "0002") {
        lv_r = 2;
    }
    else {
    }
    return lv_r;
}

int gf_get_random_free_3v3_position (int lp_player) {
    // Variable Declarations
    int lv_return;
    int[3][4] lv_sets;
    int lv_s;
    int lv_rand;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv__3v3_pos_taken_cnt[1] == 0)) {
        lv_sets[1][1] = 1;
        lv_sets[1][2] = 2;
        lv_sets[1][3] = 3;
    }
    else {
        if ((gv__3v3_pos_taken_cnt[1] == 1)) {
            if ((gv__3v3_pos_taken[1][1] == 1)) {
                lv_sets[1][1] = 2;
                lv_sets[1][2] = 3;
            }
            else {
                if ((gv__3v3_pos_taken[1][1] == 2)) {
                    lv_sets[1][1] = 1;
                    lv_sets[1][2] = 3;
                }
                else {
                    lv_sets[1][1] = 1;
                    lv_sets[1][2] = 2;
                }
            }
        }
        else {
            if ((((gv__3v3_pos_taken[1][1] == 1) && (gv__3v3_pos_taken[1][2] == 2)) || ((gv__3v3_pos_taken[1][1] == 2) && (gv__3v3_pos_taken[1][2] == 1)))) {
                lv_sets[1][1] = 3;
            }
            else {
                if ((((gv__3v3_pos_taken[1][1] == 1) && (gv__3v3_pos_taken[1][2] == 3)) || ((gv__3v3_pos_taken[1][1] == 3) && (gv__3v3_pos_taken[1][2] == 1)))) {
                    lv_sets[1][1] = 2;
                }
                else {
                    if ((((gv__3v3_pos_taken[1][1] == 2) && (gv__3v3_pos_taken[1][2] == 3)) || ((gv__3v3_pos_taken[1][1] == 3) && (gv__3v3_pos_taken[1][2] == 2)))) {
                        lv_sets[1][1] = 1;
                    }

                }
            }
        }
    }
    if ((gv__3v3_pos_taken_cnt[2] == 0)) {
        lv_sets[2][1] = 4;
        lv_sets[2][2] = 5;
        lv_sets[2][3] = 6;
    }
    else {
        if ((gv__3v3_pos_taken_cnt[2] == 1)) {
            if ((gv__3v3_pos_taken[2][1] == 4)) {
                lv_sets[2][1] = 5;
                lv_sets[2][2] = 6;
            }
            else {
                if ((gv__3v3_pos_taken[2][1] == 5)) {
                    lv_sets[2][1] = 4;
                    lv_sets[2][2] = 6;
                }
                else {
                    lv_sets[2][1] = 4;
                    lv_sets[2][2] = 5;
                }
            }
        }
        else {
            if ((((gv__3v3_pos_taken[2][1] == 4) && (gv__3v3_pos_taken[2][2] == 5)) || ((gv__3v3_pos_taken[2][1] == 5) && (gv__3v3_pos_taken[2][2] == 4)))) {
                lv_sets[2][1] = 6;
            }
            else {
                if ((((gv__3v3_pos_taken[2][1] == 4) && (gv__3v3_pos_taken[2][2] == 6)) || ((gv__3v3_pos_taken[2][1] == 6) && (gv__3v3_pos_taken[2][2] == 4)))) {
                    lv_sets[2][1] = 5;
                }
                else {
                    if ((((gv__3v3_pos_taken[2][1] == 5) && (gv__3v3_pos_taken[2][2] == 6)) || ((gv__3v3_pos_taken[2][1] == 6) && (gv__3v3_pos_taken[2][2] == 5)))) {
                        lv_sets[2][1] = 4;
                    }

                }
            }
        }
    }
    if ((PlayerGroupHasPlayer(gv_terrans_team_top, lp_player) == true)) {
        lv_s = 1;
    }
    else {
        lv_s = 2;
    }
    while ((lv_return == 0)) {
        if ((gv__3v3_pos_taken_cnt[lv_s] == 0)) {
            lv_rand = gf_roll_dice();
            if ((lv_rand <= 2)) {
                lv_p = 1;
            }
            else {
                if ((lv_rand <= 4)) {
                    lv_p = 2;
                }
                else {
                    lv_p = 3;
                }
            }
        }
        else {
            if ((gv__3v3_pos_taken_cnt[lv_s] == 1)) {
                lv_rand = gf_flip_coin();
                if ((lv_rand == 1)) {
                    lv_p = 1;
                }
                else {
                    lv_p = 2;
                }
            }
            else {
                lv_p = 1;
            }
        }
        if ((gv_positions[lv_sets[lv_s][lv_p]] == 0)) {
            lv_return = lv_sets[lv_s][lv_p];
            gv__3v3_pos_taken_cnt[lv_s] = (gv__3v3_pos_taken_cnt[lv_s] + 1);
            if ((gv__3v3_pos_taken_cnt[lv_s] < 3)) {
                gv__3v3_pos_taken[lv_s][gv__3v3_pos_taken_cnt[lv_s]] = lv_sets[lv_s][lv_p];
            }

        }

    }
    return lv_return;
}

void gf_set_3v3_alliances () {
    int init_i;

    // Variable Declarations
    int lv_i;
    playergroup lv_lg;
    playergroup[3] lv_lgt;
    playergroup lv_all_zerg_pid_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;
    lv_lg = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_lgt[init_i] = PlayerGroupEmpty();
    }
    lv_all_zerg_pid_group = PlayerGroupEmpty();

    // Implementation
    while ((lv_i <= 6)) {
        if ((gf_get_player_at_position((7 - gv_players[lv_i].lv_position)) == 0)) {
            gv_players[lv_i].lv__3v3_nemesis_terran = gf__3v3_get_alternative_terran_if_nemesis_doesnt_exist(lv_i);
        }
        else {
            gv_players[lv_i].lv__3v3_nemesis_terran = gf_get_player_at_position((7 - gv_players[lv_i].lv_position));
        }
        if ((gf_is_3v3_local_test() == true)) {
            gv_players[lv_i].lv__3v3_nemesis_terran = 1;
        }

        gv_players[lv_i].lv__3v3_zerg_pid = (lv_i + 7);
        PlayerSetColorIndex(gv_players[lv_i].lv__3v3_zerg_pid, PlayerGetColorIndex(lv_i, false), true);
        libNtve_gf_SetAlliance(7, gv_players[lv_i].lv__3v3_zerg_pid, libNtve_ge_AllianceSetting_Ally);
        if ((gv_players[lv_i].lv_position <= 3)) {
            PlayerGroupAdd(lv_lgt[1], gv_players[lv_i].lv__3v3_zerg_pid);
            PlayerGroupAdd(gv_zerg_team_top, gv_players[lv_i].lv__3v3_zerg_pid);
        }
        else {
            PlayerGroupAdd(lv_lgt[2], gv_players[lv_i].lv__3v3_zerg_pid);
            PlayerGroupAdd(gv_zerg_team_bottom, gv_players[lv_i].lv__3v3_zerg_pid);
        }
        if ((gv_players[lv_i].lv_alive == false)) {
            if ((gv_players[lv_i].lv_position <= 3)) {
                PlayerGroupAdd(gv_terrans_team_top_open_access_units, gv_players[lv_i].lv__3v3_zerg_pid);
            }
            else {
                PlayerGroupAdd(gv_terrans_team_bottom_open_access_units, gv_players[lv_i].lv__3v3_zerg_pid);
            }
        }

        lv_i += 1;
    }
    libNtve_gf_AddPlayerGroupToPlayerGroup(lv_lgt[1], lv_all_zerg_pid_group);
    libNtve_gf_AddPlayerGroupToPlayerGroup(lv_lgt[2], lv_all_zerg_pid_group);
    libNtve_gf_SetPlayerGroupAlliance(lv_all_zerg_pid_group, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetPlayerGroupAlliance(gv_terrans_team_top, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetPlayerGroupAlliance(gv_terrans_team_bottom, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_zerg_team_top, gv_terrans_team_top, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    gf_first_group_give_control_to_second_group(gv_zerg_team_top, gv_terrans_team_top);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_zerg_team_bottom, gv_terrans_team_bottom, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    gf_first_group_give_control_to_second_group(gv_zerg_team_bottom, gv_terrans_team_bottom);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_terrans_team_top, gv_terrans_team_bottom, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_terrans_team_bottom, gv_terrans_team_top, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_terrans_team_top_open_access_units, gv_terrans_team_top, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_terrans_team_bottom_open_access_units, gv_terrans_team_bottom, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
    lv_i = 1;
    while ((lv_i <= 6)) {
        PlayerSetAlliance(gv_players[lv_i].lv__3v3_zerg_pid, c_allianceIdControl, lv_i, true);
        PlayerSetAlliance(lv_i, c_allianceIdSpend, gv_players[lv_i].lv__3v3_zerg_pid, true);
        lv_i += 1;
    }
    if ((gf_is_3v3_local_test() == true)) {
        libNtve_gf_SetAlliance(1, gv_players[1].lv__3v3_zerg_pid, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
        PlayerSetAlliance(gv_players[1].lv__3v3_zerg_pid, c_allianceIdControl, 1, true);
        PlayerSetAlliance(1, c_allianceIdSpend, gv_players[1].lv__3v3_zerg_pid, true);
    }

}

void gf_first_group_give_control_to_second_group (playergroup lp_group1, playergroup lp_group2) {
    // Variable Declarations
    int lv_first_player;
    int lv_second_player;

    // Automatic Variable Declarations
    playergroup autoAED21347_g;
    playergroup autoAF2B4D88_g;

    // Variable Initialization

    // Implementation
    autoAED21347_g = lp_group1;
    lv_first_player = -1;
    while (true) {
        lv_first_player = PlayerGroupNextPlayer(autoAED21347_g, lv_first_player);
        if (lv_first_player < 0) { break; }
        autoAF2B4D88_g = lp_group2;
        lv_second_player = -1;
        while (true) {
            lv_second_player = PlayerGroupNextPlayer(autoAF2B4D88_g, lv_second_player);
            if (lv_second_player < 0) { break; }
            PlayerSetAlliance(lv_first_player, c_allianceIdControl, lv_second_player, true);
        }
    }
}

int gf__3v3_get_alternative_terran_if_nemesis_doesnt_exist (int lp_pid) {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((PlayerGroupHasPlayer(gv_terrans_team_top, lp_pid) == true)) {
        lv_r = gv_positions[gf_get_position_of_random_alive_player_from_group(gv_terrans_team_bottom)];
    }
    else {
        lv_r = gv_positions[gf_get_position_of_random_alive_player_from_group(gv_terrans_team_top)];
    }
    return lv_r;
}

void gf_set_elo_based_team () {
    // Variable Declarations
    int lv_average_rating;
    int lv_i;
    int lv_j;
    int lv_best_match_rating;
    int lv_player1;
    int lv_player2;
    int lv_player3;
    playergroup lv_team1;
    playergroup lv_team2;

    // Automatic Variable Declarations
    const int auto591EC229_ae = 6;
    const int auto591EC229_ai = 1;
    const int autoF19A5AF5_ae = 6;
    const int autoF19A5AF5_ai = 1;
    const int autoEBB92745_ae = 6;
    const int autoEBB92745_ai = 1;

    // Variable Initialization
    lv_team1 = PlayerGroupEmpty();
    lv_team2 = PlayerGroupEmpty();

    // Implementation
    lv_average_rating = gf_get_average_elo_rating();
    lv_player1 = 1;
    lv_i = 2;
    for ( ; ( (auto591EC229_ai >= 0 && lv_i <= auto591EC229_ae) || (auto591EC229_ai < 0 && lv_i >= auto591EC229_ae) ) ; lv_i += auto591EC229_ai ) {
        lv_j = 3;
        for ( ; ( (autoF19A5AF5_ai >= 0 && lv_j <= autoF19A5AF5_ae) || (autoF19A5AF5_ai < 0 && lv_j >= autoF19A5AF5_ae) ) ; lv_j += autoF19A5AF5_ai ) {
            if ((lv_i != lv_j) && (gf_is_closer_to_average_elo_rating(lv_average_rating, lv_best_match_rating, lv_player1, lv_i, lv_j) == true)) {
                lv_best_match_rating = gf_get_team_average_elo_rating(lv_player1, lv_i, lv_j);
                lv_player2 = lv_i;
                lv_player3 = lv_j;
            }

        }
    }
    lv_i = 1;
    for ( ; ( (autoEBB92745_ai >= 0 && lv_i <= autoEBB92745_ae) || (autoEBB92745_ai < 0 && lv_i >= autoEBB92745_ae) ) ; lv_i += autoEBB92745_ai ) {
        if ((gv_players[lv_i].lv_alive == true)) {
            if ((lv_player1 != lv_i) && (lv_player2 != lv_i) && (lv_player3 != lv_i)) {
                PlayerGroupAdd(lv_team2, lv_i);
            }
            else {
                PlayerGroupAdd(lv_team1, lv_i);
            }
        }

    }
    if ((RandomInt(1, 2) == 1)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(lv_team1, gv_terrans_team_bottom);
        libNtve_gf_AddPlayerGroupToPlayerGroup(lv_team2, gv_terrans_team_top);
    }
    else {
        libNtve_gf_AddPlayerGroupToPlayerGroup(lv_team2, gv_terrans_team_top);
        libNtve_gf_AddPlayerGroupToPlayerGroup(lv_team1, gv_terrans_team_bottom);
    }
}

int gf_get_player_elo_rating (int lp_player_id) {
    // Variable Declarations
    int lv_player_elo;
    fixed lv_new_player_factor;
    int lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_players[lp_player_id].lv_alive == false)) {
        lv_result = 0;
    }
    else {
        lv_player_elo = gv_players[lp_player_id].lv_elo;
        lv_player_elo = MaxI(lv_player_elo, 1000);
        lv_player_elo = MinI(lv_player_elo, 2400);
        lv_new_player_factor = MinF(500.0, (gv_players[lp_player_id].lv_games * 100.0));
        lv_new_player_factor = (lv_new_player_factor - 500.0);
        lv_result = FixedToInt((lv_player_elo + lv_new_player_factor));
    }
    return lv_result;
}

bool gf_is_closer_to_average_elo_rating (int lp_average_rating, int lp_closest_rating, int lp_player1, int lp_player2, int lp_player3) {
    // Variable Declarations
    int lv_current_diff;
    int lv_new_diff;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_current_diff = AbsI((lp_average_rating - lp_closest_rating));
    lv_new_diff = AbsI((lp_average_rating - gf_get_team_average_elo_rating(lp_player1, lp_player2, lp_player3)));
    return (lv_new_diff < lv_current_diff);
}

int gf_get_team_average_elo_rating (int lp_player1, int lp_player2, int lp_player3) {
    // Variable Declarations
    int lv_elo_sum;
    int lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_elo_sum = (lv_elo_sum + gf_get_player_elo_rating(lp_player1));
    lv_elo_sum = (lv_elo_sum + gf_get_player_elo_rating(lp_player2));
    lv_elo_sum = (lv_elo_sum + gf_get_player_elo_rating(lp_player3));
    lv_result = (lv_elo_sum / 3);
    return lv_result;
}

int gf_get_average_elo_rating () {
    // Variable Declarations
    int lv_index;
    int lv_elo_sum;
    int lv_result;

    // Automatic Variable Declarations
    const int autoEC40C13C_ae = 6;
    const int autoEC40C13C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoEC40C13C_ai >= 0 && lv_index <= autoEC40C13C_ae) || (autoEC40C13C_ai < 0 && lv_index >= autoEC40C13C_ae) ) ; lv_index += autoEC40C13C_ai ) {
        lv_elo_sum = (lv_elo_sum + gf_get_player_elo_rating(lv_index));
    }
    lv_result = (lv_elo_sum / 6);
    return lv_result;
}

void gf_distribute_players_based_on_their_elo () {
    // Variable Declarations
    int lv_i;
    int lv_j;
    playergroup lv_s1;
    playergroup lv_s2;

    // Automatic Variable Declarations
    int auto2977B48E_ae;
    const int auto2977B48E_ai = 1;

    // Variable Initialization
    lv_s1 = PlayerGroupEmpty();
    lv_s2 = PlayerGroupEmpty();

    // Implementation
    gf_magic();
    auto2977B48E_ae = gv__3v3_player_elo_scores_cnt;
    lv_i = 1;
    for ( ; ( (auto2977B48E_ai >= 0 && lv_i <= auto2977B48E_ae) || (auto2977B48E_ai < 0 && lv_i >= auto2977B48E_ae) ) ; lv_i += auto2977B48E_ai ) {
        if ((lv_j == 1)) {
            PlayerGroupAdd(lv_s1, gv__3v3_player_elo_scores[lv_i][1]);
            lv_j = 0;
        }
        else {
            PlayerGroupAdd(lv_s2, gv__3v3_player_elo_scores[lv_i][1]);
            lv_j = 1;
        }
    }
    if ((RandomInt(1, 2) == 1)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(lv_s1, gv_terrans_team_bottom);
        libNtve_gf_AddPlayerGroupToPlayerGroup(lv_s2, gv_terrans_team_top);
    }
    else {
        libNtve_gf_AddPlayerGroupToPlayerGroup(lv_s1, gv_terrans_team_top);
        libNtve_gf_AddPlayerGroupToPlayerGroup(lv_s2, gv_terrans_team_bottom);
    }
}

void gf_magic () {
    // Variable Declarations
    int lv_a;
    int lv_b;
    int lv_c;
    bool lv_d;
    int lv_e;
    int lv_f;
    int[7][3] lv_g;
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    playergroup autoC345B98C_g;
    int autoC345B98C_var;
    int auto342EE619_ae;
    const int auto342EE619_ai = 1;
    int auto723AAD09_ae;
    const int auto723AAD09_ai = 1;

    // Variable Initialization
    lv_i = 1;
    lv_j = 1;

    // Implementation
    autoC345B98C_g = gv_terrans;
    autoC345B98C_var = -1;
    while (true) {
        autoC345B98C_var = PlayerGroupNextPlayer(autoC345B98C_g, autoC345B98C_var);
        if (autoC345B98C_var < 0) { break; }
        lv_a += 1;
        gv__3v3_player_elo_scores[lv_a][1] = autoC345B98C_var;
        gv__3v3_player_elo_scores[lv_a][2] = gv_players[autoC345B98C_var].lv_elo;
    }
    gv__3v3_player_elo_scores_cnt = lv_a;
    auto342EE619_ae = (lv_a - 1);
    lv_b = 1;
    for ( ; ( (auto342EE619_ai >= 0 && lv_b <= auto342EE619_ae) || (auto342EE619_ai < 0 && lv_b >= auto342EE619_ae) ) ; lv_b += auto342EE619_ai ) {
        lv_d = false;
        auto723AAD09_ae = (lv_a - lv_b);
        lv_c = 1;
        for ( ; ( (auto723AAD09_ai >= 0 && lv_c <= auto723AAD09_ae) || (auto723AAD09_ai < 0 && lv_c >= auto723AAD09_ae) ) ; lv_c += auto723AAD09_ai ) {
            if ((gv__3v3_player_elo_scores[(lv_c + 1)][2] < gv__3v3_player_elo_scores[lv_c][2])) {
                lv_e = gv__3v3_player_elo_scores[lv_c][2];
                lv_f = gv__3v3_player_elo_scores[lv_c][1];
                gv__3v3_player_elo_scores[lv_c][2] = gv__3v3_player_elo_scores[(lv_c + 1)][2];
                gv__3v3_player_elo_scores[lv_c][1] = gv__3v3_player_elo_scores[(lv_c + 1)][1];
                gv__3v3_player_elo_scores[(lv_c + 1)][2] = lv_e;
                gv__3v3_player_elo_scores[(lv_c + 1)][1] = lv_f;
                lv_d = true;
            }

        }
        if ((lv_d == false)) {
            lv_b = lv_a;
        }

    }
    lv_i = lv_a;
    while ((lv_i > 0)) {
        lv_g[lv_j][1] = gv__3v3_player_elo_scores[lv_i][1];
        lv_g[lv_j][2] = gv__3v3_player_elo_scores[lv_i][2];
        lv_i -= 1;
        lv_j += 1;
    }
    lv_i = 1;
    while ((lv_i <= lv_a)) {
        gv__3v3_player_elo_scores[lv_i][1] = lv_g[lv_i][1];
        gv__3v3_player_elo_scores[lv_i][2] = lv_g[lv_i][2];
        lv_i += 1;
    }
}

fixed gf_get_terrazine_income (int lp_player_id) {
    // Variable Declarations
    int lv_income;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_income = gv_players[lp_player_id].lv__3v3_terrazine_income;
    return (lv_income * gf_get_terrazine_multiplier(lp_player_id));
}

fixed gf_get_terrazine_multiplier (int lp_player_id) {
    // Variable Declarations
    unitgroup lv_terrazine_extractor;
    unitgroup lv_all_mineral_extractors;
    int lv_other_mineral_extractors;
    region lv_region;
    fixed lv_result;

    // Automatic Variable Declarations
    unitgroup auto6E2EEFBF_g;
    int auto6E2EEFBF_u;
    unit auto6E2EEFBF_var;

    // Variable Initialization
    lv_terrazine_extractor = UnitGroupEmpty();
    lv_all_mineral_extractors = UnitGroupEmpty();

    // Implementation
    lv_result = 1.0;
    auto6E2EEFBF_g = UnitGroup("TerrazineTank", lp_player_id, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6E2EEFBF_u = UnitGroupCount(auto6E2EEFBF_g, c_unitCountAll);
    for (;; auto6E2EEFBF_u -= 1) {
        auto6E2EEFBF_var = UnitGroupUnitFromEnd(auto6E2EEFBF_g, auto6E2EEFBF_u);
        if (auto6E2EEFBF_var == null) { break; }
        lv_result += 0.1001;
    }
    if ((gv_players[lp_player_id].lv_position <= 3)) {
        if ((gf_is_top_hive_dead() == true)) {
            lv_result *= 2.0;
        }

    }
    else {
        if ((gf_is_bottom_hive_dead() == true)) {
            lv_result *= 2.0;
        }

    }
    return lv_result;
}

void gf_create_zagara (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerStatus(lp_player) == c_playerStatusActive)) {
        if ((gv_players[lp_player].lv_position <= 3)) {
            if ((gf_is_terrans_team_bottom_dead() == true)) {
                gf_create_karax_for_player(lp_player, null);
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZaGara", 0, gv_players[lp_player].lv__3v3_zerg_pid, PointFromId(20243859));
                CameraPan(lp_player, PointFromId(20243859), 0.0, -1, 10.0, false);
            }
        }
        else {
            if ((gf_is_terrans_team_top_dead() == true)) {
                gf_create_karax_for_player(lp_player, null);
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZaGara", 0, gv_players[lp_player].lv__3v3_zerg_pid, PointFromId(1177115991));
                CameraPan(lp_player, PointFromId(1177115991), 0.0, -1, 10.0, false);
            }
        }
    }

}

void gf_Update_Hugs_Upgrade (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    CatalogReferenceSet("Behavior,HUGSAlgorythm,Modification.VitalMaxArray[Life]", gv_players[lp_player].lv__3v3_zerg_pid, FixedToString((gv_players[lp_player].lv__3v3_hug_stacks * 0.5), c_fixedPrecisionAny));
}

void gf_remove_count_dummy_stack (int lp_pid, string lp_ut) {
    // Variable Declarations
    unit lv_zcc;

    // Automatic Variable Declarations
    string auto126C1DE1_val;
    string auto4D713774_val;

    // Variable Initialization

    // Implementation
    lv_zcc = UnitGroupUnit(UnitGroup("HiveMindEmulator", lp_pid, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    if ((lv_zcc != null)) {
        auto4D713774_val = lp_ut;
        if (auto4D713774_val == "Larva3v3") {
            UnitBehaviorRemove(lv_zcc, "LarvaCountDummyStack", 1);
        }
        else {
        }
    }
    else {
        auto126C1DE1_val = lp_ut;
        if (auto126C1DE1_val == "Larva3v3") {
            if ((gv_zcc_stack_backup[lp_pid].lv_larva > 0)) {
                if ((gv_zcc_stack_backup[lp_pid].lv_larva == 1)) {
                    gv_zcc_stack_backup[lp_pid].lv_larva = 0;
                }
                else {
                    gv_zcc_stack_backup[lp_pid].lv_larva = (gv_zcc_stack_backup[lp_pid].lv_larva - 1);
                }
            }

        }
        else {
        }
    }
}

void gf_update_zcc_spawn (int lp_player_id, string lp_unit_type) {
    // Variable Declarations
    string lv_record_unit_type;
    fixed lv_current_spawn_amount;

    // Automatic Variable Declarations
    const int autoAEF4FBEC_ae = 30;
    int autoAEF4FBEC_var;

    // Variable Initialization

    // Implementation
    if ((gv_zcc_spawn_intialized == false)) {
        gf_initialize_zcc_spawn();
        gv_zcc_spawn_intialized = true;
    }

    autoAEF4FBEC_var = 1;
    for ( ; autoAEF4FBEC_var <= autoAEF4FBEC_ae; autoAEF4FBEC_var += 1 ) {
        lv_record_unit_type = gv_zcc_spawn[lp_player_id][autoAEF4FBEC_var].lv_unit_type;
        lv_current_spawn_amount = gv_zcc_spawn[lp_player_id][autoAEF4FBEC_var].lv_current_spawn_amount;
        if ((lv_record_unit_type == lp_unit_type)) {
            gv_zcc_spawn[lp_player_id][autoAEF4FBEC_var].lv_spawn_count += 1;
        }

    }
    if (((lp_unit_type == "Torralisk") || (lp_unit_type == "InfusedRoach") || (lp_unit_type == "Ravator") || (lp_unit_type == "Beastling"))) {
        gv_players[lp_player_id].lv__3v3_terrazine_income += 4;
    }
    else {
        gv_players[lp_player_id].lv__3v3_terrazine_income += 1;
    }
    gv_players[lp_player_id].lv__3v3_hug_stacks += 1;
    gf_Update_Hugs_Upgrade(lp_player_id);
}

void gf_initialize_zcc_spawn () {
    // Automatic Variable Declarations
    playergroup autoC4FC25A6_g;
    int autoC4FC25A6_var;

    // Implementation
    autoC4FC25A6_g = gv_terrans;
    autoC4FC25A6_var = -1;
    while (true) {
        autoC4FC25A6_var = PlayerGroupNextPlayer(autoC4FC25A6_g, autoC4FC25A6_var);
        if (autoC4FC25A6_var < 0) { break; }
        gv_zcc_spawn[autoC4FC25A6_var][1].lv_unit_type = "Beastling";
        gv_zcc_spawn[autoC4FC25A6_var][2].lv_unit_type = "Brutalisk2";
        gv_zcc_spawn[autoC4FC25A6_var][3].lv_unit_type = "Creeper";
        gv_zcc_spawn[autoC4FC25A6_var][4].lv_unit_type = "InfusedRoach";
        gv_zcc_spawn[autoC4FC25A6_var][5].lv_unit_type = "PrimalRoach2";
        gv_zcc_spawn[autoC4FC25A6_var][6].lv_unit_type = "Ravator";
        gv_zcc_spawn[autoC4FC25A6_var][7].lv_unit_type = "Roach2";
        gv_zcc_spawn[autoC4FC25A6_var][8].lv_unit_type = "Slowling";
        gv_zcc_spawn[autoC4FC25A6_var][9].lv_unit_type = "Strikeling";
        gv_zcc_spawn[autoC4FC25A6_var][10].lv_unit_type = "Tankling";
        gv_zcc_spawn[autoC4FC25A6_var][11].lv_unit_type = "Torralisk";
        gv_zcc_spawn[autoC4FC25A6_var][12].lv_unit_type = "Ultralisk2";
        gv_zcc_spawn[autoC4FC25A6_var][13].lv_unit_type = "BanelingZergHex";
        gv_zcc_spawn[autoC4FC25A6_var][14].lv_unit_type = "Mutalisk3v3";
    }
}

void gf_spawn_3v3_zerg_unit (int lp_player_id, int lp_unit_count, string lp_unit_type) {
    // Variable Declarations
    int lv_zerg_unit_owner;
    int lv_target_player_position;
    point lv_spawn_point;
    point lv_attack_point;
    unit lv_zcc;
    unit lv_nydus;
    unitgroup lv_created_units;
    int lv_nydus_amount;

    // Automatic Variable Declarations
    unitgroup autoB5FACDD4_g;
    int autoB5FACDD4_u;
    unit autoB5FACDD4_var;
    unitgroup auto4A0CB598_g;
    int auto4A0CB598_u;
    unit auto4A0CB598_var;
    unitgroup autoCEEA2453_g;
    int autoCEEA2453_u;
    unit autoCEEA2453_var;
    unitgroup auto69714ADC_g;
    int auto69714ADC_u;
    unit auto69714ADC_var;

    // Variable Initialization
    lv_created_units = UnitGroupEmpty();

    // Implementation
    lv_spawn_point = gf_get_zcc_spawn_point(lp_player_id, lp_unit_type);
    lv_zcc = UnitGroupUnit(UnitGroup("HiveMindEmulator", lp_player_id, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    lv_zerg_unit_owner = gv_players[lp_player_id].lv__3v3_zerg_pid;
    libNtve_gf_CreateUnitsWithDefaultFacing(lp_unit_count, lp_unit_type, 0, lv_zerg_unit_owner, lv_spawn_point);
    UnitGroupAddUnitGroup(lv_created_units, UnitLastCreatedGroup());
    if ((lp_unit_type != "Fireling") && (lp_unit_type != "InfestorZergHex3v3") && (lp_unit_type != "Larva3v3")) {
        autoB5FACDD4_g = gf_get_nydus_of_team(lp_player_id);
        autoB5FACDD4_u = UnitGroupCount(autoB5FACDD4_g, c_unitCountAll);
        for (;; autoB5FACDD4_u -= 1) {
            autoB5FACDD4_var = UnitGroupUnitFromEnd(autoB5FACDD4_g, autoB5FACDD4_u);
            if (autoB5FACDD4_var == null) { break; }
            lv_nydus_amount = FixedToInt(UnitGetCustomValue(autoB5FACDD4_var, gf_get_integer_of_unit_type(lp_unit_type)));
            lv_nydus_amount = (lv_nydus_amount + 1);
            if ((lv_nydus_amount == gv_nydus_zcc_ratio)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(lp_unit_count, lp_unit_type, 0, lv_zerg_unit_owner, UnitGetPosition(autoB5FACDD4_var));
                UnitGroupAddUnitGroup(lv_created_units, UnitLastCreatedGroup());
            }

            lv_nydus_amount = ModI(lv_nydus_amount, gv_nydus_zcc_ratio);
            UnitSetCustomValue(autoB5FACDD4_var, gf_get_integer_of_unit_type(lp_unit_type), lv_nydus_amount);
        }
    }

    gf_zcc_model_swap(lv_created_units);
    if ((lp_unit_type == "Strikeling") && (TechTreeUpgradeCount(lp_player_id, "ZergSpecializationStrikelingDualHit", c_techCountCompleteOnly) == 1)) {
        auto4A0CB598_g = lv_created_units;
        auto4A0CB598_u = UnitGroupCount(auto4A0CB598_g, c_unitCountAll);
        for (;; auto4A0CB598_u -= 1) {
            auto4A0CB598_var = UnitGroupUnitFromEnd(auto4A0CB598_g, auto4A0CB598_u);
            if (auto4A0CB598_var == null) { break; }
            UnitBehaviorAdd(auto4A0CB598_var, "StrikelingShielded3v3", auto4A0CB598_var, 1);
        }
    }

    if ((lp_unit_type == "Tankling") && (TechTreeUpgradeCount(lp_player_id, "ZergSpecializationTanklingBankling", c_techCountCompleteOnly) == 1)) {
        autoCEEA2453_g = lv_created_units;
        autoCEEA2453_u = UnitGroupCount(autoCEEA2453_g, c_unitCountAll);
        for (;; autoCEEA2453_u -= 1) {
            autoCEEA2453_var = UnitGroupUnitFromEnd(autoCEEA2453_g, autoCEEA2453_u);
            if (autoCEEA2453_var == null) { break; }
            PlayerModifyPropertyFixed(lp_player_id, c_playerPropMinerals, c_playerPropOperAdd, 1.0);
        }
    }

    if ((lp_unit_type != "Fireling") && (lp_unit_type != "InfestorZergHex3v3") && (lp_unit_type != "Larva3v3")) {
        auto69714ADC_g = lv_created_units;
        auto69714ADC_u = UnitGroupCount(auto69714ADC_g, c_unitCountAll);
        for (;; auto69714ADC_u -= 1) {
            auto69714ADC_var = UnitGroupUnitFromEnd(auto69714ADC_g, auto69714ADC_u);
            if (auto69714ADC_var == null) { break; }
            if ((lp_unit_type == "Torralisk")) {
                UnitBehaviorAdd(auto69714ADC_var, "ZCCTorraliskTimedLife", auto69714ADC_var, 1);
            }
            else {
                if ((lp_unit_type == "InfusedRoach")) {
                    UnitBehaviorAdd(auto69714ADC_var, "ZCCInfusedTimedLife", auto69714ADC_var, 1);
                }
                else {
                    if ((lp_unit_type == "Ravator")) {
                        UnitBehaviorAdd(auto69714ADC_var, "ZCCRavatorTimedLife", auto69714ADC_var, 1);
                    }
                    else {
                        UnitBehaviorAdd(auto69714ADC_var, "ZCCTimedLife", auto69714ADC_var, 1);
                    }
                }
            }
        }
    }

    if ((lp_unit_type == "Fireling")) {
        UnitBehaviorAdd(lv_zcc, "FirelingCountDummyStack", lv_zcc, lp_unit_count);
    }

    if ((lp_unit_type == "Larva3v3")) {
        UnitBehaviorAdd(lv_zcc, "LarvaCountDummyStack", lv_zcc, lp_unit_count);
    }

    if (((lp_unit_type == "Fireling") || (lp_unit_type == "InfestorZergHex3v3") || (lp_unit_type == "Larva3v3"))) {
        if ((gv_practice_mode == true)) {
            if ((gv_players[lp_player_id].lv_position <= 3)) {
                lv_attack_point = PointFromName("3v3_spawn_2");
            }
            else {
                lv_attack_point = PointFromName("3v3_spawn_5");
            }
        }
        else {
            if ((gv_players[lp_player_id].lv_position <= 3)) {
                lv_attack_point = PointFromName("3v3_spawn_5");
            }
            else {
                lv_attack_point = PointFromName("3v3_spawn_2");
            }
        }
        UnitGroupIssueOrder(lv_created_units, OrderTargetingPoint(AbilityCommand("attack", 0), lv_attack_point), c_orderQueueReplace);
    }
    else {
        lv_attack_point = UnitGetPosition(gf_get_random_flying_rally_of_player(lp_player_id));
        UnitGroupIssueOrder(lv_created_units, OrderTargetingPoint(AbilityCommand("attack", 0), lv_attack_point), c_orderQueueReplace);
        if ((gf_is_3v3_local_test() == true)) {
            lv_target_player_position = gv_players[1].lv_position;
        }
        else {
            if ((gv_players[lp_player_id].lv_position <= 3)) {
                lv_target_player_position = gf_get_closest_alive_player_position_from_group(lv_attack_point, gv_terrans_team_bottom);
            }
            else {
                lv_target_player_position = gf_get_closest_alive_player_position_from_group(lv_attack_point, gv_terrans_team_top);
            }
        }
        UnitGroupIssueOrder(lv_created_units, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Rally " + IntToString(lv_target_player_position)))), c_orderQueueAddToEnd);
    }
}

void gf_zcc_model_swap (unitgroup lp_units) {
    // Variable Declarations
    string lv_unit_type;

    // Automatic Variable Declarations
    unitgroup autoC88EA9BF_g;
    int autoC88EA9BF_u;
    unit autoC88EA9BF_var;

    // Variable Initialization
    lv_unit_type = UnitGetType(UnitGroupRandomUnit(lp_units, c_unitCountAlive));

    // Implementation
    autoC88EA9BF_g = lp_units;
    autoC88EA9BF_u = UnitGroupCount(autoC88EA9BF_g, c_unitCountAll);
    for (;; autoC88EA9BF_u -= 1) {
        autoC88EA9BF_var = UnitGroupUnitFromEnd(autoC88EA9BF_g, autoC88EA9BF_u);
        if (autoC88EA9BF_var == null) { break; }
        if ((lv_unit_type == "Slowling")) {
            ActorSend(libNtve_gf_MainActorofUnit(autoC88EA9BF_var), "ModelSwap Zergling_Mecha");
        }

        if ((lv_unit_type == "Creeper")) {
            ActorSend(libNtve_gf_MainActorofUnit(autoC88EA9BF_var), "ModelSwap Locust_Mecha_Flyer");
            UnitSetPropertyFixed(autoC88EA9BF_var, c_unitPropHeight, 0.5);
        }

        if ((lv_unit_type == "Strikeling")) {
            ActorSend(libNtve_gf_MainActorofUnit(autoC88EA9BF_var), "ModelSwap Broodling_Mecha");
        }

        if ((lv_unit_type == "Tankling")) {
            ActorSend(libNtve_gf_MainActorofUnit(autoC88EA9BF_var), "ModelSwap Locust_Mecha");
        }

        if ((lv_unit_type == "Roach2")) {
            ActorSend(libNtve_gf_MainActorofUnit(autoC88EA9BF_var), "ModelSwap Roach_Mecha");
        }

        if ((lv_unit_type == "PrimalRoach2")) {
        }

        if ((lv_unit_type == "Ultralisk2")) {
            ActorSend(libNtve_gf_MainActorofUnit(autoC88EA9BF_var), "ModelSwap Ultralisk_Mecha");
        }

        if ((lv_unit_type == "Brutalisk2")) {
        }

        if ((lv_unit_type == "Ravator")) {
        }

        if ((lv_unit_type == "BanelingZergHex")) {
            ActorSend(libNtve_gf_MainActorofUnit(autoC88EA9BF_var), "ModelSwap Baneling_Mecha");
        }

    }
}

unitgroup gf_get_nydus_of_team (int lp_player_id) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_players[lp_player_id].lv_position <= 3)) {
        return gv_nydus_team_top;
    }
    else {
        return gv_nydus_team_bottom;
    }
}

int gf_get_integer_of_unit_type (string lp_unit_type) {
    // Variable Declarations
    int lv_player_id;
    int lv_index;
    int lv_result;

    // Automatic Variable Declarations
    const int auto7B385356_ae = 14;
    const int auto7B385356_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player_id = PlayerGroupPlayer(gv_terrans, 1);
    lv_index = 1;
    for ( ; ( (auto7B385356_ai >= 0 && lv_index <= auto7B385356_ae) || (auto7B385356_ai < 0 && lv_index >= auto7B385356_ae) ) ; lv_index += auto7B385356_ai ) {
        if ((lp_unit_type == gv_zcc_spawn[lv_player_id][lv_index].lv_unit_type)) {
            lv_result = lv_index;
        }

    }
    return lv_result;
}

point gf_get_zcc_spawn_point (int lp_player_id, string lp_unit_type) {
    // Variable Declarations
    unit lv_overseer;
    string lv_result;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_result = "";

    // Implementation
    lv_overseer = UnitGroupRandomUnit(UnitGroup("Overseer", gv_players[lp_player_id].lv__3v3_zerg_pid, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll);
    if ((UnitHasBehavior2(lv_overseer, "SpawnFromLeft") == true)) {
        lv_result = "Left";
    }

    if ((UnitHasBehavior2(lv_overseer, "SpawnFromRight") == true)) {
        lv_result = "Right";
    }

    if (((UnitHasBehavior2(lv_overseer, "SpawnFromCenter") == true) || (lp_unit_type == "Fireling") || (lp_unit_type == "InfestorZergHex3v3") || (lp_unit_type == "Larva3v3"))) {
        lv_result = "Center";
    }

    if ((gv_players[lp_player_id].lv_position <= 3)) {
        if ((gf_is_3v3_local_test() == true)) {
            lv_result = ("Top " + lv_result);
        }
        else {
            lv_result = ("Bottom " + lv_result);
        }
    }
    else {
        if ((gf_is_3v3_local_test() == true)) {
            lv_result = ("Bottom " + lv_result);
        }
        else {
            lv_result = ("Top " + lv_result);
        }
    }
    lv_result = ("ZCC " + lv_result);
    return RegionRandomPoint(RegionFromName(lv_result));
}

fixed gf_get_zcc_spawn_rate (int lp_player_id, string lp_unit_type, int lp_spawn_count) {
    // Variable Declarations
    fixed lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_unit_type == "Torralisk")) {
        lv_result = (lp_spawn_count / 300.0);
    }
    else {
        if ((lp_unit_type == "InfusedRoach")) {
            lv_result = (lp_spawn_count / 200.0);
        }
        else {
            if ((lp_unit_type == "Ravator")) {
                lv_result = (lp_spawn_count / 100.0);
            }
            else {
                lv_result = (lp_spawn_count / 80.0);
            }
        }
    }
    return lv_result;
}

unit gf_get_random_flying_rally_of_player (int lp_player) {
    // Variable Declarations
    int lv_unit_player_position;
    int lv_unit_rally_position;
    unit lv_result;
    bool lv_pick_left;

    // Automatic Variable Declarations
    unitgroup auto698BA267_g;
    int auto698BA267_u;
    unit auto698BA267_var;

    // Variable Initialization

    // Implementation
    lv_pick_left = (gf_get_left_zerg_ratio_of_player(lp_player) > RandomFixed(0.0, 1.0));
    auto698BA267_g = gf_get_flying_rally_group_of_player(lp_player);
    auto698BA267_u = UnitGroupCount(auto698BA267_g, c_unitCountAll);
    for (;; auto698BA267_u -= 1) {
        auto698BA267_var = UnitGroupUnitFromEnd(auto698BA267_g, auto698BA267_u);
        if (auto698BA267_var == null) { break; }
        lv_unit_rally_position = FixedToInt(UnitGetCustomValue(auto698BA267_var, 2));
        if ((lv_pick_left == true)) {
            if ((lv_unit_rally_position == -1)) {
                lv_result = auto698BA267_var;
            }

        }
        else {
            if ((lv_unit_rally_position == 1)) {
                lv_result = auto698BA267_var;
            }

        }
    }
    return lv_result;
}

int gf__3v3_get_target_or_random_enemy_terran_position (int lp_pid) {
    // Variable Declarations
    int lv_main_enemy_terran;
    int lv_target_terran;
    int lv_target_terran_position;
    int lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_main_enemy_terran = gv_players[lp_pid].lv__3v3_nemesis_terran;
    if ((gv_players[lv_main_enemy_terran].lv_alive == false)) {
        if ((PlayerGroupHasPlayer(gv_terrans_team_top, lp_pid) == true)) {
            lv_target_terran = gv_positions[gf_get_position_of_random_alive_player_from_group(gv_terrans_team_bottom)];
        }
        else {
            lv_target_terran = gv_positions[gf_get_position_of_random_alive_player_from_group(gv_terrans_team_top)];
        }
    }
    else {
        lv_target_terran = lv_main_enemy_terran;
    }
    lv_target_terran_position = gv_players[lv_target_terran].lv_position;
    lv_result = lv_target_terran_position;
    if ((gf_is_3v3_local_test() == true)) {
        lv_result = gv_players[lp_pid].lv_position;
    }

    return lv_result;
}

bool gf_can_build_bruta_3v3 (int lp_player_id) {
    // Variable Declarations
    bool lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((PlayerGroupHasPlayer(gv_terrans_team_bottom, lp_player_id) == true)) {
        if ((gv_top_bruta <= (gv_bottom_bruta + 2))) {
            gv_top_bruta += 1;
            lv_result = true;
        }

    }
    else {
        if ((gv_bottom_bruta <= (gv_top_bruta + 2))) {
            gv_bottom_bruta += 1;
            lv_result = true;
        }

    }
    return lv_result;
}

int gf_get_position_of_alive_player_with_least_spawners_from_group (playergroup lp_player_group) {
    // Variable Declarations
    int lv_min_spawners;
    int lv_player_position;
    int lv_result;

    // Automatic Variable Declarations
    playergroup auto6D1F09BA_g;
    int auto6D1F09BA_var;

    // Variable Initialization
    lv_min_spawners = 9999;

    // Implementation
    auto6D1F09BA_g = lp_player_group;
    auto6D1F09BA_var = -1;
    while (true) {
        auto6D1F09BA_var = PlayerGroupNextPlayer(auto6D1F09BA_g, auto6D1F09BA_var);
        if (auto6D1F09BA_var < 0) { break; }
        if ((gv_players[auto6D1F09BA_var].lv_alive == true)) {
            lv_player_position = gv_players[auto6D1F09BA_var].lv_position;
            if ((lv_min_spawners > gv_spawner_distro[lv_player_position])) {
                lv_result = lv_player_position;
                lv_min_spawners = gv_spawner_distro[lv_player_position];
            }
            else {
                if ((lv_min_spawners == gv_spawner_distro[lv_player_position])) {
                    if ((RandomInt(1, 2) == 1)) {
                        lv_result = lv_player_position;
                    }

                }

            }
        }

    }
    return lv_result;
}

int gf_where_to_build_next_spawner_3v3 () {
    // Variable Declarations
    int lv_return;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gf_is_terrans_team_bottom_dead() == true)) {
        gv_build_top_next = true;
    }

    if ((gf_is_terrans_team_top_dead() == true)) {
        gv_build_top_next = false;
    }

    if ((gv_build_top_next == true)) {
        gv_build_top_next = false;
        if ((RandomInt(0, 3) == 1)) {
            lv_return = gf_get_position_of_alive_player_with_least_spawners_from_group(gv_terrans_team_top);
        }
        else {
            lv_return = gf_get_position_of_random_alive_player_from_group(gv_terrans_team_top);
        }
    }
    else {
        gv_build_top_next = true;
        if ((RandomInt(0, 3) == 1)) {
            lv_return = gf_get_position_of_alive_player_with_least_spawners_from_group(gv_terrans_team_bottom);
        }
        else {
            lv_return = gf_get_position_of_random_alive_player_from_group(gv_terrans_team_bottom);
        }
    }
    return lv_return;
}

void gf_update_start_spawners_3v3 () {
    // Variable Declarations
    int lv_index;
    unit lv_spawner;

    // Automatic Variable Declarations
    unitgroup autoE5347793_g;
    int autoE5347793_u;
    unit autoE5347793_var;

    // Variable Initialization

    // Implementation
    autoE5347793_g = UnitGroup("CreeperSpawner", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE5347793_u = UnitGroupCount(autoE5347793_g, c_unitCountAll);
    for (;; autoE5347793_u -= 1) {
        autoE5347793_var = UnitGroupUnitFromEnd(autoE5347793_g, autoE5347793_u);
        if (autoE5347793_var == null) { break; }
        UnitCreateEffectUnit(autoE5347793_var, "SpawnerUpgradeUpgradeSet2", autoE5347793_var);
        PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperSubtract, 40);
    }
    gv_upgrade_sets_left = 0;
}

int gf_get_max_spawners_of_rally (unit lp_rally, int lp_number_of_spawners, int lp_number_of_rally) {
    // Variable Declarations
    fixed lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_result = (lp_number_of_spawners * 2);
    lv_result = (lv_result / lp_number_of_rally);
    lv_result = (lv_result * gf_get_rally_ratio(lp_rally));
    return FixedToInt(lv_result);
}

unit gf_get_closest_not_full_rally (point lp_point, unitgroup lp_flying_rally_group) {
    // Variable Declarations
    fixed lv_distance;
    int lv_current_amount;
    int lv_max_amount;
    unit lv_result;

    // Automatic Variable Declarations
    unitgroup auto159F76C6_g;
    int auto159F76C6_u;
    unit auto159F76C6_var;

    // Variable Initialization

    // Implementation
    auto159F76C6_g = lp_flying_rally_group;
    auto159F76C6_u = UnitGroupCount(auto159F76C6_g, c_unitCountAll);
    for (;; auto159F76C6_u -= 1) {
        auto159F76C6_var = UnitGroupUnitFromEnd(auto159F76C6_g, auto159F76C6_u);
        if (auto159F76C6_var == null) { break; }
        lv_current_amount = FixedToInt(UnitGetCustomValue(auto159F76C6_var, 3));
        lv_max_amount = FixedToInt(UnitGetCustomValue(auto159F76C6_var, 4));
        if ((lv_current_amount < lv_max_amount)) {
            if ((lv_distance == 0.0)) {
                lv_distance = DistanceBetweenPoints(lp_point, UnitGetPosition(auto159F76C6_var));
                lv_result = auto159F76C6_var;
            }
            else {
                if ((DistanceBetweenPoints(lp_point, UnitGetPosition(auto159F76C6_var)) < lv_distance)) {
                    lv_distance = DistanceBetweenPoints(lp_point, UnitGetPosition(auto159F76C6_var));
                    lv_result = auto159F76C6_var;
                }

            }
        }

    }
    return lv_result;
}

void gf_manage_spawners_3v3 (int lp_player_position) {
    // Variable Declarations
    region lv_region;
    int lv_number_of_spawners;
    int lv_number_of_rally;
    unitgroup lv_rally_group;
    unit lv_rally;
    int lv_cc_player_position;
    point lv_cc_point;
    playergroup lv_player_group;
    int lv_current_amount;

    // Automatic Variable Declarations
    unitgroup autoAE58A41E_g;
    int autoAE58A41E_u;
    unit autoAE58A41E_var;
    unitgroup auto907FDFD9_g;
    int auto907FDFD9_u;
    unit auto907FDFD9_var;
    unitgroup auto4718AEF2_g;
    int auto4718AEF2_u;
    unit auto4718AEF2_var;
    unitgroup auto3FE8DB30_g;
    int auto3FE8DB30_u;
    unit auto3FE8DB30_var;

    // Variable Initialization
    lv_rally_group = gf_get_flying_rally_of_team(lp_player_position);
    lv_player_group = PlayerGroupEmpty();

    // Implementation
    if ((gf_is_terrans_team_top_dead() == false) && (gf_is_terrans_team_bottom_dead() == false)) {
        lv_region = gf_get_region_of_influence_3v3(lp_player_position);
        if ((lp_player_position <= 3)) {
            lv_player_group = gv_terrans_team_top;
        }
        else {
            lv_player_group = gv_terrans_team_bottom;
        }
    }
    else {
        lv_region = RegionEntireMap();
        lv_player_group = gv_terrans;
    }
    autoAE58A41E_g = lv_rally_group;
    autoAE58A41E_u = UnitGroupCount(autoAE58A41E_g, c_unitCountAll);
    for (;; autoAE58A41E_u -= 1) {
        autoAE58A41E_var = UnitGroupUnitFromEnd(autoAE58A41E_g, autoAE58A41E_u);
        if (autoAE58A41E_var == null) { break; }
        lv_number_of_rally += 1;
        UnitSetCustomValue(autoAE58A41E_var, 3, 0.0);
    }
    auto907FDFD9_g = UnitGroup(null, 7, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto907FDFD9_u = UnitGroupCount(auto907FDFD9_g, c_unitCountAll);
    for (;; auto907FDFD9_u -= 1) {
        auto907FDFD9_var = UnitGroupUnitFromEnd(auto907FDFD9_g, auto907FDFD9_u);
        if (auto907FDFD9_var == null) { break; }
        if ((gf_is_spawner(auto907FDFD9_var) == true)) {
            lv_number_of_spawners += 1;
        }

    }
    auto4718AEF2_g = lv_rally_group;
    auto4718AEF2_u = UnitGroupCount(auto4718AEF2_g, c_unitCountAll);
    for (;; auto4718AEF2_u -= 1) {
        auto4718AEF2_var = UnitGroupUnitFromEnd(auto4718AEF2_g, auto4718AEF2_u);
        if (auto4718AEF2_var == null) { break; }
        UnitSetCustomValue(auto4718AEF2_var, 4, gf_get_max_spawners_of_rally(auto4718AEF2_var, lv_number_of_spawners, lv_number_of_rally));
    }
    auto3FE8DB30_g = UnitGroup(null, 7, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3FE8DB30_u = UnitGroupCount(auto3FE8DB30_g, c_unitCountAll);
    for (;; auto3FE8DB30_u -= 1) {
        auto3FE8DB30_var = UnitGroupUnitFromEnd(auto3FE8DB30_g, auto3FE8DB30_u);
        if (auto3FE8DB30_var == null) { break; }
        if ((gf_is_spawner(auto3FE8DB30_var) == true)) {
            lv_rally = gf_get_closest_not_full_rally(UnitGetPosition(auto3FE8DB30_var), lv_rally_group);
            if ((lv_rally != null)) {
                lv_current_amount = FixedToInt(UnitGetCustomValue(lv_rally, 3));
                UnitSetCustomValue(lv_rally, 3, (lv_current_amount + 1));
                UnitIssueOrder(auto3FE8DB30_var, OrderTargetingPoint(AbilityCommand("Rally", 0), UnitGetPosition(lv_rally)), c_orderQueueReplace);
                lv_cc_player_position = gf_get_closest_alive_player_position_from_group(UnitGetPosition(lv_rally), lv_player_group);
                lv_cc_point = PointFromName(("Zerg Rally " + IntToString(lv_cc_player_position)));
                UnitIssueOrder(auto3FE8DB30_var, OrderTargetingPoint(AbilityCommand("Rally", 0), lv_cc_point), c_orderQueueAddToEnd);
            }
            else {
                lv_cc_player_position = gf_get_closest_alive_player_position_from_group(UnitGetPosition(auto3FE8DB30_var), lv_player_group);
                lv_cc_point = PointFromName(("Zerg Rally " + IntToString(lv_cc_player_position)));
                UnitIssueOrder(auto3FE8DB30_var, OrderTargetingPoint(AbilityCommand("Rally", 0), lv_cc_point), c_orderQueueReplace);
            }
        }

    }
}

bool gf_is_overseer (unit lp_unit) {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGetType(lp_unit) == "Overseer")) {
        lv_r = true;
    }

    return lv_r;
}

void gf_init_3v3_flying_rally () {
    // Variable Declarations
    int lv_index;
    int lv_player_id;
    int lv_player_position;
    unit lv_flying_rally;

    // Automatic Variable Declarations
    const int auto5254911E_ae = 6;
    const int auto5254911E_ai = 1;
    const int autoCC8F4E94_ae = 6;
    const int autoCC8F4E94_ai = 1;

    // Variable Initialization
    lv_index = 1;

    // Implementation
    lv_index = 1;
    for ( ; ( (auto5254911E_ai >= 0 && lv_index <= auto5254911E_ae) || (auto5254911E_ai < 0 && lv_index >= auto5254911E_ae) ) ; lv_index += auto5254911E_ai ) {
        if ((gv_players[lv_index].lv_alive == true)) {
            gf_create_flying_rally(lv_index, -1);
            gf_create_flying_rally(lv_index, 1);
        }

    }
    lv_index = 1;
    for ( ; ( (autoCC8F4E94_ai >= 0 && lv_index <= autoCC8F4E94_ae) || (autoCC8F4E94_ai < 0 && lv_index >= autoCC8F4E94_ae) ) ; lv_index += autoCC8F4E94_ai ) {
        if ((gv_players[lv_index].lv_alive == true)) {
            gf_manage_spawners_3v3(gv_players[lv_index].lv_position);
        }

    }
    gf_init_mecha_nydus_spawn_point();
}

void gf_init_mecha_nydus_spawn_point () {
    // Variable Declarations
    unitgroup lv_ug;

    // Automatic Variable Declarations
    unitgroup auto48DD725F_g;
    int auto48DD725F_u;
    unit auto48DD725F_var;

    // Variable Initialization
    lv_ug = UnitGroupEmpty();

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, 7, PointFromId(457314631));
    UnitGroupAdd(lv_ug, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, 7, PointFromId(1932723074));
    UnitGroupAdd(lv_ug, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, 7, PointFromId(1151317287));
    UnitSetPosition(UnitLastCreated(), PointFromId(1151317287), false);
    UnitGroupAdd(lv_ug, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, 7, PointFromId(385572299));
    UnitSetPosition(UnitLastCreated(), PointFromId(385572299), false);
    UnitGroupAdd(lv_ug, UnitLastCreated());
    auto48DD725F_g = lv_ug;
    auto48DD725F_u = UnitGroupCount(auto48DD725F_g, c_unitCountAll);
    for (;; auto48DD725F_u -= 1) {
        auto48DD725F_var = UnitGroupUnitFromEnd(auto48DD725F_g, auto48DD725F_u);
        if (auto48DD725F_var == null) { break; }
        UnitSetScale(auto48DD725F_var, 140.0, 140.0, 140.0);
        libNtve_gf_MakeUnitInvulnerable(auto48DD725F_var, true);
        UnitSetInfoText2(auto48DD725F_var, StringExternal("Param/Value/CEAAB825"));
        UnitSetPropertyFixed(auto48DD725F_var, c_unitPropEnergyMax, 0.0);
    }
}

void gf_create_flying_rally (int lp_player_id, int lp_rally_position) {
    // Variable Declarations
    int lv_opponent_player_position;
    unit lv_flying_rally;
    playergroup lv_ping_player_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping_player_group = PlayerGroupEmpty();

    // Implementation
    lv_opponent_player_position = gv_players[gv_players[lp_player_id].lv__3v3_nemesis_terran].lv_position;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, gf_get_zerg_rally_point_unit_type(), 0, gv_players[lp_player_id].lv__3v3_zerg_pid, PointFromName(("Zerg Rally " + IntToString(lv_opponent_player_position))));
    lv_flying_rally = UnitLastCreated();
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "ModelSwap Overseer_Mecha");
    UnitGroupAdd(gv_flying_rally_group, lv_flying_rally);
    libNtve_gf_MakeUnitInvulnerable(lv_flying_rally, true);
    UnitSetInfoText2(lv_flying_rally, StringExternal("Param/Value/4FEC16CE"));
    UnitSetCustomValue(lv_flying_rally, 0, lp_player_id);
    UnitSetCustomValue(lv_flying_rally, 1, lv_opponent_player_position);
    UnitSetCustomValue(lv_flying_rally, 2, lp_rally_position);
    UnitSetPosition(lv_flying_rally, gf_get_point_of_flying_rally(lv_flying_rally), false);
    libNtve_gf_SetBehaviorCount(lv_flying_rally, "ZergRallyEqual", lv_flying_rally, 1);
    libNtve_gf_SetBehaviorCount(lv_flying_rally, "SpawnFromCenter", lv_flying_rally, 1);
    if ((gv_players[lp_player_id].lv_position <= 3)) {
        lv_ping_player_group = gv_terrans_team_top;
    }
    else {
        lv_ping_player_group = gv_terrans_team_bottom;
    }
    PingCreateWithPlayerId(lv_ping_player_group, "PingObjective", UnitGetPosition(lv_flying_rally), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player_id, false)), 0.0, 0);
    PingSetUnit(PingLastCreated(), lv_flying_rally);
    libHots_gf_StorePingForUnit(lv_flying_rally, 1, PingLastCreated());
}

point gf_get_point_of_flying_rally (unit lp_unit) {
    // Variable Declarations
    int lv_rally_player_position;
    point lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_rally_player_position = FixedToInt(UnitGetCustomValue(lp_unit, 1));
    if ((gf_is_left_rally(lp_unit) == true)) {
        lv_result = PointFromName(("Zerg Flank Rally Left " + IntToString(lv_rally_player_position)));
    }
    else {
        lv_result = PointFromName(("Zerg Flank Rally Right " + IntToString(lv_rally_player_position)));
    }
    return lv_result;
}

fixed gf_get_left_zerg_ratio_of_player (int lp_player) {
    // Variable Declarations
    unit lv_overseer;
    fixed lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_overseer = UnitGroupRandomUnit(gf_get_flying_rally_group_of_player(lp_player), c_unitCountAll);
    lv_result = gf_get_rally_ratio(lv_overseer);
    if ((gf_is_left_rally(lv_overseer) == true)) {
    }
    else {
        lv_result = (1.0 - lv_result);
    }
    return lv_result;
}

unitgroup gf_get_flying_rally_group_of_player (int lp_player) {
    // Variable Declarations
    int lv_unit_player;
    unitgroup lv_result;

    // Automatic Variable Declarations
    unitgroup autoE0432A6B_g;
    int autoE0432A6B_u;
    unit autoE0432A6B_var;

    // Variable Initialization
    lv_result = UnitGroupEmpty();

    // Implementation
    autoE0432A6B_g = gv_flying_rally_group;
    autoE0432A6B_u = UnitGroupCount(autoE0432A6B_g, c_unitCountAll);
    for (;; autoE0432A6B_u -= 1) {
        autoE0432A6B_var = UnitGroupUnitFromEnd(autoE0432A6B_g, autoE0432A6B_u);
        if (autoE0432A6B_var == null) { break; }
        lv_unit_player = FixedToInt(UnitGetCustomValue(autoE0432A6B_var, 0));
        if ((lv_unit_player == lp_player)) {
            UnitGroupAdd(lv_result, autoE0432A6B_var);
        }

    }
    return lv_result;
}

string gf_get_zerg_rally_point_unit_type () {
    // Automatic Variable Declarations
    // Implementation
    return "Overseer";
}

fixed gf_get_rally_ratio (unit lp_overseer) {
    // Variable Declarations
    fixed lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitHasBehavior2(lp_overseer, "ZergRallyEqual") == true)) {
        lv_result = 0.5;
    }

    if ((UnitHasBehavior2(lp_overseer, "ZergRallyMinus") == true)) {
        lv_result = 0.25;
    }

    if ((UnitHasBehavior2(lp_overseer, "ZergRallyPlus") == true)) {
        lv_result = 0.75;
    }

    return lv_result;
}

bool gf_is_left_rally (unit lp_rally) {
    // Variable Declarations
    int lv_rally_position;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_rally_position = FixedToInt(UnitGetCustomValue(lp_rally, 2));
    return (lv_rally_position == -1);
}

unitgroup gf_get_flying_rally_of_team (int lp_player_position) {
    // Variable Declarations
    int lv_flying_rally_player_position;
    unitgroup lv_group_top;
    unitgroup lv_group_bottom;
    unitgroup lv_result;

    // Automatic Variable Declarations
    unitgroup auto986075E3_g;
    int auto986075E3_u;
    unit auto986075E3_var;

    // Variable Initialization
    lv_group_top = UnitGroupEmpty();
    lv_group_bottom = UnitGroupEmpty();
    lv_result = UnitGroupEmpty();

    // Implementation
    auto986075E3_g = gv_flying_rally_group;
    auto986075E3_u = UnitGroupCount(auto986075E3_g, c_unitCountAll);
    for (;; auto986075E3_u -= 1) {
        auto986075E3_var = UnitGroupUnitFromEnd(auto986075E3_g, auto986075E3_u);
        if (auto986075E3_var == null) { break; }
        lv_flying_rally_player_position = FixedToInt(UnitGetCustomValue(auto986075E3_var, 1));
        if ((lv_flying_rally_player_position <= 3)) {
            UnitGroupAdd(lv_group_top, auto986075E3_var);
        }
        else {
            UnitGroupAdd(lv_group_bottom, auto986075E3_var);
        }
    }
    if ((lp_player_position <= 3)) {
        lv_result = lv_group_top;
    }
    else {
        lv_result = lv_group_bottom;
    }
    return lv_result;
}

void gf_init_3v3_vision () {
    // Automatic Variable Declarations
    unitgroup auto067D5B85_g;
    int auto067D5B85_u;
    unit auto067D5B85_var;

    // Implementation
    auto067D5B85_g = UnitGroup(null, 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto067D5B85_u = UnitGroupCount(auto067D5B85_g, c_unitCountAll);
    for (;; auto067D5B85_u -= 1) {
        auto067D5B85_var = UnitGroupUnitFromEnd(auto067D5B85_g, auto067D5B85_u);
        if (auto067D5B85_var == null) { break; }
        gf_give_3v3_vision(auto067D5B85_var);
    }
}

void gf_give_3v3_vision (unit lp_unit) {
    // Automatic Variable Declarations
    playergroup autoB852A08C_g;
    int autoB852A08C_var;

    // Implementation
    if ((gf_can_share_zerg_vision(lp_unit) == true)) {
        if ((gf_is_in_zerg_highgrounds(lp_unit) == true)) {
            autoB852A08C_g = gv_terrans;
            autoB852A08C_var = -1;
            while (true) {
                autoB852A08C_var = PlayerGroupNextPlayer(autoB852A08C_g, autoB852A08C_var);
                if (autoB852A08C_var < 0) { break; }
                libNtve_gf_ShareVisionofUnit(lp_unit, false, autoB852A08C_var);
            }
        }
        else {
            if ((libNtve_gf_UnitInRegion(lp_unit, gf_get_region_of_influence_3v3(1)) == true)) {
                if ((gv_practice_mode == true)) {
                    gf_reveal_top_hide_bottom(lp_unit);
                }
                else {
                    gf_reveal_bottom_hide_top(lp_unit);
                }
            }
            else {
                if ((gv_practice_mode == true)) {
                    gf_reveal_bottom_hide_top(lp_unit);
                }
                else {
                    gf_reveal_top_hide_bottom(lp_unit);
                }
            }
        }
    }

}

bool gf_can_share_zerg_vision (unit lp_unit) {
    // Variable Declarations
    bool lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGetOwner(lp_unit) == 7) && (UnitGetType(lp_unit) != "Drone2")) {
        lv_result = true;
    }

    return lv_result;
}

void gf_reveal_top_hide_bottom (unit lp_unit) {
    // Automatic Variable Declarations
    playergroup auto267B2ED4_g;
    int auto267B2ED4_var;
    playergroup auto1410E970_g;
    int auto1410E970_var;

    // Implementation
    if (((gf_is_3v3_local_test() == true) || (gf_is_terrans_team_bottom_dead() == false))) {
        auto267B2ED4_g = gv_terrans_team_top;
        auto267B2ED4_var = -1;
        while (true) {
            auto267B2ED4_var = PlayerGroupNextPlayer(auto267B2ED4_g, auto267B2ED4_var);
            if (auto267B2ED4_var < 0) { break; }
            libNtve_gf_ShareVisionofUnit(lp_unit, true, auto267B2ED4_var);
        }
    }

    auto1410E970_g = gv_terrans_team_bottom;
    auto1410E970_var = -1;
    while (true) {
        auto1410E970_var = PlayerGroupNextPlayer(auto1410E970_g, auto1410E970_var);
        if (auto1410E970_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(lp_unit, false, auto1410E970_var);
    }
}

void gf_reveal_bottom_hide_top (unit lp_unit) {
    // Automatic Variable Declarations
    playergroup auto6CA2B76F_g;
    int auto6CA2B76F_var;
    playergroup auto34B7B47F_g;
    int auto34B7B47F_var;

    // Implementation
    if (((gf_is_3v3_local_test() == true) || (gf_is_terrans_team_top_dead() == false))) {
        auto6CA2B76F_g = gv_terrans_team_bottom;
        auto6CA2B76F_var = -1;
        while (true) {
            auto6CA2B76F_var = PlayerGroupNextPlayer(auto6CA2B76F_g, auto6CA2B76F_var);
            if (auto6CA2B76F_var < 0) { break; }
            libNtve_gf_ShareVisionofUnit(lp_unit, true, auto6CA2B76F_var);
        }
    }

    auto34B7B47F_g = gv_terrans_team_top;
    auto34B7B47F_var = -1;
    while (true) {
        auto34B7B47F_var = PlayerGroupNextPlayer(auto34B7B47F_g, auto34B7B47F_var);
        if (auto34B7B47F_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(lp_unit, false, auto34B7B47F_var);
    }
}

bool gf_is_3v3 () {
    // Variable Declarations
    bool lv_return_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return gv_is_3v3;
}

bool gf_is_3v3_local_test () {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

region gf_get_region_of_influence_3v3 (int lp_player_position) {
    // Variable Declarations
    region lv_result;
    fixed lv_map_width;
    fixed lv_map_height;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_map_width = libNtve_gf_WidthOfRegion(RegionEntireMap());
    lv_map_height = libNtve_gf_HeightOfRegion(RegionEntireMap());
    if (((lp_player_position >= 1) && (lp_player_position <= 3))) {
        lv_result = RegionRect(0.0, (lv_map_height / 2.0), lv_map_width, lv_map_height);
    }
    else {
        lv_result = RegionRect(0.0, 0.0, lv_map_width, (lv_map_height / 2.0));
    }
    return lv_result;
}

bool gf_is_in_zerg_highgrounds (unit lp_unit) {
    // Variable Declarations
    bool lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libNtve_gf_UnitInRegion(lp_unit, RegionFromId(1)) == true) || (libNtve_gf_UnitInRegion(lp_unit, RegionFromId(85)) == true) || (libNtve_gf_UnitInRegion(lp_unit, RegionFromId(84)) == true))) {
        lv_result = true;
    }

    return lv_result;
}

playergroup gf_get_team_of_player (int lp_player_id) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_players[lp_player_id].lv_position <= 3)) {
        return gv_terrans_team_top;
    }
    else {
        return gv_terrans_team_bottom;
    }
}

int gf_get_terran_id_from_zpid (int lp_zpid) {
    // Variable Declarations
    int lv_return;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        if ((gv_players[lv_i].lv__3v3_zerg_pid == lp_zpid)) {
            lv_return = lv_i;
            break;
        }

        lv_i = (lv_i + 1);
    }
    return lv_return;
}

bool gf_is_same_region_of_influence (point lp_point, unit lp_unit) {
    // Variable Declarations
    bool lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((((RegionContainsPoint(gf_get_region_of_influence_3v3(1), lp_point) == true) && (libNtve_gf_UnitInRegion(lp_unit, gf_get_region_of_influence_3v3(1)) == true)) || ((RegionContainsPoint(gf_get_region_of_influence_3v3(4), lp_point) == true) && (libNtve_gf_UnitInRegion(lp_unit, gf_get_region_of_influence_3v3(4)) == true)))) {
        lv_result = true;
    }

    return lv_result;
}

int gf_get_position_of_random_alive_player_from_group (playergroup lp_player_group) {
    // Variable Declarations
    int lv_number;
    int lv_current_max;
    int lv_result;

    // Automatic Variable Declarations
    playergroup auto25DB5EDC_g;
    int auto25DB5EDC_var;

    // Variable Initialization

    // Implementation
    auto25DB5EDC_g = lp_player_group;
    auto25DB5EDC_var = -1;
    while (true) {
        auto25DB5EDC_var = PlayerGroupNextPlayer(auto25DB5EDC_g, auto25DB5EDC_var);
        if (auto25DB5EDC_var < 0) { break; }
        if ((gv_players[auto25DB5EDC_var].lv_alive == true)) {
            lv_number = RandomInt(0, 1000);
            if ((lv_number >= lv_current_max)) {
                lv_current_max = lv_number;
                lv_result = auto25DB5EDC_var;
            }

        }

    }
    return gv_players[lv_result].lv_position;
}

bool gf_is_pvp () {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return lv_r;
}

bool gf_is_player_dev (int lp_player) {
    // Variable Declarations
    string lv_handle;
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_handle = PlayerHandle(lp_player);

    // Implementation
    if (((lv_handle == "1-S2-1-10368735") || (lv_handle == "2-S2-1-8126100") || (lv_handle == "2-S2-1-9855724") || (lv_handle == "1-S2-1-12179488") || (lv_handle == "1-S2-1-1961200") || (lv_handle == "2-S2-1-10231202"))) {
        lv_r = true;
    }

    return lv_r;
}

int gf_roll_dice () {
    // Automatic Variable Declarations
    // Implementation
    return RandomInt(1, 6);
}

int gf_flip_coin () {
    // Automatic Variable Declarations
    // Implementation
    return RandomInt(1, 2);
}

void gf_Create_game () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup autoCC6DB46A_g;
    int autoCC6DB46A_var;
    playergroup auto27D78943_g;
    int auto27D78943_var;
    const int auto1252BAB2_ae = 6;
    int auto1252BAB2_var;
    playergroup autoEA6AA9EA_g;
    int autoEA6AA9EA_var;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    autoCC6DB46A_g = gv_terrans;
    autoCC6DB46A_var = -1;
    while (true) {
        autoCC6DB46A_var = PlayerGroupNextPlayer(autoCC6DB46A_g, autoCC6DB46A_var);
        if (autoCC6DB46A_var < 0) { break; }
        if ((PlayerStatus(autoCC6DB46A_var) == c_playerStatusLeft)) {
            gv_players[autoCC6DB46A_var].lv_left_the_game = true;
            PlayerGroupRemove(gv_terrans, autoCC6DB46A_var);
        }

    }
    gv_player_count = PlayerGroupCount(gv_terrans);
    gf_define_hives();
    gf_set_position_set(gv_player_count);
    if ((gv_player_count < 2)) {
        gv_practice_mode = true;
    }

    auto27D78943_g = gv_terrans;
    auto27D78943_var = -1;
    while (true) {
        auto27D78943_var = PlayerGroupNextPlayer(auto27D78943_g, auto27D78943_var);
        if (auto27D78943_var < 0) { break; }
        gv_players[auto27D78943_var].lv_alive = true;
        if ((gf_is_player_banned(auto27D78943_var) == true)) {
        }
        else {
            PlayerModifyPropertyInt(auto27D78943_var, c_playerPropMinerals, c_playerPropOperSetTo, 12);
            PlayerModifyPropertyInt(auto27D78943_var, c_playerPropVespene, c_playerPropOperSetTo, 70);
        }
        gf_disable_non_vanilla_content_for_player(auto27D78943_var);
        gf_settle_player(auto27D78943_var);
        if ((gv_players[auto27D78943_var].lv_elo >= 1600)) {
            gv_players[auto27D78943_var].lv_wants_tutorial = 0;
        }

    }
    while ((lv_i <= 6)) {
        gf_Apply_or_remove_base(lv_i);
        lv_i += 1;
    }
    gf_clean_bases();
    PlayerModifyPropertyInt(7, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 306);
    PlayerModifyPropertyInt(7, c_playerPropSuppliesMade, c_playerPropOperSetTo, 306);
    PlayerModifyPropertyInt(7, c_playerPropSuppliesLimit, c_playerPropOperAdd, (gv_player_count * 7));
    PlayerModifyPropertyInt(7, c_playerPropSuppliesMade, c_playerPropOperAdd, (gv_player_count * 7));
    gf_change_ownerships();
    gf_finalise_map();
    gf_replace_geysers();
    if ((gv_practice_mode == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/FD46B427"));
    }

    auto1252BAB2_var = 1;
    for ( ; auto1252BAB2_var <= auto1252BAB2_ae; auto1252BAB2_var += 1 ) {
        if ((gv_players[auto1252BAB2_var].lv_alive == true)) {
            gv_command_center_position[gv_players[auto1252BAB2_var].lv_position] = UnitGetPosition(UnitGroupUnit(UnitGroup("CommandCenter2", auto1252BAB2_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1));
            gf_Rebind_from_bank(auto1252BAB2_var);
        }

    }
    libNtve_gf_SetPlayerGroupAlliance(gv_terrans, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_terrans, gv_zerg, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_zerg, gv_terrans, libNtve_ge_AllianceSetting_Enemy);
    autoEA6AA9EA_g = gv_terrans;
    autoEA6AA9EA_var = -1;
    while (true) {
        autoEA6AA9EA_var = PlayerGroupNextPlayer(autoEA6AA9EA_g, autoEA6AA9EA_var);
        if (autoEA6AA9EA_var < 0) { break; }
        CameraPan(autoEA6AA9EA_var, PointFromName(("Blocker " + IntToString(gv_players[autoEA6AA9EA_var].lv_position))), 0.0, -1, 10.0, false);
    }
}

void gf_set_up_visibility () {
    // Automatic Variable Declarations
    playergroup auto5771749D_g;
    int auto5771749D_var;
    playergroup autoFFAD6502_g;
    int autoFFAD6502_var;
    playergroup autoF768FA0A_g;
    int autoF768FA0A_var;

    // Implementation
    auto5771749D_g = PlayerGroupActive();
    auto5771749D_var = -1;
    while (true) {
        auto5771749D_var = PlayerGroupNextPlayer(auto5771749D_g, auto5771749D_var);
        if (auto5771749D_var < 0) { break; }
        VisRevealArea(auto5771749D_var, RegionEntireMap(), 0.01, false);
    }
    if ((gv_difficulty < 5)) {
        autoFFAD6502_g = PlayerGroupActive();
        autoFFAD6502_var = -1;
        while (true) {
            autoFFAD6502_var = PlayerGroupNextPlayer(autoFFAD6502_g, autoFFAD6502_var);
            if (autoFFAD6502_var < 0) { break; }
            VisFillArea(autoFFAD6502_var, RegionEntireMap(), c_fillTypeMasked, false);
        }
    }
    else if ((gv_difficulty >= 8)) {
        autoF768FA0A_g = PlayerGroupActive();
        autoF768FA0A_var = -1;
        while (true) {
            autoF768FA0A_var = PlayerGroupNextPlayer(autoF768FA0A_g, autoF768FA0A_var);
            if (autoF768FA0A_var < 0) { break; }
            VisFillArea(autoF768FA0A_var, RegionEntireMap(), c_fillTypeHidden, false);
            if ((autoF768FA0A_var >= 1) && (autoF768FA0A_var <= 6)) {
                VisFillArea(autoF768FA0A_var, RegionFromName(("geysers p" + IntToString(gv_players[autoF768FA0A_var].lv_position))), c_fillTypeFogged, false);
            }

        }
    }
}

void gf_set_up_difficulty_init_modifiers () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_difficulty > 1)) {
        gf_rerally_start_spawners();
    }

    if ((gv_difficulty <= 3)) {
        if ((RandomInt(1, 2) == 1)) {
            gv_placement_mode = 2;
            gv_supply_target_player_position = gv_players[gf_ai_get_random_player()].lv_position;
        }

    }

    if ((gv_difficulty >= 5)) {
        if ((RandomInt(1, 2) == 1)) {
            gv_want_f2 = true;
        }

    }

    if ((gv_difficulty >= 8)) {
        gf_torment_1_game_modifiers();
    }

    if ((gv_difficulty >= 9)) {
        gf_torment_2_game_modifiers();
    }

    if ((gv_difficulty >= 10)) {
        gf_spawn_viper();
    }

    if ((gv_difficulty >= 11)) {
        gf_torment_4_game_modifiers();
    }

    gv_upgrade_sets_left = gf_get_early_spawner_upgrade_set_count();
}

void gf_set_up_variables_init () {
    // Automatic Variable Declarations
    // Implementation
    gf_set_infestors_points();
    gf_refresh_bonus_gasses_data();
    gf_define_hydra_variables();
    gf_define_egg_spawn_points();
    gv_strikeling_groups[1].lv_side = 1;
    gv_strikeling_groups[2].lv_side = 1;
    gv_strikeling_groups[3].lv_side = 2;
    gv_strikeling_groups[4].lv_side = 2;
    gv_highground_invader_count = 0;
}

void gf_set_up_modify_players_init () {
    // Automatic Variable Declarations
    // Implementation
    gf_Handle_Elite_Skins();
    gf_handle_collection_skins();
    gf_buff_players();
    gf_apply_smod();
    gf_apply_support();
    gf_better_casual_upgrade();
}

int gf_get_player_at_position (int lp_position) {
    // Variable Declarations
    int lv_return;

    // Automatic Variable Declarations
    playergroup auto3416F75C_g;
    int auto3416F75C_var;

    // Variable Initialization

    // Implementation
    auto3416F75C_g = gv_terrans;
    auto3416F75C_var = -1;
    while (true) {
        auto3416F75C_var = PlayerGroupNextPlayer(auto3416F75C_g, auto3416F75C_var);
        if (auto3416F75C_var < 0) { break; }
        if ((gv_players[auto3416F75C_var].lv_position == lp_position)) {
            lv_return = auto3416F75C_var;
        }

    }
    return lv_return;
}

void gf_finalise_map () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto75F9E3DA_g;
    int auto75F9E3DA_u;
    unit auto75F9E3DA_var;
    unitgroup auto7A043DAE_g;
    int auto7A043DAE_u;
    unit auto7A043DAE_var;
    unitgroup autoE594E776_g;
    int autoE594E776_u;
    unit autoE594E776_var;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        if ((gv_positions[lv_i] == 0)) {
            gv_very_early_leaver_count += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DestructibleRock6x6I", 0, 0, PointFromName(("Blocker " + IntToString(lv_i))));
            gf_inject_extra_positions(lv_i);
            auto75F9E3DA_g = UnitGroup(null, 7, RegionFromName(("spawner player zerg " + IntToString(lv_i))), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto75F9E3DA_u = UnitGroupCount(auto75F9E3DA_g, c_unitCountAll);
            for (;; auto75F9E3DA_u -= 1) {
                auto75F9E3DA_var = UnitGroupUnitFromEnd(auto75F9E3DA_g, auto75F9E3DA_u);
                if (auto75F9E3DA_var == null) { break; }
                UnitRemove(auto75F9E3DA_var);
                PlayerModifyPropertyInt(7, c_playerPropSuppliesLimit, c_playerPropOperSubtract, 4);
                PlayerModifyPropertyInt(7, c_playerPropSuppliesMade, c_playerPropOperSubtract, 4);
            }
            auto7A043DAE_g = UnitGroup("MineralExtractor", 7, RegionFromName(("zergbase " + IntToString(lv_i))), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto7A043DAE_u = UnitGroupCount(auto7A043DAE_g, c_unitCountAll);
            for (;; auto7A043DAE_u -= 1) {
                auto7A043DAE_var = UnitGroupUnitFromEnd(auto7A043DAE_g, auto7A043DAE_u);
                if (auto7A043DAE_var == null) { break; }
                UnitRemove(auto7A043DAE_var);
                PlayerModifyPropertyInt(7, c_playerPropSuppliesLimit, c_playerPropOperSubtract, 15);
                PlayerModifyPropertyInt(7, c_playerPropSuppliesMade, c_playerPropOperSubtract, 15);
            }
        }

        lv_i += 1;
    }
    autoE594E776_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE594E776_u = UnitGroupCount(autoE594E776_g, c_unitCountAll);
    for (;; autoE594E776_u -= 1) {
        autoE594E776_var = UnitGroupUnitFromEnd(autoE594E776_g, autoE594E776_u);
        if (autoE594E776_var == null) { break; }
        if ((UnitGetType(autoE594E776_var) == "RocksBE")) {
            UnitSetOwner(autoE594E776_var, 0, true);
        }

    }
}

void gf_change_ownerships () {
    // Automatic Variable Declarations
    playergroup auto99A4CB39_g;
    int auto99A4CB39_var;
    unitgroup auto93CF31D3_g;
    int auto93CF31D3_u;
    unit auto93CF31D3_var;
    unitgroup autoB7497B56_g;
    int autoB7497B56_u;
    unit autoB7497B56_var;
    unitgroup auto90B6B357_g;
    int auto90B6B357_u;
    unit auto90B6B357_var;

    // Implementation
    auto99A4CB39_g = gv_terrans;
    auto99A4CB39_var = -1;
    while (true) {
        auto99A4CB39_var = PlayerGroupNextPlayer(auto99A4CB39_g, auto99A4CB39_var);
        if (auto99A4CB39_var < 0) { break; }
        auto93CF31D3_g = UnitGroup(null, c_playerAny, RegionFromName(("player " + IntToString(gv_players[auto99A4CB39_var].lv_position))), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto93CF31D3_u = UnitGroupCount(auto93CF31D3_g, c_unitCountAll);
        for (;; auto93CF31D3_u -= 1) {
            auto93CF31D3_var = UnitGroupUnitFromEnd(auto93CF31D3_g, auto93CF31D3_u);
            if (auto93CF31D3_var == null) { break; }
            if ((UnitGetType(auto93CF31D3_var) == "DestructibleRock6x6I")) {
            }
            else {
                UnitSetOwner(auto93CF31D3_var, auto99A4CB39_var, true);
            }
        }
    }
    autoB7497B56_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB7497B56_u = UnitGroupCount(autoB7497B56_g, c_unitCountAll);
    for (;; autoB7497B56_u -= 1) {
        autoB7497B56_var = UnitGroupUnitFromEnd(autoB7497B56_g, autoB7497B56_u);
        if (autoB7497B56_var == null) { break; }
        if (((UnitGetType(autoB7497B56_var) == "CreepTumor2") || (UnitGetType(autoB7497B56_var) == "Hive2") || (UnitGetType(autoB7497B56_var) == "LargeSpineCrawler") || (UnitGetType(autoB7497B56_var) == "SpineCrawler") || (UnitGetType(autoB7497B56_var) == "Nest2") || (UnitGetType(autoB7497B56_var) == "SlowlingSpawner") || (UnitGetType(autoB7497B56_var) == "CreeperSpawner") || (UnitGetType(autoB7497B56_var) == "MineralExtractor") || (UnitGetType(autoB7497B56_var) == "GeyserBlocker"))) {
            UnitSetOwner(autoB7497B56_var, PlayerGroupPlayer(gv_zerg, 1), true);
        }

    }
    auto90B6B357_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto90B6B357_u = UnitGroupCount(auto90B6B357_g, c_unitCountAll);
    for (;; auto90B6B357_u -= 1) {
        auto90B6B357_var = UnitGroupUnitFromEnd(auto90B6B357_g, auto90B6B357_u);
        if (auto90B6B357_var == null) { break; }
        if (((libNtve_gf_UnitInRegion(auto90B6B357_var, RegionFromId(3)) == true) || (libNtve_gf_UnitInRegion(auto90B6B357_var, RegionFromId(4)) == true) || (libNtve_gf_UnitInRegion(auto90B6B357_var, RegionFromId(5)) == true) || (libNtve_gf_UnitInRegion(auto90B6B357_var, RegionFromId(6)) == true) || (libNtve_gf_UnitInRegion(auto90B6B357_var, RegionFromId(7)) == true) || (libNtve_gf_UnitInRegion(auto90B6B357_var, RegionFromId(8)) == true))) {
            UnitKill(auto90B6B357_var);
        }

    }
}

void gf_replace_geysers () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto7035400D_g;
    int auto7035400D_u;
    unit auto7035400D_var;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        if ((gv_positions[lv_i] == 0)) {
            auto7035400D_g = UnitGroup(null, 0, RegionFromName(("geysers p" + IntToString(lv_i))), UnitFilter((1 << c_targetFilterRawResource), 0, 0, 0), 0);
            auto7035400D_u = UnitGroupCount(auto7035400D_g, c_unitCountAll);
            for (;; auto7035400D_u -= 1) {
                auto7035400D_var = UnitGroupUnitFromEnd(auto7035400D_g, auto7035400D_u);
                if (auto7035400D_var == null) { break; }
                libNtve_gf_ReplaceUnit(auto7035400D_var, "GeyserBlocker", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
                UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "InvulnerableBlockers", libNtve_gf_LastReplacedUnit(), 1);
            }
        }

        lv_i += 1;
    }
}

void gf_spawn_critter () {
    // Variable Declarations
    point lv_p;
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_r = RandomInt(1, 40);
    lv_p = RegionRandomPoint(RegionFromName(("Bonus " + IntToString(lv_r))));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpaceBalls", 0, 0, lv_p);
    lv_r = RandomInt(1, 40);
    lv_p = RegionRandomPoint(RegionFromName(("Bonus " + IntToString(lv_r))));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KokCritter", 0, 0, lv_p);
    lv_r = RandomInt(1, 40);
    lv_p = RegionRandomPoint(RegionFromName(("Bonus " + IntToString(lv_r))));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AatroxArthasCritter", 0, 0, lv_p);
    lv_r = RandomInt(1, 40);
    lv_p = RegionRandomPoint(RegionFromName(("Bonus " + IntToString(lv_r))));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SmithCritter", 0, 0, lv_p);
    TriggerEnable(gt_SmithdoingstuffTriggerDummy, true);
}

bool gf_is_game_over () {
    // Variable Declarations
    bool lv_return;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((gf_is_terran_dead() == true) || (gf_is_zerg_dead() == true))) {
        lv_return = true;
    }

    return lv_return;
}

bool gf_is_terran_dead () {
    // Variable Declarations
    bool lv_return;
    int lv_cnt;

    // Automatic Variable Declarations
    playergroup auto70D756A9_g;
    int auto70D756A9_var;

    // Variable Initialization

    // Implementation
    auto70D756A9_g = gv_terrans;
    auto70D756A9_var = -1;
    while (true) {
        auto70D756A9_var = PlayerGroupNextPlayer(auto70D756A9_g, auto70D756A9_var);
        if (auto70D756A9_var < 0) { break; }
        if ((gv_players[auto70D756A9_var].lv_alive == true)) {
            lv_cnt = (lv_cnt + 1);
        }

    }
    if ((lv_cnt == 0)) {
        lv_return = true;
    }

    return lv_return;
}

bool gf_is_zerg_dead () {
    // Variable Declarations
    bool lv_return;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(UnitFromId(478555519)) == false) && (UnitIsAlive(UnitFromId(706616818)) == false)) {
        lv_return = true;
    }

    return lv_return;
}

int gf_get_winning_team () {
    // Variable Declarations
    int lv_return;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gf_is_zerg_dead() == true)) {
        lv_return = 1;
    }
    else {
        lv_return = 2;
    }
    return lv_return;
}

int gf_get_reward_elo_count (int lp_player_id) {
    // Variable Declarations
    fixed lv_mission_time;
    int lv_mode_multi;
    int lv_og_reward;
    int lv_time_penalties;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mission_time = GameGetMissionTime();

    // Implementation
    if ((GameAttributeGameValue("1") == "0002")) {
        lv_mode_multi = 3;
    }
    else {
        lv_mode_multi = 1;
    }
    lv_og_reward = (((10 * lv_mode_multi) * gv_difficulty) + (gv_reward_related_deaths * gv_difficulty));
    lv_time_penalties = FloorI((MaxF(0.0, (GameGetMissionTime() - (20 * 60))) / (5.0 * 60.0)));
    lv_og_reward -= (lv_time_penalties * gv_difficulty);
    lv_og_reward -= gv_players[lp_player_id].lv_elopenalty;
    lv_og_reward -= ((gf_elo_to_rank_number(lp_player_id) - gv_difficulty) * gv_difficulty);
    if ((lv_og_reward < 3)) {
        lv_og_reward = 3;
    }

    if ((gv_players[lp_player_id].lv_games <= 5)) {
        lv_og_reward *= 5;
    }

    if ((gv_practice_mode == true)) {
        lv_og_reward = 0;
    }

    return lv_og_reward;
}

int gf_get_base_penalty_elo_count () {
    // Variable Declarations
    int lv_i;
    int lv_max_penalty;
    int lv_mode_multi;
    int lv_r;
    fixed lv_mission_time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 60;
    lv_mission_time = GameGetMissionTime();

    // Implementation
    if ((GameAttributeGameValue("1") == "0002")) {
        lv_mode_multi = 2;
    }
    else {
        lv_mode_multi = 4;
    }
    lv_max_penalty = (10 * lv_mode_multi);
    lv_max_penalty = (lv_max_penalty + 110);
    lv_r = lv_max_penalty;
    if ((lv_mission_time >= (1 * 60))) {
        lv_r = (lv_r - 10);
    }

    if ((lv_mission_time >= (2 * 60))) {
        lv_r = (lv_r - 10);
    }

    if ((lv_mission_time >= (3 * 60))) {
        lv_r = (lv_r - 10);
    }

    if ((lv_mission_time >= (4 * 60))) {
        lv_r = (lv_r - 10);
    }

    if ((lv_mission_time >= (5 * 60))) {
        lv_r = (lv_r - 10);
    }

    if ((lv_mission_time >= (6 * 60))) {
        lv_r = (lv_r - 10);
    }

    if ((lv_mission_time >= (7 * 60))) {
        lv_r = (lv_r - 10);
    }

    if ((lv_mission_time >= (8 * 60))) {
        lv_r = (lv_r - 10);
    }

    if ((lv_mission_time >= (9 * 60))) {
        lv_r = (lv_r - 10);
    }

    if ((lv_mission_time >= (10 * 60))) {
        lv_r = (lv_r - 10);
    }

    if ((lv_mission_time >= (11 * 60))) {
        lv_r = (lv_r - 10);
    }

    lv_r = (lv_r - (FixedToInt(lv_mission_time) / 60));
    if ((lv_r < 5)) {
        lv_r = 5;
    }

    if (((gv_practice_mode == true) || (lv_mission_time < 135.0))) {
        lv_r = 0;
    }

    return lv_r;
}

int gf_elo_to_rank_number (int lp_player_id) {
    // Variable Declarations
    int lv_elo;
    int lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_elo = gv_players[lp_player_id].lv_elo;
    if ((lv_elo < 1000)) {
        lv_result = 1;
    }
    else if ((lv_elo >= 1000) && (lv_elo < 1200)) {
        lv_result = 2;
    }
    else if ((lv_elo >= 1200) && (lv_elo < 1400)) {
        lv_result = 3;
    }
    else if ((lv_elo >= 1400) && (lv_elo < 1600)) {
        lv_result = 4;
    }
    else if ((lv_elo >= 1600) && (lv_elo < 1900)) {
        lv_result = 5;
    }
    else if ((lv_elo >= 1900) && (lv_elo < 2400)) {
        lv_result = 6;
    }
    else if ((lv_elo >= 2400)) {
        lv_result = 7;
    }
    return lv_result;
}

void gf_end_game (int lp_winner) {
    // Variable Declarations
    int lv_score;

    // Automatic Variable Declarations
    playergroup autoC5308BE9_g;
    int autoC5308BE9_var;
    playergroup auto796E7148_g;
    int auto796E7148_var;

    // Variable Initialization

    // Implementation
    if ((gv_game_has_ended == false)) {
        gv_game_has_ended = true;
        TriggerDestroy(gt_everysecond);
        TriggerDestroy(gt_buildinggetsattacked);
        TriggerDestroy(gt_buildinggetsattackedtrydefendwithhydras);
        TriggerDestroy(gt_buildinggetsattackedtrydefendwithwizards);
        TriggerDestroy(gt_CCdestroyed);
        TriggerDestroy(gt_Checkbridgesevery45s);
        TriggerDestroy(gt_checkhydras);
        TriggerDestroy(gt_checkplayerseveryminute);
        TriggerDestroy(gt_creepsourcedied);
        TriggerDestroy(gt_creepsourcerebuildstarted);
        TriggerDestroy(gt_drone_finished);
        TriggerDestroy(gt_every45seconds);
        TriggerDestroy(gt_everyfiveseconds);
        TriggerDestroy(gt_everyfiveminutes);
        TriggerDestroy(gt_everythreeseconds);
        TriggerDestroy(gt_f2triggerevery5s);
        TriggerDestroy(gt_Feedidleinfestorsevery21s);
        TriggerDestroy(gt_grabapresent);
        TriggerDestroy(gt_hydragetsattacked);
        TriggerDestroy(gt_hydragotborn);
        TriggerDestroy(gt_infestorgetsattacked);
        TriggerDestroy(gt_invaderdies);
        TriggerDestroy(gt_invaderleaveszerghighground);
        TriggerDestroy(gt_IonCannonApplyPermaDamage);
        TriggerDestroy(gt_IonCannonNotification);
        TriggerDestroy(gt_killapumpkin);
        TriggerDestroy(gt_nestdied);
        TriggerDestroy(gt_nestislowhealth);
        TriggerDestroy(gt_playercollectsbonuscard);
        TriggerDestroy(gt_playercollectspresent);
        TriggerDestroy(gt_playerleavesgame);
        TriggerDestroy(gt_pumpkindies);
        TriggerDestroy(gt_removefortdebrisactorfix);
        TriggerDestroy(gt_resetwizardactioncooldown);
        TriggerDestroy(gt_sendbuggohome);
        TriggerDestroy(gt_spawnhellforces);
        TriggerDestroy(gt_spawnpresent);
        TriggerDestroy(gt_spawnpumpkin);
        TriggerDestroy(gt_spawnerdies);
        TriggerDestroy(gt_spawner_started);
        TriggerDestroy(gt_specialunitgotborn);
        TriggerDestroy(gt_spinedies);
        TriggerDestroy(gt_spinegetsattacked);
        TriggerDestroy(gt_Terranenterszerghighground);
        TriggerDestroy(gt_useidleunits);
        TriggerDestroy(gt_everytenseconds);
        TriggerDestroy(gt_everytwoseconds);
        TriggerDestroy(gt_every15seconds);
        TriggerDestroy(gt_every30seconds);
        TriggerDestroy(gt_everyminute);
        TriggerDestroy(gt_every90seconds);
        TriggerDestroy(gt_spawner_finished);
        TriggerDestroy(gt_KaraxDeathTimer);
        TriggerDestroy(gt_use_tank_attack);
        gf_manage_3v3_triggers(false);
        autoC5308BE9_g = gv_terrans;
        autoC5308BE9_var = -1;
        while (true) {
            autoC5308BE9_var = PlayerGroupNextPlayer(autoC5308BE9_g, autoC5308BE9_var);
            if (autoC5308BE9_var < 0) { break; }
            if ((lp_winner == 1)) {
                if ((gv_practice_mode == true)) {
                }
                else {
                    gv_players[autoC5308BE9_var].lv_elo = (gv_players[autoC5308BE9_var].lv_elo + gf_get_reward_elo_count(autoC5308BE9_var));
                    gf_Game_Banks_handler("save", autoC5308BE9_var, gv_players[autoC5308BE9_var].lv_elo, 0, 0);
                    lv_score = gv_terrandata[autoC5308BE9_var].lv_strength;
                    lv_score = ((lv_score / 5) * gv_difficulty);
                    if ((gv_mutator_active == true)) {
                        lv_score = (lv_score + (lv_score / 5));
                    }

                    if ((gf_tbp_get_tv_winner_vote() > 0)) {
                        lv_score = (lv_score + ((lv_score / 5) * gf_tbp_get_tv_winner_vote()));
                    }

                    if ((gv_players[autoC5308BE9_var].lv_alive == true)) {
                        gf_Game_Banks_handler("addxp", autoC5308BE9_var, gv_players[autoC5308BE9_var].lv_elo, 0, (lv_score * 2));
                    }
                    else {
                        gf_Game_Banks_handler("addxp", autoC5308BE9_var, gv_players[autoC5308BE9_var].lv_elo, 0, (lv_score * 1));
                    }
                }
            }

        }
        if ((lp_winner == 1)) {
            gf_shot_fireworks(18);
            Wait(3.0, c_timeGame);
        }

        auto796E7148_g = gv_terrans;
        auto796E7148_var = -1;
        while (true) {
            auto796E7148_var = PlayerGroupNextPlayer(auto796E7148_g, auto796E7148_var);
            if (auto796E7148_var < 0) { break; }
            if ((lp_winner == 1)) {
                GameOver(auto796E7148_var, c_gameOverVictory, true, true);
            }
            else {
                GameOver(auto796E7148_var, c_gameOverDefeat, true, true);
            }
        }
    }

}

void gf_rebalance_zerg_after_early_terran_death (int lp_player_id) {
    // Variable Declarations
    int lv_elp_stage;
    int lv_ndebt;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto96ACBD2E_g;
    int auto96ACBD2E_u;
    unit auto96ACBD2E_var;
    unitgroup auto4CE360BA_g;
    int auto4CE360BA_u;
    unit auto4CE360BA_var;

    // Variable Initialization

    // Implementation
    if ((GameGetMissionTime() < 135)) {
        gv_very_early_leaver_count += 1;
        if ((GameGetMissionTime() > 4.0)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/411F328C"));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/EC047E91"));
        }

        auto96ACBD2E_g = UnitGroup(null, 7, RegionFromName(("spawner player zerg " + IntToString(gv_players[lp_player_id].lv_position))), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto96ACBD2E_u = UnitGroupCount(auto96ACBD2E_g, c_unitCountAll);
        for (;; auto96ACBD2E_u -= 1) {
            auto96ACBD2E_var = UnitGroupUnitFromEnd(auto96ACBD2E_g, auto96ACBD2E_u);
            if (auto96ACBD2E_var == null) { break; }
            UnitRemove(auto96ACBD2E_var);
            PlayerModifyPropertyInt(7, c_playerPropSuppliesLimit, c_playerPropOperSubtract, 4);
            PlayerModifyPropertyInt(7, c_playerPropSuppliesMade, c_playerPropOperSubtract, 4);
        }
        auto4CE360BA_g = UnitGroup("MineralExtractor", 7, RegionFromName(("zergbase " + IntToString(gv_players[lp_player_id].lv_position))), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4CE360BA_u = UnitGroupCount(auto4CE360BA_g, c_unitCountAll);
        for (;; auto4CE360BA_u -= 1) {
            auto4CE360BA_var = UnitGroupUnitFromEnd(auto4CE360BA_g, auto4CE360BA_u);
            if (auto4CE360BA_var == null) { break; }
            UnitRemove(auto4CE360BA_var);
            PlayerModifyPropertyInt(7, c_playerPropSuppliesLimit, c_playerPropOperSubtract, 15);
            PlayerModifyPropertyInt(7, c_playerPropSuppliesMade, c_playerPropOperSubtract, 15);
        }
    }

    if ((GameGetMissionTime() >= 135) && (GameGetMissionTime() < (11 * 60))) {
        lv_i = 11;
        while ((lv_i >= 5)) {
            if ((GameGetMissionTime() < (lv_i * 60))) {
                lv_elp_stage = (lv_elp_stage + 1);
                lv_i = (lv_i - 1);
            }
            else {
                lv_i = 0;
            }
        }
        lv_ndebt = (lv_elp_stage * 100);
        gv_debt = (gv_debt + lv_ndebt);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/5DA83870"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/822DFA50"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (IntToText(lv_ndebt) + StringExternal("Param/Value/39E74EE4")));
    }

}

int gf_get_ranked_difficulty () {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    string autoE06D6F1C_val;

    // Variable Initialization

    // Implementation
    autoE06D6F1C_val = GameAttributeGameValue("2");
    if (autoE06D6F1C_val == "0002") {
        lv_r = 1;
        gv_req_beastlings = 0;
        gv_req_ravs = 0;
        gv_req_infused = 0;
        gv_req_torra = 0;
    }
    else if (autoE06D6F1C_val == "0001") {
        lv_r = 2;
        gv_req_beastlings = 0;
        gv_req_ravs = 0;
        gv_req_infused = 0;
        gv_req_torra = 0;
    }
    else if (autoE06D6F1C_val == "0004") {
        lv_r = 3;
        gv_req_beastlings = 8;
        gv_req_ravs = 0;
        gv_req_infused = 0;
        gv_req_torra = 0;
    }
    else if (autoE06D6F1C_val == "0005") {
        lv_r = 4;
        gv_req_beastlings = 10;
        gv_req_ravs = 6;
        gv_req_infused = 0;
        gv_req_torra = 1;
    }
    else if (autoE06D6F1C_val == "0006") {
        lv_r = 5;
        gv_req_beastlings = 4;
        gv_req_ravs = 4;
        gv_req_infused = 2;
        gv_req_torra = 2;
    }
    else if (autoE06D6F1C_val == "0007") {
        lv_r = 6;
        gv_req_beastlings = 0;
        gv_req_ravs = 8;
        gv_req_infused = 4;
        gv_req_torra = 4;
    }
    else if (autoE06D6F1C_val == "0003") {
        lv_r = 7;
        gv_req_beastlings = 0;
        gv_req_ravs = 8;
        gv_req_infused = 6;
        gv_req_torra = 6;
    }
    else if (autoE06D6F1C_val == "0008") {
        lv_r = 8;
        gv_req_beastlings = 0;
        gv_req_ravs = 6;
        gv_req_infused = 8;
        gv_req_torra = 6;
    }
    else if (autoE06D6F1C_val == "0009") {
        lv_r = 9;
        gv_req_beastlings = 0;
        gv_req_ravs = 4;
        gv_req_infused = 10;
        gv_req_torra = 6;
    }
    else if (autoE06D6F1C_val == "0010") {
        lv_r = 10;
        gv_req_beastlings = 0;
        gv_req_ravs = 2;
        gv_req_infused = 12;
        gv_req_torra = 6;
    }
    else if (autoE06D6F1C_val == "0011") {
        lv_r = 11;
        gv_req_beastlings = 0;
        gv_req_ravs = 2;
        gv_req_infused = 10;
        gv_req_torra = 8;
    }
    else if (autoE06D6F1C_val == "0012") {
        lv_r = 12;
        gv_req_beastlings = 0;
        gv_req_ravs = 2;
        gv_req_infused = 8;
        gv_req_torra = 10;
    }
    else if (autoE06D6F1C_val == "0013") {
        lv_r = 13;
        gv_req_beastlings = 0;
        gv_req_ravs = 2;
        gv_req_infused = 6;
        gv_req_torra = 12;
    }
    else {
    }
    return lv_r;
}

void gf_AnalysePlayerDifficultyVotes () {
    // Variable Declarations
    int lv_c;
    fixed lv_s;
    int lv_i;
    int lv_j;
    int lv_mxhack;
    int[7] lv_votes;
    int[14] lv_diff_votes;
    int lv_most_voted;
    fixed lv_voted_difficulty_real;

    // Automatic Variable Declarations
    int auto05CCF244_val;

    // Variable Initialization
    lv_i = 1;
    lv_j = 1;

    // Implementation
    if ((gf_is_3v3() == true)) {
        gv_voted_difficulty = 2;
    }
    else {
        if ((GameAttributeGameValue("8") == "0001")) {
            lv_mxhack = 1;
        }
        else {
            lv_mxhack = 6;
        }
        while ((lv_i <= lv_mxhack)) {
            if ((PlayerStatus(lv_i) != c_playerStatusUnused)) {
                lv_c = (lv_c + 1);
                lv_s = (lv_s + gf_get_pvote_difficulty(lv_i));
                lv_votes[lv_i] = gf_transform_voted_difficulty_real(gf_get_pvote_difficulty(lv_i));
                lv_diff_votes[lv_votes[lv_i]] = (lv_diff_votes[lv_votes[lv_i]] + 1);
            }

            lv_i = (lv_i + 1);
        }
        if ((lv_c > 0)) {
            if ((GameAttributeGameValue("8") == "0003")) {
                lv_voted_difficulty_real = ((lv_s + lv_votes[1]) / (lv_c + 1));
                gv_voted_difficulty = gf_transform_voted_difficulty_real(lv_voted_difficulty_real);
            }
            else {
                if ((GameAttributeGameValue("8") == "0004")) {
                    lv_i = 1;
                    while ((lv_i <= 13)) {
                        if (((lv_most_voted == 0) || (lv_diff_votes[lv_i] > lv_diff_votes[lv_most_voted]))) {
                            lv_most_voted = lv_i;
                        }

                        lv_i = (lv_i + 1);
                    }
                    gv_voted_difficulty = lv_most_voted;
                }
                else {
                    lv_voted_difficulty_real = (lv_s / lv_c);
                    gv_voted_difficulty = gf_transform_voted_difficulty_real(lv_voted_difficulty_real);
                }
            }
        }

    }
    auto05CCF244_val = gv_voted_difficulty;
    if (auto05CCF244_val == 1) {
        gv_req_beastlings = 0;
        gv_req_ravs = 0;
        gv_req_infused = 0;
        gv_req_torra = 0;
    }
    else if (auto05CCF244_val == 2) {
        gv_req_beastlings = 0;
        gv_req_ravs = 0;
        gv_req_infused = 0;
        gv_req_torra = 0;
    }
    else if (auto05CCF244_val == 3) {
        gv_req_beastlings = 8;
        gv_req_ravs = 0;
        gv_req_infused = 0;
        gv_req_torra = 0;
    }
    else if (auto05CCF244_val == 4) {
        gv_req_beastlings = 10;
        gv_req_ravs = 6;
        gv_req_infused = 0;
        gv_req_torra = 1;
    }
    else if (auto05CCF244_val == 5) {
        gv_req_beastlings = 4;
        gv_req_ravs = 4;
        gv_req_infused = 2;
        gv_req_torra = 2;
    }
    else if (auto05CCF244_val == 6) {
        gv_req_beastlings = 0;
        gv_req_ravs = 8;
        gv_req_infused = 4;
        gv_req_torra = 4;
    }
    else if (auto05CCF244_val == 7) {
        gv_req_beastlings = 0;
        gv_req_ravs = 8;
        gv_req_infused = 6;
        gv_req_torra = 6;
    }
    else if (auto05CCF244_val == 8) {
        gv_req_beastlings = 0;
        gv_req_ravs = 6;
        gv_req_infused = 8;
        gv_req_torra = 6;
    }
    else if (auto05CCF244_val == 9) {
        gv_req_beastlings = 0;
        gv_req_ravs = 4;
        gv_req_infused = 10;
        gv_req_torra = 6;
    }
    else if (auto05CCF244_val == 10) {
        gv_req_beastlings = 0;
        gv_req_ravs = 2;
        gv_req_infused = 12;
        gv_req_torra = 6;
    }
    else if (auto05CCF244_val == 11) {
        gv_req_beastlings = 0;
        gv_req_ravs = 2;
        gv_req_infused = 10;
        gv_req_torra = 8;
    }
    else if (auto05CCF244_val == 12) {
        gv_req_beastlings = 0;
        gv_req_ravs = 2;
        gv_req_infused = 8;
        gv_req_torra = 10;
    }
    else if (auto05CCF244_val == 13) {
        gv_req_beastlings = 0;
        gv_req_ravs = 2;
        gv_req_infused = 6;
        gv_req_torra = 12;
    }
    else {
    }
}

fixed gf_get_pvote_difficulty (int lp_p) {
    // Variable Declarations
    fixed lv_result;

    // Automatic Variable Declarations
    string autoCF610398_val;

    // Variable Initialization

    // Implementation
    if ((GameAttributeGameValue("8") == "0005")) {
        lv_result = gf_get_elo_difficulty(lp_p);
    }
    else {
        autoCF610398_val = GameAttributePlayerValue("7", lp_p);
        if (autoCF610398_val == "0014") {
            lv_result = gf_get_elo_difficulty(lp_p);
        }
        else if (autoCF610398_val == "0002") {
            lv_result = 1;
        }
        else if (autoCF610398_val == "0001") {
            lv_result = 2;
        }
        else if (autoCF610398_val == "0004") {
            lv_result = 3;
        }
        else if (autoCF610398_val == "0005") {
            lv_result = 4;
        }
        else if (autoCF610398_val == "0006") {
            lv_result = 5;
        }
        else if (autoCF610398_val == "0007") {
            lv_result = 6;
        }
        else if (autoCF610398_val == "0003") {
            lv_result = 7;
        }
        else if (autoCF610398_val == "0008") {
            lv_result = 8;
        }
        else {
        }
    }
    return lv_result;
}

fixed gf_get_elo_difficulty (int lp_player) {
    // Variable Declarations
    int lv_elo;
    fixed lv_result;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_elo = gv_players[lp_player].lv_elo;

    // Implementation
    if ((lv_elo < 1200)) {
        lv_result = 1.0;
    }

    if ((lv_elo >= 1200) && (lv_elo < 1400)) {
        lv_result = 2.0;
    }

    if ((lv_elo >= 1400) && (lv_elo < 1600)) {
        lv_result = 3.0;
    }

    if ((lv_elo >= 1600) && (lv_elo < 1800)) {
        lv_result = 4.0;
    }

    if ((lv_elo >= 1800) && (lv_elo < 2000)) {
        lv_result = 5.0;
    }

    if ((lv_elo >= 2000) && (lv_elo < 2200)) {
        lv_result = 6.0;
    }

    if ((lv_elo >= 2200) && (lv_elo < 2400)) {
        lv_result = 7.0;
    }

    if ((lv_elo >= 2400)) {
        lv_result = 8.0;
    }

    return lv_result;
}

bool gf_is_average_vote () {
    // Automatic Variable Declarations
    // Implementation
    if ((GameAttributeGameValue("8") == "0003") && (GameAttributeGameValue("8") == "0002") && (GameAttributeGameValue("8") == "0005")) {
        return true;
    }
    else {
        return false;
    }
}

int gf_get_real_difficulty () {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_r = gv_voted_difficulty;

    // Implementation
    return lv_r;
}

int gf_transform_voted_difficulty_real (fixed lp_voted_difficulty_real) {
    // Variable Declarations
    fixed lv_temp;
    int lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gf_is_average_vote() == true)) {
        if ((lp_voted_difficulty_real < 8.0)) {
            lv_result = RoundI(lp_voted_difficulty_real);
        }
        else {
            lv_temp = (lp_voted_difficulty_real - 8.0);
            lv_temp = (lp_voted_difficulty_real * 5.0);
            lv_result = RoundI((8.0 + lv_temp));
        }
    }
    else {
        lv_result = RoundI(lp_voted_difficulty_real);
    }
    return lv_result;
}

bool gf_is_winter () {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((GetDateTimeMonth(CurrentDateTimeGet()) == 11) || (GetDateTimeMonth(CurrentDateTimeGet()) == 12) || (GetDateTimeMonth(CurrentDateTimeGet()) == 1))) {
        lv_r = true;
    }

    return lv_r;
}

void gf_winter_make_snow () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        gf_Remove_weather(lv_i);
        gf_Create_weather(lv_i, 3, true);
        lv_i = (lv_i + 1);
    }
}

void gf_Enable_AF_Event () {
    // Variable Declarations
    unitgroup lv_unit_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit_group = UnitGroupEmpty();

    // Implementation
    gf_af_initial_model_swap();
    gf_af_replace_spawners();
    TriggerEnable(gt_af_relevant_building_finished, true);
    CatalogReferenceSet("Effect,PunisherGrenadesU,Amount", 7, "20");
}

void gf_af_replace_spawners () {
    // Variable Declarations
    point lv_position;
    int lv_target_position;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    unitgroup autoD730C048_g;
    int autoD730C048_u;
    unit autoD730C048_var;

    // Variable Initialization
    lv_ug = UnitGroupEmpty();

    // Implementation
    lv_ug = UnitGroup("SlowlingSpawner", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_ug, UnitGroup("CreeperSpawner", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoD730C048_g = lv_ug;
    autoD730C048_u = UnitGroupCount(autoD730C048_g, c_unitCountAll);
    for (;; autoD730C048_u -= 1) {
        autoD730C048_var = UnitGroupUnitFromEnd(autoD730C048_g, autoD730C048_u);
        if (autoD730C048_var == null) { break; }
        lv_position = UnitGetPosition(autoD730C048_var);
        lv_target_position = gf_get_closest_alive_player_position_from_group(lv_position, gv_terrans);
        libNtve_gf_ReplaceUnit(autoD730C048_var, "MarineSpawner", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        UnitIssueOrder(libNtve_gf_LastReplacedUnit(), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(lv_target_position)))), c_orderQueueReplace);
        UnitGroupAdd(gv_spawnergroups[lv_target_position].lv_all, libNtve_gf_LastReplacedUnit());
        UnitGroupAdd(gv_spawnergroups[lv_target_position].lv_front, libNtve_gf_LastReplacedUnit());
    }
}

void gf_af_initial_model_swap () {
    // Variable Declarations
    unitgroup lv_unit_group;

    // Automatic Variable Declarations
    unitgroup auto557FB25A_g;
    int auto557FB25A_u;
    unit auto557FB25A_var;
    unitgroup auto555DCB4F_g;
    int auto555DCB4F_u;
    unit auto555DCB4F_var;
    unitgroup auto45605FF7_g;
    int auto45605FF7_u;
    unit auto45605FF7_var;
    unitgroup autoFAE05167_g;
    int autoFAE05167_u;
    unit autoFAE05167_var;
    unitgroup autoEA13DBBA_g;
    int autoEA13DBBA_u;
    unit autoEA13DBBA_var;
    unitgroup auto43E62AF1_g;
    int auto43E62AF1_u;
    unit auto43E62AF1_var;

    // Variable Initialization
    lv_unit_group = UnitGroupEmpty();

    // Implementation
    lv_unit_group = UnitGroup("Hive2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto557FB25A_g = lv_unit_group;
    auto557FB25A_u = UnitGroupCount(auto557FB25A_g, c_unitCountAll);
    for (;; auto557FB25A_u -= 1) {
        auto557FB25A_var = UnitGroupUnitFromEnd(auto557FB25A_g, auto557FB25A_u);
        if (auto557FB25A_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(auto557FB25A_var), "ModelSwap WarfieldFortress");
    }
    lv_unit_group = UnitGroup("Nest2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto555DCB4F_g = lv_unit_group;
    auto555DCB4F_u = UnitGroupCount(auto555DCB4F_g, c_unitCountAll);
    for (;; auto555DCB4F_u -= 1) {
        auto555DCB4F_var = UnitGroupUnitFromEnd(auto555DCB4F_g, auto555DCB4F_u);
        if (auto555DCB4F_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(auto555DCB4F_var), "ModelSwap CommandCenter");
    }
    lv_unit_group = UnitGroup("CreepTumor2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto45605FF7_g = lv_unit_group;
    auto45605FF7_u = UnitGroupCount(auto45605FF7_g, c_unitCountAll);
    for (;; auto45605FF7_u -= 1) {
        auto45605FF7_var = UnitGroupUnitFromEnd(auto45605FF7_g, auto45605FF7_u);
        if (auto45605FF7_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(auto45605FF7_var), "ModelSwap Biodome");
    }
    lv_unit_group = UnitGroup("LargeSpineCrawler", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFAE05167_g = lv_unit_group;
    autoFAE05167_u = UnitGroupCount(autoFAE05167_g, c_unitCountAll);
    for (;; autoFAE05167_u -= 1) {
        autoFAE05167_var = UnitGroupUnitFromEnd(autoFAE05167_g, autoFAE05167_u);
        if (autoFAE05167_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(autoFAE05167_var), "ModelSwap GunTower");
    }
    lv_unit_group = UnitGroup("SpineCrawler", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEA13DBBA_g = lv_unit_group;
    autoEA13DBBA_u = UnitGroupCount(autoEA13DBBA_g, c_unitCountAll);
    for (;; autoEA13DBBA_u -= 1) {
        autoEA13DBBA_var = UnitGroupUnitFromEnd(autoEA13DBBA_g, autoEA13DBBA_u);
        if (autoEA13DBBA_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(autoEA13DBBA_var), "ModelSwap AutoTurret");
    }
    lv_unit_group = UnitGroup("MineralExtractor", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto43E62AF1_g = lv_unit_group;
    auto43E62AF1_u = UnitGroupCount(auto43E62AF1_g, c_unitCountAll);
    for (;; auto43E62AF1_u -= 1) {
        auto43E62AF1_var = UnitGroupUnitFromEnd(auto43E62AF1_g, auto43E62AF1_u);
        if (auto43E62AF1_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(auto43E62AF1_var), "ModelSwap MineralStorage");
    }
}

void gf_af_model_swap (unit lp_unit) {
    // Automatic Variable Declarations
    string auto8556AEB0_val;

    // Implementation
    auto8556AEB0_val = UnitGetType(lp_unit);
    if (auto8556AEB0_val == "CreepTumor2") {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap Biodome");
    }
    else if (auto8556AEB0_val == "Nest2") {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap CommandCenter");
    }
    else if (auto8556AEB0_val == "SpineCrawler") {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap AutoTurret");
    }
    else if (auto8556AEB0_val == "MineralExtractor") {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap MineralStorage");
    }
    else {
    }
}

bool gf_is_af_event () {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GetDateTimeMonth(CurrentDateTimeGet()) == 4) && ((GetDateTimeDay(CurrentDateTimeGet()) == 1))) {
        lv_r = true;
    }

    return lv_r;
}

void gf_enable_thxg_setting () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(gt_spawnturkey, true);
    TriggerEnable(gt_turkeydies, true);
}

bool gf_is_thxg () {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GetDateTimeMonth(CurrentDateTimeGet()) == 11) && ((GetDateTimeDay(CurrentDateTimeGet()) == 27) || (GetDateTimeDay(CurrentDateTimeGet()) == 28) || (GetDateTimeDay(CurrentDateTimeGet()) == 29))) {
        lv_r = true;
    }

    return lv_r;
}

int gf_thxg_get_turkey_color (unit lp_unit) {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitHasBehavior2(EventUnit(), "SMGlowBlue") == true)) {
        lv_r = 1;
    }
    else {
        if ((UnitHasBehavior2(EventUnit(), "SMGlowGreen") == true)) {
            lv_r = 2;
        }
        else {
            lv_r = 3;
        }
    }
    return lv_r;
}

void gf_spawn_turkey () {
    // Variable Declarations
    point lv_p;
    int lv_r;
    int lv_color;

    // Automatic Variable Declarations
    int auto86512378_val;

    // Variable Initialization
    lv_r = RandomInt(1, 40);

    // Implementation
    lv_p = RegionRandomPoint(RegionFromName(("Bonus " + IntToString(lv_r))));
    if ((gf_flip_coin() == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "UglyTurkey", 0, 0, lv_p);
    }
    else {
        if ((gf_flip_coin() == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "UglyTurkey", 0, 0, lv_p);
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpaceTurkey", 0, 0, lv_p);
        }
    }
    lv_color = RandomInt(1, 3);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "HaloStart");
    auto86512378_val = lv_color;
    if (auto86512378_val == 1) {
        UnitBehaviorAdd(UnitLastCreated(), "SMGlowBlue", UnitLastCreated(), 1);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "HaloSetColor 0,255,255");
    }
    else if (auto86512378_val == 2) {
        UnitBehaviorAdd(UnitLastCreated(), "SMGlowGreen", UnitLastCreated(), 1);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "HaloSetColor 0,255,0");
    }
    else if (auto86512378_val == 3) {
        UnitBehaviorAdd(UnitLastCreated(), "SMGlowRed", UnitLastCreated(), 1);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "HaloSetColor 255,0,0");
    }
    else {
    }
    gf_revealpickup(UnitLastCreated());
}

void gf_init_event () {
    // Automatic Variable Declarations
    int auto0034F086_val;
    playergroup autoEF184761_g;
    int autoEF184761_var;
    int autoE7D7DBBA_val;

    // Implementation
    if ((gf_get_lobby_event_setting() == 0)) {
        gv_is_halloween = gf_is_halloween();
        gv_is_xmas = gf_is_xmas();
        gv_is_hny = gf_is_hny();
        gv_is_eastern = gf_is_eastern();
        gv_is_crazyminions = gf_is_crazyminions();
        gv_is_night_king = gf_is_night_king();
        gv_is_vday = gf_is_vday();
        gv_is_thxg = gf_is_thxg();
    }
    else {
        auto0034F086_val = gf_get_lobby_event_setting();
        if (auto0034F086_val == 1) {
            gv_is_halloween = true;
        }
        else if (auto0034F086_val == 2) {
            gv_is_xmas = true;
        }
        else if (auto0034F086_val == 3) {
            gv_is_hny = true;
        }
        else if (auto0034F086_val == 4) {
            gv_is_eastern = true;
        }
        else if (auto0034F086_val == 5) {
            gv_is_crazyminions = true;
        }
        else if (auto0034F086_val == 6) {
            gv_is_night_king = true;
        }
        else if (auto0034F086_val == 7) {
            gv_is_vday = true;
        }
        else if (auto0034F086_val == 8) {
            gv_is_thxg = true;
        }
        else {
        }
    }
    gv_is_af_event = gf_is_af_event();
    if ((gf_tbp_get_zterran_vote_result() == 1) && (gv_is_af_event == false)) {
        gv_is_af_event = true;
    }

    if ((gv_is_af_event == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/1165A439") + StringToText("")));
        gf_Enable_AF_Event();
    }

    if ((gf_is_event() == true)) {
        autoEF184761_g = gv_terrans;
        autoEF184761_var = -1;
        while (true) {
            autoEF184761_var = PlayerGroupNextPlayer(autoEF184761_g, autoEF184761_var);
            if (autoEF184761_var < 0) { break; }
            TechTreeAbilityAllow(autoEF184761_var, AbilityCommand("BuildBuilder", 21), true);
        }
        autoE7D7DBBA_val = gf_get_current_event_as_typeint();
        if (autoE7D7DBBA_val == 1) {
            gf_enable_halloween_settings();
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/9E9E757A") + StringToText("")));
        }
        else if (autoE7D7DBBA_val == 2) {
            gf_enable_xmas_settings();
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/23B1DE81") + StringToText("")));
        }
        else if (autoE7D7DBBA_val == 3) {
            gf_enable_hny_settings();
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/3F992C71") + StringToText("")));
        }
        else if (autoE7D7DBBA_val == 7) {
            gf_enable_vday_settings();
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/94E41F97") + StringToText("")));
        }
        else if (autoE7D7DBBA_val == 8) {
            gf_enable_thxg_setting();
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/CF0D4BBB") + StringToText("")));
        }
        else {
        }
    }

}

int gf_get_lobby_event_setting () {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    string auto25C7FF1E_val;

    // Variable Initialization

    // Implementation
    auto25C7FF1E_val = GameAttributeGameValue("6");
    if (auto25C7FF1E_val == "0001") {
    }
    else if (auto25C7FF1E_val == "0002") {
        lv_r = 1;
    }
    else if (auto25C7FF1E_val == "0003") {
        lv_r = 2;
    }
    else if (auto25C7FF1E_val == "0004") {
        lv_r = 3;
    }
    else if (auto25C7FF1E_val == "0007") {
        lv_r = 7;
    }
    else if (auto25C7FF1E_val == "0008") {
        lv_r = 8;
    }
    else {
    }
    return lv_r;
}

void gf_revealpickup (unit lp_item) {
    // Variable Declarations
    point lv_item_pos;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_item_pos = UnitGetPosition(lp_item);
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        if ((gv_players[lv_i].lv_alive == true) && (gv_players[lv_i].lv_has_locator_upgrade == true)) {
            VisRevealArea(lv_i, RegionCircle(lv_item_pos, 4.0), 3.0, false);
            lv_i = 8;
        }

        lv_i = (lv_i + 1);
    }
}

void gf_enable_vday_settings () {
    // Automatic Variable Declarations
    playergroup auto30C181EE_g;
    int auto30C181EE_var;

    // Implementation
    auto30C181EE_g = gv_terrans;
    auto30C181EE_var = -1;
    while (true) {
        auto30C181EE_var = PlayerGroupNextPlayer(auto30C181EE_g, auto30C181EE_var);
        if (auto30C181EE_var < 0) { break; }
        TechTreeAbilityAllow(auto30C181EE_var, AbilityCommand("BarracksTrain2", 17), true);
    }
    TriggerEnable(gt_spawnheart, true);
    TriggerEnable(gt_playercollectsheart, true);
    TriggerEnable(gt_grabaheart, true);
}

void gf_spawn_heart () {
    // Variable Declarations
    point lv_p;
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_r = RandomInt(1, 40);

    // Implementation
    if ((gv_heart_count <= 30)) {
        lv_p = RegionRandomPoint(RegionFromName(("Bonus " + IntToString(lv_r))));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeHeart", 0, 0, lv_p);
        gv_heart_count = (gv_heart_count + 1);
        gf_revealpickup(UnitLastCreated());
    }

}

void gf_enable_halloween_settings () {
    // Automatic Variable Declarations
    // Implementation
    GameSetToDLighting("AgriaNight");
    TriggerEnable(gt_killapumpkin, true);
    TriggerEnable(gt_spawnpumpkin, true);
    TriggerEnable(gt_pumpkindies, true);
    TriggerEnable(gt_playercollectsbonuscard, true);
}

void gf_disable_halloween_settings () {
    // Automatic Variable Declarations
    // Implementation
    GameSetToDLighting("Agria");
}

void gf_spawn_sappers () {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_r;
    int lv_p;
    unitgroup lv_sappers;
    unitgroup lv_all_sappers;
    int lv_amount;

    // Automatic Variable Declarations
    int autoD41E4CEC_val;
    unitgroup autoB5D83C2E_g;
    int autoB5D83C2E_u;
    unit autoB5D83C2E_var;

    // Variable Initialization
    lv_i = 1;
    lv_j = 1;
    lv_sappers = UnitGroupEmpty();
    lv_all_sappers = UnitGroupEmpty();
    lv_amount = 1;

    // Implementation
    if ((GameGetMissionTime() >= (12 * 60)) && (gv_sapper_level == 1)) {
        CatalogReferenceSet("Unit,HalloweenSapper,LifeMax", 7, "340");
        CatalogReferenceSet("Unit,HalloweenSapper,LifeStart", 7, "340");
        CatalogReferenceSet("Unit,HalloweenSapper,LifeArmor", 7, "1");
        gv_sapper_level = (gv_sapper_level + 1);
    }

    if ((GameGetMissionTime() >= (18 * 60)) && (gv_sapper_level == 2)) {
        CatalogReferenceSet("Unit,HalloweenSapper,LifeMax", 7, "730");
        CatalogReferenceSet("Unit,HalloweenSapper,LifeStart", 7, "730");
        CatalogReferenceSet("Unit,HalloweenSapper,LifeArmor", 7, "2");
        gv_sapper_level = (gv_sapper_level + 1);
    }

    if ((GameGetMissionTime() >= (25 * 60)) && (gv_sapper_level == 3)) {
        CatalogReferenceSet("Unit,HalloweenSapper,LifeMax", 7, "1000");
        CatalogReferenceSet("Unit,HalloweenSapper,LifeStart", 7, "1000");
        CatalogReferenceSet("Unit,HalloweenSapper,LifeArmor", 7, "7");
        gv_sapper_level = (gv_sapper_level + 1);
    }

    if ((GameGetMissionTime() >= (12 * 60))) {
        lv_amount = (lv_amount + 1);
    }

    if ((GameGetMissionTime() >= (20 * 60))) {
        lv_amount = (lv_amount + 1);
    }

    if ((GameGetMissionTime() >= (30 * 60))) {
        lv_amount = (lv_amount + 1);
    }

    while ((lv_i <= 6)) {
        lv_sappers = UnitGroupEmpty();
        lv_j = 1;
        while ((lv_j <= lv_amount)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HalloweenSapper", 0, 7, PointFromId(1910508930));
            UnitGroupAdd(lv_sappers, UnitLastCreated());
            UnitGroupAdd(lv_all_sappers, UnitLastCreated());
            lv_j = (lv_j + 1);
        }
        if ((gv_players[lv_i].lv_alive == true)) {
            lv_p = gv_players[lv_i].lv_position;
        }
        else {
            lv_p = gv_players[gf_ai_get_strongest_player()].lv_position;
        }
        if ((gv_difficulty > 4)) {
            lv_p = gv_players[gf_ai_get_weakest_player()].lv_position;
        }

        if ((gv_difficulty > 2)) {
            if ((gv_difficulty > 4)) {
                lv_r = RandomInt(2, 3);
            }
            else {
                lv_r = RandomInt(1, 3);
            }
        }
        else {
            lv_r = RandomInt(1, 1);
        }
        autoD41E4CEC_val = lv_r;
        if (autoD41E4CEC_val == 1) {
            UnitGroupIssueOrder(lv_sappers, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Rally " + IntToString(lv_p)))), c_orderQueueReplace);
        }
        else if (autoD41E4CEC_val == 2) {
            UnitGroupIssueOrder(lv_sappers, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Flank Rally Left Pre " + IntToString(lv_p)))), c_orderQueueReplace);
            UnitGroupIssueOrder(lv_sappers, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Flank Rally Left " + IntToString(lv_p)))), c_orderQueueAddToEnd);
            UnitGroupIssueOrder(lv_sappers, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Rally " + IntToString(lv_p)))), c_orderQueueAddToEnd);
        }
        else if (autoD41E4CEC_val == 3) {
            UnitGroupIssueOrder(lv_sappers, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Flank Rally Right Pre " + IntToString(lv_p)))), c_orderQueueReplace);
            UnitGroupIssueOrder(lv_sappers, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Flank Rally Right " + IntToString(lv_p)))), c_orderQueueAddToEnd);
            UnitGroupIssueOrder(lv_sappers, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Rally " + IntToString(lv_p)))), c_orderQueueAddToEnd);
        }
        else {
            UnitGroupIssueOrder(lv_sappers, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Rally " + IntToString(lv_p)))), c_orderQueueReplace);
        }
        lv_i = (lv_i + 1);
    }
    gv_zerg_pumpkins = 0;
    autoB5D83C2E_g = lv_all_sappers;
    autoB5D83C2E_u = UnitGroupCount(autoB5D83C2E_g, c_unitCountAll);
    for (;; autoB5D83C2E_u -= 1) {
        autoB5D83C2E_var = UnitGroupUnitFromEnd(autoB5D83C2E_g, autoB5D83C2E_u);
        if (autoB5D83C2E_var == null) { break; }
        UnitGroupAdd(gv_special_units, autoB5D83C2E_var);
        gv_special_unit_count += 1;
        gv_special_unit_array[gv_special_unit_count].lv_birthtime = FixedToInt(GameGetMissionTime());
        gv_special_unit_array[gv_special_unit_count].lv_unit = autoB5D83C2E_var;
    }
}

bool gf_can_spawn_smith () {
    // Variable Declarations
    int lv_c;
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_c = UnitGroupCount(UnitGroup("SmithCritter", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    if ((lv_c <= 4)) {
        lv_r = true;
    }

    return lv_r;
}

bool gf_can_spawn_smith_for_player (int lp_player) {
    // Variable Declarations
    int lv_c;
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_c = UnitGroupCount(UnitGroup("SmithCritter", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    if ((lv_c <= 1)) {
        lv_r = true;
    }

    return lv_r;
}

void gf_enable_xmas_settings () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(gt_spawnpresent, true);
    TriggerEnable(gt_playercollectspresent, true);
    TriggerEnable(gt_grabapresent, true);
}

void gf_enable_hny_settings () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(gt_spawnhappynewyeargift, true);
    TriggerEnable(gt_playercollectshappynewyeargift, true);
    TriggerEnable(gt_grabahnygift, true);
    TriggerEnable(gt_removeallfireworks, true);
}

void gf_enable_crazyminions_settings () {
    // Variable Declarations
    int lv_i;
    unitgroup lv_group;

    // Automatic Variable Declarations
    unitgroup auto77B7E58F_g;
    int auto77B7E58F_u;
    unit auto77B7E58F_var;

    // Variable Initialization
    lv_i = 1;
    lv_group = UnitGroupEmpty();

    // Implementation
    TriggerEnable(gt_spawnhellforces, true);
    TriggerEnable(gt_buildinggetsattackedtrydefendwithwizards, true);
    TriggerEnable(gt_resetwizardactioncooldown, true);
    TriggerEnable(gt_removefortdebrisactorfix, true);
    UnitGroupAddUnitGroup(lv_group, gv_outer_nests);
    UnitGroupAdd(lv_group, UnitFromId(1238434742));
    UnitGroupAdd(lv_group, UnitFromId(2123689193));
    auto77B7E58F_g = lv_group;
    auto77B7E58F_u = UnitGroupCount(auto77B7E58F_g, c_unitCountAll);
    for (;; auto77B7E58F_u -= 1) {
        auto77B7E58F_var = UnitGroupUnitFromEnd(auto77B7E58F_g, auto77B7E58F_u);
        if (auto77B7E58F_var == null) { break; }
        if ((UnitIsAlive(auto77B7E58F_var) == true)) {
            libNtve_gf_ReplaceUnit(auto77B7E58F_var, "Hellfort", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
            if ((UnitGetPosition(libNtve_gf_LastReplacedUnit()) != UnitGetPosition(UnitFromId(1238434742))) && (UnitGetPosition(libNtve_gf_LastReplacedUnit()) != UnitGetPosition(UnitFromId(2123689193)))) {
                UnitGroupAdd(gv_outer_nests, libNtve_gf_LastReplacedUnit());
            }

        }

    }
    while ((lv_i <= 6)) {
        if ((gv_positions[lv_i] != 0) && (gv_players[gv_positions[lv_i]].lv_alive == true)) {
            gv_hydra_groups[lv_i].lv_nest = UnitGroupRandomUnit(UnitGroup("Hellfort", 7, RegionCircle(PointFromName(("Hydra " + IntToString(lv_i))), 4.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive);
        }

        lv_i += 1;
    }
}

void gf_defend_point_with_wizard (point lp_point, int lp_groupindex, unit lp_target_unit) {
    // Variable Declarations
    unit lv_wizard;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_wizard = UnitGroupClosestToPoint(UnitGroup("WizardMinion", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lp_point);
    if ((lv_wizard != null)) {
        UnitIssueOrder(lv_wizard, OrderTargetingPoint(AbilityCommand("AbsorbingCloud", 0), lp_point), c_orderQueueReplace);
        UnitIssueOrder(lv_wizard, OrderTargetingUnit(AbilityCommand("TransfusionInfestor", 0), lp_target_unit), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_wizard, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1910508930)), c_orderQueueAddToEnd);
    }

}

unit gf_get_wizard_from_group (int lp_group) {
    // Variable Declarations
    unit lv_return;
    unitgroup lv_temp_group;

    // Automatic Variable Declarations
    unitgroup auto8EDAB988_g;
    int auto8EDAB988_u;
    unit auto8EDAB988_var;

    // Variable Initialization
    lv_temp_group = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_temp_group, UnitGroup("WizardMinion", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto8EDAB988_g = lv_temp_group;
    auto8EDAB988_u = UnitGroupCount(auto8EDAB988_g, c_unitCountAll);
    for (;; auto8EDAB988_u -= 1) {
        auto8EDAB988_var = UnitGroupUnitFromEnd(auto8EDAB988_g, auto8EDAB988_u);
        if (auto8EDAB988_var == null) { break; }
        if ((UnitGetPropertyFixed(auto8EDAB988_var, c_unitPropEnergy, c_unitPropCurrent) > 150.0) && (UnitOrderCount(auto8EDAB988_var) == 0)) {
            lv_return = auto8EDAB988_var;
            break;
        }

    }
    return lv_return;
}

void gf_enable_nightking_settings () {
    // Automatic Variable Declarations
    playergroup auto57F20C5B_g;
    int auto57F20C5B_var;

    // Implementation
    TriggerEnable(gt_changedaytime, true);
    TriggerEnable(gt_SolarWeaponsfinished, true);
    TriggerEnable(gt_Overlorddies, true);
    auto57F20C5B_g = gv_terrans;
    auto57F20C5B_var = -1;
    while (true) {
        auto57F20C5B_var = PlayerGroupNextPlayer(auto57F20C5B_g, auto57F20C5B_var);
        if (auto57F20C5B_var < 0) { break; }
        TechTreeAbilityAllow(auto57F20C5B_var, AbilityCommand("BuildBuilder", 20), true);
        TechTreeAbilityAllow(auto57F20C5B_var, AbilityCommand("ArmoryResearch2", 19), true);
        TechTreeAbilityAllow(auto57F20C5B_var, AbilityCommand("ArmoryResearch2", 20), true);
    }
}

void gf_create_overlord_wave () {
    // Variable Declarations
    int lv_alive_player_count;
    int lv_i;
    int lv_j;
    point lv_p;
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_alive_player_count = gf_get_alive_player_count();
    lv_i = 1;
    lv_j = 1;
    lv_r = RandomInt(1, 40);

    // Implementation
    while ((lv_i <= lv_alive_player_count)) {
        lv_j = 1;
        while ((lv_j <= 3)) {
            lv_r = RandomInt(1, 40);
            lv_p = RegionRandomPoint(RegionFromName(("Bonus " + IntToString(lv_r))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 7, PointFromId(1910508930));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_p), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("GenerateCreep", 0)), c_orderQueueAddToEnd);
            lv_j = (lv_j + 1);
        }
        lv_i = (lv_i + 1);
    }
}

void gf_make_night () {
    // Automatic Variable Declarations
    playergroup auto5283ADC5_g;
    int auto5283ADC5_var;

    // Implementation
    gv_is_night = true;
    GameSetToDLighting("AgriaNight");
    gf_decrease_terran_vision();
    auto5283ADC5_g = gv_terrans;
    auto5283ADC5_var = -1;
    while (true) {
        auto5283ADC5_var = PlayerGroupNextPlayer(auto5283ADC5_g, auto5283ADC5_var);
        if (auto5283ADC5_var < 0) { break; }
        VisFillArea(auto5283ADC5_var, RegionEntireMap(), c_fillTypeHidden, false);
        CatalogReferenceSet("Unit,FirebatZergHex,EnergyRegenRate", auto5283ADC5_var, IntToString(0));
        CatalogReferenceSet("Unit,EliteMarine,EnergyRegenRate", auto5283ADC5_var, IntToString(0));
        CatalogReferenceSet("Unit,EliteMarineSkin1,EnergyRegenRate", auto5283ADC5_var, IntToString(0));
        CatalogReferenceSet("Unit,EliteMarineSkin2,EnergyRegenRate", auto5283ADC5_var, IntToString(0));
        CatalogReferenceSet("Unit,EliteMarineSkin3,EnergyRegenRate", auto5283ADC5_var, IntToString(0));
        CatalogReferenceSet("Unit,Marine2,EnergyRegenRate", auto5283ADC5_var, IntToString(0));
        CatalogReferenceSet("Unit,ShockTrooper,EnergyRegenRate", auto5283ADC5_var, IntToString(0));
        CatalogReferenceSet("Unit,VeteranMarine,EnergyRegenRate", auto5283ADC5_var, IntToString(0));
        CatalogReferenceSet("Unit,SentryGun2,EnergyRegenRate", auto5283ADC5_var, IntToString(0));
    }
    gf_create_overlord_wave();
}

void gf_make_day () {
    // Automatic Variable Declarations
    playergroup autoB7BFE537_g;
    int autoB7BFE537_var;

    // Implementation
    gv_is_night = false;
    GameSetToDLighting("Agria");
    gf_restore_terran_vision();
    autoB7BFE537_g = gv_terrans;
    autoB7BFE537_var = -1;
    while (true) {
        autoB7BFE537_var = PlayerGroupNextPlayer(autoB7BFE537_g, autoB7BFE537_var);
        if (autoB7BFE537_var < 0) { break; }
        if ((gv_players[autoB7BFE537_var].lv_solar_weapons == 1)) {
            CatalogReferenceSet("Unit,FirebatZergHex,EnergyRegenRate", autoB7BFE537_var, IntToString(2));
            CatalogReferenceSet("Unit,EliteMarine,EnergyRegenRate", autoB7BFE537_var, IntToString(2));
            CatalogReferenceSet("Unit,EliteMarineSkin1,EnergyRegenRate", autoB7BFE537_var, IntToString(2));
            CatalogReferenceSet("Unit,EliteMarineSkin2,EnergyRegenRate", autoB7BFE537_var, IntToString(2));
            CatalogReferenceSet("Unit,EliteMarineSkin3,EnergyRegenRate", autoB7BFE537_var, IntToString(2));
            CatalogReferenceSet("Unit,Marine2,EnergyRegenRate", autoB7BFE537_var, IntToString(2));
            CatalogReferenceSet("Unit,ShockTrooper,EnergyRegenRate", autoB7BFE537_var, IntToString(2));
            CatalogReferenceSet("Unit,VeteranMarine,EnergyRegenRate", autoB7BFE537_var, IntToString(2));
            CatalogReferenceSet("Unit,SentryGun2,EnergyRegenRate", autoB7BFE537_var, IntToString(2));
        }

    }
}

void gf_decrease_terran_vision () {
    // Automatic Variable Declarations
    playergroup autoF793A6BA_g;
    int autoF793A6BA_var;

    // Implementation
    autoF793A6BA_g = gv_terrans;
    autoF793A6BA_var = -1;
    while (true) {
        autoF793A6BA_var = PlayerGroupNextPlayer(autoF793A6BA_g, autoF793A6BA_var);
        if (autoF793A6BA_var < 0) { break; }
        CatalogReferenceSet("Unit,Builder,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,Builder,Sight", autoF793A6BA_var) - 3)));
        CatalogReferenceSet("Unit,Battery,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,Battery,Sight", autoF793A6BA_var) - 5)));
        CatalogReferenceSet("Unit,AdvancedBattery,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,AdvancedBattery,Sight", autoF793A6BA_var) - 5)));
        CatalogReferenceSet("Unit,AdvancedBatteryPylon,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,AdvancedBatteryPylon,Sight", autoF793A6BA_var) - 5)));
        CatalogReferenceSet("Unit,HighDensityBattery,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,HighDensityBattery,Sight", autoF793A6BA_var) - 5)));
        CatalogReferenceSet("Unit,InfestedExploder,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,InfestedExploder,Sight", autoF793A6BA_var) - 3)));
        CatalogReferenceSet("Unit,SpaceBalls,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,SpaceBalls,Sight", autoF793A6BA_var) - 3)));
        CatalogReferenceSet("Unit,Defender,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,Defender,Sight", autoF793A6BA_var) - 10)));
        CatalogReferenceSet("Unit,FirebatZergHex,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,FirebatZergHex,Sight", autoF793A6BA_var) - 3)));
        CatalogReferenceSet("Unit,InfestedBuilder,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,InfestedBuilder,Sight", autoF793A6BA_var) - 3)));
        CatalogReferenceSet("Unit,InfestedTerranCampaign,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,InfestedTerranCampaign,Sight", autoF793A6BA_var) - 3)));
        CatalogReferenceSet("Unit,InfestedExploder,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,InfestedExploder,Sight", autoF793A6BA_var) - 3)));
        CatalogReferenceSet("Unit,KaraxChampion,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,KaraxChampion,Sight", autoF793A6BA_var) - 3)));
        CatalogReferenceSet("Unit,Italis,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,Italis,Sight", autoF793A6BA_var) - 6)));
        CatalogReferenceSet("Unit,EliteMarine,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,EliteMarine,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,EliteMarineSkin1,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,EliteMarineSkin1,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,EliteMarineSkin2,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,EliteMarineSkin2,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,EliteMarineSkin3,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,EliteMarineSkin3,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,EliteMarineSkin4,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,EliteMarineSkin4,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,Marine2,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,Marine2,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,ShockTrooper,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,ShockTrooper,Sight", autoF793A6BA_var) - 5)));
        CatalogReferenceSet("Unit,VeteranMarine,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,VeteranMarine,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,ChaosSpaceMarine,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,VeteranMarine,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,ChaosCultist,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,VeteranMarine,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,ChaosLord,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,VeteranMarine,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,ChaosSlave,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,VeteranMarine,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,Armory2,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,Armory2,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,ChemicalPlant,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,ChemicalPlant,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,LargeChemicalPlant,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,ChemicalPlant,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,ProbiusPylon,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,ChemicalPlant,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,ConstructionYard,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,ConstructionYard,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,Converter,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,Converter,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,CowFarm,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,CowFarm,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,FruitFarm,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,FruitFarm,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,GasVent,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,GasVent,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,InfestedBunker,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,InfestedBunker,Sight", autoF793A6BA_var) - 5)));
        CatalogReferenceSet("Unit,Flower,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,Flower,Sight", autoF793A6BA_var) - 7)));
        CatalogReferenceSet("Unit,SheepFarm,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,SheepFarm,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,TechLab3,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,TechLab3,Sight", autoF793A6BA_var) - 7)));
        CatalogReferenceSet("Unit,TerranGate,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,TerranGate,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,TerranGateLowered,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,TerranGateLowered,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,Wall2,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,Wall2,Sight", autoF793A6BA_var) - 7)));
        CatalogReferenceSet("Unit,Refinery2,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,Refinery2,Sight", autoF793A6BA_var) - 4)));
        CatalogReferenceSet("Unit,UpgradedRefinery,Sight", autoF793A6BA_var, IntToString((CatalogReferenceGetAsInt("Unit,UpgradedRefinery,Sight", autoF793A6BA_var) - 4)));
    }
}

void gf_restore_terran_vision () {
    // Automatic Variable Declarations
    playergroup autoDA398E81_g;
    int autoDA398E81_var;

    // Implementation
    autoDA398E81_g = gv_terrans;
    autoDA398E81_var = -1;
    while (true) {
        autoDA398E81_var = PlayerGroupNextPlayer(autoDA398E81_g, autoDA398E81_var);
        if (autoDA398E81_var < 0) { break; }
        CatalogReferenceSet("Unit,Builder,Sight", autoDA398E81_var, IntToString(8));
        CatalogReferenceSet("Unit,Battery,Sight", autoDA398E81_var, IntToString(10));
        CatalogReferenceSet("Unit,AdvancedBattery,Sight", autoDA398E81_var, IntToString(10));
        CatalogReferenceSet("Unit,AdvancedBatteryPylon,Sight", autoDA398E81_var, IntToString(10));
        CatalogReferenceSet("Unit,HighDensityBattery,Sight", autoDA398E81_var, IntToString(10));
        CatalogReferenceSet("Unit,InfestedExploder,Sight", autoDA398E81_var, IntToString(5));
        CatalogReferenceSet("Unit,SpaceBalls,Sight", autoDA398E81_var, IntToString(8));
        CatalogReferenceSet("Unit,Defender,Sight", autoDA398E81_var, IntToString(15));
        CatalogReferenceSet("Unit,FirebatZergHex,Sight", autoDA398E81_var, IntToString(8));
        CatalogReferenceSet("Unit,InfestedBuilder,Sight", autoDA398E81_var, IntToString(8));
        CatalogReferenceSet("Unit,InfestedTerranCampaign,Sight", autoDA398E81_var, IntToString(5));
        CatalogReferenceSet("Unit,Italis,Sight", autoDA398E81_var, IntToString(16));
        CatalogReferenceSet("Unit,EliteMarine,Sight", autoDA398E81_var, IntToString(10));
        CatalogReferenceSet("Unit,EliteMarineSkin1,Sight", autoDA398E81_var, IntToString(10));
        CatalogReferenceSet("Unit,EliteMarineSkin2,Sight", autoDA398E81_var, IntToString(10));
        CatalogReferenceSet("Unit,EliteMarineSkin3,Sight", autoDA398E81_var, IntToString(10));
        CatalogReferenceSet("Unit,EliteMarineSkin4,Sight", autoDA398E81_var, IntToString(10));
        CatalogReferenceSet("Unit,Marine2,Sight", autoDA398E81_var, IntToString(10));
        CatalogReferenceSet("Unit,ShockTrooper,Sight", autoDA398E81_var, IntToString(11));
        CatalogReferenceSet("Unit,VeteranMarine,Sight", autoDA398E81_var, IntToString(10));
        CatalogReferenceSet("Unit,Armory2,Sight", autoDA398E81_var, IntToString(9));
        CatalogReferenceSet("Unit,ChemicalPlant,Sight", autoDA398E81_var, IntToString(9));
        CatalogReferenceSet("Unit,ConstructionYard,Sight", autoDA398E81_var, IntToString(9));
        CatalogReferenceSet("Unit,Converter,Sight", autoDA398E81_var, IntToString(9));
        CatalogReferenceSet("Unit,CowFarm,Sight", autoDA398E81_var, IntToString(9));
        CatalogReferenceSet("Unit,FruitFarm,Sight", autoDA398E81_var, IntToString(9));
        CatalogReferenceSet("Unit,GasVent,Sight", autoDA398E81_var, IntToString(9));
        CatalogReferenceSet("Unit,InfestedBunker,Sight", autoDA398E81_var, IntToString(10));
        CatalogReferenceSet("Unit,Flower,Sight", autoDA398E81_var, IntToString(12));
        CatalogReferenceSet("Unit,SheepFarm,Sight", autoDA398E81_var, IntToString(9));
        CatalogReferenceSet("Unit,TechLab3,Sight", autoDA398E81_var, IntToString(12));
        CatalogReferenceSet("Unit,TerranGate,Sight", autoDA398E81_var, IntToString(9));
        CatalogReferenceSet("Unit,TerranGateLowered,Sight", autoDA398E81_var, IntToString(9));
        CatalogReferenceSet("Unit,Wall2,Sight", autoDA398E81_var, IntToString(12));
        CatalogReferenceSet("Unit,Refinery2,Sight", autoDA398E81_var, IntToString(9));
        CatalogReferenceSet("Unit,UpgradedRefinery,Sight", autoDA398E81_var, IntToString(9));
    }
}

void gf_handle_cuteling_event () {
    // Variable Declarations
    fixed lv_time;
    int lv_interval;
    int lv_amount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_time = GameGetMissionTime();
    lv_interval = gv_interval_cutelings;

    // Implementation
    if ((lv_time > 179.0)) {
        lv_amount = 4;
        if ((ModI(FixedToInt(lv_time), lv_interval) == 0)) {
            gf_SpawnCutelings(lv_amount, PointFromId(1910508930));
        }

    }

}

void gf_SpawnCutelings (int lp_amount, point lp_spawn_point) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(lp_amount, "ZerglingCarbot", 0, 7, lp_spawn_point);
}

void gf_handle_votes (int lp_player, string lp_event) {
    // Automatic Variable Declarations
    string auto6613F30C_val;
    int auto481F0B10_val;
    playergroup autoE852C16A_g;
    int autoE852C16A_var;
    playergroup auto634FC3B5_g;
    int auto634FC3B5_var;
    int auto86891C42_val;

    // Implementation
    if ((gv_players[lp_player].lv_voted == false)) {
        auto6613F30C_val = lp_event;
        if (auto6613F30C_val == "halloween") {
            gv_rtv_halloween = 1;
        }
        else if (auto6613F30C_val == "xmas") {
            gv_rtv_xmas = 1;
        }
        else if (auto6613F30C_val == "hny") {
            gv_rtv_hny = 1;
        }
        else if (auto6613F30C_val == "eastern") {
            gv_rtv_eastern = 1;
        }
        else if (auto6613F30C_val == "crazyminions") {
            gv_rtv_crazyminions = 1;
        }
        else if (auto6613F30C_val == "nightking") {
            gv_rtv_night_king = 1;
        }
        else if (auto6613F30C_val == "vday") {
            gv_rtv_vday = 1;
        }
        else if (auto6613F30C_val == "thxg") {
            gv_rtv_thxg = 1;
        }
        else {
        }
        gv_rtv = (gv_rtv + 1);
        gv_players[lp_player].lv_voted = true;
        if ((gv_rtv == 4)) {
            if ((gf_is_event() == true)) {
                auto86891C42_val = gf_get_current_event_as_typeint();
                if (auto86891C42_val == 1) {
                    gv_is_halloween = false;
                    gf_disable_halloween_settings();
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/DED78987") + StringToText("")));
                }
                else if (auto86891C42_val == 2) {
                    gv_is_xmas = false;
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/0E5629AD") + StringToText("")));
                }
                else if (auto86891C42_val == 3) {
                    gv_is_hny = false;
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/663CCBBC") + StringToText("")));
                }
                else if (auto86891C42_val == 4) {
                    gv_is_eastern = false;
                }
                else if (auto86891C42_val == 5) {
                    gv_is_crazyminions = false;
                }
                else if (auto86891C42_val == 6) {
                    gv_is_night_king = false;
                }
                else if (auto86891C42_val == 7) {
                    gv_is_vday = false;
                }
                else if (auto86891C42_val == 8) {
                    gv_is_thxg = false;
                }
                else {
                }
            }
            else {
                auto481F0B10_val = gf_get_voted_event_as_typeint();
                if (auto481F0B10_val == 1) {
                    gv_is_halloween = true;
                    gv_voted_event = true;
                    gf_enable_halloween_settings();
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/7B63B2E1") + StringToText("")));
                }
                else if (auto481F0B10_val == 2) {
                    gv_is_xmas = true;
                    gv_voted_event = true;
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/5E926CF5") + StringToText("")));
                }
                else if (auto481F0B10_val == 3) {
                    gv_is_hny = true;
                    gv_voted_event = true;
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/36D0022C") + StringToText("")));
                }
                else if (auto481F0B10_val == 4) {
                    gv_is_eastern = false;
                }
                else if (auto481F0B10_val == 5) {
                    gv_is_crazyminions = true;
                    gv_voted_event = true;
                    gf_enable_crazyminions_settings();
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/2F3CF83B") + StringToText("")));
                }
                else if (auto481F0B10_val == 6) {
                    gv_is_night_king = true;
                    gv_voted_event = true;
                    gf_enable_nightking_settings();
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/B4CAD2AC") + StringToText("")));
                }
                else if (auto481F0B10_val == 7) {
                    gv_is_vday = true;
                    gv_voted_event = true;
                    autoE852C16A_g = gv_terrans;
                    autoE852C16A_var = -1;
                    while (true) {
                        autoE852C16A_var = PlayerGroupNextPlayer(autoE852C16A_g, autoE852C16A_var);
                        if (autoE852C16A_var < 0) { break; }
                        TechTreeAbilityAllow(autoE852C16A_var, AbilityCommand("BarracksTrain2", 17), true);
                    }
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/70CF1FCC") + StringToText("")));
                }
                else if (auto481F0B10_val == 8) {
                    gv_is_thxg = true;
                    gv_voted_event = true;
                    gf_enable_thxg_setting();
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/4FFAEA06") + StringToText("")));
                }
                else {
                }
                auto634FC3B5_g = gv_terrans;
                auto634FC3B5_var = -1;
                while (true) {
                    auto634FC3B5_var = PlayerGroupNextPlayer(auto634FC3B5_g, auto634FC3B5_var);
                    if (auto634FC3B5_var < 0) { break; }
                    TechTreeAbilityAllow(auto634FC3B5_var, AbilityCommand("BuildBuilder", 21), true);
                }
            }
        }

    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, (StringExternal("Param/Value/3AFC917C") + StringToText("")));
    }
}

int gf_get_current_event_as_typeint () {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_is_halloween == true)) {
        lv_r = 1;
    }

    if ((gv_is_xmas == true)) {
        lv_r = 2;
    }

    if ((gv_is_hny == true)) {
        lv_r = 3;
    }

    if ((gv_is_eastern == true)) {
        lv_r = 4;
    }

    if ((gv_is_crazyminions == true)) {
        lv_r = 5;
    }

    if ((gv_is_night_king == true)) {
        lv_r = 6;
    }

    if ((gv_is_vday == true)) {
        lv_r = 7;
    }

    if ((gv_is_thxg == true)) {
        lv_r = 8;
    }

    return lv_r;
}

int gf_get_voted_event_as_typeint () {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_rtv_halloween == 1)) {
        lv_r = 1;
    }

    if ((gv_rtv_xmas == 1)) {
        lv_r = 2;
    }

    if ((gv_rtv_hny == 1)) {
        lv_r = 3;
    }

    if ((gv_rtv_eastern == 1)) {
        lv_r = 4;
    }

    if ((gv_rtv_crazyminions == 1)) {
        lv_r = 5;
    }

    if ((gv_rtv_night_king == 1)) {
        lv_r = 6;
    }

    if ((gv_rtv_vday == 1)) {
        lv_r = 7;
    }

    if ((gv_rtv_thxg == 1)) {
        lv_r = 8;
    }

    return lv_r;
}

bool gf_is_event () {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((gv_is_halloween == true) || (gv_is_xmas == true) || (gv_is_hny == true) || (gv_is_eastern == true) || (gv_is_crazyminions == true) || (gv_is_night_king == true) || (gv_is_vday == true) || (gv_is_thxg == true))) {
        lv_r = true;
    }

    return lv_r;
}

bool gf_is_halloween () {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GetDateTimeMonth(CurrentDateTimeGet()) == 10) && ((GetDateTimeDay(CurrentDateTimeGet()) == 29) || (GetDateTimeDay(CurrentDateTimeGet()) == 30) || (GetDateTimeDay(CurrentDateTimeGet()) == 31))) {
        lv_r = true;
    }

    return lv_r;
}

bool gf_is_xmas () {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GetDateTimeMonth(CurrentDateTimeGet()) == 12) && ((GetDateTimeDay(CurrentDateTimeGet()) == 24) || (GetDateTimeDay(CurrentDateTimeGet()) == 25) || (GetDateTimeDay(CurrentDateTimeGet()) == 26) || (GetDateTimeDay(CurrentDateTimeGet()) == 27))) {
        lv_r = true;
    }

    return lv_r;
}

bool gf_is_hny () {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((((GetDateTimeMonth(CurrentDateTimeGet()) == 12) && (GetDateTimeDay(CurrentDateTimeGet()) == 31)) || ((GetDateTimeMonth(CurrentDateTimeGet()) == 1) && (GetDateTimeDay(CurrentDateTimeGet()) == 1)))) {
        lv_r = true;
    }

    return lv_r;
}

bool gf_is_eastern () {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((((GetDateTimeYear(CurrentDateTimeGet()) == 2024) && (((GetDateTimeMonth(CurrentDateTimeGet()) == 3) && ((GetDateTimeDay(CurrentDateTimeGet()) == 30) || (GetDateTimeDay(CurrentDateTimeGet()) == 31))) || ((GetDateTimeMonth(CurrentDateTimeGet()) == 4) && (GetDateTimeDay(CurrentDateTimeGet()) == 1)))) || ((GetDateTimeYear(CurrentDateTimeGet()) == 2023) && (GetDateTimeMonth(CurrentDateTimeGet()) == 4) && ((GetDateTimeDay(CurrentDateTimeGet()) == 8) || (GetDateTimeDay(CurrentDateTimeGet()) == 9) || (GetDateTimeDay(CurrentDateTimeGet()) == 10))) || ((GetDateTimeYear(CurrentDateTimeGet()) == 2022) && (GetDateTimeMonth(CurrentDateTimeGet()) == 4) && ((GetDateTimeDay(CurrentDateTimeGet()) == 16) || (GetDateTimeDay(CurrentDateTimeGet()) == 17) || (GetDateTimeDay(CurrentDateTimeGet()) == 18))))) {
        lv_r = true;
    }

    return lv_r;
}

bool gf_is_crazyminions () {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return lv_r;
}

bool gf_is_night_king () {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return lv_r;
}

bool gf_is_vday () {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GetDateTimeMonth(CurrentDateTimeGet()) == 2) && (GetDateTimeDay(CurrentDateTimeGet()) == 14)) {
        lv_r = true;
    }

    return lv_r;
}

bool gf_is_sunday () {
    // Variable Declarations
    bool lv_return;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GetDateTimeWeekday(CurrentDateTimeGet()) == 0)) {
        lv_return = true;
    }

    return lv_return;
}

int gf_get_mutator_id_for_today () {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt((ModF((((gf_get_day_of_year() / 12.0) - Floor((gf_get_day_of_year() / 12.0))) * 12.0), 12.0) + 1.0));
}

int gf_get_day_of_year () {
    // Variable Declarations
    int[13] lv_dim;
    int lv_m;
    int lv_i;
    int lv_d;
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    lv_dim[1] = 31;
    if ((gf_is_leap_year(GetDateTimeYear(CurrentDateTimeGet())) == true)) {
        lv_dim[2] = 29;
    }
    else {
        lv_dim[2] = 28;
    }
    lv_dim[3] = 31;
    lv_dim[4] = 30;
    lv_dim[5] = 31;
    lv_dim[6] = 30;
    lv_dim[7] = 31;
    lv_dim[8] = 31;
    lv_dim[9] = 30;
    lv_dim[10] = 31;
    lv_dim[11] = 30;
    lv_dim[12] = 31;
    lv_m = GetDateTimeMonth(CurrentDateTimeGet());
    while ((lv_i < lv_m)) {
        lv_r = (lv_r + lv_dim[lv_i]);
        lv_i += 1;
    }
    lv_d = GetDateTimeDay(CurrentDateTimeGet());
    lv_r = (lv_r + lv_d);
    return lv_r;
}

bool gf_is_leap_year (int lp_year) {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((((ModI(lp_year, 4) == 0) && (ModI(lp_year, 100) != 0)) || (ModI(lp_year, 400) == 0))) {
        lv_r = true;
    }

    return lv_r;
}

void gf_apply_mutator (int lp_mutator_id) {
    // Variable Declarations
    string lv_mutator_desc_substring;
    int lv_rmid;

    // Automatic Variable Declarations
    int auto58E006D9_val;
    playergroup autoFD72D12A_g;
    int autoFD72D12A_var;
    unitgroup autoB13968DC_g;
    int autoB13968DC_u;
    unit autoB13968DC_var;
    unitgroup auto8E2B6C98_g;
    int auto8E2B6C98_u;
    unit auto8E2B6C98_var;
    unitgroup autoEF4C864F_g;
    int autoEF4C864F_u;
    unit autoEF4C864F_var;
    unitgroup autoCFCDB07F_g;
    int autoCFCDB07F_u;
    unit autoCFCDB07F_var;
    unitgroup autoC4CBF8E9_g;
    int autoC4CBF8E9_u;
    unit autoC4CBF8E9_var;

    // Variable Initialization
    lv_mutator_desc_substring = "";

    // Implementation
    if ((lp_mutator_id > 6)) {
        lv_rmid = (lp_mutator_id - 6);
    }
    else {
        lv_rmid = lp_mutator_id;
    }
    auto58E006D9_val = lv_rmid;
    if (auto58E006D9_val == 1) {
        autoFD72D12A_g = PlayerGroupAll();
        autoFD72D12A_var = -1;
        while (true) {
            autoFD72D12A_var = PlayerGroupNextPlayer(autoFD72D12A_g, autoFD72D12A_var);
            if (autoFD72D12A_var < 0) { break; }
            CatalogReferenceSet("Actor,AbsorbingCloud,Scale", autoFD72D12A_var, "2");
            CatalogReferenceSet("Abil,AbsorbingCloud,Cost[0].Charge.TimeUse", autoFD72D12A_var, "45");
            CatalogReferenceSet("Effect,AbsorbingCloud,RevealRadius", autoFD72D12A_var, "7");
            CatalogReferenceSet("Effect,AbsorbingCloud,PeriodCount", autoFD72D12A_var, "52");
            CatalogReferenceSet("Effect,AbsorbingCloudSearch,AreaArray[0].Radius", autoFD72D12A_var, "5");
            CatalogReferenceSet("Behavior,AbsorbingCloud,Modification.VitalRegenArray[Life]", autoFD72D12A_var, "-1");
            CatalogReferenceSet("Behavior,AbsorbingCloud,Modification.VitalRegenArray[Shields]", autoFD72D12A_var, "-1");
            CatalogReferenceSet("Behavior,AbsorbingCloud,Modification.MoveSpeedMultiplier", autoFD72D12A_var, FixedToString(0.4, 1));
        }
        lv_mutator_desc_substring = "(ZH+ Style Absorbing Clouds)";
    }
    else if (auto58E006D9_val == 2) {
        gv_mutator_mega_mecha_hydras = true;
        TechTreeUpgradeAddLevel(7, "JUICEModule", 1);
        TechTreeUpgradeAddLevel(7, "SynteticAdrenalPumps", 1);
        TechTreeUpgradeAddLevel(7, "ImprovedLiquids", 1);
        TechTreeUpgradeAddLevel(7, "HydralicAugment", 1);
        TechTreeUpgradeAddLevel(7, "SelfRecharchingBatteries", 1);
        lv_mutator_desc_substring = "(Mega-Mecha-Hydras!)";
    }
    else if (auto58E006D9_val == 3) {
        GameSetToDLighting("AgriaNight");
        gf_decrease_terran_vision();
        lv_mutator_desc_substring = "(Night!)";
    }
    else if (auto58E006D9_val == 4) {
        gv_mutator_mecha_buildings = true;
        autoB13968DC_g = UnitGroup("Hive2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB13968DC_u = UnitGroupCount(autoB13968DC_g, c_unitCountAll);
        for (;; autoB13968DC_u -= 1) {
            autoB13968DC_var = UnitGroupUnitFromEnd(autoB13968DC_g, autoB13968DC_u);
            if (autoB13968DC_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(autoB13968DC_var), "ModelSwap Hatchery_Mecha");
        }
        auto8E2B6C98_g = UnitGroup("Nest2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8E2B6C98_u = UnitGroupCount(auto8E2B6C98_g, c_unitCountAll);
        for (;; auto8E2B6C98_u -= 1) {
            auto8E2B6C98_var = UnitGroupUnitFromEnd(auto8E2B6C98_g, auto8E2B6C98_u);
            if (auto8E2B6C98_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(auto8E2B6C98_var), "ModelSwap Hatchery_Mecha");
        }
        autoEF4C864F_g = UnitGroup("CreepTumor2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoEF4C864F_u = UnitGroupCount(autoEF4C864F_g, c_unitCountAll);
        for (;; autoEF4C864F_u -= 1) {
            autoEF4C864F_var = UnitGroupUnitFromEnd(autoEF4C864F_g, autoEF4C864F_u);
            if (autoEF4C864F_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(autoEF4C864F_var), "ModelSwap LurkerDen_Mecha");
        }
        autoCFCDB07F_g = UnitGroup("LargeSpineCrawler", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoCFCDB07F_u = UnitGroupCount(autoCFCDB07F_g, c_unitCountAll);
        for (;; autoCFCDB07F_u -= 1) {
            autoCFCDB07F_var = UnitGroupUnitFromEnd(autoCFCDB07F_g, autoCFCDB07F_u);
            if (autoCFCDB07F_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(autoCFCDB07F_var), "ModelSwap SpineCrawler_Mecha");
        }
        autoC4CBF8E9_g = UnitGroup("SpineCrawler", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC4CBF8E9_u = UnitGroupCount(autoC4CBF8E9_g, c_unitCountAll);
        for (;; autoC4CBF8E9_u -= 1) {
            autoC4CBF8E9_var = UnitGroupUnitFromEnd(autoC4CBF8E9_g, autoC4CBF8E9_u);
            if (autoC4CBF8E9_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(autoC4CBF8E9_var), "ModelSwap SpineCrawler_Mecha");
        }
        CatalogReferenceSet("Unit,Hive2,LifeArmor", 7, IntToString((CatalogReferenceGetAsInt("Unit,Hive2,LifeArmor", 7) + 4)));
        CatalogReferenceSet("Unit,Nest2,LifeArmor", 7, IntToString((CatalogReferenceGetAsInt("Unit,Nest2,LifeArmor", 7) + 3)));
        CatalogReferenceSet("Unit,CreepTumor2,LifeArmor", 7, IntToString((CatalogReferenceGetAsInt("Unit,CreepTumor2,LifeArmor", 7) + 2)));
        CatalogReferenceSet("Unit,LargeSpineCrawler,LifeArmor", 7, IntToString((CatalogReferenceGetAsInt("Unit,LargeSpineCrawler,LifeArmor", 7) + 3)));
        CatalogReferenceSet("Unit,SpineCrawler,LifeArmor", 7, IntToString((CatalogReferenceGetAsInt("Unit,SpineCrawler,LifeArmor", 7) + 2)));
        CatalogReferenceSet("Unit,Hive2,LifeMax", 7, IntToString((CatalogReferenceGetAsInt("Unit,Hive2,LifeMax", 7) + 2500)));
        CatalogReferenceSet("Unit,Hive2,LifeStart", 7, IntToString((CatalogReferenceGetAsInt("Unit,Hive2,LifeStart", 7) + 2500)));
        CatalogReferenceSet("Unit,Nest2,LifeMax", 7, IntToString((CatalogReferenceGetAsInt("Unit,Nest2,LifeMax", 7) + 1000)));
        CatalogReferenceSet("Unit,Nest2,LifeStart", 7, IntToString((CatalogReferenceGetAsInt("Unit,Nest2,LifeStart", 7) + 1000)));
        CatalogReferenceSet("Unit,CreepTumor2,LifeMax", 7, IntToString((CatalogReferenceGetAsInt("Unit,CreepTumor2,LifeMax", 7) + 500)));
        CatalogReferenceSet("Unit,CreepTumor2,LifeStart", 7, IntToString((CatalogReferenceGetAsInt("Unit,CreepTumor2,LifeStart", 7) + 500)));
        CatalogReferenceSet("Unit,LargeSpineCrawler,LifeMax", 7, IntToString((CatalogReferenceGetAsInt("Unit,LargeSpineCrawler,LifeMax", 7) + 1000)));
        CatalogReferenceSet("Unit,LargeSpineCrawler,LifeStart", 7, IntToString((CatalogReferenceGetAsInt("Unit,LargeSpineCrawler,LifeStart", 7) + 1000)));
        CatalogReferenceSet("Unit,SpineCrawler,LifeMax", 7, IntToString((CatalogReferenceGetAsInt("Unit,SpineCrawler,LifeMax", 7) + 100)));
        CatalogReferenceSet("Unit,SpineCrawler,LifeStart", 7, IntToString((CatalogReferenceGetAsInt("Unit,SpineCrawler,LifeStart", 7) + 100)));
        lv_mutator_desc_substring = "(Mecha-Buildings!)";
    }
    else if (auto58E006D9_val == 5) {
        gv_mutator_overlords = true;
        CatalogReferenceSet("Unit,Overlord,LifeMax", 7, IntToString((CatalogReferenceGetAsInt("Unit,Overlord,LifeMax", 7) + 375)));
        CatalogReferenceSet("Unit,Overlord,LifeStart", 7, IntToString((CatalogReferenceGetAsInt("Unit,Overlord,LifeStart", 7) + 375)));
        CatalogReferenceSet("Unit,Overlord,LifeArmor", 7, IntToString((CatalogReferenceGetAsInt("Unit,Overlord,LifeArmor", 7) + 1)));
        CatalogReferenceSet("Unit,Overlord,Food", 7, IntToString(4));
        lv_mutator_desc_substring = "(Overlords!)";
    }
    else if (auto58E006D9_val == 6) {
        gv_mutator_massalisks = true;
        lv_mutator_desc_substring = "(Massalisks!)";
    }
    else {
    }
    gv_mutator_active = true;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/4896EF78") + StringToText(lv_mutator_desc_substring)));
}

void gf_kill_terran_team () {
    // Variable Declarations
    unitgroup lv_ccg;

    // Automatic Variable Declarations
    unitgroup auto49CCD0AB_g;
    int auto49CCD0AB_u;
    unit auto49CCD0AB_var;

    // Variable Initialization
    lv_ccg = UnitGroupEmpty();

    // Implementation
    lv_ccg = UnitGroup("CommandCenter2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto49CCD0AB_g = lv_ccg;
    auto49CCD0AB_u = UnitGroupCount(auto49CCD0AB_g, c_unitCountAll);
    for (;; auto49CCD0AB_u -= 1) {
        auto49CCD0AB_var = UnitGroupUnitFromEnd(auto49CCD0AB_g, auto49CCD0AB_u);
        if (auto49CCD0AB_var == null) { break; }
        UnitKill(auto49CCD0AB_var);
    }
}

void gf_timer_terran_death () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_game_timer_setting != 1)) {
        if ((gv_game_timer_setting == 2)) {
            if ((GameGetMissionTime() >= (60 * 60))) {
                gf_kill_terran_team();
            }
            else {
                if ((GameGetMissionTime() == (50 * 60))) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/A2BA7C6A") + StringToText("")));
                }

            }
        }
        else {
            if ((gv_game_timer_setting == 3)) {
                if ((GameGetMissionTime() >= (30 * 60))) {
                    gf_kill_terran_team();
                }
                else {
                    if ((GameGetMissionTime() == (20 * 60))) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/1608FB40") + StringToText("")));
                    }

                }
            }

        }
    }

}

int gf_get_timer_setting () {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    string autoC025715E_val;

    // Variable Initialization

    // Implementation
    autoC025715E_val = GameAttributeGameValue("3");
    if (autoC025715E_val == "0003") {
        lv_r = 1;
    }
    else if (autoC025715E_val == "0002") {
        lv_r = 2;
    }
    else if (autoC025715E_val == "0001") {
        lv_r = 3;
    }
    else {
    }
    return lv_r;
}

text gf_convert_int_to_text_with_leading_zero (int lp_int) {
    // Variable Declarations
    int lv_t;
    text lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_int < 10)) {
        lv_r = (StringExternal("Param/Value/7ED3BFEA") + IntToText(lp_int));
    }
    else {
        lv_r = IntToText(lp_int);
    }
    return lv_r;
}

void gf_update_timer () {
    // Variable Declarations
    text lv_tstring;
    int lv_mtime;
    int lv_ltime;

    // Automatic Variable Declarations
    playergroup auto3FA53D04_g;
    int auto3FA53D04_var;
    playergroup auto97B7AF01_g;
    int auto97B7AF01_var;

    // Variable Initialization

    // Implementation
    gv_game_timer = (gv_game_timer + 1);
    lv_tstring = (IntToText((gv_game_timer / 60)) + (StringExternal("Param/Value/D13D409A") + gf_convert_int_to_text_with_leading_zero(ModI(gv_game_timer, 60))));
    auto3FA53D04_g = gv_terrans;
    auto3FA53D04_var = -1;
    while (true) {
        auto3FA53D04_var = PlayerGroupNextPlayer(auto3FA53D04_g, auto3FA53D04_var);
        if (auto3FA53D04_var < 0) { break; }
        if (((gv_players[auto3FA53D04_var].lv_old_timer == 0) || (gv_game_timer_setting == 1))) {
            libNtve_gf_SetDialogItemText(gv_timelabel, lv_tstring, PlayerGroupSingle(auto3FA53D04_var));
        }

    }
    if ((gv_game_timer_setting != 1)) {
        if ((gv_game_timer_setting == 2)) {
            lv_mtime = (60 * 60);
            lv_ltime = (lv_mtime - gv_game_timer);
            lv_tstring = (IntToText((lv_ltime / 60)) + (StringExternal("Param/Value/F5A18D1F") + gf_convert_int_to_text_with_leading_zero(ModI(lv_ltime, 60))));
        }
        else {
            lv_mtime = (30 * 60);
            lv_ltime = (lv_mtime - gv_game_timer);
            lv_tstring = (IntToText((lv_ltime / 60)) + (StringExternal("Param/Value/95869415") + gf_convert_int_to_text_with_leading_zero(ModI(lv_ltime, 60))));
        }
        libNtve_gf_SetDialogItemText(gv_timer_countdown_dialog_item, lv_tstring, PlayerGroupAll());
        auto97B7AF01_g = gv_terrans;
        auto97B7AF01_var = -1;
        while (true) {
            auto97B7AF01_var = PlayerGroupNextPlayer(auto97B7AF01_g, auto97B7AF01_var);
            if (auto97B7AF01_var < 0) { break; }
            if ((gv_players[auto97B7AF01_var].lv_old_timer == 1)) {
                libNtve_gf_SetDialogItemText(gv_timelabel, lv_tstring, PlayerGroupSingle(auto97B7AF01_var));
            }

        }
    }

}

void gf_create_timer_countdown_dialog () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(150, 80, c_anchorLeft, 50, 150, true);
    gv_timer_countdown_dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 120, 50, c_anchorTopLeft, 10, 10, StringExternal("Param/Value/1F1A52EF"), "Assets\\Textures\\ui_battlenet_glue_tournament_group_border_accent.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorRight, 10, 20, StringExternal("Param/Value/7B65F1F4"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_timer_countdown_dialog_item = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
}

void gf_generate_heatmap_results () {
    int init_i;

    // Variable Declarations
    int lv_i;
    unitgroup[7] lv_units_at_position;
    unitgroup lv_layer1;
    unitgroup lv_layer2;
    unitgroup lv_layer3;
    int[7][4] lv_unit_matrix;
    int lv_top_threat;
    int lv_top_threat_layer;
    string lv_temp_unit_type;

    // Automatic Variable Declarations
    unitgroup auto541D75F6_g;
    int auto541D75F6_u;
    unit auto541D75F6_var;
    unitgroup autoEEACEF7A_g;
    int autoEEACEF7A_u;
    unit autoEEACEF7A_var;
    unitgroup auto8827BF06_g;
    int auto8827BF06_u;
    unit auto8827BF06_var;
    unitgroup autoB8F854D9_g;
    int autoB8F854D9_u;
    unit autoB8F854D9_var;

    // Variable Initialization
    lv_i = 1;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_units_at_position[init_i] = UnitGroupEmpty();
    }
    lv_layer1 = UnitGroupEmpty();
    lv_layer2 = UnitGroupEmpty();
    lv_layer3 = UnitGroupEmpty();

    // Implementation
    gv_heatmap_top_threat = 0;
    while ((lv_i <= 6)) {
        gv_heatmap_push_threat_positions[lv_i] = 0;
        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= 6)) {
        lv_layer1 = UnitGroupEmpty();
        lv_layer2 = UnitGroupEmpty();
        lv_layer3 = UnitGroupEmpty();
        UnitGroupAddUnitGroup(lv_layer1, UnitGroup(null, c_playerAny, RegionFromName(("zergbase " + IntToString(lv_i))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        auto541D75F6_g = lv_layer1;
        auto541D75F6_u = UnitGroupCount(auto541D75F6_g, c_unitCountAll);
        for (;; auto541D75F6_u -= 1) {
            auto541D75F6_var = UnitGroupUnitFromEnd(auto541D75F6_g, auto541D75F6_u);
            if (auto541D75F6_var == null) { break; }
            lv_temp_unit_type = UnitGetType(auto541D75F6_var);
            if (((lv_temp_unit_type == "IonBeam") || (lv_temp_unit_type == "IonStorm") || (lv_temp_unit_type == "Buggo") || (lv_temp_unit_type == "ImmortalShakurasStasisCannonMissile") || (lv_temp_unit_type == "SpaceBalls") || (UnitGetOwner(auto541D75F6_var) == 0) || (UnitGetOwner(auto541D75F6_var) == 7) || ((UnitGetOwner(auto541D75F6_var) > 7) && (UnitGetOwner(auto541D75F6_var) <= 13)))) {
                UnitGroupRemove(lv_layer1, auto541D75F6_var);
            }

        }
        if ((gv_players[gv_positions[lv_i]].lv_alive == false)) {
            UnitGroupAddUnitGroup(lv_layer2, UnitGroup(null, c_playerAny, RegionFromName(("outer base area " + IntToString(lv_i))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            auto8827BF06_g = lv_layer2;
            auto8827BF06_u = UnitGroupCount(auto8827BF06_g, c_unitCountAll);
            for (;; auto8827BF06_u -= 1) {
                auto8827BF06_var = UnitGroupUnitFromEnd(auto8827BF06_g, auto8827BF06_u);
                if (auto8827BF06_var == null) { break; }
                lv_temp_unit_type = UnitGetType(auto8827BF06_var);
                if (((lv_temp_unit_type == "IonBeam") || (lv_temp_unit_type == "IonStorm") || (lv_temp_unit_type == "Buggo") || (lv_temp_unit_type == "ImmortalShakurasStasisCannonMissile") || (lv_temp_unit_type == "SpaceBalls") || (UnitGetOwner(auto8827BF06_var) == 0) || (UnitGetOwner(auto8827BF06_var) == 7) || ((UnitGetOwner(auto8827BF06_var) > 7) && (UnitGetOwner(auto8827BF06_var) <= 13)))) {
                    UnitGroupRemove(lv_layer2, auto8827BF06_var);
                }

            }
        }
        else {
            UnitGroupAddUnitGroup(lv_layer2, UnitGroup(null, c_playerAny, RegionFromName(("terran pushing area " + IntToString(lv_i))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            autoEEACEF7A_g = lv_layer2;
            autoEEACEF7A_u = UnitGroupCount(autoEEACEF7A_g, c_unitCountAll);
            for (;; autoEEACEF7A_u -= 1) {
                autoEEACEF7A_var = UnitGroupUnitFromEnd(autoEEACEF7A_g, autoEEACEF7A_u);
                if (autoEEACEF7A_var == null) { break; }
                lv_temp_unit_type = UnitGetType(autoEEACEF7A_var);
                if (((lv_temp_unit_type == "IonBeam") || (lv_temp_unit_type == "IonStorm") || (lv_temp_unit_type == "Buggo") || (lv_temp_unit_type == "ImmortalShakurasStasisCannonMissile") || (lv_temp_unit_type == "SpaceBalls") || (UnitGetOwner(autoEEACEF7A_var) == 0) || (UnitGetOwner(autoEEACEF7A_var) == 7) || ((UnitGetOwner(autoEEACEF7A_var) > 7) && (UnitGetOwner(autoEEACEF7A_var) <= 13)))) {
                    UnitGroupRemove(lv_layer2, autoEEACEF7A_var);
                }

            }
        }
        if ((gv_players[gv_positions[lv_i]].lv_alive == false)) {
            UnitGroupAddUnitGroup(lv_layer3, UnitGroup(null, c_playerAny, RegionFromName(("geysers p" + IntToString(lv_i))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            autoB8F854D9_g = lv_layer3;
            autoB8F854D9_u = UnitGroupCount(autoB8F854D9_g, c_unitCountAll);
            for (;; autoB8F854D9_u -= 1) {
                autoB8F854D9_var = UnitGroupUnitFromEnd(autoB8F854D9_g, autoB8F854D9_u);
                if (autoB8F854D9_var == null) { break; }
                lv_temp_unit_type = UnitGetType(autoB8F854D9_var);
                if (((lv_temp_unit_type == "IonBeam") || (lv_temp_unit_type == "IonStorm") || (lv_temp_unit_type == "Buggo") || (lv_temp_unit_type == "ImmortalShakurasStasisCannonMissile") || (lv_temp_unit_type == "SpaceBalls") || (UnitGetOwner(autoB8F854D9_var) == 0) || (UnitGetOwner(autoB8F854D9_var) == 7) || ((UnitGetOwner(autoB8F854D9_var) > 7) && (UnitGetOwner(autoB8F854D9_var) <= 13)))) {
                    UnitGroupRemove(lv_layer3, autoB8F854D9_var);
                }

            }
        }

        lv_unit_matrix[lv_i][1] = UnitGroupCount(lv_layer1, c_unitCountAlive);
        lv_unit_matrix[lv_i][2] = UnitGroupCount(lv_layer2, c_unitCountAlive);
        lv_unit_matrix[lv_i][3] = UnitGroupCount(lv_layer3, c_unitCountAlive);
        lv_units_at_position[lv_i] = UnitGroupEmpty();
        UnitGroupAddUnitGroup(lv_units_at_position[lv_i], lv_layer1);
        UnitGroupAddUnitGroup(lv_units_at_position[lv_i], lv_layer2);
        UnitGroupAddUnitGroup(lv_units_at_position[lv_i], lv_layer3);
        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= 6)) {
        if ((lv_unit_matrix[lv_i][1] > 3)) {
            gv_heatmap_push_threat_positions[lv_i] = 1;
            if ((lv_top_threat == 0)) {
                lv_top_threat = lv_i;
                lv_top_threat_layer = 1;
            }
            else {
                if (((lv_top_threat_layer == 2) || (lv_top_threat_layer == 3))) {
                    lv_top_threat = lv_i;
                    lv_top_threat_layer = 1;
                }
                else {
                    if ((lv_unit_matrix[lv_i][1] > lv_unit_matrix[lv_top_threat][1])) {
                        lv_top_threat = lv_i;
                    }

                }
            }
        }
        else {
            if ((lv_unit_matrix[lv_i][2] > 4)) {
                gv_heatmap_push_threat_positions[lv_i] = 1;
                if ((lv_top_threat == 0)) {
                    lv_top_threat = lv_i;
                    lv_top_threat_layer = 2;
                }
                else {
                    if ((lv_top_threat_layer == 1)) {
                    }
                    else {
                        if ((lv_top_threat_layer == 3)) {
                            lv_top_threat = lv_i;
                            lv_top_threat_layer = 2;
                        }
                        else {
                            if ((lv_unit_matrix[lv_i][2] > lv_unit_matrix[lv_top_threat][2])) {
                                lv_top_threat = lv_i;
                                lv_top_threat_layer = 2;
                            }

                        }
                    }
                }
            }
            else {
                if ((lv_unit_matrix[lv_i][3] > 3)) {
                    if ((lv_top_threat == 0)) {
                        lv_top_threat = lv_i;
                        lv_top_threat_layer = 3;
                    }
                    else {
                        if (((lv_top_threat_layer == 1) || (lv_top_threat_layer == 2))) {
                        }
                        else {
                            if ((lv_unit_matrix[lv_i][3] > lv_unit_matrix[lv_top_threat][3])) {
                                lv_top_threat = lv_i;
                                lv_top_threat_layer = 3;
                            }

                        }
                    }
                }

            }
        }
        lv_i += 1;
    }
    gv_heatmap_top_threat = lv_top_threat;
    gv_heatmap_top_threat_position = UnitGroupCenterOfGroup(lv_units_at_position[lv_top_threat]);
}

void gf_add_strikeling_spawner_to_group (unit lp_strikeling_spawner) {
    // Variable Declarations
    point lv_ss_pos;
    int lv_g;
    int lv_i;
    int lv_c;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ss_pos = UnitGetPosition(lp_strikeling_spawner);

    // Implementation
    if ((libNtve_gf_UnitInRegion(lp_strikeling_spawner, RegionFromId(92)) == true)) {
        lv_g = 1;
    }
    else {
        if ((libNtve_gf_UnitInRegion(lp_strikeling_spawner, RegionFromId(93)) == true)) {
            lv_g = 2;
        }
        else {
            if ((libNtve_gf_UnitInRegion(lp_strikeling_spawner, RegionFromId(94)) == true)) {
                lv_g = 3;
            }
            else {
                if ((libNtve_gf_UnitInRegion(lp_strikeling_spawner, RegionFromId(95)) == true)) {
                    lv_g = 4;
                }

            }
        }
    }
    UnitGroupAdd(gv_strikeling_groups[lv_g].lv_spawners, lp_strikeling_spawner);
    if ((UnitGroupCount(gv_strikeling_groups[lv_g].lv_spawners, c_unitCountAlive) == 15)) {
        gv_strikeling_groups[lv_g].lv_cluster_full = true;
    }

    lv_i = 1;
    while ((lv_i <= 4)) {
        if ((gv_strikeling_groups[lv_i].lv_cluster_full == true)) {
            lv_c += 1;
        }

        lv_i += 1;
    }
    if ((lv_c == 4)) {
        gv_strikelings_built_initially = true;
        gf_inject_left_strike_positions();
    }

}

void gf_handle_strikelings () {
    // Variable Declarations
    int[5] lv_group_target;
    int[5] lv_group_exists;
    int lv_i;
    int lv_j;
    point lv_p;

    // Automatic Variable Declarations
    int auto5F5E217C_val;
    unitgroup autoFA966C54_g;
    int autoFA966C54_u;
    unit autoFA966C54_var;
    unitgroup auto1997B907_g;
    int auto1997B907_u;
    unit auto1997B907_var;
    unitgroup auto217FCFFC_g;
    int auto217FCFFC_u;
    unit auto217FCFFC_var;
    unitgroup auto741959DC_g;
    int auto741959DC_u;
    unit auto741959DC_var;

    // Variable Initialization
    lv_i = 1;
    lv_j = 1;

    // Implementation
    while ((lv_i <= 4)) {
        if ((UnitGroupCount(gv_strikeling_groups[lv_i].lv_spawners, c_unitCountAlive) > 0)) {
            lv_group_exists[lv_i] = 1;
        }

        lv_j = 1;
        if ((lv_group_exists[lv_i] == 1)) {
            while ((lv_j <= 6)) {
                if ((RegionContainsPoint(RegionFromName(("player " + IntToString(lv_j))), UnitRallyPointTargetPoint(UnitGroupRandomUnit(gv_strikeling_groups[lv_i].lv_spawners, c_unitCountAlive), 1, 1)) == true)) {
                    lv_group_target[lv_i] = lv_j;
                    break;
                }

                lv_j += 1;
            }
        }

        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= 4)) {
        if ((lv_group_exists[lv_i] == 1)) {
            auto5F5E217C_val = lv_i;
            if (auto5F5E217C_val == 1) {
                if ((gv_strikeling_groups[1].lv_done_main_targets == true)) {
                }
                else {
                    if ((gv_heatmap_push_threat_positions[2] == 1)) {
                        if ((lv_group_target[1] != 2)) {
                            UnitGroupIssueOrder(gv_strikeling_groups[lv_i].lv_spawners, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(2)))), c_orderQueueReplace);
                        }

                    }
                    else {
                        if ((gv_heatmap_push_threat_positions[1] == 1)) {
                            if ((lv_group_target[1] != 1)) {
                                UnitGroupIssueOrder(gv_strikeling_groups[lv_i].lv_spawners, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(1)))), c_orderQueueReplace);
                            }

                        }
                        else {
                            if ((gv_players[gf_get_player_at_position(2)].lv_alive == true)) {
                                if ((lv_group_target[1] == 1)) {
                                    UnitGroupIssueOrder(gv_strikeling_groups[lv_i].lv_spawners, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(2)))), c_orderQueueReplace);
                                }

                            }
                            else {
                                if ((gv_players[gf_get_player_at_position(1)].lv_alive == true)) {
                                    if ((lv_group_target[1] != 1)) {
                                        UnitGroupIssueOrder(gv_strikeling_groups[lv_i].lv_spawners, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(1)))), c_orderQueueReplace);
                                    }

                                }
                                else {
                                    gv_strikeling_groups[lv_i].lv_done_main_targets = true;
                                    autoFA966C54_g = gv_strikeling_groups[lv_i].lv_spawners;
                                    autoFA966C54_u = UnitGroupCount(autoFA966C54_g, c_unitCountAll);
                                    for (;; autoFA966C54_u -= 1) {
                                        autoFA966C54_var = UnitGroupUnitFromEnd(autoFA966C54_g, autoFA966C54_u);
                                        if (autoFA966C54_var == null) { break; }
                                        gv_t1_spawner_distro[gf_get_closest_alive_player_position(UnitGetPosition(autoFA966C54_var))] += 1;
                                        UnitIssueOrder(autoFA966C54_var, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(gf_get_closest_alive_player_position(UnitGetPosition(autoFA966C54_var)))))), c_orderQueueReplace);
                                        UnitGroupAdd(gv_spawnergroups[gf_get_closest_alive_player_position(UnitGetPosition(autoFA966C54_var))].lv_all, autoFA966C54_var);
                                        UnitGroupAdd(gv_spawnergroups[gf_get_closest_alive_player_position(UnitGetPosition(autoFA966C54_var))].lv_front, autoFA966C54_var);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else if (auto5F5E217C_val == 2) {
                if ((gv_strikeling_groups[2].lv_done_main_targets == true)) {
                }
                else {
                    if ((gv_heatmap_push_threat_positions[2] == 1)) {
                        if ((lv_group_target[1] != 2)) {
                            UnitGroupIssueOrder(gv_strikeling_groups[lv_i].lv_spawners, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(2)))), c_orderQueueReplace);
                        }

                    }
                    else {
                        if ((gv_heatmap_push_threat_positions[3] == 1)) {
                            if ((lv_group_target[2] != 3)) {
                                UnitGroupIssueOrder(gv_strikeling_groups[lv_i].lv_spawners, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(3)))), c_orderQueueReplace);
                            }

                        }
                        else {
                            if ((gv_players[gf_get_player_at_position(2)].lv_alive == true)) {
                                if ((lv_group_target[2] == 3)) {
                                    UnitGroupIssueOrder(gv_strikeling_groups[lv_i].lv_spawners, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(2)))), c_orderQueueReplace);
                                }

                            }
                            else {
                                if ((gv_players[gf_get_player_at_position(3)].lv_alive == true)) {
                                    if ((lv_group_target[2] != 3)) {
                                        UnitGroupIssueOrder(gv_strikeling_groups[lv_i].lv_spawners, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(3)))), c_orderQueueReplace);
                                    }

                                }
                                else {
                                    gv_strikeling_groups[lv_i].lv_done_main_targets = true;
                                    auto1997B907_g = gv_strikeling_groups[lv_i].lv_spawners;
                                    auto1997B907_u = UnitGroupCount(auto1997B907_g, c_unitCountAll);
                                    for (;; auto1997B907_u -= 1) {
                                        auto1997B907_var = UnitGroupUnitFromEnd(auto1997B907_g, auto1997B907_u);
                                        if (auto1997B907_var == null) { break; }
                                        gv_t1_spawner_distro[gf_get_closest_alive_player_position(UnitGetPosition(auto1997B907_var))] += 1;
                                        UnitIssueOrder(auto1997B907_var, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(gf_get_closest_alive_player_position(UnitGetPosition(auto1997B907_var)))))), c_orderQueueReplace);
                                        UnitGroupAdd(gv_spawnergroups[gf_get_closest_alive_player_position(UnitGetPosition(auto1997B907_var))].lv_all, auto1997B907_var);
                                        UnitGroupAdd(gv_spawnergroups[gf_get_closest_alive_player_position(UnitGetPosition(auto1997B907_var))].lv_front, auto1997B907_var);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else if (auto5F5E217C_val == 3) {
                if ((gv_strikeling_groups[3].lv_done_main_targets == true)) {
                }
                else {
                    if ((gv_heatmap_push_threat_positions[5] == 1)) {
                        if ((lv_group_target[3] != 5)) {
                            UnitGroupIssueOrder(gv_strikeling_groups[lv_i].lv_spawners, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(5)))), c_orderQueueReplace);
                        }

                    }
                    else {
                        if ((gv_heatmap_push_threat_positions[6] == 1)) {
                            if ((lv_group_target[3] != 6)) {
                                UnitGroupIssueOrder(gv_strikeling_groups[lv_i].lv_spawners, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(6)))), c_orderQueueReplace);
                            }

                        }
                        else {
                            if ((gv_players[gf_get_player_at_position(5)].lv_alive == true)) {
                                if ((lv_group_target[3] == 6)) {
                                    UnitGroupIssueOrder(gv_strikeling_groups[lv_i].lv_spawners, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(5)))), c_orderQueueReplace);
                                }

                            }
                            else {
                                if ((gv_players[gf_get_player_at_position(6)].lv_alive == true)) {
                                    if ((lv_group_target[3] != 6)) {
                                        UnitGroupIssueOrder(gv_strikeling_groups[lv_i].lv_spawners, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(6)))), c_orderQueueReplace);
                                    }

                                }
                                else {
                                    gv_strikeling_groups[lv_i].lv_done_main_targets = true;
                                    auto217FCFFC_g = gv_strikeling_groups[lv_i].lv_spawners;
                                    auto217FCFFC_u = UnitGroupCount(auto217FCFFC_g, c_unitCountAll);
                                    for (;; auto217FCFFC_u -= 1) {
                                        auto217FCFFC_var = UnitGroupUnitFromEnd(auto217FCFFC_g, auto217FCFFC_u);
                                        if (auto217FCFFC_var == null) { break; }
                                        gv_t1_spawner_distro[gf_get_closest_alive_player_position(UnitGetPosition(auto217FCFFC_var))] += 1;
                                        UnitIssueOrder(auto217FCFFC_var, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(gf_get_closest_alive_player_position(UnitGetPosition(auto217FCFFC_var)))))), c_orderQueueReplace);
                                        UnitGroupAdd(gv_spawnergroups[gf_get_closest_alive_player_position(UnitGetPosition(auto217FCFFC_var))].lv_all, auto217FCFFC_var);
                                        UnitGroupAdd(gv_spawnergroups[gf_get_closest_alive_player_position(UnitGetPosition(auto217FCFFC_var))].lv_front, auto217FCFFC_var);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else if (auto5F5E217C_val == 4) {
                if ((gv_strikeling_groups[4].lv_done_main_targets == true)) {
                }
                else {
                    if ((gv_heatmap_push_threat_positions[5] == 1)) {
                        if ((lv_group_target[3] != 5)) {
                            UnitGroupIssueOrder(gv_strikeling_groups[lv_i].lv_spawners, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(5)))), c_orderQueueReplace);
                        }

                    }
                    else {
                        if ((gv_heatmap_push_threat_positions[4] == 1)) {
                            if ((lv_group_target[4] != 4)) {
                                UnitGroupIssueOrder(gv_strikeling_groups[lv_i].lv_spawners, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(4)))), c_orderQueueReplace);
                            }

                        }
                        else {
                            if ((gv_players[gf_get_player_at_position(5)].lv_alive == true)) {
                                if ((lv_group_target[4] == 4)) {
                                    UnitGroupIssueOrder(gv_strikeling_groups[lv_i].lv_spawners, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(5)))), c_orderQueueReplace);
                                }

                            }
                            else {
                                if ((gv_players[gf_get_player_at_position(4)].lv_alive == true)) {
                                    if ((lv_group_target[4] != 4)) {
                                        UnitGroupIssueOrder(gv_strikeling_groups[lv_i].lv_spawners, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(4)))), c_orderQueueReplace);
                                    }

                                }
                                else {
                                    gv_strikeling_groups[lv_i].lv_done_main_targets = true;
                                    auto741959DC_g = gv_strikeling_groups[lv_i].lv_spawners;
                                    auto741959DC_u = UnitGroupCount(auto741959DC_g, c_unitCountAll);
                                    for (;; auto741959DC_u -= 1) {
                                        auto741959DC_var = UnitGroupUnitFromEnd(auto741959DC_g, auto741959DC_u);
                                        if (auto741959DC_var == null) { break; }
                                        gv_t1_spawner_distro[gf_get_closest_alive_player_position(UnitGetPosition(auto741959DC_var))] += 1;
                                        UnitIssueOrder(auto741959DC_var, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(gf_get_closest_alive_player_position(UnitGetPosition(auto741959DC_var)))))), c_orderQueueReplace);
                                        UnitGroupAdd(gv_spawnergroups[gf_get_closest_alive_player_position(UnitGetPosition(auto741959DC_var))].lv_all, auto741959DC_var);
                                        UnitGroupAdd(gv_spawnergroups[gf_get_closest_alive_player_position(UnitGetPosition(auto741959DC_var))].lv_front, auto741959DC_var);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
            }
        }

        lv_i += 1;
    }
}

void gf_inject_left_strike_positions () {
    // Variable Declarations
    int lv_i;
    point lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= gv_possible_positions_strikelings_free)) {
        lv_p = gv_possible_positions_strikelings[lv_i];
        if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
            gv_possible_positions_t1_dead_count += 1;
            gv_possible_positions_t1_dead[gv_possible_positions_t1_dead_count] = lv_p;
        }

        lv_i += 1;
    }
}

void gf_try_kill_nest (unit lp_nest) {
    // Variable Declarations
    unitgroup lv_group;
    unitgroup lv_tmp_grp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = UnitGroupEmpty();
    lv_tmp_grp = UnitGroupEmpty();

    // Implementation
    lv_tmp_grp = UnitGroup("LargeSpineCrawler", 7, RegionCircle(UnitGetPosition(lp_nest), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2);
    if ((UnitGroupCount(lv_tmp_grp, c_unitCountAlive) > 0)) {
        UnitGroupIssueOrder(lv_tmp_grp, OrderTargetingUnit(AbilityCommand("attack", 0), lp_nest), c_orderQueueReplace);
    }

}

void gf_create_creep_source_groups () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoF84FF2EC_g;
    int autoF84FF2EC_u;
    unit autoF84FF2EC_var;
    unitgroup auto29485A91_g;
    int auto29485A91_u;
    unit auto29485A91_var;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    UnitGroupAdd(gv_outer_tumors, UnitFromId(1631522684));
    UnitGroupAdd(gv_outer_tumors, UnitFromId(1273115409));
    UnitGroupAdd(gv_outer_tumors, UnitFromId(916711523));
    UnitGroupAdd(gv_outer_tumors, UnitFromId(1556437563));
    UnitGroupAdd(gv_outer_nests, UnitFromId(1886324557));
    gv_outer_nest[1].lv_position = UnitGetPosition(UnitFromId(1886324557));
    gv_hydra_groups[1].lv_nest = UnitFromId(1886324557);
    UnitGroupAdd(gv_outer_nests, UnitFromId(1618795906));
    gv_outer_nest[2].lv_position = UnitGetPosition(UnitFromId(1618795906));
    gv_hydra_groups[2].lv_nest = UnitFromId(1618795906);
    UnitGroupAdd(gv_outer_nests, UnitFromId(1774358706));
    gv_outer_nest[3].lv_position = UnitGetPosition(UnitFromId(1774358706));
    gv_hydra_groups[3].lv_nest = UnitFromId(1774358706);
    UnitGroupAdd(gv_outer_nests, UnitFromId(872246152));
    gv_outer_nest[4].lv_position = UnitGetPosition(UnitFromId(872246152));
    gv_hydra_groups[4].lv_nest = UnitFromId(872246152);
    UnitGroupAdd(gv_outer_nests, UnitFromId(593573169));
    gv_outer_nest[5].lv_position = UnitGetPosition(UnitFromId(593573169));
    gv_hydra_groups[5].lv_nest = UnitFromId(593573169);
    UnitGroupAdd(gv_outer_nests, UnitFromId(245238182));
    gv_outer_nest[6].lv_position = UnitGetPosition(UnitFromId(245238182));
    gv_hydra_groups[6].lv_nest = UnitFromId(245238182);
    UnitGroupAdd(gv_outer_smallspines, UnitFromId(775359415));
    UnitGroupAdd(gv_outer_smallspines, UnitFromId(1712310150));
    UnitGroupAdd(gv_outer_smallspines, UnitFromId(2113798646));
    UnitGroupAdd(gv_outer_smallspines, UnitFromId(65228968));
    UnitGroupAdd(gv_outer_smallspines, UnitFromId(854162570));
    UnitGroupAdd(gv_outer_smallspines, UnitFromId(274920767));
    UnitGroupAdd(gv_extra_tumors, UnitFromId(1044148516));
    UnitGroupAdd(gv_extra_tumors, UnitFromId(1473657435));
    UnitGroupAdd(gv_extra_tumors, UnitFromId(703269771));
    UnitGroupAdd(gv_extra_tumors, UnitFromId(819776449));
    UnitGroupAdd(gv_extra_tumors, UnitFromId(256863816));
    UnitGroupAdd(gv_extra_tumors, UnitFromId(424287550));
    UnitGroupAdd(gv_extra_tumors, UnitFromId(1800119728));
    UnitGroupAdd(gv_extra_tumors, UnitFromId(1860632493));
    autoF84FF2EC_g = gv_extra_tumors;
    autoF84FF2EC_u = UnitGroupCount(autoF84FF2EC_g, c_unitCountAll);
    for (;; autoF84FF2EC_u -= 1) {
        autoF84FF2EC_var = UnitGroupUnitFromEnd(autoF84FF2EC_g, autoF84FF2EC_u);
        if (autoF84FF2EC_var == null) { break; }
        gv_dead_creep_count += 1;
        gv_dead_creep[gv_dead_creep_count].lv_position = UnitGetPosition(autoF84FF2EC_var);
        gv_dead_creep[gv_dead_creep_count].lv_unit_type = UnitGetType(autoF84FF2EC_var);
        UnitRemove(autoF84FF2EC_var);
    }
    gv_extra_tumors = null;
    auto29485A91_g = UnitGroup("Nest2", c_playerAny, RegionCircle(PointFromId(1910508930), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 4);
    auto29485A91_u = UnitGroupCount(auto29485A91_g, c_unitCountAll);
    for (;; auto29485A91_u -= 1) {
        auto29485A91_var = UnitGroupUnitFromEnd(auto29485A91_g, auto29485A91_u);
        if (auto29485A91_var == null) { break; }
        gv_prefuse_infestors_nests_coords[lv_i] = UnitGetPosition(auto29485A91_var);
        UnitRemove(auto29485A91_var);
        lv_i += 1;
    }
}

void gf_rebuild_dead_creep_array (unit lp_unit) {
    // Variable Declarations
    string lv_type;
    point lv_position;
    int lv_i;
    gs_dead_creep[101] lv_new_array;
    int lv_new_array_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_type = UnitGetType(lp_unit);
    lv_position = UnitGetPosition(lp_unit);
    lv_i = 1;

    // Implementation
    while ((lv_i <= gv_dead_creep_count)) {
        if ((lv_type == gv_dead_creep[lv_i].lv_unit_type) && (lv_position == gv_dead_creep[lv_i].lv_position)) {
        }
        else {
            lv_new_array_count += 1;
            lv_new_array[lv_new_array_count].lv_unit_type = gv_dead_creep[lv_i].lv_unit_type;
            lv_new_array[lv_new_array_count].lv_position = gv_dead_creep[lv_i].lv_position;
        }
        lv_i += 1;
    }
    lv_i = 1;
    if ((lv_new_array_count > 0)) {
        while ((lv_i <= lv_new_array_count)) {
            gv_dead_creep[lv_i].lv_unit_type = lv_new_array[lv_i].lv_unit_type;
            gv_dead_creep[lv_i].lv_position = lv_new_array[lv_i].lv_position;
            lv_i += 1;
        }
        gv_dead_creep_count = lv_new_array_count;
    }
    else {
        gv_dead_creep_count = 0;
    }
}

void gf_try_regrow_creep () {
    // Variable Declarations
    point[100] lv_drone_goal_array;
    int lv_drone_goal_count;
    point lv_pre_result;
    string lv_pre_result_type;
    string lv_result_type;
    point lv_result_position;
    point lv_point;
    fixed lv_pre_result_distance;
    int lv_j;
    int lv_i;
    bool lv_taken;
    unit lv_drone;

    // Automatic Variable Declarations
    unitgroup autoF279B2C0_g;
    int autoF279B2C0_u;
    unit autoF279B2C0_var;

    // Variable Initialization
    lv_j = 1;
    lv_i = 1;

    // Implementation
    autoF279B2C0_g = UnitGroup("Drone2", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF279B2C0_u = UnitGroupCount(autoF279B2C0_g, c_unitCountAll);
    for (;; autoF279B2C0_u -= 1) {
        autoF279B2C0_var = UnitGroupUnitFromEnd(autoF279B2C0_g, autoF279B2C0_u);
        if (autoF279B2C0_var == null) { break; }
        if ((UnitOrderCount(autoF279B2C0_var) >= 1)) {
            lv_drone_goal_count = (lv_drone_goal_count + 1);
            lv_drone_goal_array[lv_drone_goal_count] = UnitGetGoalPosition(autoF279B2C0_var);
        }

    }
    while ((lv_i <= gv_dead_creep_count)) {
        lv_taken = false;
        lv_point = gv_dead_creep[lv_i].lv_position;
        lv_j = 1;
        while ((lv_j <= lv_drone_goal_count)) {
            if ((lv_drone_goal_array[lv_j] == lv_point)) {
                lv_taken = true;
                break;
            }

            lv_j += 1;
        }
        if ((lv_taken == false)) {
            if ((lv_pre_result_distance == 0.0)) {
                lv_pre_result = lv_point;
                lv_pre_result_type = gv_dead_creep[lv_i].lv_unit_type;
                lv_pre_result_distance = DistanceBetweenPoints(lv_point, PointFromId(1910508930));
            }
            else {
                if ((DistanceBetweenPoints(lv_point, PointFromId(1910508930)) < lv_pre_result_distance)) {
                    lv_pre_result = lv_point;
                    lv_pre_result_type = gv_dead_creep[lv_i].lv_unit_type;
                    lv_pre_result_distance = DistanceBetweenPoints(lv_point, PointFromId(1910508930));
                }

            }
        }

        lv_i += 1;
    }
    lv_result_position = lv_pre_result;
    lv_result_type = lv_pre_result_type;
    lv_drone = gf_get_drone();
    if ((gf_is_area_around_point_safe(lv_result_position) == true) && (lv_result_type != null) && (lv_drone != null) && ((lv_result_type == "Nest2") || (lv_result_type == "CreepTumor2"))) {
        if ((lv_result_type == "CreepTumor2")) {
            PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperAdd, 160);
            UnitIssueOrder(lv_drone, OrderTargetingPoint(AbilityCommand("MorphUnitDroneZergBuildings", 18), lv_result_position), c_orderQueueReplace);
        }
        else {
            if ((gf_is_area_around_point_save_nest(lv_result_position) == true)) {
                PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperAdd, 450);
                UnitIssueOrder(lv_drone, OrderTargetingPoint(AbilityCommand("MorphUnitDroneZergBuildings", 0), lv_result_position), c_orderQueueReplace);
            }

        }
    }

}

bool gf_is_area_around_point_save_nest (point lp_position) {
    // Variable Declarations
    bool lv_return;
    unitgroup lv_group;
    int lv_g_count;

    // Automatic Variable Declarations
    unitgroup auto0132F01A_g;
    int auto0132F01A_u;
    unit auto0132F01A_var;

    // Variable Initialization
    lv_return = true;
    lv_group = UnitGroupEmpty();

    // Implementation
    lv_group = UnitGroup(null, c_playerAny, RegionCircle(lp_position, 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0132F01A_g = lv_group;
    auto0132F01A_u = UnitGroupCount(auto0132F01A_g, c_unitCountAll);
    for (;; auto0132F01A_u -= 1) {
        auto0132F01A_var = UnitGroupUnitFromEnd(auto0132F01A_g, auto0132F01A_u);
        if (auto0132F01A_var == null) { break; }
        if (((UnitGetOwner(auto0132F01A_var) == 7) || (UnitGetOwner(auto0132F01A_var) == 0) || ((UnitGetType(auto0132F01A_var) == "Buggo") || (UnitGetType(auto0132F01A_var) == "Oggub") || (UnitGetType(auto0132F01A_var) == "Builder") || (UnitGetType(auto0132F01A_var) == "InfestedBuilder") || (UnitGetType(auto0132F01A_var) == "Battery") || (UnitGetType(auto0132F01A_var) == "AdvancedBattery") || (UnitGetType(auto0132F01A_var) == "HighDensityBattery") || (UnitGetType(auto0132F01A_var) == "ImmortalShakurasStasisCannonMissile")))) {
            UnitGroupRemove(lv_group, auto0132F01A_var);
        }

    }
    lv_g_count = UnitGroupCount(lv_group, c_unitCountAlive);
    if ((lv_g_count > 0)) {
        lv_return = false;
    }

    return lv_return;
}

void gf_dodge_stasis (point lp_target) {
    // Variable Declarations
    region lv_impact_area;
    unitgroup lv_units_in_impact_area;
    int lv_rand;
    int lv_u_rough_position_x;
    int lv_u_rough_position_y;

    // Automatic Variable Declarations
    unitgroup auto6D81CB49_g;
    int auto6D81CB49_u;
    unit auto6D81CB49_var;
    unitgroup auto7B468E7E_g;
    int auto7B468E7E_u;
    unit auto7B468E7E_var;
    int autoF85AF2AC_val;
    int autoEA12D3B6_val;
    int autoCFBC3953_val;
    int auto5C28F4B6_val;

    // Variable Initialization
    lv_impact_area = RegionCircle(lp_target, 8.0);
    lv_units_in_impact_area = UnitGroupEmpty();

    // Implementation
    lv_units_in_impact_area = UnitGroup(null, c_playerAny, lv_impact_area, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6D81CB49_g = lv_units_in_impact_area;
    auto6D81CB49_u = UnitGroupCount(auto6D81CB49_g, c_unitCountAll);
    for (;; auto6D81CB49_u -= 1) {
        auto6D81CB49_var = UnitGroupUnitFromEnd(auto6D81CB49_g, auto6D81CB49_u);
        if (auto6D81CB49_var == null) { break; }
        if ((UnitGetType(auto6D81CB49_var) != "HydraliskLevel2") && (UnitGetType(auto6D81CB49_var) != "InfestorZergHex2") && (UnitGetType(auto6D81CB49_var) != "WizardMinion")) {
            UnitGroupRemove(lv_units_in_impact_area, auto6D81CB49_var);
        }

    }
    auto7B468E7E_g = lv_units_in_impact_area;
    auto7B468E7E_u = UnitGroupCount(auto7B468E7E_g, c_unitCountAll);
    for (;; auto7B468E7E_u -= 1) {
        auto7B468E7E_var = UnitGroupUnitFromEnd(auto7B468E7E_g, auto7B468E7E_u);
        if (auto7B468E7E_var == null) { break; }
        if ((PointGetX(UnitGetPosition(auto7B468E7E_var)) > PointGetX(lp_target))) {
            lv_u_rough_position_x = 1;
        }
        else {
            lv_u_rough_position_x = 0;
        }
        if ((PointGetY(UnitGetPosition(auto7B468E7E_var)) > PointGetY(lp_target))) {
            lv_u_rough_position_y = 1;
        }
        else {
            lv_u_rough_position_y = 0;
        }
        if ((lv_u_rough_position_x == 1) && (lv_u_rough_position_y == 1)) {
            lv_rand = RandomInt(1, 3);
            autoF85AF2AC_val = lv_rand;
            if (autoF85AF2AC_val == 1) {
                UnitIssueOrder(auto7B468E7E_var, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(lp_target) - 0.0), (PointGetY(lp_target) + 5.0))), c_orderQueueReplace);
            }
            else if (autoF85AF2AC_val == 2) {
                UnitIssueOrder(auto7B468E7E_var, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(lp_target) + 5.0), (PointGetY(lp_target) + 5.0))), c_orderQueueReplace);
            }
            else if (autoF85AF2AC_val == 3) {
                UnitIssueOrder(auto7B468E7E_var, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(lp_target) + 5.0), 0.0)), c_orderQueueReplace);
            }
            else {
            }
        }
        else {
            if ((lv_u_rough_position_x == 1) && (lv_u_rough_position_y == 0)) {
                lv_rand = RandomInt(1, 3);
                autoEA12D3B6_val = lv_rand;
                if (autoEA12D3B6_val == 1) {
                    UnitIssueOrder(auto7B468E7E_var, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(lp_target) - 0.0), (PointGetY(lp_target) - 5.0))), c_orderQueueReplace);
                }
                else if (autoEA12D3B6_val == 2) {
                    UnitIssueOrder(auto7B468E7E_var, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(lp_target) + 5.0), (PointGetY(lp_target) - 5.0))), c_orderQueueReplace);
                }
                else if (autoEA12D3B6_val == 3) {
                    UnitIssueOrder(auto7B468E7E_var, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(lp_target) + 5.0), 0.0)), c_orderQueueReplace);
                }
                else {
                }
            }
            else {
                if ((lv_u_rough_position_x == 0) && (lv_u_rough_position_y == 1)) {
                    lv_rand = RandomInt(1, 3);
                    autoCFBC3953_val = lv_rand;
                    if (autoCFBC3953_val == 1) {
                        UnitIssueOrder(auto7B468E7E_var, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(lp_target) - 0.0), (PointGetY(lp_target) + 5.0))), c_orderQueueReplace);
                    }
                    else if (autoCFBC3953_val == 2) {
                        UnitIssueOrder(auto7B468E7E_var, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(lp_target) - 5.0), (PointGetY(lp_target) + 5.0))), c_orderQueueReplace);
                    }
                    else if (autoCFBC3953_val == 3) {
                        UnitIssueOrder(auto7B468E7E_var, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(lp_target) - 5.0), 0.0)), c_orderQueueReplace);
                    }
                    else {
                    }
                }
                else {
                    if ((lv_u_rough_position_x == 0) && (lv_u_rough_position_y == 0)) {
                        lv_rand = RandomInt(1, 3);
                        auto5C28F4B6_val = lv_rand;
                        if (auto5C28F4B6_val == 1) {
                            UnitIssueOrder(auto7B468E7E_var, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(lp_target) - 5.0), (PointGetY(lp_target) - 5.0))), c_orderQueueReplace);
                        }
                        else if (auto5C28F4B6_val == 2) {
                            UnitIssueOrder(auto7B468E7E_var, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(lp_target) - 0.0), (PointGetY(lp_target) - 5.0))), c_orderQueueReplace);
                        }
                        else if (auto5C28F4B6_val == 3) {
                            UnitIssueOrder(auto7B468E7E_var, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(lp_target) - 5.0), 0.0)), c_orderQueueReplace);
                        }
                        else {
                        }
                    }

                }
            }
        }
    }
}

void gf_add_hazard_zone (region lp_region) {
    // Variable Declarations
    fixed lv_time;
    int lv_next_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_time = GameGetMissionTime();
    lv_next_index = (gv_hazard_zones_count + 1);

    // Implementation
    gv_hazard_zones[lv_next_index].lv_timestamp = FixedToInt(lv_time);
    gv_hazard_zones[lv_next_index].lv_area = lp_region;
    gv_hazard_zones[lv_next_index].lv_deprecated = false;
    gv_hazard_zones_count = lv_next_index;
}

void gf_check_hazard_zones () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= gv_hazard_zones_count)) {
        if ((gf_is_hazard_zone_deprecated(lv_i) == true)) {
            gv_hazard_zones[lv_i].lv_deprecated = true;
            gv_deprecated_hazard_zones_count += 1;
        }

        lv_i += 1;
    }
}

void gf_refresh_hazard_zone_array () {
    // Variable Declarations
    int lv_i;
    gs_hazard_zone[17] lv_tmp_arr;
    int lv_tmp_arr_cnt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= gv_hazard_zones_count)) {
        if ((gv_hazard_zones[lv_i].lv_deprecated == false)) {
            lv_tmp_arr_cnt = (lv_tmp_arr_cnt + 1);
            lv_tmp_arr[lv_tmp_arr_cnt].lv_timestamp = gv_hazard_zones[lv_i].lv_timestamp;
            lv_tmp_arr[lv_tmp_arr_cnt].lv_area = gv_hazard_zones[lv_i].lv_area;
            lv_tmp_arr[lv_tmp_arr_cnt].lv_deprecated = false;
        }

        lv_i = (lv_i + 1);
    }
    gv_hazard_zones_count = 0;
    if ((lv_tmp_arr_cnt > 0)) {
        lv_i = 1;
        while ((lv_i <= lv_tmp_arr_cnt)) {
            gv_hazard_zones_count = (gv_hazard_zones_count + 1);
            gv_hazard_zones[lv_i].lv_timestamp = lv_tmp_arr[lv_i].lv_timestamp;
            gv_hazard_zones[lv_i].lv_area = lv_tmp_arr[lv_i].lv_area;
            gv_hazard_zones[lv_i].lv_deprecated = false;
            lv_i = (lv_i + 1);
        }
    }

    gv_deprecated_hazard_zones_count = 0;
}

bool gf_is_hazard_zone_deprecated (int lp_array_key) {
    // Variable Declarations
    fixed lv_time;
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_time = GameGetMissionTime();

    // Implementation
    if (((gv_hazard_zones[lp_array_key].lv_timestamp + 10) <= FixedToInt(lv_time))) {
        lv_r = true;
    }

    return lv_r;
}

bool gf_is_point_in_hazard_zone (point lp_point) {
    // Variable Declarations
    int lv_i;
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= gv_hazard_zones_count)) {
        if ((RegionContainsPoint(gv_hazard_zones[lv_i].lv_area, lp_point) == true)) {
            lv_r = true;
            break;
        }

        lv_i += 1;
    }
    return lv_r;
}

void gf_build_drone () {
    // Variable Declarations
    unitgroup lv_hives;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hives = gf_get_hives();

    // Implementation
    if ((PlayerGetPropertyInt(7, c_playerPropMinerals) > 40) && (gv_ai_building_drone == false)) {
        PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperAdd, 40);
        UnitGroupIssueOrder(lv_hives, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1910508930)), c_orderQueueReplace);
        UnitGroupIssueOrder(lv_hives, Order(AbilityCommand("ZergTrain", 0)), c_orderQueueAddToEnd);
        UnitGroupIssueOrder(lv_hives, Order(AbilityCommand("ZergTrain", 0)), c_orderQueueAddToEnd);
        UnitGroupIssueOrder(lv_hives, Order(AbilityCommand("ZergTrain", 0)), c_orderQueueAddToEnd);
        UnitGroupIssueOrder(lv_hives, Order(AbilityCommand("ZergTrain", 0)), c_orderQueueAddToEnd);
        if ((gv_difficulty >= 7) && (PlayerGetPropertyInt(7, c_playerPropMinerals) > 40)) {
            PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperAdd, 40);
            UnitGroupIssueOrder(lv_hives, Order(AbilityCommand("ZergTrain", 0)), c_orderQueueAddToEnd);
            UnitGroupIssueOrder(lv_hives, Order(AbilityCommand("ZergTrain", 0)), c_orderQueueAddToEnd);
            UnitGroupIssueOrder(lv_hives, Order(AbilityCommand("ZergTrain", 0)), c_orderQueueAddToEnd);
            UnitGroupIssueOrder(lv_hives, Order(AbilityCommand("ZergTrain", 0)), c_orderQueueAddToEnd);
        }

        gv_ai_building_drone = true;
    }

}

unit gf_get_drone () {
    // Variable Declarations
    unitgroup lv_u_group;
    int lv_cnt;
    unit lv_return;

    // Automatic Variable Declarations
    unitgroup auto118E4BBE_g;
    int auto118E4BBE_u;
    unit auto118E4BBE_var;

    // Variable Initialization
    lv_u_group = UnitGroup("Drone2", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_cnt = UnitCount("Drone2", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Implementation
    if ((lv_cnt == 0)) {
        gf_build_drone();
    }
    else {
        auto118E4BBE_g = lv_u_group;
        auto118E4BBE_u = UnitGroupCount(auto118E4BBE_g, c_unitCountAll);
        for (;; auto118E4BBE_u -= 1) {
            auto118E4BBE_var = UnitGroupUnitFromEnd(auto118E4BBE_g, auto118E4BBE_u);
            if (auto118E4BBE_var == null) { break; }
            if ((UnitOrderCount(auto118E4BBE_var) < 1)) {
                lv_return = auto118E4BBE_var;
                break;
            }

        }
    }
    if ((lv_return == null)) {
        gf_build_drone();
    }

    return lv_return;
}

int gf_get_number_of_ready_drones () {
    // Variable Declarations
    unitgroup lv_u_group;
    int lv_return;

    // Automatic Variable Declarations
    unitgroup auto0E4A8C3E_g;
    int auto0E4A8C3E_u;
    unit auto0E4A8C3E_var;

    // Variable Initialization
    lv_u_group = UnitGroup("Drone2", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Implementation
    auto0E4A8C3E_g = lv_u_group;
    auto0E4A8C3E_u = UnitGroupCount(auto0E4A8C3E_g, c_unitCountAll);
    for (;; auto0E4A8C3E_u -= 1) {
        auto0E4A8C3E_var = UnitGroupUnitFromEnd(auto0E4A8C3E_g, auto0E4A8C3E_u);
        if (auto0E4A8C3E_var == null) { break; }
        if ((UnitOrderCount(auto0E4A8C3E_var) < 1)) {
            lv_return = (lv_return + 1);
        }

    }
    return lv_return;
}

unitgroup gf_get_all_ready_drones () {
    // Variable Declarations
    unitgroup lv_u_group;
    unitgroup lv_return;

    // Automatic Variable Declarations
    unitgroup autoA5209213_g;
    int autoA5209213_u;
    unit autoA5209213_var;

    // Variable Initialization
    lv_u_group = UnitGroup("Drone2", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_return = UnitGroupEmpty();

    // Implementation
    autoA5209213_g = lv_u_group;
    autoA5209213_u = UnitGroupCount(autoA5209213_g, c_unitCountAll);
    for (;; autoA5209213_u -= 1) {
        autoA5209213_var = UnitGroupUnitFromEnd(autoA5209213_g, autoA5209213_u);
        if (autoA5209213_var == null) { break; }
        if ((UnitOrderCount(autoA5209213_var) < 1)) {
            UnitGroupAdd(lv_return, autoA5209213_var);
        }

    }
    return lv_return;
}

int gf_get_egg_spawn_unit_set_multiplier () {
    // Variable Declarations
    int lv_time;
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_time = FixedToInt(GameGetMissionTime());

    // Implementation
    if ((lv_time <= (60 * 10))) {
        lv_r = 1;
    }
    else if ((lv_time > (60 * 10)) && (lv_time <= (60 * 15))) {
        lv_r = 2;
    }
    else if ((lv_time > (60 * 15)) && (lv_time <= (60 * 20))) {
        lv_r = 3;
    }
    else if ((lv_time > (60 * 20))) {
        lv_r = 4;
    }
    return lv_r;
}

int gf_get_egg_count_defensive_spawn () {
    // Variable Declarations
    int lv_time;
    int lv_i;
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_time = FixedToInt(GameGetMissionTime());
    lv_i = 5;

    // Implementation
    if ((lv_time <= (60 * 13))) {
        lv_i = (lv_i + 0);
    }
    else if ((lv_time > (60 * 13)) && (lv_time <= (60 * 15))) {
        lv_i = (lv_i + 2);
    }
    else if ((lv_time > (60 * 15)) && (lv_time <= (60 * 20))) {
        lv_i = (lv_i + 3);
    }
    else if ((lv_time > (60 * 20)) && (lv_time <= (60 * 25))) {
        lv_i = (lv_i + 5);
    }
    else if ((lv_time > (60 * 25))) {
        lv_i = (lv_i + 8);
    }
    lv_r = lv_i;
    return lv_r;
}

int gf_get_egg_count_front_spawn () {
    // Variable Declarations
    int lv_time;
    int lv_i;
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_time = FixedToInt(GameGetMissionTime());
    lv_i = 3;

    // Implementation
    if ((gv_difficulty <= 2)) {
    }
    else {
        if ((lv_time <= (60 * 13))) {
            lv_i = (lv_i + 0);
        }
        else if ((lv_time > (60 * 13)) && (lv_time <= (60 * 15))) {
            lv_i = (lv_i + 1);
        }
        else if ((lv_time > (60 * 15)) && (lv_time <= (60 * 20))) {
            lv_i = (lv_i + 2);
        }
        else if ((lv_time > (60 * 20)) && (lv_time <= (60 * 25))) {
            lv_i = (lv_i + 4);
        }
        else if ((lv_time > (60 * 25))) {
            lv_i = (lv_i + 6);
        }
        if ((gv_difficulty <= 5)) {
        }
        else {
            if ((gv_difficulty <= 7)) {
                lv_i = (lv_i + 1);
            }
            else {
                lv_i = (lv_i + 2);
            }
        }
    }
    lv_r = lv_i;
    return lv_r;
}

int gf_get_egg_spawn_egg_type () {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    int auto97966E76_val;

    // Variable Initialization

    // Implementation
    auto97966E76_val = RandomInt(1, 3);
    if (auto97966E76_val == 1) {
        lv_r = 1;
    }
    else if (auto97966E76_val == 2) {
        lv_r = 2;
    }
    else if (auto97966E76_val == 3) {
        if ((gv_difficulty <= 4)) {
            lv_r = 2;
        }
        else {
            lv_r = 3;
        }
    }
    else {
    }
    return lv_r;
}

int gf_get_egg_spawn_egg_value (int lp_et) {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    int auto106ACA57_val;

    // Variable Initialization

    // Implementation
    auto106ACA57_val = lp_et;
    if (auto106ACA57_val == 1) {
        lv_r = 1;
    }
    else if (auto106ACA57_val == 2) {
        if ((gv_difficulty <= 4)) {
            lv_r = 2;
        }
        else {
            if ((gv_difficulty <= 7)) {
                lv_r = 1;
            }
            else {
                lv_r = 1;
            }
        }
    }
    else if (auto106ACA57_val == 3) {
        if ((gv_difficulty <= 4)) {
            lv_r = 2;
        }
        else {
            if ((gv_difficulty <= 7)) {
                lv_r = 2;
            }
            else {
                lv_r = 1;
            }
        }
    }
    else {
    }
    return lv_r;
}

int gf_get_egg_spawn_egg_amount (int lp_et) {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    int auto79924242_val;

    // Variable Initialization

    // Implementation
    auto79924242_val = lp_et;
    if (auto79924242_val == 1) {
        if ((gv_difficulty <= 4)) {
            lv_r = 1;
        }
        else {
            if ((gv_difficulty <= 7)) {
                lv_r = 1;
            }
            else {
                lv_r = 2;
            }
        }
    }
    else if (auto79924242_val == 2) {
        if ((gv_difficulty <= 4)) {
            lv_r = 1;
        }
        else {
            if ((gv_difficulty <= 7)) {
                lv_r = 2;
            }
            else {
                lv_r = 3;
            }
        }
    }
    else if (auto79924242_val == 3) {
        if ((gv_difficulty <= 4)) {
            lv_r = 1;
        }
        else {
            if ((gv_difficulty <= 7)) {
                lv_r = 1;
            }
            else {
                lv_r = 2;
            }
        }
    }
    else {
    }
    return lv_r;
}

void gf_spawn_eggs (int lp_position, int lp_egg_count, int lp_front) {
    // Variable Declarations
    point lv_spawn_point;
    int lv_et;
    int lv_ea;
    int lv_egg_value;
    int[4] lv_us;
    int lv_defined_eggs;
    int lv_tm;
    string lv_type;
    int lv_i;
    int lv_j;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    int auto0868AC21_val;

    // Variable Initialization
    lv_tm = gf_get_egg_spawn_unit_set_multiplier();
    lv_i = 1;
    lv_j = 1;
    lv_ug = UnitGroupEmpty();

    // Implementation
    while ((lv_defined_eggs < lp_egg_count)) {
        lv_et = gf_get_egg_spawn_egg_type();
        lv_ea = gf_get_egg_spawn_egg_amount(lv_et);
        lv_egg_value = gf_get_egg_spawn_egg_value(lv_et);
        lv_us[lv_et] = (lv_us[lv_et] + lv_ea);
        lv_defined_eggs = (lv_defined_eggs + lv_egg_value);
    }
    if ((lp_front == 0)) {
    }

    lv_i = 1;
    while ((lv_i <= 3)) {
        lv_j = 1;
        while ((lv_j <= lv_us[lv_i])) {
            auto0868AC21_val = lv_i;
            if (auto0868AC21_val == 1) {
                lv_type = "BlightbringerEgg";
            }
            else if (auto0868AC21_val == 2) {
                lv_type = "SwarmQueenMorphing";
            }
            else if (auto0868AC21_val == 3) {
                lv_type = "BlightbringerLargeEgg";
            }
            else {
            }
            if ((lp_front == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_type, 0, 7, gv_front_egg_spawn_points[lp_position][gf_flip_coin()]);
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_type, 0, 7, gv_defensive_egg_spawn_points[lp_position][gf_flip_coin()]);
            }
            UnitGroupAdd(lv_ug, UnitLastCreated());
            lv_j = (lv_j + 1);
        }
        lv_i = (lv_i + 1);
    }
    UnitGroupIssueOrder(lv_ug, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(lp_position)))), c_orderQueueReplace);
    gv_defensive_egg_spawn_cooldown = (gv_defensive_egg_spawn_cooldown + 6);
}

void gf_spawn_unit_from_egg (int lp_et, point lp_origin, point lp_target) {
    // Variable Declarations
    string lv_type;
    int lv_amount;
    int lv_rand;

    // Automatic Variable Declarations
    int auto7F15A735_val;

    // Variable Initialization

    // Implementation
    auto7F15A735_val = lp_et;
    if (auto7F15A735_val == 1) {
        lv_rand = RandomInt(1, 100);
        if ((lv_rand >= 0) && (lv_rand < 25)) {
            lv_amount = 3;
            lv_type = "Slowling";
        }
        else if ((lv_rand >= 25) && (lv_rand < 50)) {
            lv_amount = 3;
            lv_type = "Creeper";
        }
        else if ((lv_rand >= 50) && (lv_rand < 75)) {
            lv_amount = 4;
            lv_type = "Strikeling";
        }
        else if ((lv_rand >= 75)) {
            lv_amount = 2;
            lv_type = "Tankling";
        }
    }
    else if (auto7F15A735_val == 2) {
        if ((gf_flip_coin() == 1)) {
            if ((gv_armor_level >= 2)) {
                lv_amount = 2;
                lv_type = "Roach2";
            }
            else {
                lv_amount = 4;
                lv_type = "Strikeling";
            }
        }
        else {
            if ((gv_armor_level >= 3)) {
                lv_amount = 2;
                lv_type = "PrimalRoach2";
            }
            else {
                if ((gv_armor_level >= 2)) {
                    lv_amount = 2;
                    lv_type = "Roach2";
                }
                else {
                    lv_amount = 4;
                    lv_type = "Strikeling";
                }
            }
        }
    }
    else if (auto7F15A735_val == 3) {
        if ((gf_flip_coin() == 1)) {
            if ((gv_armor_level >= 4)) {
                lv_amount = 2;
                lv_type = "Ultralisk2";
            }
            else {
                if ((gv_armor_level >= 3)) {
                    lv_amount = 3;
                    lv_type = "PrimalRoach2";
                }
                else {
                    if ((gv_armor_level >= 2)) {
                        lv_amount = 3;
                        lv_type = "Roach2";
                    }
                    else {
                        lv_amount = 5;
                        lv_type = "Strikeling";
                    }
                }
            }
        }
        else {
            if ((gv_armor_level >= 5)) {
                lv_amount = 1;
                lv_type = "Brutalisk2";
            }
            else {
                if ((gv_armor_level >= 4)) {
                    lv_amount = 2;
                    lv_type = "Ultralisk2";
                }
                else {
                    if ((gv_armor_level >= 3)) {
                        lv_amount = 3;
                        lv_type = "PrimalRoach2";
                    }
                    else {
                        if ((gv_armor_level >= 2)) {
                            lv_amount = 3;
                            lv_type = "Roach2";
                        }
                        else {
                            lv_amount = 5;
                            lv_type = "Strikeling";
                        }
                    }
                }
            }
        }
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(lv_amount, lv_type, 0, 7, lp_origin);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_target), c_orderQueueReplace);
}

void gf_define_egg_spawn_points () {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_k;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;
    lv_j = 1;
    lv_k = 1;

    // Implementation
    while ((lv_i <= 6)) {
        lv_j = 1;
        while ((lv_j <= 2)) {
            gv_defensive_egg_spawn_points[lv_i][lv_j] = PointFromName(("Infestors " + IntToString(lv_k)));
            gv_front_egg_spawn_points[lv_i][lv_j] = libNtve_gf_PointOffsetTowardsPoint(PointFromName(("Infestors " + IntToString(lv_k))), 4.0, PointFromName(("Zerg Rally " + IntToString(lv_i))));
            lv_j = (lv_j + 1);
            lv_k = (lv_k + 1);
        }
        lv_i = (lv_i + 1);
    }
}

void gf_f2_point (point lp_point, bool lp_force) {
    // Variable Declarations
    region lv_region;
    unitgroup lv_zerg_units;

    // Automatic Variable Declarations
    unitgroup auto739B6D3A_g;
    int auto739B6D3A_u;
    unit auto739B6D3A_var;

    // Variable Initialization
    lv_zerg_units = UnitGroupEmpty();

    // Implementation
    if ((gv_highground_invader_count == 0)) {
        if ((RegionContainsPoint(RegionFromId(76), lp_point) == true)) {
            lv_region = RegionFromId(76);
        }
        else {
            lv_region = RegionFromId(77);
        }
        lv_zerg_units = UnitGroup(null, 7, lv_region, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 80);
        if ((lp_force == true)) {
            UnitGroupAddUnitGroup(lv_zerg_units, UnitGroup(null, 7, RegionCircle(lp_point, 25.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        }

        auto739B6D3A_g = lv_zerg_units;
        auto739B6D3A_u = UnitGroupCount(auto739B6D3A_g, c_unitCountAll);
        for (;; auto739B6D3A_u -= 1) {
            auto739B6D3A_var = UnitGroupUnitFromEnd(auto739B6D3A_g, auto739B6D3A_u);
            if (auto739B6D3A_var == null) { break; }
            if (((UnitGetType(auto739B6D3A_var) == "Drone2") || (UnitGetType(auto739B6D3A_var) == "InfestorZergHex2") || (UnitGetType(auto739B6D3A_var) == "HydraliskLevel2") || (UnitGetType(auto739B6D3A_var) == "WizardMinion") || (UnitGetType(auto739B6D3A_var) == "Ravator") || (UnitGetType(auto739B6D3A_var) == "Overlord") || (UnitGetType(auto739B6D3A_var) == "KerriganVoid") || (UnitGetType(auto739B6D3A_var) == "Viper") || (UnitGetType(auto739B6D3A_var) == "Overseer") || (UnitGroupHasUnit(gv_f2_unit_group, auto739B6D3A_var) == true))) {
                UnitGroupRemove(lv_zerg_units, auto739B6D3A_var);
            }

        }
        UnitGroupIssueOrder(lv_zerg_units, OrderTargetingPoint(AbilityCommand("attack", 0), lp_point), c_orderQueueReplace);
        UnitGroupAddUnitGroup(gv_f2_unit_group, lv_zerg_units);
        gv_f2_cooldown = 10;
    }

}

bool gf_unit_is_in_zerg_highground (unit lp_u) {
    // Variable Declarations
    int lv_i;
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    if ((libNtve_gf_UnitInRegion(lp_u, RegionFromName("zerg highground")) == true)) {
        lv_r = true;
    }

    return lv_r;
}

void gf_scout_bonus_gasses () {
    // Variable Declarations
    int lv_i;
    unit lv_unit;
    point lv_point;
    int lv_closest_player_position;
    point lv_closest_player_position_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((gf_is_3v3() == false) && (lv_i <= 12)) {
        if ((gv_bonus_gasses[lv_i].lv_status != "blocked")) {
            lv_point = gv_bonus_gasses[lv_i].lv_army_point;
            lv_closest_player_position = gf_get_closest_alive_player_position(lv_point);
            lv_closest_player_position_point = PointFromName(("Zerg Rally " + IntToString(lv_closest_player_position)));
            lv_unit = UnitGroupClosestToPoint(UnitGroup("Slowling", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_point);
            UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
            UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_closest_player_position_point), c_orderQueueAddToEnd);
        }

        lv_i += 1;
    }
}

void gf_attack_a_bonus_gas () {
    // Variable Declarations
    int lv_taken_gas;
    unitgroup lv_strikelings;
    point lv_point;
    int lv_closest_player_position;
    point lv_closest_player_position_point;
    unitgroup lv_infestors;

    // Automatic Variable Declarations
    unitgroup auto90FD6113_g;
    int auto90FD6113_u;
    unit auto90FD6113_var;

    // Variable Initialization
    lv_taken_gas = gf_get_random_taken_gas();
    lv_strikelings = UnitGroupEmpty();
    lv_infestors = UnitGroupEmpty();

    // Implementation
    if ((gf_is_3v3() == false) && (lv_taken_gas != 0)) {
        lv_point = gv_bonus_gasses[lv_taken_gas].lv_army_point;
        lv_closest_player_position = gf_get_closest_alive_player_position(lv_point);
        lv_closest_player_position_point = PointFromName(("Zerg Rally " + IntToString(lv_closest_player_position)));
        lv_strikelings = UnitGroup("Strikeling", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_infestors = UnitGroup("InfestorZergHex2", 7, RegionCircle(lv_point, 43.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto90FD6113_g = lv_infestors;
        auto90FD6113_u = UnitGroupCount(auto90FD6113_g, c_unitCountAll);
        for (;; auto90FD6113_u -= 1) {
            auto90FD6113_var = UnitGroupUnitFromEnd(auto90FD6113_g, auto90FD6113_u);
            if (auto90FD6113_var == null) { break; }
            if ((UnitGetPropertyFixed(auto90FD6113_var, c_unitPropLife, c_unitPropCurrent) < 180.0) && (UnitGetPropertyFixed(auto90FD6113_var, c_unitPropEnergy, c_unitPropCurrent) >= 400.0) && (UnitOrderCount(auto90FD6113_var) > 0)) {
                UnitGroupRemove(lv_infestors, auto90FD6113_var);
            }

        }
        if ((UnitGroupCount(lv_infestors, c_unitCountAlive) > 0)) {
            UnitGroupIssueOrder(lv_infestors, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
        }

        if ((UnitGroupCount(lv_strikelings, c_unitCountAlive) < 25)) {
            UnitGroupIssueOrder(UnitGroupSearch("Slowling", 7, lv_point, 50.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 15), OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
        }

        UnitGroupIssueOrder(lv_strikelings, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
        UnitGroupIssueOrder(lv_strikelings, OrderTargetingPoint(AbilityCommand("attack", 0), lv_closest_player_position_point), c_orderQueueAddToEnd);
    }

}

void gf_refresh_bonus_gasses_data () {
    // Variable Declarations
    int lv_i;
    int lv_pq;
    unit lv_unit;
    point lv_point;
    int lv_closest_player_position;
    point lv_closest_player_position_point;
    unitgroup lv_group;

    // Automatic Variable Declarations
    unitgroup autoDA1DB768_g;
    int autoDA1DB768_u;
    unit autoDA1DB768_var;
    string auto46DA1639_val;
    unitgroup auto6880AA63_g;
    int auto6880AA63_u;
    unit auto6880AA63_var;
    string auto2F29AD0D_val;

    // Variable Initialization
    lv_i = 1;
    lv_pq = 1;
    lv_group = UnitGroupEmpty();

    // Implementation
    while ((lv_i <= 6)) {
        lv_point = PointFromName(("Bonus Gas L " + IntToString(lv_i)));
        gv_bonus_gasses[lv_pq].lv_army_point = lv_point;
        gv_bonus_gasses[lv_pq].lv_player = gf_get_closest_alive_player_position(lv_point);
        lv_group = UnitGroup(null, c_playerAny, RegionCircle(lv_point, 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDA1DB768_g = lv_group;
        autoDA1DB768_u = UnitGroupCount(autoDA1DB768_g, c_unitCountAll);
        for (;; autoDA1DB768_u -= 1) {
            autoDA1DB768_var = UnitGroupUnitFromEnd(autoDA1DB768_g, autoDA1DB768_u);
            if (autoDA1DB768_var == null) { break; }
            auto46DA1639_val = UnitGetType(autoDA1DB768_var);
            if (auto46DA1639_val == "VespeneGeyser") {
                gv_bonus_gasses[lv_pq].lv_status = "free";
            }
            else if (auto46DA1639_val == "GeyserBlocker") {
                gv_bonus_gasses[lv_pq].lv_status = "blocked";
            }
            else if (auto46DA1639_val == "Refinery2") {
                gv_bonus_gasses[lv_pq].lv_status = "taken";
            }
            else if (auto46DA1639_val == "UpgradedRefinery") {
                gv_bonus_gasses[lv_pq].lv_status = "taken";
            }
            else {
            }
        }
        lv_pq += 1;
        lv_point = PointFromName(("Bonus Gas R " + IntToString(lv_i)));
        gv_bonus_gasses[lv_pq].lv_army_point = lv_point;
        gv_bonus_gasses[lv_pq].lv_player = gf_get_closest_alive_player_position(lv_point);
        lv_group = UnitGroup(null, c_playerAny, RegionCircle(lv_point, 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6880AA63_g = lv_group;
        auto6880AA63_u = UnitGroupCount(auto6880AA63_g, c_unitCountAll);
        for (;; auto6880AA63_u -= 1) {
            auto6880AA63_var = UnitGroupUnitFromEnd(auto6880AA63_g, auto6880AA63_u);
            if (auto6880AA63_var == null) { break; }
            auto2F29AD0D_val = UnitGetType(auto6880AA63_var);
            if (auto2F29AD0D_val == "VespeneGeyser") {
                gv_bonus_gasses[lv_pq].lv_status = "free";
            }
            else if (auto2F29AD0D_val == "GeyserBlocker") {
                gv_bonus_gasses[lv_pq].lv_status = "blocked";
            }
            else if (auto2F29AD0D_val == "Refinery2") {
                gv_bonus_gasses[lv_pq].lv_status = "taken";
            }
            else if (auto2F29AD0D_val == "UpgradedRefinery") {
                gv_bonus_gasses[lv_pq].lv_status = "taken";
            }
            else {
            }
        }
        lv_pq += 1;
        lv_i += 1;
    }
}

int gf_get_random_taken_gas () {
    // Variable Declarations
    int lv_i;
    int[13] lv_tmp_arr;
    int lv_tmp_arr_cnt;
    int lv_return;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 12)) {
        if ((gv_bonus_gasses[lv_i].lv_status == "taken")) {
            lv_tmp_arr_cnt += 1;
            lv_tmp_arr[lv_tmp_arr_cnt] = lv_i;
        }

        lv_i += 1;
    }
    if ((lv_tmp_arr_cnt != 0)) {
        if ((lv_tmp_arr_cnt == 1)) {
            lv_return = lv_tmp_arr[1];
        }
        else {
            lv_return = lv_tmp_arr[RandomInt(1, lv_tmp_arr_cnt)];
        }
    }

    return lv_return;
}

void gf_update_pet_score () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameGetMissionTime() >= (1 + (5 * 60))) && (GameGetMissionTime() < (1 + (26 * 60)))) {
        while ((lv_i <= 6)) {
            if ((gv_players[lv_i].lv_alive == true)) {
                gv_players[lv_i].lv_pet_score += 1;
            }

            lv_i += 1;
        }
        lv_i = 1;
    }

    if ((GameGetMissionTime() == (1 + (26 * 60)))) {
        while ((lv_i <= 6)) {
            if ((gv_players[lv_i].lv_alive == true) && (gv_players[lv_i].lv_pet_score > 0)) {
                gv_players[lv_i].lv_pet_score = 0;
            }

            lv_i += 1;
        }
        lv_i = 1;
    }

}

void gf_define_neighbour_positions () {
    // Automatic Variable Declarations
    // Implementation
    gv_neighbour_positions[1].lv_left = 4;
    gv_neighbour_positions[1].lv_right = 2;
    gv_neighbour_positions[2].lv_left = 1;
    gv_neighbour_positions[2].lv_right = 3;
    gv_neighbour_positions[3].lv_left = 2;
    gv_neighbour_positions[3].lv_right = 6;
    gv_neighbour_positions[4].lv_left = 5;
    gv_neighbour_positions[4].lv_right = 1;
    gv_neighbour_positions[5].lv_left = 6;
    gv_neighbour_positions[5].lv_right = 4;
    gv_neighbour_positions[6].lv_left = 3;
    gv_neighbour_positions[6].lv_right = 5;
}

bool gf_is_weak (int lp_player) {
    // Variable Declarations
    bool lv_has_armory;
    int lv_refinery_count;
    int lv_time;
    bool lv_r;

    // Automatic Variable Declarations
    unitgroup auto09959928_g;
    int auto09959928_u;
    unit auto09959928_var;

    // Variable Initialization
    lv_time = FixedToInt(GameGetMissionTime());

    // Implementation
    auto09959928_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto09959928_u = UnitGroupCount(auto09959928_g, c_unitCountAll);
    for (;; auto09959928_u -= 1) {
        auto09959928_var = UnitGroupUnitFromEnd(auto09959928_g, auto09959928_u);
        if (auto09959928_var == null) { break; }
        if (((UnitGetType(auto09959928_var) == "Refinery2") || (UnitGetType(auto09959928_var) == "UpgradedRefinery") || (UnitGetType(auto09959928_var) == "GasVent"))) {
            lv_refinery_count += 1;
        }

        if ((UnitGetType(auto09959928_var) == "Armory2")) {
            lv_has_armory = true;
        }

    }
    if ((lv_time < (11 * 60))) {
        if ((lv_refinery_count <= 1)) {
            lv_r = true;
        }

    }
    else {
        if ((lv_time < (20 * 60))) {
            if ((lv_refinery_count <= 2)) {
                lv_r = true;
            }

        }
        else {
            if ((lv_refinery_count <= 2) && (lv_has_armory == false)) {
                lv_r = true;
            }

        }
    }
    return lv_r;
}

bool gf_has_neighbour_isnt_weak (int lp_player) {
    // Variable Declarations
    bool lv_r;
    int lv_left;
    int lv_right;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_left = gv_neighbour_positions[gv_players[lp_player].lv_position].lv_left;
    lv_right = gv_neighbour_positions[gv_players[lp_player].lv_position].lv_right;
    if (((gv_positions[lv_left] != 0) || (gv_positions[lv_right] != 0))) {
        if ((gv_positions[lv_left] != 0)) {
            if ((gv_players[gv_positions[lv_left]].lv_alive == true) && (gv_weak_players[gv_positions[lv_left]].lv_is_weak == false)) {
                lv_r = true;
            }

        }

        if ((gv_positions[lv_right] != 0)) {
            if ((gv_players[gv_positions[lv_right]].lv_alive == true) && (gv_weak_players[gv_positions[lv_right]].lv_is_weak == false)) {
                lv_r = true;
            }

        }

    }

    return lv_r;
}

int gf_get_neighbour_isnt_weak (int lp_player) {
    // Variable Declarations
    int lv_r;
    int lv_left;
    bool lv_left_isnt_weak;
    int lv_right;
    bool lv_right_isnt_weak;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_left = gv_neighbour_positions[gv_players[lp_player].lv_position].lv_left;
    lv_right = gv_neighbour_positions[gv_players[lp_player].lv_position].lv_right;
    if (((gv_positions[lv_left] != 0) || (gv_positions[lv_right] != 0))) {
        if ((gv_positions[lv_left] != 0)) {
            if ((gv_players[gv_positions[lv_left]].lv_alive == true) && (gv_weak_players[gv_positions[lv_left]].lv_is_weak == false)) {
                lv_left_isnt_weak = true;
            }

        }

        if ((gv_positions[lv_right] != 0)) {
            if ((gv_players[gv_positions[lv_right]].lv_alive == true) && (gv_weak_players[gv_positions[lv_right]].lv_is_weak == false)) {
                lv_right_isnt_weak = true;
            }

        }

    }

    if ((lv_left_isnt_weak == true) && (lv_right_isnt_weak == true)) {
        if ((RandomInt(1, 2) == 1)) {
            lv_r = gv_positions[lv_left];
        }
        else {
            lv_r = gv_positions[lv_right];
        }
    }
    else {
        if ((lv_left_isnt_weak == true) && (lv_right_isnt_weak == false)) {
            lv_r = gv_positions[lv_left];
        }
        else {
            if ((lv_left_isnt_weak == false) && (lv_right_isnt_weak == true)) {
                lv_r = gv_positions[lv_right];
            }

        }
    }
    return lv_r;
}

void gf_attack_neighbour (int lp_origin, int lp_target) {
    // Variable Declarations
    int lv_origin_position;
    int lv_target_position;
    unitgroup lv_unit_group;
    string lv_target_angle;

    // Automatic Variable Declarations
    unitgroup auto577F3D58_g;
    int auto577F3D58_u;
    unit auto577F3D58_var;

    // Variable Initialization
    lv_origin_position = gv_players[lp_origin].lv_position;
    lv_target_position = gv_players[lp_target].lv_position;
    lv_unit_group = UnitGroupEmpty();
    lv_target_angle = gf_get_angle_of_neighbour(lp_origin, lp_target);

    // Implementation
    UnitGroupAddUnitGroup(lv_unit_group, UnitGroup(null, 7, RegionCircle(PointFromName(("Hydra " + IntToString(lv_origin_position))), 21.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_unit_group, UnitGroup(null, 7, RegionFromName(("zergbase " + IntToString(lv_origin_position))), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto577F3D58_g = lv_unit_group;
    auto577F3D58_u = UnitGroupCount(auto577F3D58_g, c_unitCountAll);
    for (;; auto577F3D58_u -= 1) {
        auto577F3D58_var = UnitGroupUnitFromEnd(auto577F3D58_g, auto577F3D58_u);
        if (auto577F3D58_var == null) { break; }
        if (((UnitGetType(auto577F3D58_var) == "Drone2") || (UnitGetType(auto577F3D58_var) == "HydraliskLevel2") || (UnitGetType(auto577F3D58_var) == "InfestorZergHex2"))) {
            UnitGroupRemove(lv_unit_group, auto577F3D58_var);
        }

    }
    UnitGroupIssueOrder(lv_unit_group, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName((("Zerg Flank Rally " + (lv_target_angle + " Pre ")) + IntToString(lv_target_position)))), c_orderQueueReplace);
    UnitGroupIssueOrder(lv_unit_group, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName((("Zerg Flank Rally " + (lv_target_angle + " ")) + IntToString(lv_target_position)))), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(lv_unit_group, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Rally " + IntToString(lv_target_position)))), c_orderQueueAddToEnd);
}

string gf_get_angle_of_neighbour (int lp_origin, int lp_target) {
    // Variable Declarations
    string lv_r;

    // Automatic Variable Declarations
    int auto212A91F9_val;
    int autoBE1FAC82_val;
    int auto177BAA4A_val;
    int auto71F54F3E_val;
    int auto9A9CE5F3_val;
    int auto2C4B9EDE_val;
    int autoB3C38FDA_val;

    // Variable Initialization
    lv_r = "";

    // Implementation
    auto212A91F9_val = lp_origin;
    if (auto212A91F9_val == 1) {
        autoBE1FAC82_val = lp_target;
        if (autoBE1FAC82_val == 2) {
            lv_r = "Left";
        }
        else if (autoBE1FAC82_val == 4) {
            lv_r = "Right";
        }
        else {
        }
    }
    else if (auto212A91F9_val == 2) {
        auto177BAA4A_val = lp_target;
        if (auto177BAA4A_val == 1) {
            lv_r = "Right";
        }
        else if (auto177BAA4A_val == 3) {
            lv_r = "Left";
        }
        else {
        }
    }
    else if (auto212A91F9_val == 3) {
        auto71F54F3E_val = lp_target;
        if (auto71F54F3E_val == 2) {
            lv_r = "Right";
        }
        else if (auto71F54F3E_val == 6) {
            lv_r = "Left";
        }
        else {
        }
    }
    else if (auto212A91F9_val == 4) {
        auto9A9CE5F3_val = lp_target;
        if (auto9A9CE5F3_val == 1) {
            lv_r = "Left";
        }
        else if (auto9A9CE5F3_val == 5) {
            lv_r = "Right";
        }
        else {
        }
    }
    else if (auto212A91F9_val == 5) {
        auto2C4B9EDE_val = lp_target;
        if (auto2C4B9EDE_val == 4) {
            lv_r = "Left";
        }
        else if (auto2C4B9EDE_val == 6) {
            lv_r = "Right";
        }
        else {
        }
    }
    else if (auto212A91F9_val == 6) {
        autoB3C38FDA_val = lp_target;
        if (autoB3C38FDA_val == 3) {
            lv_r = "Right";
        }
        else if (autoB3C38FDA_val == 5) {
            lv_r = "Left";
        }
        else {
        }
    }
    else {
    }
    return lv_r;
}

void gf_handle_dead_player_areas () {
    // Automatic Variable Declarations
    // Implementation
    if ((GameGetMissionTime() >= (1 + (7 * 60)))) {
        if ((gv_f2_cooldown == 0)) {
            if ((gv_f2_check_cooldown == 0) && (UnitGroupCount(gv_f2_unit_group, c_unitCountAlive) < 100)) {
                gv_f2_check_cooldown = 5;
                if ((gv_heatmap_top_threat != 0)) {
                    gf_f2_point(gv_heatmap_top_threat_position, false);
                }

            }
            else {
                gv_f2_check_cooldown = (gv_f2_check_cooldown - 1);
                if (((FixedToInt(GameGetMissionTime()) / 60) == 0)) {
                    gv_f2_unit_group = UnitGroupEmpty();
                }

            }
        }
        else {
            gv_f2_cooldown = (gv_f2_cooldown - 1);
            if ((gv_f2_cooldown < 0)) {
                gv_f2_cooldown = 0;
            }

        }
    }

}

void gf_attack_highground_invaders () {
    // Variable Declarations
    unitgroup lv_defender_group;

    // Automatic Variable Declarations
    unitgroup autoE4CD9D4C_g;
    int autoE4CD9D4C_u;
    unit autoE4CD9D4C_var;

    // Variable Initialization
    lv_defender_group = UnitGroupEmpty();

    // Implementation
    if ((gv_highground_invader_count > 0)) {
        lv_defender_group = UnitGroup(null, 7, RegionCircle(UnitGroupCenterOfGroup(gv_highground_invaders), 65.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE4CD9D4C_g = lv_defender_group;
        autoE4CD9D4C_u = UnitGroupCount(autoE4CD9D4C_g, c_unitCountAll);
        for (;; autoE4CD9D4C_u -= 1) {
            autoE4CD9D4C_var = UnitGroupUnitFromEnd(autoE4CD9D4C_g, autoE4CD9D4C_u);
            if (autoE4CD9D4C_var == null) { break; }
            if (((UnitGetType(autoE4CD9D4C_var) == "Drone2") || (UnitGetType(autoE4CD9D4C_var) == "InfestorZergHex2") || (UnitGetType(autoE4CD9D4C_var) == "HydraliskLevel2") || (RegionContainsPoint(RegionFromId(1), UnitGetGoalPosition(autoE4CD9D4C_var)) == true))) {
                UnitGroupRemove(lv_defender_group, autoE4CD9D4C_var);
            }

        }
        if ((UnitGroupCount(lv_defender_group, c_unitCountAlive) > 0)) {
            UnitGroupIssueOrder(lv_defender_group, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGroupCenterOfGroup(gv_highground_invaders)), c_orderQueueReplace);
        }

    }

}

void gf_flush_special_unit_array () {
    // Automatic Variable Declarations
    unitgroup auto64E1031C_g;
    int auto64E1031C_u;
    unit auto64E1031C_var;

    // Implementation
    gv_special_unit_count = 0;
    auto64E1031C_g = gv_special_units;
    auto64E1031C_u = UnitGroupCount(auto64E1031C_g, c_unitCountAll);
    for (;; auto64E1031C_u -= 1) {
        auto64E1031C_var = UnitGroupUnitFromEnd(auto64E1031C_g, auto64E1031C_u);
        if (auto64E1031C_var == null) { break; }
        gv_special_unit_count += 1;
        gv_special_unit_array[gv_special_unit_count].lv_birthtime = FixedToInt(GameGetMissionTime());
        gv_special_unit_array[gv_special_unit_count].lv_unit = auto64E1031C_var;
    }
}

void gf_check_unit_age () {
    // Variable Declarations
    int lv_i;
    fixed lv_time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;
    lv_time = GameGetMissionTime();

    // Implementation
    while ((lv_i <= gv_special_unit_count)) {
        if ((UnitIsAlive(gv_special_unit_array[lv_i].lv_unit) == true) && ((FixedToInt(lv_time) - gv_special_unit_array[lv_i].lv_birthtime) > 30)) {
            gv_special_unit_array[lv_i].lv_birthdays += 1;
            if ((gv_special_unit_array[lv_i].lv_birthdays >= 2) && (UnitGroupHasUnit(gv_old_special_units, gv_special_unit_array[lv_i].lv_unit) == false)) {
                UnitGroupAdd(gv_old_special_units, gv_special_unit_array[lv_i].lv_unit);
            }

        }

        lv_i += 1;
    }
}

void gf_order_old_units () {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_flip_coin() == 1)) {
        UnitGroupIssueOrder(gv_old_special_units, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Zerg Flank Rally Left Pre " + IntToString(gv_players[gf_ai_get_strongest_player()].lv_position)))), c_orderQueueReplace);
    }
    else {
        UnitGroupIssueOrder(gv_old_special_units, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Zerg Flank Rally Right Pre " + IntToString(gv_players[gf_ai_get_strongest_player()].lv_position)))), c_orderQueueReplace);
    }
    UnitGroupIssueOrder(gv_old_special_units, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Rally " + IntToString(gv_players[gf_ai_get_strongest_player()].lv_position)))), c_orderQueueAddToEnd);
}

void gf_observe_or_kill_unit (unit lp_unit) {
    // Variable Declarations
    int lv_unit_group_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit_group_index = gf_get_observed_unit_index(lp_unit);

    // Implementation
    if ((lv_unit_group_index == 0)) {
        UnitGroupAdd(gv_observed_units[1], lp_unit);
    }
    else {
        if ((lv_unit_group_index < 16)) {
            UnitGroupRemove(gv_observed_units[lv_unit_group_index], lp_unit);
            UnitGroupAdd(gv_observed_units[(lv_unit_group_index + 1)], lp_unit);
        }
        else {
            UnitGroupRemove(gv_observed_units[lv_unit_group_index], lp_unit);
            UnitKill(lp_unit);
        }
    }
}

int gf_get_observed_unit_index (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    int lv_t;
    int lv_return;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 16)) {
        if ((UnitGroupHasUnit(gv_observed_units[lv_i], lp_unit) == true)) {
            lv_t = (lv_i + 0);
            break;
        }

        lv_i = (lv_i + 1);
    }
    lv_return = lv_t;
    return lv_return;
}

void gf_try_f2_mid () {
    // Variable Declarations
    unitgroup lv_unit_group;

    // Automatic Variable Declarations
    unitgroup autoAF30D778_g;
    int autoAF30D778_u;
    unit autoAF30D778_var;
    unitgroup autoB2BC6A28_g;
    int autoB2BC6A28_u;
    unit autoB2BC6A28_var;
    unitgroup autoDFCEFB0F_g;
    int autoDFCEFB0F_u;
    unit autoDFCEFB0F_var;
    unitgroup auto217E3E50_g;
    int auto217E3E50_u;
    unit auto217E3E50_var;

    // Variable Initialization
    lv_unit_group = UnitGroupEmpty();

    // Implementation
    if ((gv_positions[2] != 0) && (gv_players[gf_get_player_at_position(2)].lv_alive == true) && (gv_players[gf_get_player_at_position(2)].lv_support_type != "Raynor")) {
        if ((gv_positions[1] != 0) && (gv_players[gf_get_player_at_position(1)].lv_alive == true)) {
            lv_unit_group = UnitGroupEmpty();
            UnitGroupAddUnitGroup(lv_unit_group, UnitGroup(null, 7, RegionCircle(RegionGetCenter(RegionFromId(18)), 30.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            autoAF30D778_g = lv_unit_group;
            autoAF30D778_u = UnitGroupCount(autoAF30D778_g, c_unitCountAll);
            for (;; autoAF30D778_u -= 1) {
                autoAF30D778_var = UnitGroupUnitFromEnd(autoAF30D778_g, autoAF30D778_u);
                if (autoAF30D778_var == null) { break; }
                if (((UnitGetType(autoAF30D778_var) == "Drone2") || (UnitGetType(autoAF30D778_var) == "HydraliskLevel2") || (UnitGetType(autoAF30D778_var) == "InfestorZergHex2"))) {
                    UnitGroupRemove(lv_unit_group, autoAF30D778_var);
                }

            }
            UnitGroupIssueOrder(lv_unit_group, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Flank Rally Left Pre " + IntToString(2)))), c_orderQueueReplace);
            UnitGroupIssueOrder(lv_unit_group, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Rally " + IntToString(2)))), c_orderQueueAddToEnd);
        }

        if ((gv_positions[3] != 0) && (gv_players[gf_get_player_at_position(3)].lv_alive == true)) {
            lv_unit_group = UnitGroupEmpty();
            UnitGroupAddUnitGroup(lv_unit_group, UnitGroup(null, 7, RegionCircle(RegionGetCenter(RegionFromId(17)), 30.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            autoB2BC6A28_g = lv_unit_group;
            autoB2BC6A28_u = UnitGroupCount(autoB2BC6A28_g, c_unitCountAll);
            for (;; autoB2BC6A28_u -= 1) {
                autoB2BC6A28_var = UnitGroupUnitFromEnd(autoB2BC6A28_g, autoB2BC6A28_u);
                if (autoB2BC6A28_var == null) { break; }
                if (((UnitGetType(autoB2BC6A28_var) == "Drone2") || (UnitGetType(autoB2BC6A28_var) == "HydraliskLevel2") || (UnitGetType(autoB2BC6A28_var) == "InfestorZergHex2"))) {
                    UnitGroupRemove(lv_unit_group, autoB2BC6A28_var);
                }

            }
            UnitGroupIssueOrder(lv_unit_group, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Flank Rally Right Pre " + IntToString(2)))), c_orderQueueReplace);
            UnitGroupIssueOrder(lv_unit_group, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Rally " + IntToString(2)))), c_orderQueueAddToEnd);
        }

    }

    if ((gv_positions[5] != 0) && (gv_players[gf_get_player_at_position(5)].lv_alive == true) && (gv_players[gf_get_player_at_position(5)].lv_support_type != "Raynor")) {
        if ((gv_positions[4] != 0) && (gv_players[gf_get_player_at_position(4)].lv_alive == true)) {
            lv_unit_group = UnitGroupEmpty();
            UnitGroupAddUnitGroup(lv_unit_group, UnitGroup(null, 7, RegionCircle(RegionGetCenter(RegionFromId(19)), 30.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            autoDFCEFB0F_g = lv_unit_group;
            autoDFCEFB0F_u = UnitGroupCount(autoDFCEFB0F_g, c_unitCountAll);
            for (;; autoDFCEFB0F_u -= 1) {
                autoDFCEFB0F_var = UnitGroupUnitFromEnd(autoDFCEFB0F_g, autoDFCEFB0F_u);
                if (autoDFCEFB0F_var == null) { break; }
                if (((UnitGetType(autoDFCEFB0F_var) == "Drone2") || (UnitGetType(autoDFCEFB0F_var) == "HydraliskLevel2") || (UnitGetType(autoDFCEFB0F_var) == "InfestorZergHex2"))) {
                    UnitGroupRemove(lv_unit_group, autoDFCEFB0F_var);
                }

            }
            UnitGroupIssueOrder(lv_unit_group, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Flank Rally Right Pre " + IntToString(5)))), c_orderQueueReplace);
            UnitGroupIssueOrder(lv_unit_group, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Rally " + IntToString(5)))), c_orderQueueAddToEnd);
        }

        if ((gv_positions[6] != 0) && (gv_players[gf_get_player_at_position(6)].lv_alive == true)) {
            lv_unit_group = UnitGroupEmpty();
            UnitGroupAddUnitGroup(lv_unit_group, UnitGroup(null, 7, RegionCircle(RegionGetCenter(RegionFromId(16)), 30.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            auto217E3E50_g = lv_unit_group;
            auto217E3E50_u = UnitGroupCount(auto217E3E50_g, c_unitCountAll);
            for (;; auto217E3E50_u -= 1) {
                auto217E3E50_var = UnitGroupUnitFromEnd(auto217E3E50_g, auto217E3E50_u);
                if (auto217E3E50_var == null) { break; }
                if (((UnitGetType(auto217E3E50_var) == "Drone2") || (UnitGetType(auto217E3E50_var) == "HydraliskLevel2") || (UnitGetType(auto217E3E50_var) == "InfestorZergHex2"))) {
                    UnitGroupRemove(lv_unit_group, auto217E3E50_var);
                }

            }
            UnitGroupIssueOrder(lv_unit_group, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Flank Rally Left Pre " + IntToString(5)))), c_orderQueueReplace);
            UnitGroupIssueOrder(lv_unit_group, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Rally " + IntToString(5)))), c_orderQueueAddToEnd);
        }

    }

    gv_f2_tick = (gv_f2_tick + 1);
}

void gf_define_hives () {
    // Variable Declarations
    unitgroup lv_grp;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto2D23B721_g;
    int auto2D23B721_u;
    unit auto2D23B721_var;

    // Variable Initialization
    lv_grp = UnitGroupEmpty();
    lv_i = 1;

    // Implementation
    lv_grp = UnitGroup("Hive2", c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2);
    auto2D23B721_g = lv_grp;
    auto2D23B721_u = UnitGroupCount(auto2D23B721_g, c_unitCountAll);
    for (;; auto2D23B721_u -= 1) {
        auto2D23B721_var = UnitGroupUnitFromEnd(auto2D23B721_g, auto2D23B721_u);
        if (auto2D23B721_var == null) { break; }
        gv_hives[lv_i].lv_unit = auto2D23B721_var;
        gv_hives[lv_i].lv_damage = 0;
        lv_i = (lv_i + 1);
    }
}

unit gf_get_hive () {
    // Variable Declarations
    unitgroup lv_u_group;
    unit lv_return;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u_group = UnitGroup("Hive2", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Implementation
    lv_return = UnitGroupRandomUnit(lv_u_group, c_unitCountAlive);
    return lv_return;
}

unitgroup gf_get_hives () {
    // Variable Declarations
    unitgroup lv_u_group;
    unit lv_return;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u_group = UnitGroup("Hive2", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Implementation
    return lv_u_group;
}

int gf_get_hive_g_int (unit lp_unit) {
    // Variable Declarations
    int lv_r;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 2)) {
        if ((lp_unit == gv_hives[lv_i].lv_unit)) {
            lv_r = lv_i;
            break;
        }

        lv_i += 1;
    }
    return lv_r;
}

void gf_HiveDamageRecieved (fixed lp_damage, unit lp_hive) {
    // Variable Declarations
    fixed lv_hmh;
    fixed lv_hive_max_hp;
    int lv_total_damage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hmh = 2500.0;

    // Implementation
    if ((gv_mutator_mecha_buildings == true)) {
        lv_hmh *= 2.0;
    }

    lv_hive_max_hp = (lv_hmh - gv_hives[gf_get_hive_g_int(lp_hive)].lv_damage);
    gv_hives[gf_get_hive_g_int(lp_hive)].lv_damage += lp_damage;
    UnitSetPropertyFixed(lp_hive, c_unitPropLifeMax, (lv_hive_max_hp - lp_damage));
}

void gf_define_hydra_variables () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        if ((gv_positions[lv_i] != 0) && (gv_players[gv_positions[lv_i]].lv_alive == true)) {
            gv_hydra_groups[lv_i].lv_point = PointFromName(("Hydra " + IntToString(lv_i)));
            gv_hydra_groups[lv_i].lv_pointb = PointFromName(("Hydra B " + IntToString(lv_i)));
            gv_hydra_groups[lv_i].lv_nest = UnitGroupRandomUnit(UnitGroup("Nest2", 7, RegionCircle(PointFromName(("Hydra " + IntToString(lv_i))), 4.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive);
            gv_hydra_groups[lv_i].lv_stock = 1;
            if ((gv_difficulty >= 5)) {
                gv_hydra_groups[lv_i].lv_stock = (gv_hydra_groups[lv_i].lv_stock + 1);
            }

            if ((gv_difficulty >= 8)) {
                gv_hydra_groups[lv_i].lv_stock = (gv_hydra_groups[lv_i].lv_stock + 1);
            }

        }
        else {
            gv_hydra_groups[lv_i].lv_point = PointFromName(("Hydra " + IntToString(lv_i)));
        }
        lv_i += 1;
    }
    gv_hydra_groups[1].lv_nestb = UnitFromId(1209292539);
    gv_hydra_groups[2].lv_nestb = UnitFromId(1760904452);
    gv_hydra_groups[3].lv_nestb = UnitFromId(1574508242);
    gv_hydra_groups[4].lv_nestb = UnitFromId(815386307);
    gv_hydra_groups[5].lv_nestb = UnitFromId(841479308);
    gv_hydra_groups[6].lv_nestb = UnitFromId(799451442);
}

void gf_try_buy_hydras () {
    // Variable Declarations
    int lv_i;
    int lv_payback;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;
    lv_payback = 10;

    // Implementation
    if ((gv_difficulty > 2)) {
        lv_payback += 10;
    }

    if ((gv_difficulty > 4)) {
        lv_payback += 10;
    }

    if ((gv_difficulty > 6)) {
        lv_payback += 20;
    }

    while ((lv_i <= 6)) {
        if ((gv_players[gv_positions[lv_i]].lv_alive == true) && (gv_hydra_groups[lv_i].lv_nest != null) && (UnitGroupCount(gv_hydra_groups[lv_i].lv_units, c_unitCountAlive) < gv_hydra_groups[lv_i].lv_stock) && (UnitOrderCount(gv_hydra_groups[lv_i].lv_nest) == 0)) {
            PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperAdd, lv_payback);
            UnitIssueOrder(gv_hydra_groups[lv_i].lv_nest, OrderTargetingPoint(AbilityCommand("Rally", 0), gv_hydra_groups[lv_i].lv_point), c_orderQueueReplace);
            UnitIssueOrder(gv_hydra_groups[lv_i].lv_nest, Order(AbilityCommand("ZergTrain", 1)), c_orderQueueAddToEnd);
        }

        lv_i += 1;
    }
}

void gf_attack_point_with_hydra_group (point lp_point, int lp_groupindex) {
    // Variable Declarations
    unitgroup lv_u_group;

    // Automatic Variable Declarations
    unitgroup autoE44F639C_g;
    int autoE44F639C_u;
    unit autoE44F639C_var;

    // Variable Initialization
    lv_u_group = UnitGroupEmpty();

    // Implementation
    if ((gv_hydra_groups[lp_groupindex].lv_nest != null) && (UnitGroupCount(gv_hydra_groups[lp_groupindex].lv_units, c_unitCountAlive) > 0)) {
        UnitGroupAddUnitGroup(lv_u_group, gv_hydra_groups[lp_groupindex].lv_units);
    }

    if ((lp_groupindex <= 3)) {
        if ((UnitGroupCount(gv_hydras_north, c_unitCountAlive) > 0)) {
            UnitGroupAddUnitGroup(lv_u_group, gv_hydras_north);
        }

    }
    else {
        if ((UnitGroupCount(gv_hydras_south, c_unitCountAlive) > 0)) {
            UnitGroupAddUnitGroup(lv_u_group, gv_hydras_south);
        }

    }
    autoE44F639C_g = lv_u_group;
    autoE44F639C_u = UnitGroupCount(autoE44F639C_g, c_unitCountAll);
    for (;; autoE44F639C_u -= 1) {
        autoE44F639C_var = UnitGroupUnitFromEnd(autoE44F639C_g, autoE44F639C_u);
        if (autoE44F639C_var == null) { break; }
        if ((UnitGetPropertyInt(autoE44F639C_var, c_unitPropLifePercent, c_unitPropCurrent) < 60)) {
            UnitGroupRemove(lv_u_group, autoE44F639C_var);
        }

    }
    if ((UnitGroupCount(lv_u_group, c_unitCountAlive) > 0)) {
        UnitGroupIssueOrder(lv_u_group, OrderTargetingPoint(AbilityCommand("attack", 0), lp_point), c_orderQueueReplace);
    }

}

void gf_send_hydra_home (unit lp_hydra) {
    // Variable Declarations
    point lv_p;
    int lv_groupindex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupindex = gf_get_hydras_groupindex(lp_hydra);

    // Implementation
    if ((lv_groupindex != 0)) {
        lv_p = gv_hydra_groups[lv_groupindex].lv_point;
    }
    else {
        if ((UnitGroupHasUnit(gv_hydras_north, lp_hydra) == true)) {
            lv_p = PointFromId(1352576071);
        }
        else {
            lv_p = PointFromId(1723757530);
        }
    }
    UnitIssueOrder(lp_hydra, OrderTargetingPoint(AbilityCommand("move", 0), lv_p), c_orderQueueReplace);
}

int gf_get_hydras_groupindex (unit lp_hydra) {
    // Variable Declarations
    int lv_i;
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        if ((UnitGroupHasUnit(gv_hydra_groups[lv_i].lv_units, lp_hydra) == true)) {
            lv_r = lv_i;
            break;
        }

        lv_i += 1;
    }
    return lv_r;
}

int gf_get_new_hydra_groupindex (unit lp_hydra) {
    // Variable Declarations
    int lv_i;
    int lv_r;
    unit lv_closest_nest;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    if ((gv_is_crazyminions == true)) {
        lv_closest_nest = UnitGroupClosestToPoint(UnitGroup("Hellfort", 7, RegionCircle(UnitGetPosition(lp_hydra), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2), UnitGetPosition(lp_hydra));
    }
    else {
        lv_closest_nest = UnitGroupClosestToPoint(UnitGroup("Nest2", 7, RegionCircle(UnitGetPosition(lp_hydra), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2), UnitGetPosition(lp_hydra));
    }
    while ((lv_i <= 6)) {
        if ((gv_hydra_groups[lv_i].lv_nest == lv_closest_nest)) {
            lv_r = lv_i;
            break;
        }

        lv_i += 1;
    }
    return lv_r;
}

int gf_outer_nest_death_stock_increase () {
    // Variable Declarations
    int lv_return;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_return = 1;

    // Implementation
    if ((gv_difficulty > 2)) {
        lv_return += 1;
    }

    if ((gv_difficulty > 4)) {
        lv_return += 1;
    }

    if ((gv_difficulty > 6)) {
        lv_return += 1;
    }

    if ((gv_difficulty > 8)) {
        lv_return += 1;
    }

    if ((gv_difficulty > 10)) {
        lv_return += 1;
    }

    if ((gv_difficulty > 12)) {
        lv_return += 1;
    }

    return lv_return;
}

void gf_increase_hydra_stock () {
    // Automatic Variable Declarations
    playergroup autoB061500D_g;
    int autoB061500D_var;
    playergroup autoEA4A65A6_g;
    int autoEA4A65A6_var;

    // Implementation
    if ((gf_is_pvp() == true)) {
    }
    else {
        if (((GameGetMissionTime() == (1 + (5 * 60))))) {
            autoB061500D_g = gv_terrans;
            autoB061500D_var = -1;
            while (true) {
                autoB061500D_var = PlayerGroupNextPlayer(autoB061500D_g, autoB061500D_var);
                if (autoB061500D_var < 0) { break; }
                if ((gv_players[autoB061500D_var].lv_alive == true) && (gf_player_has_many_reapers(autoB061500D_var) == true)) {
                    gv_hydra_groups[gv_players[autoB061500D_var].lv_position].lv_stock = (gv_hydra_groups[gv_players[autoB061500D_var].lv_position].lv_stock + 3);
                    if ((gv_hydra_peacetime_reduction == false)) {
                        gv_hydra_peacetime = (gv_hydra_peacetime - 60);
                        gv_hydra_peacetime_reduction = true;
                    }

                }

            }
        }

        if (((GameGetMissionTime() == (1 + (12 * 60))))) {
            autoEA4A65A6_g = gv_terrans;
            autoEA4A65A6_var = -1;
            while (true) {
                autoEA4A65A6_var = PlayerGroupNextPlayer(autoEA4A65A6_g, autoEA4A65A6_var);
                if (autoEA4A65A6_var < 0) { break; }
                if ((gv_players[autoEA4A65A6_var].lv_alive == true)) {
                    gv_hydra_groups[gv_players[autoEA4A65A6_var].lv_position].lv_stock = (gv_hydra_groups[gv_players[autoEA4A65A6_var].lv_position].lv_stock + 2);
                }

            }
        }

    }
}

bool gf_player_has_many_reapers (int lp_player) {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGroupCount(UnitGroup("Reaper2", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 14)) {
        lv_r = true;
    }

    return lv_r;
}

void gf_add_zerg_income () {
    // Variable Declarations
    int lv_spawner_count;
    int lv_extractor_count;
    int lv_income;

    // Automatic Variable Declarations
    unitgroup autoD69CCB7D_g;
    int autoD69CCB7D_u;
    unit autoD69CCB7D_var;
    int auto18D0DEB9_val;

    // Variable Initialization

    // Implementation
    autoD69CCB7D_g = UnitGroup(null, 7, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD69CCB7D_u = UnitGroupCount(autoD69CCB7D_g, c_unitCountAll);
    for (;; autoD69CCB7D_u -= 1) {
        autoD69CCB7D_var = UnitGroupUnitFromEnd(autoD69CCB7D_g, autoD69CCB7D_u);
        if (autoD69CCB7D_var == null) { break; }
        if (((UnitGetType(autoD69CCB7D_var) == "SlowlingSpawner") || (UnitGetType(autoD69CCB7D_var) == "CreeperSpawner") || (UnitGetType(autoD69CCB7D_var) == "StrikelingSpawner") || (UnitGetType(autoD69CCB7D_var) == "TanklingSpawner") || (UnitGetType(autoD69CCB7D_var) == "RoachSpawner") || (UnitGetType(autoD69CCB7D_var) == "PrimalRoachSpawner") || (UnitGetType(autoD69CCB7D_var) == "UltraliskSpawner") || (UnitGetType(autoD69CCB7D_var) == "BrutaliskSpawner") || (UnitGetType(autoD69CCB7D_var) == "FirebatSpawner") || (UnitGetType(autoD69CCB7D_var) == "MarauderSpawner") || (UnitGetType(autoD69CCB7D_var) == "MarineSpawner"))) {
            lv_spawner_count = (lv_spawner_count + 1);
        }

        if (((UnitGetType(autoD69CCB7D_var) == "BeastlingSpawner") || (UnitGetType(autoD69CCB7D_var) == "BanelingSpawner") || (UnitGetType(autoD69CCB7D_var) == "RavatorSpawner") || (UnitGetType(autoD69CCB7D_var) == "InfusedRoachSpawner") || (UnitGetType(autoD69CCB7D_var) == "TorraliskSpawner") || (UnitGetType(autoD69CCB7D_var) == "MechSpawner") || (UnitGetType(autoD69CCB7D_var) == "MineralContainer"))) {
            lv_spawner_count = (lv_spawner_count + 4);
        }

        if ((UnitGetType(autoD69CCB7D_var) == "MineralExtractor")) {
            lv_extractor_count = (lv_extractor_count + 1);
        }

        if ((UnitGetType(autoD69CCB7D_var) == "GreaterMineralExtractor")) {
            lv_extractor_count = (lv_extractor_count + 4);
        }

    }
    lv_income = (((30 + (4 * gv_very_early_leaver_count)) + lv_spawner_count) * lv_extractor_count);
    auto18D0DEB9_val = gv_difficulty;
    if (auto18D0DEB9_val == 1) {
        lv_income = (lv_income - 100);
    }
    else if (auto18D0DEB9_val == 2) {
        lv_income = (lv_income - 50);
    }
    else if (auto18D0DEB9_val == 3) {
        lv_income = (lv_income + 0);
    }
    else if (auto18D0DEB9_val == 4) {
        lv_income = (lv_income + 0);
    }
    else if (auto18D0DEB9_val == 5) {
        lv_income = (lv_income + 50);
    }
    else if (auto18D0DEB9_val == 6) {
        lv_income = (lv_income + 150);
    }
    else if (auto18D0DEB9_val == 7) {
        lv_income = (lv_income + 250);
    }
    else if (auto18D0DEB9_val == 8) {
        lv_income = (lv_income + 500);
    }
    else if (auto18D0DEB9_val == 9) {
        lv_income = (lv_income + 600);
    }
    else if (auto18D0DEB9_val == 10) {
        lv_income = (lv_income + 700);
    }
    else if (auto18D0DEB9_val == 11) {
        lv_income = (lv_income + 800);
    }
    else if (auto18D0DEB9_val == 12) {
        lv_income = (lv_income + 900);
    }
    else if (auto18D0DEB9_val == 13) {
        lv_income = (lv_income + 1500);
    }
    else {
    }
    if ((lv_income < 0)) {
        lv_income = 0;
    }

    if ((lv_income > 0)) {
        if ((gv_debt > 0)) {
            gv_debt = (gv_debt - (lv_income / 30));
            if ((gv_debt < 0)) {
                gv_debt = 0;
            }

        }
        else {
            PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperAdd, (lv_income / 30));
            PlayerModifyPropertyInt(7, c_playerPropMineralsCollected, c_playerPropOperAdd, (lv_income / 30));
        }
    }
    else {
        gv_debt = 0;
        PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperAdd, 20);
        PlayerModifyPropertyInt(7, c_playerPropMineralsCollected, c_playerPropOperAdd, 20);
    }
}

void gf_try_prefuse () {
    // Variable Declarations
    unitgroup lv_infestors;

    // Automatic Variable Declarations
    unitgroup auto0E112100_g;
    int auto0E112100_u;
    unit auto0E112100_var;

    // Variable Initialization
    lv_infestors = UnitGroup("InfestorZergHex2", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Implementation
    auto0E112100_g = lv_infestors;
    auto0E112100_u = UnitGroupCount(auto0E112100_g, c_unitCountAll);
    for (;; auto0E112100_u -= 1) {
        auto0E112100_var = UnitGroupUnitFromEnd(auto0E112100_g, auto0E112100_u);
        if (auto0E112100_var == null) { break; }
        if ((UnitGroupHasUnit(gv_reserved_infestors, auto0E112100_var) == false) && (UnitGetPropertyInt(auto0E112100_var, c_unitPropEnergy, c_unitPropCurrent) >= 500)) {
            UnitIssueOrder(auto0E112100_var, OrderTargetingUnit(AbilityCommand("TransfusionInfestor", 0), UnitGroupClosestToPoint(UnitGroup("LargeSpineCrawler", 7, RegionCircle(UnitGetPosition(auto0E112100_var), 17.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(auto0E112100_var))), c_orderQueueReplace);
        }

    }
}

void gf_set_infestors_points () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 12)) {
        gv_infestors[lv_i].lv_point = PointFromName(("Infestors " + IntToString(lv_i)));
        gv_infestors[lv_i].lv_spine = UnitGroupClosestToPoint(UnitGroup("LargeSpineCrawler", c_playerAny, RegionCircle(gv_infestors[lv_i].lv_point, 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_infestors[lv_i].lv_point);
        lv_i += 1;
    }
}

void gf_get_infestors () {
    // Variable Declarations
    int lv_i;
    point lv_p;
    int lv_cnt;
    int lv_ncnt;
    unit lv_n;
    unitgroup lv_n_group;
    unitgroup lv_n_group_all;
    int lv_extra_infestor_count;
    fixed lv_time;

    // Automatic Variable Declarations
    unitgroup auto04FE7B3B_g;
    int auto04FE7B3B_u;
    unit auto04FE7B3B_var;
    unitgroup autoAD5C2F0D_g;
    int autoAD5C2F0D_u;
    unit autoAD5C2F0D_var;

    // Variable Initialization
    lv_i = 1;
    lv_n_group = UnitGroupEmpty();
    lv_n_group_all = UnitGroupEmpty();
    lv_time = GameGetMissionTime();

    // Implementation
    if ((gv_mass_infestor_death_exception == false)) {
        if ((gv_difficulty >= 3)) {
            if ((gv_difficulty >= 5)) {
                if ((gv_difficulty >= 7)) {
                    if ((gv_difficulty >= 10)) {
                        lv_ncnt = 7;
                    }
                    else {
                        lv_ncnt = 5;
                    }
                }
                else {
                    lv_ncnt = 3;
                }
            }
            else {
                lv_ncnt = 2;
            }
        }
        else {
            lv_ncnt = 1;
        }
        if ((lv_time <= (11 * 60)) && (lv_ncnt < 1)) {
            lv_ncnt = 1;
        }

        while ((lv_i <= 12)) {
            lv_p = PointFromName(("Infestors " + IntToString(lv_i)));
            lv_cnt = 0;
            auto04FE7B3B_g = gv_infestors[lv_i].lv_unit_group;
            auto04FE7B3B_u = UnitGroupCount(auto04FE7B3B_g, c_unitCountAll);
            for (;; auto04FE7B3B_u -= 1) {
                auto04FE7B3B_var = UnitGroupUnitFromEnd(auto04FE7B3B_g, auto04FE7B3B_u);
                if (auto04FE7B3B_var == null) { break; }
                if ((UnitGetType(auto04FE7B3B_var) == "InfestorZergHex2")) {
                    lv_cnt += 1;
                }

            }
            if ((gv_infestors[lv_i].lv_spine != null)) {
                if ((lv_cnt < lv_ncnt)) {
                    lv_extra_infestor_count = UnitGroupCount(gv_extra_infestors, c_unitCountAlive);
                    if ((lv_extra_infestor_count > 1)) {
                        gf_add_infestors_to_local_group(lv_i);
                    }
                    else {
                        if ((gv_is_crazyminions == true)) {
                            lv_n_group = UnitGroup("Hellfort", 7, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                            UnitGroupAddUnitGroup(lv_n_group_all, lv_n_group);
                        }

                        lv_n_group = UnitGroupEmpty();
                        lv_n_group = UnitGroup("Nest2", 7, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        UnitGroupAddUnitGroup(lv_n_group_all, lv_n_group);
                        autoAD5C2F0D_g = lv_n_group_all;
                        autoAD5C2F0D_u = UnitGroupCount(autoAD5C2F0D_g, c_unitCountAll);
                        for (;; autoAD5C2F0D_u -= 1) {
                            autoAD5C2F0D_var = UnitGroupUnitFromEnd(autoAD5C2F0D_g, autoAD5C2F0D_u);
                            if (autoAD5C2F0D_var == null) { break; }
                            if ((UnitOrderCount(autoAD5C2F0D_var) > 0)) {
                                UnitGroupRemove(lv_n_group_all, autoAD5C2F0D_var);
                            }

                        }
                        if ((UnitGroupCount(lv_n_group_all, c_unitCountAlive) > 0)) {
                            lv_n = UnitGroupClosestToPoint(lv_n_group_all, lv_p);
                            if ((PlayerGetPropertyInt(7, c_playerPropMinerals) > 50)) {
                                UnitIssueOrder(lv_n, OrderTargetingPoint(AbilityCommand("Rally", 0), lv_p), c_orderQueueReplace);
                                UnitIssueOrder(lv_n, Order(AbilityCommand("ZergTrain", 5)), c_orderQueueAddToEnd);
                            }
                            else {
                                if ((gv_difficulty >= 3)) {
                                    if ((gv_difficulty >= 7)) {
                                        PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperAdd, 50);
                                    }
                                    else {
                                        PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperAdd, 35);
                                    }
                                }
                                else {
                                    PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperAdd, 20);
                                }
                            }
                        }

                    }
                }

            }

            lv_i += 1;
        }
    }

}

int gf_get_infestor_group_i (point lp_position) {
    // Variable Declarations
    int lv_i;
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 12)) {
        if ((RegionContainsPoint(RegionCircle(gv_infestors[lv_i].lv_point, 4.0), lp_position) == true)) {
            lv_r = lv_i;
            break;
        }

        lv_i += 1;
    }
    return lv_r;
}

int gf_get_infestors_group (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 12)) {
        if ((UnitGroupHasUnit(gv_infestors[lv_i].lv_unit_group, lp_unit) == true)) {
            lv_r = lv_i;
            break;
        }

        lv_i += 1;
    }
    return lv_r;
}

void gf_gather_infestor_groups () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoE1AFDCAB_g;
    int autoE1AFDCAB_u;
    unit autoE1AFDCAB_var;
    unitgroup auto823139C5_g;
    int auto823139C5_u;
    unit auto823139C5_var;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 12)) {
        if ((gv_infestors[lv_i].lv_spine != null)) {
            auto823139C5_g = gv_infestors[lv_i].lv_unit_group;
            auto823139C5_u = UnitGroupCount(auto823139C5_g, c_unitCountAll);
            for (;; auto823139C5_u -= 1) {
                auto823139C5_var = UnitGroupUnitFromEnd(auto823139C5_g, auto823139C5_u);
                if (auto823139C5_var == null) { break; }
                if ((UnitOrderCount(auto823139C5_var) == 0) && (gf_is_point_in_hazard_zone(gv_infestors[lv_i].lv_point) == false)) {
                    UnitIssueOrder(auto823139C5_var, OrderTargetingPoint(AbilityCommand("move", 0), gv_infestors[lv_i].lv_point), c_orderQueueReplace);
                }

            }
        }
        else {
            autoE1AFDCAB_g = gv_infestors[lv_i].lv_unit_group;
            autoE1AFDCAB_u = UnitGroupCount(autoE1AFDCAB_g, c_unitCountAll);
            for (;; autoE1AFDCAB_u -= 1) {
                autoE1AFDCAB_var = UnitGroupUnitFromEnd(autoE1AFDCAB_g, autoE1AFDCAB_u);
                if (autoE1AFDCAB_var == null) { break; }
                if ((UnitOrderCount(autoE1AFDCAB_var) == 0)) {
                    UnitIssueOrder(autoE1AFDCAB_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1910508930)), c_orderQueueReplace);
                }

            }
        }
        lv_i += 1;
    }
}

void gf_send_infestor_home (unit lp_unit, point lp_attack_pos) {
    // Variable Declarations
    point lv_home;
    int lv_spine;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_home = gv_infestors[gf_get_infestors_group(lp_unit)].lv_point;

    // Implementation
    if ((UnitGroupHasUnit(gv_feeding_infestors, lp_unit) == true)) {
        UnitGroupRemove(gv_feeding_infestors, lp_unit);
    }

    if ((lp_attack_pos != null)) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_unit), -10.0, lp_attack_pos)), c_orderQueueReplace);
        if ((gv_infestors[gf_get_infestors_group(lp_unit)].lv_spine != null)) {
            if ((RegionContainsPoint(RegionCircle(lv_home, 5.0), UnitGetPosition(lp_unit)) == true)) {
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1910508930)), c_orderQueueAddToEnd);
            }
            else {
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_home), c_orderQueueAddToEnd);
            }
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1910508930)), c_orderQueueAddToEnd);
        }
    }
    else {
        if ((gv_infestors[gf_get_infestors_group(lp_unit)].lv_spine != null)) {
            if ((RegionContainsPoint(RegionCircle(lv_home, 5.0), UnitGetPosition(lp_unit)) == true)) {
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1910508930)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_home), c_orderQueueReplace);
            }
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1910508930)), c_orderQueueReplace);
        }
    }
}

void gf_infestor_heal (unit lp_unit, unit lp_target) {
    // Variable Declarations
    int lv_e;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_e = UnitGetPropertyInt(lp_unit, c_unitPropEnergy, c_unitPropCurrent);
    if ((lv_e >= 150) && (UnitGetPropertyInt(lp_target, c_unitPropLifePercent, c_unitPropCurrent) < 95)) {
        UnitIssueOrder(lp_unit, OrderTargetingUnit(AbilityCommand("TransfusionInfestor", 0), lp_target), c_orderQueueReplace);
    }

}

unit gf_get_ready_infestor (unitgroup lp_group) {
    // Variable Declarations
    unit lv_r;

    // Automatic Variable Declarations
    unitgroup auto24F733C2_g;
    int auto24F733C2_u;
    unit auto24F733C2_var;

    // Variable Initialization

    // Implementation
    auto24F733C2_g = lp_group;
    auto24F733C2_u = UnitGroupCount(auto24F733C2_g, c_unitCountAll);
    for (;; auto24F733C2_u -= 1) {
        auto24F733C2_var = UnitGroupUnitFromEnd(auto24F733C2_g, auto24F733C2_u);
        if (auto24F733C2_var == null) { break; }
        if ((UnitGetPropertyInt(auto24F733C2_var, c_unitPropEnergy, c_unitPropCurrent) >= 150) && (UnitGroupHasUnit(gv_reserved_infestors, auto24F733C2_var) == false)) {
            lv_r = auto24F733C2_var;
            break;
        }

    }
    return lv_r;
}

void gf_move_edge_infestor_gatherpoint (int lp_gint) {
    // Automatic Variable Declarations
    int auto3EE8D8D6_val;

    // Implementation
    auto3EE8D8D6_val = lp_gint;
    if (auto3EE8D8D6_val == 1) {
        PointSet(PointFromId(1632254216), libNtve_gf_PointOffsetTowardsPoint(PointFromId(1632254216), 5.0, PointFromId(1596347129)));
    }
    else if (auto3EE8D8D6_val == 6) {
        PointSet(PointFromId(1644201380), libNtve_gf_PointOffsetTowardsPoint(PointFromId(1644201380), 5.0, PointFromId(887794054)));
    }
    else if (auto3EE8D8D6_val == 7) {
        PointSet(PointFromId(1035291590), libNtve_gf_PointOffsetTowardsPoint(PointFromId(1035291590), 5.0, PointFromId(743371141)));
    }
    else if (auto3EE8D8D6_val == 12) {
        PointSet(PointFromId(510982451), libNtve_gf_PointOffsetTowardsPoint(PointFromId(510982451), 5.0, PointFromId(399249919)));
    }
    else {
    }
}

int gf_get_spines_group (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 12)) {
        if ((lp_unit == gv_infestors[lv_i].lv_spine)) {
            lv_r = lv_i;
            break;
        }

        lv_i += 1;
    }
    return lv_r;
}

unit gf_get_one_infestor () {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupRandomUnit(UnitGroup("InfestorZergHex2", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
}

unit gf_get_infestor_for_infused () {
    // Variable Declarations
    unit lv_return;

    // Automatic Variable Declarations
    unitgroup auto12908A48_g;
    int auto12908A48_u;
    unit auto12908A48_var;

    // Variable Initialization

    // Implementation
    auto12908A48_g = gv_reserved_infestors;
    auto12908A48_u = UnitGroupCount(auto12908A48_g, c_unitCountAll);
    for (;; auto12908A48_u -= 1) {
        auto12908A48_var = UnitGroupUnitFromEnd(auto12908A48_g, auto12908A48_u);
        if (auto12908A48_var == null) { break; }
        if ((UnitGetPropertyInt(auto12908A48_var, c_unitPropEnergy, c_unitPropCurrent) >= 700) && (UnitOrderCount(auto12908A48_var) < 1)) {
            lv_return = auto12908A48_var;
            break;
        }

    }
    return lv_return;
}

unit gf_get_infestor_for_torra () {
    // Variable Declarations
    unit lv_return;

    // Automatic Variable Declarations
    unitgroup autoE25B3A23_g;
    int autoE25B3A23_u;
    unit autoE25B3A23_var;

    // Variable Initialization

    // Implementation
    autoE25B3A23_g = gv_reserved_infestors;
    autoE25B3A23_u = UnitGroupCount(autoE25B3A23_g, c_unitCountAll);
    for (;; autoE25B3A23_u -= 1) {
        autoE25B3A23_var = UnitGroupUnitFromEnd(autoE25B3A23_g, autoE25B3A23_u);
        if (autoE25B3A23_var == null) { break; }
        if ((UnitGetPropertyInt(autoE25B3A23_var, c_unitPropEnergy, c_unitPropCurrent) > 999) && (UnitOrderCount(autoE25B3A23_var) < 1)) {
            lv_return = autoE25B3A23_var;
            break;
        }

    }
    return lv_return;
}

void gf_move_infestors (int lp_infestors_group_id) {
    // Variable Declarations
    unitgroup lv_infestor_group;

    // Automatic Variable Declarations
    unitgroup auto0113F327_g;
    int auto0113F327_u;
    unit auto0113F327_var;

    // Variable Initialization
    lv_infestor_group = gv_infestors[lp_infestors_group_id].lv_unit_group;

    // Implementation
    auto0113F327_g = lv_infestor_group;
    auto0113F327_u = UnitGroupCount(auto0113F327_g, c_unitCountAll);
    for (;; auto0113F327_u -= 1) {
        auto0113F327_var = UnitGroupUnitFromEnd(auto0113F327_g, auto0113F327_u);
        if (auto0113F327_var == null) { break; }
        UnitGroupRemove(gv_infestors[lp_infestors_group_id].lv_unit_group, auto0113F327_var);
        UnitGroupAdd(gv_extra_infestors, auto0113F327_var);
        UnitIssueOrder(auto0113F327_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1910508930)), c_orderQueueReplace);
    }
}

void gf_add_infestors_to_local_group (int lp_infestors_group_id) {
    // Variable Declarations
    unitgroup lv_infestor_group;

    // Automatic Variable Declarations
    unitgroup auto607DD879_g;
    int auto607DD879_u;
    unit auto607DD879_var;

    // Variable Initialization
    lv_infestor_group = gv_infestors[lp_infestors_group_id].lv_unit_group;

    // Implementation
    auto607DD879_g = gv_extra_infestors;
    auto607DD879_u = UnitGroupCount(auto607DD879_g, c_unitCountAll);
    for (;; auto607DD879_u -= 1) {
        auto607DD879_var = UnitGroupUnitFromEnd(auto607DD879_g, auto607DD879_u);
        if (auto607DD879_var == null) { break; }
        UnitGroupRemove(gv_extra_infestors, auto607DD879_var);
        UnitGroupAdd(lv_infestor_group, auto607DD879_var);
        UnitIssueOrder(auto607DD879_var, OrderTargetingPoint(AbilityCommand("move", 0), gv_infestors[lp_infestors_group_id].lv_point), c_orderQueueReplace);
    }
}

void gf_reserve_infestors () {
    // Variable Declarations
    unitgroup lv_infestor_group;
    int lv_need;

    // Automatic Variable Declarations
    unitgroup auto07EA5939_g;
    int auto07EA5939_u;
    unit auto07EA5939_var;

    // Variable Initialization
    lv_infestor_group = UnitGroup("InfestorZergHex2", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_need = (gv_req_ravs + (gv_req_infused + gv_req_torra));

    // Implementation
    if ((lv_need > 12)) {
        lv_need = 12;
    }

    if ((UnitGroupCount(gv_reserved_infestors, c_unitCountAlive) < lv_need)) {
        auto07EA5939_g = lv_infestor_group;
        auto07EA5939_u = UnitGroupCount(auto07EA5939_g, c_unitCountAll);
        for (;; auto07EA5939_u -= 1) {
            auto07EA5939_var = UnitGroupUnitFromEnd(auto07EA5939_g, auto07EA5939_u);
            if (auto07EA5939_var == null) { break; }
            if ((UnitGetType(auto07EA5939_var) != "WizardMinion") && (UnitGetPropertyInt(auto07EA5939_var, c_unitPropEnergy, c_unitPropCurrent) >= 400) && (UnitGroupHasUnit(gv_reserved_infestors, auto07EA5939_var) == false)) {
                UnitGroupRemove(gv_infestors[gf_get_infestors_group(auto07EA5939_var)].lv_unit_group, auto07EA5939_var);
                UnitGroupAdd(gv_reserved_infestors, auto07EA5939_var);
                UnitIssueOrder(auto07EA5939_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1910508930)), c_orderQueueReplace);
                break;
            }

        }
    }

}

void gf_mgc_set_crisis_type (int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_type != 0)) {
        gv_mgc_type = lp_type;
        if ((lp_type == 2)) {
            TriggerEnable(gt_spawnhellforces, true);
            TriggerEnable(gt_buildinggetsattackedtrydefendwithwizards, true);
            TriggerEnable(gt_resetwizardactioncooldown, true);
            TriggerEnable(gt_removefortdebrisactorfix, true);
        }

        if ((lp_type == 3)) {
            TriggerEnable(gt_spawnwarfieldforces, true);
        }

    }
    else {
        gv_mgc_type = 0;
    }
}

string gf_mgc_get_crisis_name_by_type (int lp_t) {
    // Variable Declarations
    string lv_r;

    // Automatic Variable Declarations
    int autoA15EC56F_val;

    // Variable Initialization
    lv_r = "";

    // Implementation
    autoA15EC56F_val = lp_t;
    if (autoA15EC56F_val == 0) {
        lv_r = "No Crisis";
    }
    else if (autoA15EC56F_val == 1) {
        lv_r = "Egg Clusters";
    }
    else if (autoA15EC56F_val == 2) {
        lv_r = "Demon Forts";
    }
    else if (autoA15EC56F_val == 3) {
        lv_r = "Possessed Terrans";
    }
    else {
        lv_r = "No Crisis";
    }
    return lv_r;
}

void gf_mgc_add_position_set (unit lp_creep_source) {
    // Variable Declarations
    unitgroup lv_local_ug;
    int lv_spawner_count;

    // Automatic Variable Declarations
    unitgroup auto0B36CA3E_g;
    int auto0B36CA3E_u;
    unit auto0B36CA3E_var;

    // Variable Initialization
    lv_local_ug = UnitGroupEmpty();

    // Implementation
    gv_mgc_position_count = (gv_mgc_position_count + 1);
    gv_mgc_positions[gv_mgc_position_count].lv_position_sets[1][1] = UnitGetPosition(lp_creep_source);
    lv_local_ug = UnitGroup(null, 0, RegionCircle(gv_mgc_positions[gv_mgc_position_count].lv_position_sets[1][1], 4.5), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0B36CA3E_g = lv_local_ug;
    auto0B36CA3E_u = UnitGroupCount(auto0B36CA3E_g, c_unitCountAll);
    for (;; auto0B36CA3E_u -= 1) {
        auto0B36CA3E_var = UnitGroupUnitFromEnd(auto0B36CA3E_g, auto0B36CA3E_u);
        if (auto0B36CA3E_var == null) { break; }
        if (((UnitGetType(auto0B36CA3E_var) == "ShieldBattery") || (UnitGetType(auto0B36CA3E_var) == "RoboticsBay"))) {
            if ((UnitGetType(auto0B36CA3E_var) == "ShieldBattery")) {
                gv_mgc_positions[gv_mgc_position_count].lv_position_sets[2][1] = UnitGetPosition(auto0B36CA3E_var);
                UnitRemove(auto0B36CA3E_var);
            }
            else {
                lv_spawner_count = (lv_spawner_count + 1);
                gv_mgc_positions[gv_mgc_position_count].lv_position_sets[3][lv_spawner_count] = UnitGetPosition(auto0B36CA3E_var);
                UnitRemove(auto0B36CA3E_var);
            }
        }

    }
    UnitRemove(lp_creep_source);
}

void gf_mgc_handle_midgame_crisis_position_creation () {
    // Variable Declarations
    int lv_time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_time = FixedToInt(GameGetMissionTime());

    // Implementation
    if ((lv_time == (15 * 60))) {
        if ((gv_difficulty >= 5)) {
            gf_mgc_create_mgc_position();
            gf_mgc_create_mgc_position();
            gf_mgc_create_mgc_position();
        }

    }

    if ((lv_time == (16 * 60))) {
        if ((gv_difficulty >= 6)) {
            gf_mgc_create_mgc_position();
        }

    }

    if ((lv_time == (17 * 60))) {
        if ((gv_difficulty >= 6)) {
            gf_mgc_create_mgc_position();
        }

    }

    if ((lv_time == (18 * 60))) {
        if ((gv_difficulty >= 7)) {
            gf_mgc_create_mgc_position();
        }

    }

    if ((lv_time == (19 * 60))) {
        if ((gv_difficulty >= 8)) {
            gf_mgc_create_mgc_position();
        }

    }

    if ((lv_time == (20 * 60))) {
        if ((gv_difficulty >= 8)) {
            gf_mgc_create_mgc_position();
        }

    }

}

void gf_mgc_create_mgc_position () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_mgc_type == 1)) {
        gf_create_new_egg_cluster();
    }
    else {
        if ((gv_mgc_type == 2)) {
            if ((gv_mgc_demon_fort_count < 8)) {
                gf_create_new_demon_fort();
            }

        }
        else {
            if ((gv_mgc_type == 3)) {
                if ((gv_mgc_warfield_base_count < 8)) {
                    gf_create_new_warfield_base();
                }

            }

        }
    }
}

void gf_create_new_warfield_base () {
    // Variable Declarations
    int lv_pid;
    int lv_done;
    int lv_rand;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_done == 0)) {
        lv_rand = RandomInt(1, 8);
        if ((gv_mgc_positions[lv_rand].lv_state == 0)) {
            lv_pid = lv_rand;
            lv_done = 1;
        }

    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlanetaryFortress", 0, 7, gv_mgc_positions[lv_pid].lv_position_sets[1][1]);
    UnitGroupAdd(gv_mgc_positions[lv_pid].lv_ug_all, UnitLastCreated());
    UnitGroupAdd(gv_outer_tumors, UnitLastCreated());
    gv_mgc_positions[lv_pid].lv_state = 1;
    gv_mgc_warfield_base_count += 1;
}

void gf_create_new_demon_fort () {
    // Variable Declarations
    int lv_pid;
    int lv_done;
    int lv_rand;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_done == 0)) {
        lv_rand = RandomInt(1, 8);
        if ((gv_mgc_positions[lv_rand].lv_state == 0)) {
            lv_pid = lv_rand;
            lv_done = 1;
        }

    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hellfort", 0, 7, gv_mgc_positions[lv_pid].lv_position_sets[1][1]);
    UnitGroupAdd(gv_mgc_positions[lv_pid].lv_ug_all, UnitLastCreated());
    UnitGroupAdd(gv_outer_tumors, UnitLastCreated());
    gv_mgc_positions[lv_pid].lv_state = 1;
    gv_mgc_demon_fort_count += 1;
}

void gf_Create_wave_and_send_from_to (int lp_spawner_type, point lp_origin, point lp_target) {
    // Variable Declarations
    string lv_angle;
    int lv_amount;
    unitgroup lv_result_ug;

    // Automatic Variable Declarations
    int auto19930C9E_val;

    // Variable Initialization
    lv_angle = "";
    lv_result_ug = UnitGroupEmpty();

    // Implementation
    auto19930C9E_val = gv_armor_level;
    if (auto19930C9E_val == 2) {
        lv_amount = 3;
        lv_amount = (lv_amount + (lp_spawner_type * 2));
        libNtve_gf_CreateUnitsWithDefaultFacing(lv_amount, "Roach2", 0, 7, lp_origin);
        UnitGroupAddUnitGroup(lv_result_ug, UnitLastCreatedGroup());
    }
    else if (auto19930C9E_val == 3) {
        lv_amount = 3;
        lv_amount = (lv_amount + (lp_spawner_type * 2));
        libNtve_gf_CreateUnitsWithDefaultFacing(lv_amount, "PrimalRoach2", 0, 7, lp_origin);
        UnitGroupAddUnitGroup(lv_result_ug, UnitLastCreatedGroup());
    }
    else if (auto19930C9E_val == 4) {
        lv_amount = 2;
        lv_amount = (lv_amount + (lp_spawner_type * 2));
        libNtve_gf_CreateUnitsWithDefaultFacing(lv_amount, "Ultralisk2", 0, 7, lp_origin);
        UnitGroupAddUnitGroup(lv_result_ug, UnitLastCreatedGroup());
        lv_amount = 1;
        lv_amount = (lv_amount + (lp_spawner_type * 1));
        libNtve_gf_CreateUnitsWithDefaultFacing(lv_amount, "Eroder", 0, 7, lp_origin);
        UnitGroupAddUnitGroup(lv_result_ug, UnitLastCreatedGroup());
    }
    else if (auto19930C9E_val == 5) {
        lv_amount = 2;
        lv_amount = (lv_amount + (lp_spawner_type * 2));
        libNtve_gf_CreateUnitsWithDefaultFacing(lv_amount, "Eroder", 0, 7, lp_origin);
        UnitGroupAddUnitGroup(lv_result_ug, UnitLastCreatedGroup());
        lv_amount = 2;
        lv_amount = (lv_amount + (lp_spawner_type * 2));
        libNtve_gf_CreateUnitsWithDefaultFacing(lv_amount, "Brutalisk2", 0, 7, lp_origin);
        UnitGroupAddUnitGroup(lv_result_ug, UnitLastCreatedGroup());
    }
    else {
        lv_amount = 3;
        lv_amount = (lv_amount + (lp_spawner_type * 2));
        libNtve_gf_CreateUnitsWithDefaultFacing(lv_amount, "Slowling", 0, 7, lp_origin);
        UnitGroupAddUnitGroup(lv_result_ug, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(lv_amount, "Creeper", 0, 7, lp_origin);
        UnitGroupAddUnitGroup(lv_result_ug, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(lv_amount, "Tankling", 0, 7, lp_origin);
        UnitGroupAddUnitGroup(lv_result_ug, UnitLastCreatedGroup());
    }
    if ((gf_flip_coin() == 1)) {
        if ((gf_flip_coin() == 1)) {
            lv_angle = "Left";
        }
        else {
            lv_angle = "Right";
        }
        UnitGroupIssueOrder(lv_result_ug, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(((("Zerg Flank Rally " + lv_angle) + " Pre ") + IntToString(gf_get_closest_alive_player_position(lp_target))))), c_orderQueueReplace);
        UnitGroupIssueOrder(lv_result_ug, OrderTargetingPoint(AbilityCommand("attack", 0), lp_target), c_orderQueueAddToEnd);
    }
    else {
        if ((gf_is_front_path_blocked(gf_get_player_at_position(gf_get_closest_alive_player_position(lp_target))) == true)) {
            UnitGroupIssueOrder(lv_result_ug, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Front Rally Pre " + IntToString(gf_get_closest_alive_player_position(lp_target))))), c_orderQueueReplace);
            UnitGroupIssueOrder(lv_result_ug, OrderTargetingPoint(AbilityCommand("attack", 0), lp_target), c_orderQueueAddToEnd);
        }
        else {
            UnitGroupIssueOrder(lv_result_ug, OrderTargetingPoint(AbilityCommand("attack", 0), lp_target), c_orderQueueReplace);
        }
    }
}

void gf_create_new_egg_cluster () {
    // Variable Declarations
    int lv_egg_cluster_id;
    int lv_done;
    int lv_rand;
    int lv_cap;
    int lv_sci;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sci = 1;

    // Implementation
    while ((lv_done == 0)) {
        lv_rand = RandomInt(1, 8);
        if ((gv_mgc_positions[lv_rand].lv_state == 0)) {
            lv_egg_cluster_id = lv_rand;
            lv_done = 1;
        }

    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumor2", 0, 7, gv_mgc_positions[lv_egg_cluster_id].lv_position_sets[1][1]);
    UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_all, UnitLastCreated());
    UnitGroupAdd(gv_outer_tumors, UnitLastCreated());
    if ((gv_difficulty >= 7)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LargeSpineCrawler", 0, 7, gv_mgc_positions[lv_egg_cluster_id].lv_position_sets[2][1]);
        UnitGroupAdd(gv_egg_cluster_large_spines, UnitLastCreated());
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpineCrawler", 0, 7, gv_mgc_positions[lv_egg_cluster_id].lv_position_sets[2][1]);
    }
    UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_all, UnitLastCreated());
    UnitGroupAdd(gv_outer_smallspines, UnitLastCreated());
    while ((lv_sci <= 3)) {
        if ((gv_difficulty < 5)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CharEggSackThreeEgg", 0, 7, gv_mgc_positions[lv_egg_cluster_id].lv_position_sets[3][1]);
            UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_all, UnitLastCreated());
            UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_spawners, UnitLastCreated());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CharEggSackThreeEgg", 0, 7, gv_mgc_positions[lv_egg_cluster_id].lv_position_sets[3][2]);
            UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_all, UnitLastCreated());
            UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_spawners, UnitLastCreated());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CharEggSackThreeEgg", 0, 7, gv_mgc_positions[lv_egg_cluster_id].lv_position_sets[3][3]);
            UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_all, UnitLastCreated());
            UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_spawners, UnitLastCreated());
        }
        else if ((gv_difficulty == 5)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CharEggSackOneEgg", 0, 7, gv_mgc_positions[lv_egg_cluster_id].lv_position_sets[3][1]);
            UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_all, UnitLastCreated());
            UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_spawners, UnitLastCreated());
        }
        else if ((gv_difficulty == 6)) {
            if ((lv_sci > 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "CharEggSackOneEgg", 0, 7, gv_mgc_positions[lv_egg_cluster_id].lv_position_sets[3][2]);
                UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_all, UnitLastCreated());
                UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_spawners, UnitLastCreated());
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "CharEggSackOneEgg", 0, 7, gv_mgc_positions[lv_egg_cluster_id].lv_position_sets[3][1]);
                UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_all, UnitLastCreated());
                UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_spawners, UnitLastCreated());
            }
        }
        else if ((gv_difficulty == 7)) {
            if ((lv_sci > 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "CharEggSackTwoEgg", 0, 7, gv_mgc_positions[lv_egg_cluster_id].lv_position_sets[3][2]);
                UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_all, UnitLastCreated());
                UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_spawners, UnitLastCreated());
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "CharEggSackOneEgg", 0, 7, gv_mgc_positions[lv_egg_cluster_id].lv_position_sets[3][1]);
                UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_all, UnitLastCreated());
                UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_spawners, UnitLastCreated());
            }
        }
        else if ((gv_difficulty >= 8) && (gv_difficulty <= 11)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CharEggSackTwoEgg", 0, 7, gv_mgc_positions[lv_egg_cluster_id].lv_position_sets[3][lv_sci]);
            UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_all, UnitLastCreated());
            UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_spawners, UnitLastCreated());
        }
        else if ((gv_difficulty >= 12)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CharEggSackThreeEgg", 0, 7, gv_mgc_positions[lv_egg_cluster_id].lv_position_sets[3][lv_sci]);
            UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_all, UnitLastCreated());
            UnitGroupAdd(gv_mgc_positions[lv_egg_cluster_id].lv_ug_spawners, UnitLastCreated());
        }
        if ((gv_difficulty <= 5)) {
            lv_sci = (lv_sci + 2);
        }

        if ((gv_difficulty <= 7) && (gv_difficulty >= 6)) {
            lv_sci = (lv_sci + 1);
        }

        lv_sci = (lv_sci + 1);
    }
    if ((gv_difficulty <= 5)) {
    }
    lv_cap = gf_get_closest_alive_player_position_from_group(UnitGroupCenterOfGroup(gv_mgc_positions[lv_egg_cluster_id].lv_ug_spawners), gv_terrans);
    UnitGroupIssueOrder(gv_mgc_positions[lv_egg_cluster_id].lv_ug_spawners, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(lv_cap)))), c_orderQueueReplace);
    gv_mgc_positions[lv_egg_cluster_id].lv_state = 1;
}

void gf_create_defensive_egg_cluster (int lp_position) {
    // Variable Declarations
    string lv_t;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameGetMissionTime() >= (12 * 60))) {
        if ((gv_difficulty == 5)) {
            lv_t = "CharEggSackOneEgg";
        }
        else if ((gv_difficulty > 5) && (gv_difficulty <= 7)) {
            lv_t = "CharEggSackTwoEgg";
        }
        else if ((gv_difficulty >= 8)) {
            lv_t = "CharEggSackThreeEgg";
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_t, c_unitCreateIgnorePlacement, 7, gv_defensive_egg_cluster_positions[lp_position]);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(lp_position)))), c_orderQueueReplace);
    }
    else {
        gv_defensive_egg_cluster_marker[lp_position] = 1;
    }
}

void gf_handle_defensive_egg_cluster_markers () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    if ((GameGetMissionTime() == (12 * 60))) {
        while ((lv_i <= 6)) {
            if ((gv_defensive_egg_cluster_marker[lv_i] == 1)) {
                gf_create_defensive_egg_cluster(lv_i);
            }

            lv_i += 1;
        }
    }

}

void gf_buy_omega () {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = gf_ai_get_weakest_player();

    // Implementation
    gv_omega_target_player = lv_p;
    gf_place_cocoon(lv_p);
}

void gf_place_cocoon (int lp_target_terran) {
    // Variable Declarations
    unit lv_hive;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hive = gf_get_hive();

    // Implementation
    UnitIssueOrder(lv_hive, OrderTargetingPoint(AbilityCommand("HiveBuildOmegaliskCocoonZergHex", 0), gf_get_closest_possible_omega_spawn(lp_target_terran)), c_orderQueueReplace);
}

void gf_order_omega (unit lp_omega) {
    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(lp_omega, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Rally " + IntToString(gv_players[gv_omega_target_player].lv_position)))), c_orderQueueReplace);
}

void gf_omega_data_cleanup () {
    // Automatic Variable Declarations
    // Implementation
    PingDestroy(gv_omega_ping);
    gv_omega_target_player = 0;
    gv_omega_unit = null;
    gv_omega_ping = c_invalidPingId;
    gv_omega_active = false;
    TechTreeAbilityAllow(7, AbilityCommand("HiveBuildOmegaliskCocoonZergHex", 0), true);
}

point gf_get_closest_possible_omega_spawn (int lp_terran) {
    // Variable Declarations
    int lv_terran_position;
    point lv_return;
    int lv_i;
    point[11] lv_omega_position_set;
    point[11] lv_omega_possible_positions;
    int lv_omega_possible_positions_size;
    fixed lv_d;
    fixed lv_td;
    int lv_tp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_terran_position = gv_players[lp_terran].lv_position;
    lv_i = 1;

    // Implementation
    while ((lv_i <= 10)) {
        lv_omega_position_set[lv_i] = PointFromName(("Omega " + IntToString(lv_i)));
        lv_i += 1;
    }
    lv_i = 5;
    while ((lv_i <= 10)) {
        if ((UnitTypePlacementTestsFromPoint("Hatchery", 7, lv_omega_position_set[lv_i], 0.5, c_placementTestCreepMask) != null) && (gf_is_area_around_point_safe(lv_omega_position_set[lv_i]) == true)) {
            lv_omega_possible_positions_size = (lv_omega_possible_positions_size + 1);
            lv_omega_possible_positions[lv_omega_possible_positions_size] = lv_omega_position_set[lv_i];
        }

        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= lv_omega_possible_positions_size)) {
        lv_td = DistanceBetweenPoints(lv_omega_possible_positions[lv_i], PointFromName(("Zerg Rally " + IntToString(lv_terran_position))));
        if (((lv_d == 0.0) || (lv_td < lv_d))) {
            lv_tp = lv_i;
            lv_d = lv_td;
        }

        lv_i += 1;
    }
    lv_return = lv_omega_possible_positions[lv_tp];
    return lv_return;
}

bool gf_is_spawner (unit lp_local_unit) {
    // Variable Declarations
    string lv_type;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_type = UnitGetType(lp_local_unit);

    // Implementation
    if (((lv_type == "SlowlingSpawner") || (lv_type == "CreeperSpawner") || (lv_type == "StrikelingSpawner") || (lv_type == "TanklingSpawner") || (lv_type == "RoachSpawner") || (lv_type == "PrimalRoachSpawner") || (lv_type == "UltraliskSpawner") || (lv_type == "BrutaliskSpawner") || (lv_type == "BanelingSpawner") || (lv_type == "BeastlingSpawner") || (lv_type == "InfusedRoachSpawner") || (lv_type == "RavatorSpawner") || (lv_type == "TorraliskSpawner"))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_is_spawner_unit (unit lp_local_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_local_unit) == "Slowling") || (UnitGetType(lp_local_unit) == "Strikeling") || (UnitGetType(lp_local_unit) == "Creeper") || (UnitGetType(lp_local_unit) == "Tankling") || (UnitGetType(lp_local_unit) == "Roach2") || (UnitGetType(lp_local_unit) == "PrimalRoach2") || (UnitGetType(lp_local_unit) == "Ultralisk2") || (UnitGetType(lp_local_unit) == "Brutalisk2") || (UnitGetType(lp_local_unit) == "BanelingZergHex") || (UnitGetType(lp_local_unit) == "Beastling") || (UnitGetType(lp_local_unit) == "InfusedRoach") || (UnitGetType(lp_local_unit) == "Ravator") || (UnitGetType(lp_local_unit) == "Torralisk") || (UnitGetType(lp_local_unit) == "MeleeMinionHell") || (UnitGetType(lp_local_unit) == "RangedMinionHell") || (UnitGetType(lp_local_unit) == "Marine3") || (UnitGetType(lp_local_unit) == "Marauder2") || (UnitGetType(lp_local_unit) == "Hellion2") || (UnitGetType(lp_local_unit) == "Firebat2") || (UnitGetType(lp_local_unit) == "Cyclone3") || (UnitGetType(lp_local_unit) == "Massalisk") || (UnitGetType(lp_local_unit) == "ZerglingCarbot") || (UnitGetType(lp_local_unit) == "Mutalisk3v3"))) {
        return true;
    }
    else {
        return false;
    }
}

int gf_get_closest_position (point lp_position) {
    // Variable Declarations
    fixed lv_distance;
    int lv_return;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        if ((lv_distance != 0.0)) {
            if ((lv_distance > DistanceBetweenPoints(lp_position, PointFromName(("Zerg Rally " + IntToString(lv_i)))))) {
                lv_distance = DistanceBetweenPoints(lp_position, PointFromName(("Zerg Rally " + IntToString(lv_i))));
                lv_return = lv_i;
            }

        }
        else {
            lv_distance = DistanceBetweenPoints(lp_position, PointFromName(("Zerg Rally " + IntToString(lv_i))));
            lv_return = lv_i;
        }
        lv_i += 1;
    }
    return lv_return;
}

int gf_get_alive_player_count () {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    playergroup auto70BF0FA1_g;
    int auto70BF0FA1_var;

    // Variable Initialization

    // Implementation
    auto70BF0FA1_g = gv_terrans;
    auto70BF0FA1_var = -1;
    while (true) {
        auto70BF0FA1_var = PlayerGroupNextPlayer(auto70BF0FA1_g, auto70BF0FA1_var);
        if (auto70BF0FA1_var < 0) { break; }
        if ((gv_players[auto70BF0FA1_var].lv_alive == true)) {
            lv_r = (lv_r + 1);
        }

    }
    return lv_r;
}

bool gf_is_area_around_point_safe (point lp_position) {
    // Variable Declarations
    bool lv_return;
    unitgroup lv_group;
    int lv_g_count;

    // Automatic Variable Declarations
    unitgroup auto2F85FE41_g;
    int auto2F85FE41_u;
    unit auto2F85FE41_var;

    // Variable Initialization
    lv_return = true;
    lv_group = UnitGroupEmpty();

    // Implementation
    lv_group = UnitGroup(null, c_playerAny, RegionCircle(lp_position, 14.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2F85FE41_g = lv_group;
    auto2F85FE41_u = UnitGroupCount(auto2F85FE41_g, c_unitCountAll);
    for (;; auto2F85FE41_u -= 1) {
        auto2F85FE41_var = UnitGroupUnitFromEnd(auto2F85FE41_g, auto2F85FE41_u);
        if (auto2F85FE41_var == null) { break; }
        if (((UnitGetOwner(auto2F85FE41_var) >= 7) || (UnitGetOwner(auto2F85FE41_var) == 0) || ((UnitGetType(auto2F85FE41_var) == "Buggo") || (UnitGetType(auto2F85FE41_var) == "Oggub") || (UnitGetType(auto2F85FE41_var) == "Builder") || (UnitGetType(auto2F85FE41_var) == "InfestedBuilder") || (UnitGetType(auto2F85FE41_var) == "Battery") || (UnitGetType(auto2F85FE41_var) == "AdvancedBattery") || (UnitGetType(auto2F85FE41_var) == "HighDensityBattery") || (UnitGetType(auto2F85FE41_var) == "ImmortalShakurasStasisCannonMissile")))) {
            UnitGroupRemove(lv_group, auto2F85FE41_var);
        }

    }
    lv_g_count = UnitGroupCount(lv_group, c_unitCountAlive);
    if ((lv_g_count > 0)) {
        lv_return = false;
    }

    return lv_return;
}

int gf_ai_get_random_player () {
    // Variable Declarations
    playergroup lv_alive_players;
    int lv_random;
    int lv_return;

    // Automatic Variable Declarations
    playergroup autoBEA3BA5A_g;
    int autoBEA3BA5A_var;

    // Variable Initialization
    lv_alive_players = PlayerGroupEmpty();

    // Implementation
    autoBEA3BA5A_g = gv_terrans;
    autoBEA3BA5A_var = -1;
    while (true) {
        autoBEA3BA5A_var = PlayerGroupNextPlayer(autoBEA3BA5A_g, autoBEA3BA5A_var);
        if (autoBEA3BA5A_var < 0) { break; }
        if ((gv_players[autoBEA3BA5A_var].lv_alive == true)) {
            PlayerGroupAdd(lv_alive_players, autoBEA3BA5A_var);
        }

    }
    if ((PlayerGroupCount(lv_alive_players) == 0)) {
        lv_return = 0;
    }
    else {
        lv_random = RandomInt(1, PlayerGroupCount(lv_alive_players));
        lv_return = PlayerGroupPlayer(lv_alive_players, lv_random);
    }
    return lv_return;
}

int gf_ai_get_strongest_player () {
    // Variable Declarations
    int lv_p;
    int lv_r;
    int lv_return;
    int lv_s;

    // Automatic Variable Declarations
    playergroup auto2DC75B5D_g;
    int auto2DC75B5D_var;

    // Variable Initialization

    // Implementation
    auto2DC75B5D_g = gv_terrans;
    auto2DC75B5D_var = -1;
    while (true) {
        auto2DC75B5D_var = PlayerGroupNextPlayer(auto2DC75B5D_g, auto2DC75B5D_var);
        if (auto2DC75B5D_var < 0) { break; }
        if ((gv_terrandata[auto2DC75B5D_var].lv_strength > lv_s) && (gv_players[auto2DC75B5D_var].lv_alive == true)) {
            lv_s = gv_terrandata[auto2DC75B5D_var].lv_strength;
            lv_p = auto2DC75B5D_var;
        }
        else {
            if ((gv_terrandata[auto2DC75B5D_var].lv_strength == lv_s) && (gv_players[auto2DC75B5D_var].lv_alive == true) && (lv_p != 0)) {
                lv_r = RandomInt(1, 2);
                if ((lv_r == 1)) {
                    lv_p = auto2DC75B5D_var;
                }

            }

        }
    }
    if ((lv_p != 0)) {
        lv_return = lv_p;
    }
    else {
        lv_return = gf_ai_get_random_player();
    }
    return lv_return;
}

int gf_ai_get_weakest_player () {
    // Variable Declarations
    int lv_p;
    int lv_r;
    int lv_return;
    int lv_s;

    // Automatic Variable Declarations
    playergroup auto46B49564_g;
    int auto46B49564_var;

    // Variable Initialization

    // Implementation
    auto46B49564_g = gv_terrans;
    auto46B49564_var = -1;
    while (true) {
        auto46B49564_var = PlayerGroupNextPlayer(auto46B49564_g, auto46B49564_var);
        if (auto46B49564_var < 0) { break; }
        if ((lv_s == 0)) {
            lv_s = gv_terrandata[auto46B49564_var].lv_strength;
            lv_p = auto46B49564_var;
        }
        else {
            if ((gv_terrandata[auto46B49564_var].lv_strength < lv_s) && (gv_players[auto46B49564_var].lv_alive == true)) {
                lv_s = gv_terrandata[auto46B49564_var].lv_strength;
                lv_p = auto46B49564_var;
            }
            else {
                if ((gv_terrandata[auto46B49564_var].lv_strength == lv_s) && (gv_players[auto46B49564_var].lv_alive == true) && (lv_p != 0)) {
                    lv_r = RandomInt(1, 2);
                    if ((lv_r == 1)) {
                        lv_p = auto46B49564_var;
                    }

                }

            }
        }
    }
    if ((lv_p != 0)) {
        lv_return = lv_p;
    }
    else {
        lv_return = gf_ai_get_random_player();
    }
    return lv_return;
}

int gf_get_closest_alive_player_position (point lp_position) {
    // Variable Declarations
    fixed lv_distance;
    int lv_return;
    point lv_player_cc_point;

    // Automatic Variable Declarations
    playergroup auto6C8509D7_g;
    int auto6C8509D7_var;

    // Variable Initialization

    // Implementation
    auto6C8509D7_g = gv_terrans;
    auto6C8509D7_var = -1;
    while (true) {
        auto6C8509D7_var = PlayerGroupNextPlayer(auto6C8509D7_g, auto6C8509D7_var);
        if (auto6C8509D7_var < 0) { break; }
        if ((gv_players[auto6C8509D7_var].lv_alive == true)) {
            lv_player_cc_point = UnitGetPosition(UnitGroupUnit(UnitGroup("CommandCenter2", auto6C8509D7_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1));
            if ((lv_distance != 0.0)) {
                if ((lv_distance > DistanceBetweenPoints(lp_position, lv_player_cc_point))) {
                    lv_distance = DistanceBetweenPoints(lp_position, lv_player_cc_point);
                    lv_return = auto6C8509D7_var;
                }

            }
            else {
                lv_distance = DistanceBetweenPoints(lp_position, lv_player_cc_point);
                lv_return = auto6C8509D7_var;
            }
        }

    }
    lv_return = gv_players[lv_return].lv_position;
    return lv_return;
}

int gf_get_closest_alive_player_position_from_group (point lp_position, playergroup lp_player_group) {
    // Variable Declarations
    fixed lv_distance;
    int lv_return;
    point lv_player_cc_point;

    // Automatic Variable Declarations
    playergroup auto92E8D458_g;
    int auto92E8D458_var;

    // Variable Initialization

    // Implementation
    auto92E8D458_g = lp_player_group;
    auto92E8D458_var = -1;
    while (true) {
        auto92E8D458_var = PlayerGroupNextPlayer(auto92E8D458_g, auto92E8D458_var);
        if (auto92E8D458_var < 0) { break; }
        if ((gv_players[auto92E8D458_var].lv_alive == true)) {
            lv_player_cc_point = UnitGetPosition(UnitGroupUnit(UnitGroup("CommandCenter2", auto92E8D458_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1));
            if ((lv_distance != 0.0)) {
                if ((lv_distance > DistanceBetweenPoints(lp_position, lv_player_cc_point))) {
                    lv_distance = DistanceBetweenPoints(lp_position, lv_player_cc_point);
                    lv_return = auto92E8D458_var;
                }

            }
            else {
                lv_distance = DistanceBetweenPoints(lp_position, lv_player_cc_point);
                lv_return = auto92E8D458_var;
            }
        }

    }
    lv_return = gv_players[lv_return].lv_position;
    return lv_return;
}

point gf_get_command_center_point_from_player_position (int lp_player_position) {
    // Variable Declarations
    int lv_index;
    point lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return gv_command_center_position[lp_player_position];
}

int gf_get_free_supply () {
    // Variable Declarations
    int lv_i;
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_i = (PlayerGetPropertyInt(7, c_playerPropSuppliesLimit) - PlayerGetPropertyInt(7, c_playerPropSuppliesUsed));
    lv_r = lv_i;
    return lv_r;
}

int gf_get_total_spawner_count () {
    // Variable Declarations
    int lv_tc;
    int lv_r;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        lv_tc += gv_spawner_distro[lv_i];
        lv_i += 1;
    }
    lv_r = lv_tc;
    return lv_r;
}

int gf_get_total_t1_spawner_count () {
    // Variable Declarations
    int lv_tc;
    int lv_r;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        lv_tc += gv_t1_spawner_distro[lv_i];
        lv_i += 1;
    }
    lv_r = lv_tc;
    return lv_r;
}

void gf_build_spawner_every_2_seconds () {
    // Variable Declarations
    int lv_min_supply;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_update_free_position_counts();
    gf_reconstruct_possible_positions_array();
    if ((gv_armor_level > 3)) {
        if ((gv_armor_level > 4)) {
            if ((gv_req_torra > 0) && (gf_get_infestor_for_torra() != null)) {
                lv_min_supply = 90;
            }
            else {
                lv_min_supply = 10;
            }
        }
        else {
            lv_min_supply = 8;
        }
    }
    else {
        if ((gv_build == "tanklings")) {
            lv_min_supply = 5;
        }
        else {
            lv_min_supply = 4;
        }
    }
    if ((gf_get_free_supply() < lv_min_supply)) {
        if ((gv_debug_mode == 1)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/E951A043") + (IntToText(PlayerGetPropertyInt(7, c_playerPropMinerals)) + (StringExternal("Param/Value/769E7869") + IntToText(CatalogReferenceGetAsInt("Abil,ZergResearch,InfoArray[Research10].Resource[Minerals]", 7))))));
        }

        gf_try_buy_supply();
    }

    if ((gf_get_free_supply() >= lv_min_supply) && (gf_get_drone() != null)) {
        if ((gf_get_total_spawner_count() < gf_get_max_allowed_spawner_count())) {
            if ((gv_debug_mode == 1)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/C413A119") + IntToText(gf_get_free_supply())));
            }

            gf_build_spawner(gf_get_drone(), gf_where_toplace_next_spawner());
        }
        else {
            if ((gv_debug_mode == 1)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/D04B4A09") + IntToText(gf_get_free_supply())));
            }

            if ((gf_get_total_t1_spawner_count() > 0)) {
                gf_kill_random_slowling_spawner();
            }

            if ((gf_get_free_supply() <= 90)) {
                gf_try_buy_supply();
            }

        }
    }

}

trigger auto_gf_build_spawners_fast_e2s_Trigger = null;

void gf_build_spawners_fast_e2s () {
    if (auto_gf_build_spawners_fast_e2s_Trigger == null) {
        auto_gf_build_spawners_fast_e2s_Trigger = TriggerCreate("auto_gf_build_spawners_fast_e2s_TriggerFunc");
    }

    TriggerExecute(auto_gf_build_spawners_fast_e2s_Trigger, false, false);
}

bool auto_gf_build_spawners_fast_e2s_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ready_drones;
    unitgroup lv_drones;
    int lv_min_supply;

    // Automatic Variable Declarations
    unitgroup autoA4115056_g;
    int autoA4115056_u;
    unit autoA4115056_var;

    // Variable Initialization
    lv_ready_drones = gf_get_number_of_ready_drones();
    lv_drones = UnitGroupEmpty();

    // Implementation
    if ((gv_armor_level > 3)) {
        if ((gv_armor_level > 4)) {
            if ((gv_req_torra > 0) && (gf_get_infestor_for_torra() != null)) {
                lv_min_supply = 90;
            }
            else {
                lv_min_supply = 10;
            }
        }
        else {
            lv_min_supply = 8;
        }
    }
    else {
        if ((gv_build == "tanklings")) {
            lv_min_supply = 5;
        }
        else {
            lv_min_supply = 4;
        }
    }
    if ((gf_get_free_supply() < lv_min_supply)) {
        gf_try_buy_supply();
    }

    if ((lv_ready_drones > 0)) {
        UnitGroupAddUnitGroup(lv_drones, gf_get_all_ready_drones());
        gf_update_free_position_counts();
        gf_reconstruct_possible_positions_array();
        if ((gf_get_free_supply() >= lv_min_supply) && (gf_get_total_spawner_count() < gf_get_max_allowed_spawner_count())) {
            autoA4115056_g = lv_drones;
            autoA4115056_u = UnitGroupCount(autoA4115056_g, c_unitCountAll);
            for (;; autoA4115056_u -= 1) {
                autoA4115056_var = UnitGroupUnitFromEnd(autoA4115056_g, autoA4115056_u);
                if (autoA4115056_var == null) { break; }
                if ((gf_get_free_supply() >= lv_min_supply) && (gf_get_total_spawner_count() < gf_get_max_allowed_spawner_count())) {
                    gf_build_spawner(autoA4115056_var, gf_where_toplace_next_spawner());
                }
                else {
                    gf_try_buy_supply();
                    break;
                }
            }
        }

    }
    else {
        gf_build_drone();
    }
    if ((gf_get_total_spawner_count() < gf_get_max_allowed_spawner_count())) {
    }
    else {
        if ((gf_get_total_t1_spawner_count() > 0)) {
            gf_kill_random_slowling_spawner();
        }

        if ((gf_get_free_supply() <= 90)) {
            gf_try_buy_supply();
        }

    }
    return true;
}

int gf_get_max_allowed_spawner_count () {
    // Variable Declarations
    int lv_r;
    int lv_dead_terran_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_r = 180;
    lv_dead_terran_count = (6 - gf_get_alive_player_count());

    // Implementation
    lv_r = (lv_r + (lv_dead_terran_count * 30));
    return lv_r;
}

void gf_build_spawner (unit lp_drone, int lp_target_player) {
    // Variable Declarations
    int lv_soup;
    string lv_type;
    int lv_rand;
    point lv_target_position;
    unit lv_infestor;
    unitgroup lv_strike_ug;

    // Automatic Variable Declarations
    int auto49777F84_val;
    int auto437061E9_val;
    string auto13E64355_val;
    string autoBC8374F8_val;

    // Variable Initialization
    lv_soup = gf_get_free_supply();
    lv_strike_ug = UnitGroupEmpty();

    // Implementation
    if ((gv_possible_positions_extractor_free > 0) && (lv_soup >= 45)) {
        lv_type = "MineralExtractor";
    }
    else {
        auto49777F84_val = gv_supply_upgrades;
        if (auto49777F84_val == 0) {
            if ((gv_build == "tanklings")) {
                lv_type = "TanklingSpawner";
            }
            else {
                if ((lv_soup > 3)) {
                    lv_type = "SlowlingSpawner";
                }
                else {
                    lv_type = "StrikelingSpawner";
                }
            }
        }
        else if (auto49777F84_val == 1) {
            if ((gv_build == "tanklings")) {
                lv_type = "TanklingSpawner";
            }
            else {
                if ((lv_soup > 3)) {
                    lv_type = "SlowlingSpawner";
                }
                else {
                    lv_type = "StrikelingSpawner";
                }
            }
        }
        else if (auto49777F84_val == 2) {
            if ((gv_build == "tanklings")) {
                lv_type = "TanklingSpawner";
            }
            else {
                if ((lv_soup > 3)) {
                    lv_type = "SlowlingSpawner";
                }
                else {
                    lv_type = "StrikelingSpawner";
                }
            }
        }
        else if (auto49777F84_val == 3) {
            if ((gv_build == "tanklings")) {
                lv_type = "TanklingSpawner";
            }
            else {
                if ((lv_soup > 3)) {
                    lv_type = "SlowlingSpawner";
                }
                else {
                    lv_type = "StrikelingSpawner";
                }
            }
        }
        else {
            lv_strike_ug = UnitGroup("StrikelingSpawner", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((gv_is_af_event == true)) {
                UnitGroupAddUnitGroup(lv_strike_ug, UnitGroup("MarineSpawner", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            if ((gv_strikeling_build_given_up == false) && (((gv_strikeling_build_failure_count <= 10) && (gv_strikelings_built_initially == false) && (UnitGroupCount(lv_strike_ug, c_unitCountAlive) < 59)) || ((gv_strikelings_built_initially == true) && (UnitGroupCount(lv_strike_ug, c_unitCountAlive) < 29))) && (lv_soup >= 3)) {
                lv_type = "StrikelingSpawner";
            }
            else {
                auto437061E9_val = gv_armor_level;
                if (auto437061E9_val == 0) {
                    if ((gv_build == "tanklings")) {
                        lv_type = "TanklingSpawner";
                    }
                    else {
                        if ((lv_soup > 3)) {
                            lv_type = "SlowlingSpawner";
                        }

                    }
                }
                else if (auto437061E9_val == 1) {
                    lv_infestor = gf_get_one_infestor();
                    if ((lv_soup > 20) && (gv_req_beastlings > 0) && (lv_infestor != null)) {
                        lv_type = "BeastlingSpawner";
                    }
                    else {
                        if ((gv_build == "tanklings")) {
                            lv_type = "TanklingSpawner";
                        }
                        else {
                            if ((lv_soup > 4)) {
                                if ((gv_difficulty > 3)) {
                                    lv_type = "SlowlingSpawner";
                                }
                                else {
                                    lv_rand = RandomInt(1, 2);
                                    if ((lv_rand == 2)) {
                                        lv_type = "TanklingSpawner";
                                    }
                                    else {
                                        lv_type = "SlowlingSpawner";
                                    }
                                }
                            }
                            else {
                                lv_type = "SlowlingSpawner";
                            }
                        }
                    }
                }
                else if (auto437061E9_val == 2) {
                    if ((lv_soup > 20) && ((gv_req_beastlings > 0) || (gv_req_ravs > 0))) {
                        if ((gv_req_beastlings > 0)) {
                            lv_infestor = gf_get_one_infestor();
                            if ((lv_infestor != null)) {
                                lv_type = "BeastlingSpawner";
                            }

                        }
                        else {
                            if ((gv_req_ravs > 0)) {
                                lv_infestor = UnitGroupRandomUnit(gv_reserved_infestors, c_unitCountAlive);
                                if ((lv_infestor != null)) {
                                    lv_type = "RavatorSpawner";
                                }

                            }

                        }
                    }
                    else {
                        if ((gv_build == "tanklings")) {
                            lv_type = "TanklingSpawner";
                        }
                        else {
                            if ((lv_soup >= 7)) {
                                if ((gv_difficulty > 2)) {
                                    lv_rand = RandomInt(1, 3);
                                }
                                else {
                                    lv_rand = RandomInt(1, 2);
                                }
                                if ((lv_rand > 1)) {
                                    lv_type = "RoachSpawner";
                                }
                                else {
                                    if ((gv_possible_positions_t1_free > 0)) {
                                        lv_type = "SlowlingSpawner";
                                    }

                                }
                            }
                            else {
                                if ((gv_possible_positions_t1_free > 0)) {
                                    lv_type = "SlowlingSpawner";
                                }

                            }
                        }
                    }
                }
                else if (auto437061E9_val == 3) {
                    if ((lv_soup > 20) && ((gv_req_beastlings > 0) || (gv_req_ravs > 0))) {
                        if ((gv_req_beastlings > 0)) {
                            lv_infestor = gf_get_one_infestor();
                            if ((lv_soup > 20) && (gv_req_beastlings > 0) && (lv_infestor != null)) {
                                lv_type = "BeastlingSpawner";
                            }

                        }
                        else {
                            if ((UnitGroupCount(gv_reserved_infestors, c_unitCountAlive) > 0)) {
                                lv_infestor = UnitGroupRandomUnit(gv_reserved_infestors, c_unitCountAlive);
                            }

                            if ((lv_soup > 20) && (gv_req_ravs > 0) && (lv_infestor != null)) {
                                lv_type = "RavatorSpawner";
                            }

                        }
                    }
                    else {
                        lv_infestor = gf_get_infestor_for_infused();
                        if ((lv_soup > 40) && (gv_req_infused > 0) && (lv_infestor != null)) {
                            lv_type = "InfusedRoachSpawner";
                        }
                        else {
                            if ((gv_build == "tanklings")) {
                                lv_type = "TanklingSpawner";
                            }
                            else {
                                if ((lv_soup >= 9)) {
                                    if ((gv_difficulty > 2)) {
                                        lv_rand = RandomInt(1, 3);
                                    }
                                    else {
                                        lv_rand = RandomInt(1, 2);
                                    }
                                    if ((lv_rand > 1)) {
                                        lv_type = "PrimalRoachSpawner";
                                    }
                                    else {
                                        lv_type = "RoachSpawner";
                                    }
                                }
                                else {
                                    if ((gv_possible_positions_t1_free > 0)) {
                                        lv_type = "SlowlingSpawner";
                                    }

                                }
                            }
                        }
                    }
                }
                else if (auto437061E9_val == 4) {
                    if ((lv_soup > 20) && ((gv_req_beastlings > 0) || (gv_req_ravs > 0))) {
                        if ((gv_req_beastlings > 0)) {
                            lv_infestor = gf_get_one_infestor();
                            if ((lv_soup > 20) && (gv_req_beastlings > 0) && (lv_infestor != null)) {
                                lv_type = "BeastlingSpawner";
                            }

                        }
                        else {
                            if ((UnitGroupCount(gv_reserved_infestors, c_unitCountAlive) > 0)) {
                                lv_infestor = UnitGroupRandomUnit(gv_reserved_infestors, c_unitCountAlive);
                            }

                            if ((lv_soup > 20) && (gv_req_ravs > 0) && (lv_infestor != null)) {
                                lv_type = "RavatorSpawner";
                            }

                        }
                    }
                    else {
                        lv_infestor = gf_get_infestor_for_infused();
                        if ((lv_soup > 40) && (gv_req_infused > 0) && (lv_infestor != null)) {
                            lv_type = "InfusedRoachSpawner";
                        }
                        else {
                            if ((lv_soup >= 12)) {
                                if ((gv_difficulty > 2) && (gv_difficulty < 6)) {
                                    lv_rand = RandomInt(1, 3);
                                }
                                else {
                                    if ((gv_difficulty >= 6)) {
                                        lv_rand = 1;
                                    }
                                    else {
                                        lv_rand = RandomInt(1, 2);
                                    }
                                }
                                if ((lv_rand > 1)) {
                                    if ((gv_possible_positions_t3_free > 0)) {
                                        lv_type = "UltraliskSpawner";
                                    }

                                }
                                else {
                                    if ((gv_possible_positions_t2_free > 0)) {
                                        lv_type = "RoachSpawner";
                                    }

                                }
                            }
                            else {
                                if ((gv_possible_positions_t2_free > 0) && (lv_soup >= 7)) {
                                    lv_type = "RoachSpawner";
                                }
                                else {
                                    if ((gv_possible_positions_t1_free > 0) && (lv_soup >= 4)) {
                                        lv_type = "SlowlingSpawner";
                                    }

                                }
                            }
                        }
                    }
                }
                else if (auto437061E9_val == 5) {
                    if ((gv_req_torra > 0) && (gf_get_infestor_for_torra() != null) && (lv_soup >= 90)) {
                        lv_infestor = gf_get_infestor_for_torra();
                        lv_type = "TorraliskSpawner";
                    }
                    else {
                        if ((lv_soup > 20) && ((gv_req_beastlings > 0) || (gv_req_ravs > 0))) {
                            if ((gv_req_beastlings > 0)) {
                                lv_infestor = gf_get_one_infestor();
                                if ((lv_soup > 20) && (gv_req_beastlings > 0) && (lv_infestor != null)) {
                                    lv_type = "BeastlingSpawner";
                                }

                            }
                            else {
                                if ((UnitGroupCount(gv_reserved_infestors, c_unitCountAlive) > 0)) {
                                    lv_infestor = UnitGroupRandomUnit(gv_reserved_infestors, c_unitCountAlive);
                                }

                                if ((lv_soup > 20) && (gv_req_ravs > 0) && (lv_infestor != null)) {
                                    lv_type = "RavatorSpawner";
                                }

                            }
                        }
                        else {
                            lv_infestor = gf_get_infestor_for_infused();
                            if ((lv_soup > 40) && (gv_req_infused > 0) && (lv_infestor != null)) {
                                lv_type = "InfusedRoachSpawner";
                            }
                            else {
                                if ((lv_soup >= 25)) {
                                    if ((gv_difficulty > 2)) {
                                        lv_rand = RandomInt(1, 3);
                                    }
                                    else {
                                        lv_rand = RandomInt(1, 2);
                                    }
                                    if ((gv_possible_positions_t3_free > 0)) {
                                        if ((lv_rand > 1) && ((gf_is_3v3() == false) || (gf_can_build_bruta_3v3(lp_target_player) == true))) {
                                            lv_type = "BrutaliskSpawner";
                                        }
                                        else {
                                            lv_type = "UltraliskSpawner";
                                        }
                                    }
                                    else {
                                        if ((gv_possible_positions_t2_free > 0)) {
                                            lv_type = "RoachSpawner";
                                        }
                                        else {
                                            lv_type = "SlowlingSpawner";
                                        }
                                    }
                                }
                                else {
                                    if ((gv_possible_positions_t2_free > 0) && (lv_soup >= 7)) {
                                        lv_type = "RoachSpawner";
                                    }
                                    else {
                                        if ((gv_possible_positions_t1_free > 0) && (lv_soup >= 4)) {
                                            lv_type = "SlowlingSpawner";
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
                else {
                }
            }
        }
    }
    if ((lv_type != null)) {
        if ((lv_type == "SlowlingSpawner") && (gv_difficulty > 2)) {
            if ((RandomInt(1, 5) > 3)) {
                lv_type = "CreeperSpawner";
            }

        }

        if ((gv_build == "roach") && ((lv_type == "PrimalRoachSpawner") || (lv_type == "UltraliskSpawner"))) {
            lv_type = "RoachSpawner";
        }

        lv_target_position = gf_get_closest_free_position_to_player_of_type(lp_target_player, lv_type);
        if ((lv_type == "StrikelingSpawner") && (lv_target_position == null)) {
            lv_type = "SlowlingSpawner";
            lv_target_position = gf_get_closest_free_position_to_player_of_type(lp_target_player, lv_type);
            gv_strikeling_build_failure_count += 1;
        }

        if ((lv_target_position != null)) {
            if (((lv_type == "BeastlingSpawner") || (lv_type == "RavatorSpawner") || (lv_type == "InfusedRoachSpawner") || (lv_type == "TorraliskSpawner"))) {
                auto13E64355_val = lv_type;
                if (auto13E64355_val == "BeastlingSpawner") {
                    lv_infestor = UnitGroupClosestToPoint(UnitGroup("InfestorZergHex2", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_target_position);
                    UnitIssueOrder(lv_infestor, OrderTargetingPoint(AbilityCommand("InfestorMorphUnitZergLargeBuildings", 1), lv_target_position), c_orderQueueReplace);
                }
                else if (auto13E64355_val == "RavatorSpawner") {
                    lv_infestor = UnitGroupClosestToPoint(gv_reserved_infestors, lv_target_position);
                    UnitIssueOrder(lv_infestor, OrderTargetingPoint(AbilityCommand("InfestorMorphUnitZergLargeBuildings", 2), lv_target_position), c_orderQueueReplace);
                }
                else if (auto13E64355_val == "InfusedRoachSpawner") {
                    UnitIssueOrder(lv_infestor, OrderTargetingPoint(AbilityCommand("InfestorMorphUnitZergLargeBuildings", 4), lv_target_position), c_orderQueueReplace);
                }
                else if (auto13E64355_val == "TorraliskSpawner") {
                    UnitIssueOrder(lv_infestor, OrderTargetingPoint(AbilityCommand("InfestorMorphUnitZergLargeBuildings", 6), lv_target_position), c_orderQueueReplace);
                }
                else {
                }
            }
            else {
                autoBC8374F8_val = lv_type;
                if (autoBC8374F8_val == "MineralExtractor") {
                    UnitIssueOrder(lp_drone, OrderTargetingPoint(AbilityCommand("MorphUnitDroneZergBuildings", 13), lv_target_position), c_orderQueueReplace);
                }
                else if (autoBC8374F8_val == "SlowlingSpawner") {
                    UnitIssueOrder(lp_drone, OrderTargetingPoint(AbilityCommand("MorphUnitDroneZergBuildings", 1), lv_target_position), c_orderQueueReplace);
                }
                else if (autoBC8374F8_val == "CreeperSpawner") {
                    UnitIssueOrder(lp_drone, OrderTargetingPoint(AbilityCommand("MorphUnitDroneZergBuildings", 5), lv_target_position), c_orderQueueReplace);
                }
                else if (autoBC8374F8_val == "StrikelingSpawner") {
                    UnitIssueOrder(lp_drone, OrderTargetingPoint(AbilityCommand("MorphUnitDroneZergBuildings", 3), lv_target_position), c_orderQueueReplace);
                }
                else if (autoBC8374F8_val == "TanklingSpawner") {
                    UnitIssueOrder(lp_drone, OrderTargetingPoint(AbilityCommand("MorphUnitDroneZergBuildings", 4), lv_target_position), c_orderQueueReplace);
                }
                else if (autoBC8374F8_val == "RoachSpawner") {
                    UnitIssueOrder(lp_drone, OrderTargetingPoint(AbilityCommand("MorphUnitDroneZergBuildings", 6), lv_target_position), c_orderQueueReplace);
                }
                else if (autoBC8374F8_val == "PrimalRoachSpawner") {
                    UnitIssueOrder(lp_drone, OrderTargetingPoint(AbilityCommand("MorphUnitDroneZergBuildings", 7), lv_target_position), c_orderQueueReplace);
                }
                else if (autoBC8374F8_val == "UltraliskSpawner") {
                    UnitIssueOrder(lp_drone, OrderTargetingPoint(AbilityCommand("MorphUnitDroneZergBuildings", 8), lv_target_position), c_orderQueueReplace);
                }
                else if (autoBC8374F8_val == "BrutaliskSpawner") {
                    UnitIssueOrder(lp_drone, OrderTargetingPoint(AbilityCommand("MorphUnitDroneZergBuildings", 9), lv_target_position), c_orderQueueReplace);
                }
                else {
                }
            }
        }

    }

}

void gf_strikeling_build_failure_directive () {
    // Automatic Variable Declarations
    // Implementation
    gf_inject_left_strike_positions();
    gv_strikeling_build_given_up = true;
}

void gf_set_build () {
    // Variable Declarations
    int lv_random;

    // Automatic Variable Declarations
    int autoAEEF6771_val;
    int auto58ED7DB2_val;

    // Variable Initialization
    lv_random = RandomInt(1, 2);

    // Implementation
    if ((gv_difficulty == 1)) {
        gv_build = "default";
    }
    else {
        if ((gv_difficulty > 1) && (gv_difficulty < 4)) {
            auto58ED7DB2_val = lv_random;
            if (auto58ED7DB2_val == 1) {
                gv_build = "default";
            }
            else if (auto58ED7DB2_val == 2) {
                gv_build = "tanklings";
            }
            else {
            }
        }
        else {
            if ((gv_difficulty >= 4)) {
                autoAEEF6771_val = lv_random;
                if (autoAEEF6771_val == 1) {
                    gv_build = "default";
                }
                else if (autoAEEF6771_val == 2) {
                    gv_build = "roach";
                }
                else {
                }
            }

        }
    }
}

void gf_kill_random_t1_spawner () {
    // Automatic Variable Declarations
}

void gf_kill_random_slowling_spawner () {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_u = UnitGroupRandomUnit(UnitGroup("SlowlingSpawner", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    UnitKill(lv_u);
}

void gf_kill_random_creeper_spawner () {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_u = UnitGroupRandomUnit(UnitGroup("SlowlingSpawner", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    UnitKill(lv_u);
}

void gf_kill_random_tankling_spawner () {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_u = UnitGroupRandomUnit(UnitGroup("SlowlingSpawner", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    UnitKill(lv_u);
}

void gf_get_possible_positions () {
    // Variable Declarations
    int lv_cp;

    // Automatic Variable Declarations
    unitgroup auto641AD434_g;
    int auto641AD434_u;
    unit auto641AD434_var;
    string auto1469AB90_val;

    // Variable Initialization

    // Implementation
    auto641AD434_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto641AD434_u = UnitGroupCount(auto641AD434_g, c_unitCountAll);
    for (;; auto641AD434_u -= 1) {
        auto641AD434_var = UnitGroupUnitFromEnd(auto641AD434_g, auto641AD434_u);
        if (auto641AD434_var == null) { break; }
        if (((UnitGetType(auto641AD434_var) == "StrikelingSpawner") || (UnitGetType(auto641AD434_var) == "RavatorSpawner") || (UnitGetType(auto641AD434_var) == "GreaterMineralExtractor") || (UnitGetType(auto641AD434_var) == "BrutaliskSpawner") || (UnitGetType(auto641AD434_var) == "RoachSpawner") || (UnitGetType(auto641AD434_var) == "UltraliskSpawner") || (UnitGetType(auto641AD434_var) == "AiurRockDebris2x2") || (UnitGetType(auto641AD434_var) == "Pylon") || (UnitGetType(auto641AD434_var) == "Stargate") || (UnitGetType(auto641AD434_var) == "DarkShrine") || (UnitGetType(auto641AD434_var) == "Ice2x2NonConjoined") || (UnitGetType(auto641AD434_var) == "ProcessingCore") || (UnitGetType(auto641AD434_var) == "RelayTower") || (UnitGetType(auto641AD434_var) == "Node") || (UnitGetType(auto641AD434_var) == "TechVault") || (UnitGetType(auto641AD434_var) == "RoachWarren"))) {
            auto1469AB90_val = UnitGetType(auto641AD434_var);
            if (auto1469AB90_val == "StrikelingSpawner") {
                gv_possible_positions_t1_count += 1;
                gv_possible_positions_t1[gv_possible_positions_t1_count] = UnitGetPosition(auto641AD434_var);
            }
            else if (auto1469AB90_val == "RoachSpawner") {
                gv_possible_positions_t2_count += 1;
                gv_possible_positions_t2[gv_possible_positions_t2_count] = UnitGetPosition(auto641AD434_var);
            }
            else if (auto1469AB90_val == "BrutaliskSpawner") {
                gv_possible_positions_t3_count += 1;
                gv_possible_positions_t3[gv_possible_positions_t3_count] = UnitGetPosition(auto641AD434_var);
            }
            else if (auto1469AB90_val == "GreaterMineralExtractor") {
                gv_possible_positions_extractor_count += 1;
                gv_possible_positions_extractor[gv_possible_positions_extractor_count] = UnitGetPosition(auto641AD434_var);
            }
            else if (auto1469AB90_val == "RavatorSpawner") {
                gv_possible_positions_special_count += 1;
                gv_possible_positions_special[gv_possible_positions_special_count] = UnitGetPosition(auto641AD434_var);
            }
            else if (auto1469AB90_val == "UltraliskSpawner") {
                lv_cp = gf_get_closest_position(UnitGetPosition(auto641AD434_var));
                gv_extra_t1_positions_counts[lv_cp] += 1;
                gv_extra_t1_positions[lv_cp][gv_extra_t1_positions_counts[lv_cp]] = UnitGetPosition(auto641AD434_var);
            }
            else if (auto1469AB90_val == "Pylon") {
                gf_mgc_add_position_set(auto641AD434_var);
            }
            else if (auto1469AB90_val == "Stargate") {
                lv_cp = gf_get_closest_position(UnitGetPosition(auto641AD434_var));
                gv_defensive_egg_cluster_positions[lv_cp] = UnitGetPosition(auto641AD434_var);
            }
            else if (auto1469AB90_val == "DarkShrine") {
                gv_possible_positions_strikelings_count += 1;
                gv_possible_positions_strikelings[gv_possible_positions_strikelings_count] = UnitGetPosition(auto641AD434_var);
            }
            else if (auto1469AB90_val == "AiurRockDebris2x2") {
            }
            else if (auto1469AB90_val == "Ice2x2NonConjoined") {
                lv_cp = gf_get_closest_position(UnitGetPosition(auto641AD434_var));
                gf_add_afterlife_zerg_positions(auto641AD434_var, lv_cp);
            }
            else if (auto1469AB90_val == "Node") {
                lv_cp = gf_get_closest_position(UnitGetPosition(auto641AD434_var));
                gv_tdead_extra_positions_t2_counts[lv_cp] += 1;
                gv_tdead_extra_positions_t2[lv_cp][gv_tdead_extra_positions_t2_counts[lv_cp]] = UnitGetPosition(auto641AD434_var);
            }
            else if (auto1469AB90_val == "TechVault") {
                lv_cp = gf_get_closest_position(UnitGetPosition(auto641AD434_var));
                gv_tdead_extra_positions_t3_counts[lv_cp] += 1;
                gv_tdead_extra_positions_t3[lv_cp][gv_tdead_extra_positions_t3_counts[lv_cp]] = UnitGetPosition(auto641AD434_var);
            }
            else if (auto1469AB90_val == "RelayTower") {
                lv_cp = gf_get_closest_position(UnitGetPosition(auto641AD434_var));
                gv_tdead_extra_positions_spines_count[lv_cp] += 1;
                gv_tdead_extra_positions_spines[lv_cp][gv_tdead_extra_positions_spines_count[lv_cp]] = UnitGetPosition(auto641AD434_var);
            }
            else if (auto1469AB90_val == "ProcessingCore") {
                lv_cp = gf_get_closest_position(UnitGetPosition(auto641AD434_var));
                gv_tdead_extra_positions_creep_sources_counts[lv_cp] += 1;
                gv_tdead_extra_positions_creep_sources[lv_cp][gv_tdead_extra_positions_creep_sources_counts[lv_cp]] = UnitGetPosition(auto641AD434_var);
            }
            else if (auto1469AB90_val == "RoachWarren") {
                lv_cp = gf_get_closest_position(UnitGetPosition(auto641AD434_var));
                gv_tdead_extra_positions_bnests_count[lv_cp] += 1;
                gv_tdead_extra_positions_bnests[lv_cp][gv_tdead_extra_positions_bnests_count[lv_cp]] = UnitGetPosition(auto641AD434_var);
            }
            else {
            }
            UnitRemove(auto641AD434_var);
        }

    }
}

point gf_get_closest_free_position_to_player_of_type (int lp_player_position, string lp_type) {
    // Variable Declarations
    int lv_kind;
    int lv_limit;
    point lv_return;
    point lv_pre_result;
    int lv_i;
    point lv_point;
    fixed lv_pre_result_distance;
    point[100] lv_drone_goal_array;
    int lv_drone_goal_count;
    int lv_j;
    bool lv_taken;
    bool lv_reverse;
    unit lv_closest_bigspine;

    // Automatic Variable Declarations
    unitgroup autoF6F348E0_g;
    int autoF6F348E0_u;
    unit autoF6F348E0_var;
    int autoC3EDDAFD_val;

    // Variable Initialization
    lv_i = 1;
    lv_j = 1;

    // Implementation
    autoF6F348E0_g = UnitGroup("Drone2", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF6F348E0_u = UnitGroupCount(autoF6F348E0_g, c_unitCountAll);
    for (;; autoF6F348E0_u -= 1) {
        autoF6F348E0_var = UnitGroupUnitFromEnd(autoF6F348E0_g, autoF6F348E0_u);
        if (autoF6F348E0_var == null) { break; }
        if ((UnitOrderCount(autoF6F348E0_var) >= 1)) {
            lv_drone_goal_count = (lv_drone_goal_count + 1);
            lv_drone_goal_array[lv_drone_goal_count] = UnitGetGoalPosition(autoF6F348E0_var);
        }

    }
    if (((lp_type == "SlowlingSpawner") || (lp_type == "TanklingSpawner") || (lp_type == "CreeperSpawner"))) {
        lv_kind = 1;
        lv_limit = gv_possible_positions_t1_count;
    }
    else if (((lp_type == "RoachSpawner") || (lp_type == "PrimalRoachSpawner"))) {
        lv_kind = 2;
        lv_limit = gv_possible_positions_t2_count;
    }
    else if (((lp_type == "UltraliskSpawner") || (lp_type == "BrutaliskSpawner"))) {
        lv_kind = 3;
        lv_limit = gv_possible_positions_t3_count;
    }
    else if ((lp_type == "MineralExtractor")) {
        lv_reverse = true;
        lv_kind = 4;
        lv_limit = gv_possible_positions_extractor_count;
    }
    else if (((lp_type == "BeastlingSpawner") || (lp_type == "BanelingSpawner") || (lp_type == "RavatorSpawner") || (lp_type == "InfusedRoachSpawner") || (lp_type == "TorraliskSpawner"))) {
        lv_reverse = true;
        lv_kind = 5;
        lv_limit = gv_possible_positions_special_count;
    }
    else if ((lp_type == "StrikelingSpawner")) {
        lv_kind = 6;
        lv_limit = gv_possible_positions_strikelings_count;
    }
    while ((lv_i <= lv_limit)) {
        lv_taken = false;
        autoC3EDDAFD_val = lv_kind;
        if (autoC3EDDAFD_val == 1) {
            lv_point = gv_possible_positions_t1[lv_i];
        }
        else if (autoC3EDDAFD_val == 2) {
            lv_point = gv_possible_positions_t2[lv_i];
        }
        else if (autoC3EDDAFD_val == 3) {
            lv_point = gv_possible_positions_t3[lv_i];
        }
        else if (autoC3EDDAFD_val == 4) {
            lv_point = gv_possible_positions_extractor[lv_i];
        }
        else if (autoC3EDDAFD_val == 5) {
            lv_point = gv_possible_positions_special[lv_i];
        }
        else if (autoC3EDDAFD_val == 6) {
            lv_point = gv_possible_positions_strikelings[lv_i];
        }
        else {
        }
        lv_j = 1;
        if (((lv_kind < 5) || (lv_kind == 6))) {
            while ((lv_j <= lv_drone_goal_count)) {
                if ((lv_drone_goal_array[lv_j] == lv_point)) {
                    lv_taken = true;
                    break;
                }

                lv_j += 1;
            }
        }

        if ((gf_is_area_around_point_safe(lv_point) == true) && (lv_taken == false)) {
            if ((lv_reverse == false)) {
                if ((lv_pre_result_distance == 0.0)) {
                    lv_pre_result = lv_point;
                    lv_pre_result_distance = DistanceBetweenPoints(lv_point, gf_get_command_center_point_from_player_position(lp_player_position));
                }
                else {
                    if ((DistanceBetweenPoints(lv_point, gf_get_command_center_point_from_player_position(lp_player_position)) < lv_pre_result_distance)) {
                        lv_pre_result = lv_point;
                        lv_pre_result_distance = DistanceBetweenPoints(lv_point, gf_get_command_center_point_from_player_position(lp_player_position));
                    }

                }
            }
            else {
                if ((lv_pre_result_distance == 0.0)) {
                    lv_pre_result = lv_point;
                    lv_pre_result_distance = DistanceBetweenPoints(lv_point, PointFromId(1910508930));
                }
                else {
                    if ((DistanceBetweenPoints(lv_point, PointFromId(1910508930)) > lv_pre_result_distance)) {
                        lv_pre_result = lv_point;
                        lv_pre_result_distance = DistanceBetweenPoints(lv_point, PointFromId(1910508930));
                    }

                }
            }
        }

        lv_i += 1;
    }
    lv_return = lv_pre_result;
    if (((lv_kind == 1) || (lv_kind == 6))) {
        lv_closest_bigspine = UnitGroupClosestToPoint(UnitGroup("LargeSpineCrawler", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_pre_result);
        lv_i = 1;
        lv_pre_result_distance = 0.0;
        while ((lv_i <= lv_limit)) {
            lv_taken = false;
            if ((lv_kind == 1)) {
                lv_point = gv_possible_positions_t1[lv_i];
            }
            else {
                lv_point = gv_possible_positions_strikelings[lv_i];
            }
            lv_j = 1;
            while ((lv_j <= lv_drone_goal_count)) {
                if ((lv_drone_goal_array[lv_j] == lv_point)) {
                    lv_taken = true;
                    break;
                }

                lv_j += 1;
            }
            if ((gf_is_area_around_point_safe(lv_point) == true) && (lv_taken == false)) {
                if ((lv_pre_result_distance == 0.0)) {
                    lv_pre_result = lv_point;
                    lv_pre_result_distance = DistanceBetweenPoints(lv_point, UnitGetPosition(lv_closest_bigspine));
                }
                else {
                    if ((DistanceBetweenPoints(lv_point, UnitGetPosition(lv_closest_bigspine)) < lv_pre_result_distance)) {
                        lv_pre_result = lv_point;
                        lv_pre_result_distance = DistanceBetweenPoints(lv_point, UnitGetPosition(lv_closest_bigspine));
                    }

                }
            }

            lv_i += 1;
        }
        lv_return = lv_pre_result;
    }

    return lv_return;
}

void gf_update_free_position_counts () {
    // Variable Declarations
    int lv_i;
    point lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    gv_possible_positions_t1_free = 0;
    gv_possible_positions_t2_free = 0;
    gv_possible_positions_t3_free = 0;
    gv_possible_positions_extractor_free = 0;
    gv_possible_positions_special_free = 0;
    gv_possible_positions_strikelings_free = 0;
    while ((lv_i <= gv_possible_positions_t1_count)) {
        lv_p = gv_possible_positions_t1[lv_i];
        if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
            gv_possible_positions_t1_free += 1;
        }

        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= gv_possible_positions_t1_dead_count)) {
        lv_p = gv_possible_positions_t1_dead[lv_i];
        if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
            gv_possible_positions_t1_free += 1;
        }

        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= gv_possible_positions_t2_count)) {
        lv_p = gv_possible_positions_t2[lv_i];
        if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
            gv_possible_positions_t2_free += 1;
        }

        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= gv_possible_positions_t2_dead_count)) {
        lv_p = gv_possible_positions_t2_dead[lv_i];
        if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
            gv_possible_positions_t2_free += 1;
        }

        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= gv_possible_positions_t3_count)) {
        lv_p = gv_possible_positions_t3[lv_i];
        if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
            gv_possible_positions_t3_free += 1;
        }

        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= gv_possible_positions_t3_dead_count)) {
        lv_p = gv_possible_positions_t3_dead[lv_i];
        if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
            gv_possible_positions_t3_free += 1;
        }

        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= gv_possible_positions_extractor_count)) {
        lv_p = gv_possible_positions_extractor[lv_i];
        if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
            gv_possible_positions_extractor_free += 1;
        }

        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= gv_possible_positions_special_count)) {
        lv_p = gv_possible_positions_special[lv_i];
        if ((UnitTypePlacementTestsFromPoint("RavatorSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
            gv_possible_positions_special_free += 1;
        }

        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= gv_possible_positions_special_dead_count)) {
        lv_p = gv_possible_positions_special_dead[lv_i];
        if ((UnitTypePlacementTestsFromPoint("RavatorSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
            gv_possible_positions_special_free += 1;
        }

        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= gv_possible_positions_strikelings_count)) {
        lv_p = gv_possible_positions_strikelings[lv_i];
        if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
            gv_possible_positions_strikelings_free += 1;
        }

        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= gv_possible_positions_strikelings_dead_count)) {
        lv_p = gv_possible_positions_strikelings_dead[lv_i];
        if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
            gv_possible_positions_strikelings_free += 1;
        }

        lv_i += 1;
    }
    lv_i = 1;
}

void gf_reconstruct_possible_positions_array () {
    // Variable Declarations
    int lv_i;
    point lv_p;
    point[1000] lv_temp_array;
    int lv_temp_cnt;
    int lv_new_dead_temp_array_count;
    point[1000] lv_new_dead_temp_array;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    if (true) {
        while ((lv_i <= gv_possible_positions_t1_count)) {
            lv_p = gv_possible_positions_t1[lv_i];
            if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
                lv_temp_cnt += 1;
                lv_temp_array[lv_temp_cnt] = lv_p;
            }

            lv_i += 1;
        }
        lv_i = 1;
        if ((gv_possible_positions_t1_dead_count > 0)) {
            while ((lv_i <= gv_possible_positions_t1_dead_count)) {
                lv_p = gv_possible_positions_t1_dead[lv_i];
                if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
                    lv_temp_cnt += 1;
                    lv_temp_array[lv_temp_cnt] = lv_p;
                }
                else {
                    lv_new_dead_temp_array_count += 1;
                    lv_new_dead_temp_array[lv_new_dead_temp_array_count] = lv_p;
                }
                lv_i += 1;
            }
        }

        lv_i = 1;
        while ((lv_i <= lv_temp_cnt)) {
            gv_possible_positions_t1[lv_i] = lv_temp_array[lv_i];
            lv_i += 1;
        }
        lv_i = 1;
        gv_possible_positions_t1_count = lv_temp_cnt;
        gv_possible_positions_t1_dead_count = 0;
        lv_temp_cnt = 0;
        while ((lv_i <= lv_new_dead_temp_array_count)) {
            gv_possible_positions_t1_dead_count += 1;
            gv_possible_positions_t1_dead[lv_i] = lv_new_dead_temp_array[lv_i];
            lv_i += 1;
        }
        lv_i = 1;
        lv_new_dead_temp_array_count = 0;
    }

    if ((gv_possible_positions_strikelings_free > 0)) {
        while ((lv_i <= gv_possible_positions_strikelings_count)) {
            lv_p = gv_possible_positions_strikelings[lv_i];
            if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
                lv_temp_cnt += 1;
                lv_temp_array[lv_temp_cnt] = lv_p;
            }

            lv_i += 1;
        }
        lv_i = 1;
        if ((gv_possible_positions_strikelings_dead_count > 0)) {
            while ((lv_i <= gv_possible_positions_strikelings_dead_count)) {
                lv_p = gv_possible_positions_strikelings_dead[lv_i];
                if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
                    lv_temp_cnt += 1;
                    lv_temp_array[lv_temp_cnt] = lv_p;
                }

                lv_i += 1;
            }
        }

        lv_i = 1;
        while ((lv_i <= lv_temp_cnt)) {
            gv_possible_positions_strikelings[lv_i] = lv_temp_array[lv_i];
            lv_i += 1;
        }
        lv_i = 1;
        gv_possible_positions_strikelings_count = lv_temp_cnt;
        gv_possible_positions_strikelings_dead_count = 0;
        lv_temp_cnt = 0;
    }

    if (true) {
        while ((lv_i <= gv_possible_positions_t2_count)) {
            lv_p = gv_possible_positions_t2[lv_i];
            if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
                lv_temp_cnt += 1;
                lv_temp_array[lv_temp_cnt] = lv_p;
            }

            lv_i += 1;
        }
        lv_i = 1;
        while ((lv_i <= gv_possible_positions_t2_dead_count)) {
            lv_p = gv_possible_positions_t2_dead[lv_i];
            if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
                lv_temp_cnt += 1;
                lv_temp_array[lv_temp_cnt] = lv_p;
            }
            else {
                lv_new_dead_temp_array_count += 1;
                lv_new_dead_temp_array[lv_new_dead_temp_array_count] = lv_p;
            }
            lv_i += 1;
        }
        lv_i = 1;
        while ((lv_i <= lv_temp_cnt)) {
            gv_possible_positions_t2[lv_i] = lv_temp_array[lv_i];
            lv_i += 1;
        }
        lv_i = 1;
        gv_possible_positions_t2_count = lv_temp_cnt;
        gv_possible_positions_t2_dead_count = 0;
        lv_temp_cnt = 0;
        while ((lv_i <= lv_new_dead_temp_array_count)) {
            gv_possible_positions_t2_dead_count += 1;
            gv_possible_positions_t2_dead[lv_i] = lv_new_dead_temp_array[lv_i];
            lv_i += 1;
        }
        lv_i = 1;
        lv_new_dead_temp_array_count = 0;
    }

    if (true) {
        while ((lv_i <= gv_possible_positions_t3_count)) {
            lv_p = gv_possible_positions_t3[lv_i];
            if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
                lv_temp_cnt += 1;
                lv_temp_array[lv_temp_cnt] = lv_p;
            }

            lv_i += 1;
        }
        lv_i = 1;
        while ((lv_i <= gv_possible_positions_t3_dead_count)) {
            lv_p = gv_possible_positions_t3_dead[lv_i];
            if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
                lv_temp_cnt += 1;
                lv_temp_array[lv_temp_cnt] = lv_p;
            }
            else {
                lv_new_dead_temp_array_count += 1;
                lv_new_dead_temp_array[lv_new_dead_temp_array_count] = lv_p;
            }
            lv_i += 1;
        }
        lv_i = 1;
        while ((lv_i <= lv_temp_cnt)) {
            gv_possible_positions_t3[lv_i] = lv_temp_array[lv_i];
            lv_i += 1;
        }
        lv_i = 1;
        gv_possible_positions_t3_count = lv_temp_cnt;
        gv_possible_positions_t3_dead_count = 0;
        lv_temp_cnt = 0;
        while ((lv_i <= lv_new_dead_temp_array_count)) {
            gv_possible_positions_t3_dead_count += 1;
            gv_possible_positions_t3_dead[lv_i] = lv_new_dead_temp_array[lv_i];
            lv_i += 1;
        }
        lv_i = 1;
        lv_new_dead_temp_array_count = 0;
    }

    if ((gv_possible_positions_extractor_count > 0)) {
        while ((lv_i <= gv_possible_positions_extractor_count)) {
            lv_p = gv_possible_positions_extractor[lv_i];
            if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
                lv_temp_cnt += 1;
                lv_temp_array[lv_temp_cnt] = lv_p;
            }

            lv_i += 1;
        }
        lv_i = 1;
        while ((lv_i <= lv_temp_cnt)) {
            gv_possible_positions_extractor[lv_i] = lv_temp_array[lv_i];
            lv_i += 1;
        }
        lv_i = 1;
        gv_possible_positions_extractor_count = lv_temp_cnt;
        lv_temp_cnt = 0;
    }

    if ((gv_possible_positions_special_free > 0)) {
        while ((lv_i <= gv_possible_positions_special_count)) {
            lv_p = gv_possible_positions_special[lv_i];
            if ((UnitTypePlacementTestsFromPoint("RavatorSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
                lv_temp_cnt += 1;
                lv_temp_array[lv_temp_cnt] = lv_p;
            }

            lv_i += 1;
        }
        lv_i = 1;
        while ((lv_i <= gv_possible_positions_special_dead_count)) {
            lv_p = gv_possible_positions_special_dead[lv_i];
            if ((UnitTypePlacementTestsFromPoint("RavatorSpawner", 7, lv_p, 0.0, c_placementTestCreepMask) != null)) {
                lv_temp_cnt += 1;
                lv_temp_array[lv_temp_cnt] = lv_p;
            }

            lv_i += 1;
        }
        lv_i = 1;
        while ((lv_i <= lv_temp_cnt)) {
            gv_possible_positions_special[lv_i] = lv_temp_array[lv_i];
            lv_i += 1;
        }
        lv_i = 1;
        gv_possible_positions_special_count = lv_temp_cnt;
        gv_possible_positions_special_dead_count = 0;
        lv_temp_cnt = 0;
    }

    if ((gv_debug_mode == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/7E5E1449") + (IntToText(gv_possible_positions_t1_count) + (StringExternal("Param/Value/3BB62033") + (IntToText(gv_possible_positions_t2_count) + (StringExternal("Param/Value/66952E88") + (IntToText(gv_possible_positions_t3_count) + (StringExternal("Param/Value/DBC98574") + (IntToText(gv_possible_positions_special_count) + (StringExternal("Param/Value/D2DE6E0D") + IntToText(gv_possible_positions_extractor_count)))))))))));
    }

}

void gf_inject_extra_positions (int lp_position) {
    // Variable Declarations
    int lv_i;
    point lv_p;
    point[1000] lv_temp_array;
    int lv_temp_cnt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= gv_extra_t1_positions_counts[lp_position])) {
        lv_p = gv_extra_t1_positions[lp_position][lv_i];
        if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, 0) != null)) {
            gv_possible_positions_t1_dead_count += 1;
            gv_possible_positions_t1_dead[gv_possible_positions_t1_dead_count] = lv_p;
        }

        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= gv_tdead_extra_positions_t2_counts[lp_position])) {
        lv_p = gv_tdead_extra_positions_t2[lp_position][lv_i];
        if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, 0) != null)) {
            gv_possible_positions_t2_dead_count += 1;
            gv_possible_positions_t2_dead[gv_possible_positions_t2_dead_count] = lv_p;
        }

        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= gv_tdead_extra_positions_t3_counts[lp_position])) {
        lv_p = gv_tdead_extra_positions_t3[lp_position][lv_i];
        if ((UnitTypePlacementTestsFromPoint("SlowlingSpawner", 7, lv_p, 0.0, 0) != null)) {
            gv_possible_positions_t3_dead_count += 1;
            gv_possible_positions_t3_dead[gv_possible_positions_t3_dead_count] = lv_p;
        }

        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= gv_tdead_extra_positions_creep_sources_counts[lp_position])) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Nest2", 0, 7, gv_tdead_extra_positions_creep_sources[lp_position][lv_i]);
        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= gv_tdead_extra_positions_spines_count[lp_position])) {
        if ((gv_difficulty >= 7)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "LargeSpineCrawler", 0, 7, gv_tdead_extra_positions_spines[lp_position][lv_i]);
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpineCrawler", 0, 7, gv_tdead_extra_positions_spines[lp_position][lv_i]);
        }
        lv_i += 1;
    }
    lv_i = 1;
    if ((gv_difficulty >= 7)) {
        while ((lv_i <= gv_tdead_extra_positions_bnests_count[lp_position])) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BanelingSpawner", 0, 7, gv_tdead_extra_positions_bnests[lp_position][lv_i]);
            if ((GameGetMissionTime() > (35 + ((22 - gv_banelings_activation_offset) * 60)))) {
                UnitBehaviorRemove(UnitLastCreated(), "BanelingSpawnerDisabler", 1);
                if ((gv_banelings_enabled == false)) {
                    gv_banelings_enabled = true;
                }

            }

            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1910508930)), c_orderQueueReplace);
            lv_i += 1;
        }
    }

}

int gf_get_position_of_alive_player_with_least_spawners () {
    // Variable Declarations
    int lv_i;
    int lv_pr;
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        if ((gv_players[gf_get_player_at_position(lv_i)].lv_alive == true)) {
            if ((lv_pr == 0)) {
                lv_pr = lv_i;
            }
            else {
                if ((gv_spawner_distro[lv_i] < gv_spawner_distro[lv_pr])) {
                    lv_pr = lv_i;
                }
                else {
                    if ((gv_spawner_distro[lv_i] == gv_spawner_distro[lv_pr])) {
                        if ((RandomInt(1, 2) == 1)) {
                            lv_pr = lv_i;
                        }

                    }

                }
            }
        }

        lv_i += 1;
    }
    lv_r = lv_pr;
    return lv_r;
}

int gf_get_position_of_alive_player_with_most_spawners () {
    // Variable Declarations
    int lv_i;
    int lv_pr;
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        if ((gv_players[gf_get_player_at_position(lv_i)].lv_alive == true)) {
            if ((lv_pr == 0)) {
                lv_pr = lv_i;
            }
            else {
                if ((gv_spawner_distro[lv_i] > gv_spawner_distro[lv_pr])) {
                    lv_pr = lv_i;
                }
                else {
                    if ((gv_spawner_distro[lv_i] == gv_spawner_distro[lv_pr])) {
                        if ((gf_flip_coin() == 1)) {
                            lv_pr = lv_i;
                        }

                    }

                }
            }
        }

        lv_i += 1;
    }
    lv_r = lv_pr;
    return lv_r;
}

int gf_where_toplace_next_spawner () {
    // Variable Declarations
    int lv_strongest_player;
    int lv_strongest_player_spawner_count;
    int lv_weakest_player;
    int lv_weakest_player_spawner_count;
    int lv_offset;
    int lv_return;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_strongest_player = gf_ai_get_strongest_player();
    lv_strongest_player_spawner_count = gv_spawner_distro[gv_players[lv_strongest_player].lv_position];
    lv_weakest_player = gf_ai_get_weakest_player();
    lv_weakest_player_spawner_count = gv_spawner_distro[gv_players[lv_weakest_player].lv_position];
    lv_offset = 6;

    // Implementation
    if ((gv_placement_mode == 1)) {
        if ((gv_difficulty >= 5)) {
            lv_return = gv_players[lv_weakest_player].lv_position;
            if ((lv_weakest_player_spawner_count >= (gv_spawner_distro[gf_get_position_of_alive_player_with_least_spawners()] + lv_offset))) {
                lv_return = gf_get_position_of_alive_player_with_least_spawners();
            }

        }
        else {
            lv_return = gv_players[lv_strongest_player].lv_position;
            if ((lv_strongest_player_spawner_count >= (gv_spawner_distro[gf_get_position_of_alive_player_with_least_spawners()] + lv_offset))) {
                lv_return = gf_get_position_of_alive_player_with_least_spawners();
            }

        }
    }
    else {
        lv_return = gv_supply_target_player_position;
    }
    return lv_return;
}

int gf_get_rr_target_position () {
    // Variable Declarations
    int lv_old_target;
    int lv_random_player;
    int lv_random_position;
    int lv_return;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_old_target = gv_supply_target_player_position;

    // Implementation
    if ((gf_get_alive_player_count() > 1)) {
        while (true) {
            lv_random_player = gf_ai_get_random_player();
            lv_random_position = gv_players[lv_random_player].lv_position;
            if ((lv_random_position != lv_old_target)) {
                if ((gv_spawner_distro[lv_random_position] >= (gv_spawner_distro[gf_get_position_of_alive_player_with_least_spawners()] + 10))) {
                    lv_return = gf_get_position_of_alive_player_with_least_spawners();
                }
                else {
                    lv_return = lv_random_position;
                }
                break;
            }

        }
    }
    else {
        lv_random_player = gf_ai_get_random_player();
        lv_random_position = gv_players[lv_random_player].lv_position;
        lv_return = lv_random_position;
    }
    return lv_return;
}

void gf_add_default_rallies () {
    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(UnitFromId(185883577), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1769233779)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(185883577), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1813052249)), c_orderQueueAddToEnd);
    UnitGroupAdd(gv_spawnergroups[1].lv_left, UnitFromId(185883577));
    UnitGroupAdd(gv_spawnergroups[1].lv_all, UnitFromId(185883577));
    UnitIssueOrder(UnitFromId(1707666035), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1000391812)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1707666035), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1813052249)), c_orderQueueAddToEnd);
    UnitGroupAdd(gv_spawnergroups[1].lv_right, UnitFromId(1707666035));
    UnitGroupAdd(gv_spawnergroups[1].lv_all, UnitFromId(1707666035));
    UnitIssueOrder(UnitFromId(1200836898), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1813052249)), c_orderQueueReplace);
    UnitGroupAdd(gv_spawnergroups[1].lv_front, UnitFromId(1200836898));
    UnitGroupAdd(gv_spawnergroups[1].lv_all, UnitFromId(1200836898));
    UnitIssueOrder(UnitFromId(1447669204), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1813052249)), c_orderQueueReplace);
    UnitGroupAdd(gv_spawnergroups[1].lv_front, UnitFromId(1447669204));
    UnitGroupAdd(gv_spawnergroups[1].lv_all, UnitFromId(1447669204));
    UnitIssueOrder(UnitFromId(2024257770), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(2080536937)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2024257770), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1384876706)), c_orderQueueAddToEnd);
    UnitGroupAdd(gv_spawnergroups[2].lv_left, UnitFromId(2024257770));
    UnitGroupAdd(gv_spawnergroups[2].lv_all, UnitFromId(2024257770));
    UnitIssueOrder(UnitFromId(1351078284), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1225492054)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1351078284), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1384876706)), c_orderQueueAddToEnd);
    UnitGroupAdd(gv_spawnergroups[2].lv_right, UnitFromId(1351078284));
    UnitGroupAdd(gv_spawnergroups[2].lv_all, UnitFromId(1351078284));
    UnitIssueOrder(UnitFromId(1581788852), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1384876706)), c_orderQueueReplace);
    UnitGroupAdd(gv_spawnergroups[2].lv_front, UnitFromId(1581788852));
    UnitGroupAdd(gv_spawnergroups[2].lv_all, UnitFromId(1581788852));
    UnitIssueOrder(UnitFromId(1113700362), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1384876706)), c_orderQueueReplace);
    UnitGroupAdd(gv_spawnergroups[2].lv_front, UnitFromId(1113700362));
    UnitGroupAdd(gv_spawnergroups[2].lv_all, UnitFromId(1113700362));
    UnitIssueOrder(UnitFromId(323196844), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(234157281)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(323196844), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(921559064)), c_orderQueueAddToEnd);
    UnitGroupAdd(gv_spawnergroups[3].lv_left, UnitFromId(323196844));
    UnitGroupAdd(gv_spawnergroups[3].lv_all, UnitFromId(323196844));
    UnitIssueOrder(UnitFromId(164076), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1134144376)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(164076), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(921559064)), c_orderQueueAddToEnd);
    UnitGroupAdd(gv_spawnergroups[3].lv_right, UnitFromId(164076));
    UnitGroupAdd(gv_spawnergroups[3].lv_all, UnitFromId(164076));
    UnitIssueOrder(UnitFromId(2136615420), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(921559064)), c_orderQueueReplace);
    UnitGroupAdd(gv_spawnergroups[3].lv_front, UnitFromId(2136615420));
    UnitGroupAdd(gv_spawnergroups[3].lv_all, UnitFromId(2136615420));
    UnitIssueOrder(UnitFromId(1716235980), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(921559064)), c_orderQueueReplace);
    UnitGroupAdd(gv_spawnergroups[3].lv_front, UnitFromId(1716235980));
    UnitGroupAdd(gv_spawnergroups[3].lv_all, UnitFromId(1716235980));
    UnitIssueOrder(UnitFromId(585689597), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1954217478)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(585689597), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(873004648)), c_orderQueueAddToEnd);
    UnitGroupAdd(gv_spawnergroups[4].lv_left, UnitFromId(585689597));
    UnitGroupAdd(gv_spawnergroups[4].lv_all, UnitFromId(585689597));
    UnitIssueOrder(UnitFromId(317678471), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(2061205250)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(317678471), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(873004648)), c_orderQueueAddToEnd);
    UnitGroupAdd(gv_spawnergroups[4].lv_right, UnitFromId(317678471));
    UnitGroupAdd(gv_spawnergroups[4].lv_all, UnitFromId(317678471));
    UnitIssueOrder(UnitFromId(1107745723), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(873004648)), c_orderQueueReplace);
    UnitGroupAdd(gv_spawnergroups[4].lv_front, UnitFromId(1107745723));
    UnitGroupAdd(gv_spawnergroups[4].lv_all, UnitFromId(1107745723));
    UnitIssueOrder(UnitFromId(1459550541), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(873004648)), c_orderQueueReplace);
    UnitGroupAdd(gv_spawnergroups[4].lv_front, UnitFromId(1459550541));
    UnitGroupAdd(gv_spawnergroups[4].lv_all, UnitFromId(1459550541));
    UnitIssueOrder(UnitFromId(1288453920), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1396407973)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1288453920), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1791806517)), c_orderQueueAddToEnd);
    UnitGroupAdd(gv_spawnergroups[5].lv_left, UnitFromId(1288453920));
    UnitGroupAdd(gv_spawnergroups[5].lv_all, UnitFromId(1288453920));
    UnitIssueOrder(UnitFromId(1054314206), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(14960067)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1054314206), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1791806517)), c_orderQueueAddToEnd);
    UnitGroupAdd(gv_spawnergroups[5].lv_right, UnitFromId(1054314206));
    UnitGroupAdd(gv_spawnergroups[5].lv_all, UnitFromId(1054314206));
    UnitIssueOrder(UnitFromId(332008490), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1791806517)), c_orderQueueReplace);
    UnitGroupAdd(gv_spawnergroups[5].lv_front, UnitFromId(332008490));
    UnitGroupAdd(gv_spawnergroups[5].lv_all, UnitFromId(332008490));
    UnitIssueOrder(UnitFromId(442686457), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1791806517)), c_orderQueueReplace);
    UnitGroupAdd(gv_spawnergroups[5].lv_front, UnitFromId(442686457));
    UnitGroupAdd(gv_spawnergroups[5].lv_all, UnitFromId(442686457));
    UnitIssueOrder(UnitFromId(551999031), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(2136568927)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(551999031), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1641586980)), c_orderQueueAddToEnd);
    UnitGroupAdd(gv_spawnergroups[6].lv_left, UnitFromId(551999031));
    UnitGroupAdd(gv_spawnergroups[6].lv_all, UnitFromId(551999031));
    UnitIssueOrder(UnitFromId(1931103063), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(855168132)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1931103063), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1641586980)), c_orderQueueAddToEnd);
    UnitGroupAdd(gv_spawnergroups[6].lv_right, UnitFromId(1931103063));
    UnitGroupAdd(gv_spawnergroups[6].lv_all, UnitFromId(1931103063));
    UnitIssueOrder(UnitFromId(1247209867), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1641586980)), c_orderQueueReplace);
    UnitGroupAdd(gv_spawnergroups[6].lv_front, UnitFromId(1247209867));
    UnitGroupAdd(gv_spawnergroups[6].lv_all, UnitFromId(1247209867));
    UnitIssueOrder(UnitFromId(76671948), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1641586980)), c_orderQueueReplace);
    UnitGroupAdd(gv_spawnergroups[6].lv_front, UnitFromId(76671948));
    UnitGroupAdd(gv_spawnergroups[6].lv_all, UnitFromId(76671948));
}

int gf_get_frosty_spawner_count () {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_r = UnitCount("FrostySpawner", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    return lv_r;
}

void gf_focus_weakest () {
    // Variable Declarations
    int lv_target_position;
    string lv_rally_side;
    string lv_full_point_name;

    // Automatic Variable Declarations
    unitgroup auto2F5FAF1E_g;
    int auto2F5FAF1E_u;
    unit auto2F5FAF1E_var;

    // Variable Initialization
    lv_target_position = gv_players[gf_ai_get_weakest_player()].lv_position;
    lv_rally_side = "";
    lv_full_point_name = "";

    // Implementation
    if ((gf_is_3v3() == true)) {
    }
    else {
        if ((RandomInt(1, 2) == 1)) {
            lv_rally_side = "Left";
        }
        else {
            lv_rally_side = "Right";
        }
        auto2F5FAF1E_g = UnitGroup(null, 7, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2F5FAF1E_u = UnitGroupCount(auto2F5FAF1E_g, c_unitCountAll);
        for (;; auto2F5FAF1E_u -= 1) {
            auto2F5FAF1E_var = UnitGroupUnitFromEnd(auto2F5FAF1E_g, auto2F5FAF1E_u);
            if (auto2F5FAF1E_var == null) { break; }
            if (((UnitGetType(auto2F5FAF1E_var) == "BeastlingSpawner") || (UnitGetType(auto2F5FAF1E_var) == "InfusedRoachSpawner") || (UnitGetType(auto2F5FAF1E_var) == "RavatorSpawner") || (UnitGetType(auto2F5FAF1E_var) == "TorraliskSpawner"))) {
                lv_full_point_name = ("Zerg Flank Rally " + (lv_rally_side + (" Pre " + IntToString(lv_target_position))));
                UnitIssueOrder(auto2F5FAF1E_var, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(lv_full_point_name)), c_orderQueueReplace);
                UnitIssueOrder(auto2F5FAF1E_var, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(lv_target_position)))), c_orderQueueAddToEnd);
            }

        }
    }
}

void gf_add_spawner_to_left (unit lp_spawner, int lp_player_position) {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupAdd(gv_spawnergroups[lp_player_position].lv_left, lp_spawner);
    if ((UnitGroupHasUnit(gv_spawnergroups[lp_player_position].lv_front, lp_spawner) == true)) {
        UnitGroupRemove(gv_spawnergroups[lp_player_position].lv_front, lp_spawner);
    }

    if ((UnitGroupHasUnit(gv_spawnergroups[lp_player_position].lv_right, lp_spawner) == true)) {
        UnitGroupRemove(gv_spawnergroups[lp_player_position].lv_right, lp_spawner);
    }

    UnitIssueOrder(lp_spawner, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Flank Rally Left Pre " + IntToString(lp_player_position)))), c_orderQueueReplace);
    UnitIssueOrder(lp_spawner, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(lp_player_position)))), c_orderQueueAddToEnd);
}

void gf_add_spawner_to_right (unit lp_spawner, int lp_player_position) {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupAdd(gv_spawnergroups[lp_player_position].lv_right, lp_spawner);
    if ((UnitGroupHasUnit(gv_spawnergroups[lp_player_position].lv_front, lp_spawner) == true)) {
        UnitGroupRemove(gv_spawnergroups[lp_player_position].lv_front, lp_spawner);
    }

    if ((UnitGroupHasUnit(gv_spawnergroups[lp_player_position].lv_left, lp_spawner) == true)) {
        UnitGroupRemove(gv_spawnergroups[lp_player_position].lv_left, lp_spawner);
    }

    UnitIssueOrder(lp_spawner, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Flank Rally Right Pre " + IntToString(lp_player_position)))), c_orderQueueReplace);
    UnitIssueOrder(lp_spawner, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(lp_player_position)))), c_orderQueueAddToEnd);
}

void gf_add_spawner_to_front (unit lp_spawner, int lp_player_position) {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupAdd(gv_spawnergroups[lp_player_position].lv_front, lp_spawner);
    if ((UnitGroupHasUnit(gv_spawnergroups[lp_player_position].lv_right, lp_spawner) == true)) {
        UnitGroupRemove(gv_spawnergroups[lp_player_position].lv_right, lp_spawner);
    }

    if ((UnitGroupHasUnit(gv_spawnergroups[lp_player_position].lv_left, lp_spawner) == true)) {
        UnitGroupRemove(gv_spawnergroups[lp_player_position].lv_left, lp_spawner);
    }

    if ((gf_is_front_path_blocked(gf_get_player_at_position(lp_player_position)) == true)) {
        UnitIssueOrder(lp_spawner, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Front Rally Pre " + IntToString(lp_player_position)))), c_orderQueueReplace);
        UnitIssueOrder(lp_spawner, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(lp_player_position)))), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(lp_spawner, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(lp_player_position)))), c_orderQueueReplace);
    }
}

void gf_manage_spawners (int lp_player_position) {
    // Variable Declarations
    int lv_all_cnt;
    int lv_left_cnt;
    int lv_right_cnt;
    int lv_front_cnt;

    // Automatic Variable Declarations
    unitgroup autoDE0DC902_g;
    int autoDE0DC902_u;
    unit autoDE0DC902_var;

    // Variable Initialization
    lv_all_cnt = UnitGroupCount(gv_spawnergroups[lp_player_position].lv_all, c_unitCountAlive);
    lv_left_cnt = UnitGroupCount(gv_spawnergroups[lp_player_position].lv_left, c_unitCountAlive);
    lv_right_cnt = UnitGroupCount(gv_spawnergroups[lp_player_position].lv_right, c_unitCountAlive);
    lv_front_cnt = UnitGroupCount(gv_spawnergroups[lp_player_position].lv_front, c_unitCountAlive);

    // Implementation
    if ((gf_is_3v3() == true)) {
        gf_manage_spawners_3v3(lp_player_position);
    }
    else {
        autoDE0DC902_g = gv_spawnergroups[lp_player_position].lv_all;
        autoDE0DC902_u = UnitGroupCount(autoDE0DC902_g, c_unitCountAll);
        for (;; autoDE0DC902_u -= 1) {
            autoDE0DC902_var = UnitGroupUnitFromEnd(autoDE0DC902_g, autoDE0DC902_u);
            if (autoDE0DC902_var == null) { break; }
            lv_all_cnt = UnitGroupCount(gv_spawnergroups[lp_player_position].lv_all, c_unitCountAlive);
            lv_left_cnt = UnitGroupCount(gv_spawnergroups[lp_player_position].lv_left, c_unitCountAlive);
            lv_right_cnt = UnitGroupCount(gv_spawnergroups[lp_player_position].lv_right, c_unitCountAlive);
            lv_front_cnt = UnitGroupCount(gv_spawnergroups[lp_player_position].lv_front, c_unitCountAlive);
            if ((lv_all_cnt > 8)) {
                if ((lv_all_cnt < 10)) {
                    if ((lv_left_cnt < 2) && (lv_front_cnt > 4)) {
                        if ((UnitGroupHasUnit(gv_spawnergroups[lp_player_position].lv_left, autoDE0DC902_var) != true) && (UnitGroupHasUnit(gv_spawnergroups[lp_player_position].lv_front, autoDE0DC902_var) == true)) {
                            gf_add_spawner_to_left(autoDE0DC902_var, lp_player_position);
                        }

                    }

                    if ((lv_right_cnt < 2) && (lv_front_cnt > 4)) {
                        if ((UnitGroupHasUnit(gv_spawnergroups[lp_player_position].lv_right, autoDE0DC902_var) != true) && (UnitGroupHasUnit(gv_spawnergroups[lp_player_position].lv_front, autoDE0DC902_var) == true)) {
                            gf_add_spawner_to_right(autoDE0DC902_var, lp_player_position);
                        }

                    }

                }
                else {
                    if ((lv_all_cnt < 16)) {
                        if ((lv_left_cnt < 5) && (lv_front_cnt > 6)) {
                            if ((UnitGroupHasUnit(gv_spawnergroups[lp_player_position].lv_left, autoDE0DC902_var) != true) && (UnitGroupHasUnit(gv_spawnergroups[lp_player_position].lv_front, autoDE0DC902_var) == true)) {
                                gf_add_spawner_to_left(autoDE0DC902_var, lp_player_position);
                            }

                        }

                        if ((lv_right_cnt < 5) && (lv_front_cnt > 6)) {
                            if ((UnitGroupHasUnit(gv_spawnergroups[lp_player_position].lv_right, autoDE0DC902_var) != true) && (UnitGroupHasUnit(gv_spawnergroups[lp_player_position].lv_front, autoDE0DC902_var) == true)) {
                                gf_add_spawner_to_right(autoDE0DC902_var, lp_player_position);
                            }

                        }

                    }
                    else {
                        if ((lv_all_cnt < 24)) {
                            if ((lv_left_cnt < 6) && (lv_front_cnt > 12)) {
                                if ((UnitGroupHasUnit(gv_spawnergroups[lp_player_position].lv_left, autoDE0DC902_var) != true) && (UnitGroupHasUnit(gv_spawnergroups[lp_player_position].lv_front, autoDE0DC902_var) == true)) {
                                    gf_add_spawner_to_left(autoDE0DC902_var, lp_player_position);
                                }

                            }

                            if ((lv_right_cnt < 6) && (lv_front_cnt > 12)) {
                                if ((UnitGroupHasUnit(gv_spawnergroups[lp_player_position].lv_right, autoDE0DC902_var) != true) && (UnitGroupHasUnit(gv_spawnergroups[lp_player_position].lv_front, autoDE0DC902_var) == true)) {
                                    gf_add_spawner_to_right(autoDE0DC902_var, lp_player_position);
                                }

                            }

                        }

                    }
                }
            }

        }
    }
}

bool gf_player_has_yard_in_exception_area (int lp_player) {
    // Variable Declarations
    bool lv_r;
    unit lv_yard;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_yard = UnitGroupRandomUnit(UnitGroup("ConstructionYard", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    if ((lv_yard != null)) {
        if ((libNtve_gf_UnitInRegion(lv_yard, RegionFromName(("player " + (IntToString(gv_players[lp_player].lv_position) + " yard exception")))) == true)) {
            lv_r = true;
        }

    }

    return lv_r;
}

void gf_handle_yard_exception () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        if (((gv_players[lv_i].lv_position == 1) || (gv_players[lv_i].lv_position == 3) || (gv_players[lv_i].lv_position == 4) || (gv_players[lv_i].lv_position == 6))) {
            if ((gf_player_has_yard_in_exception_area(lv_i) == true)) {
                gf_yard_exception_rerally(lv_i);
            }

        }

        lv_i += 1;
    }
}

void gf_yard_exception_rerally (int lp_player) {
    // Variable Declarations
    int lv_player_position;
    int lv_control_number;

    // Automatic Variable Declarations
    int autoB26BB716_val;
    unitgroup auto5E9ED5C7_g;
    int auto5E9ED5C7_u;
    unit auto5E9ED5C7_var;
    unitgroup auto1164BC81_g;
    int auto1164BC81_u;
    unit auto1164BC81_var;
    unitgroup auto16F1F251_g;
    int auto16F1F251_u;
    unit auto16F1F251_var;
    unitgroup autoC816AF07_g;
    int autoC816AF07_u;
    unit autoC816AF07_var;
    unitgroup auto88493E5C_g;
    int auto88493E5C_u;
    unit auto88493E5C_var;
    unitgroup autoB72BCBDE_g;
    int autoB72BCBDE_u;
    unit autoB72BCBDE_var;
    unitgroup auto5FCA3503_g;
    int auto5FCA3503_u;
    unit auto5FCA3503_var;
    unitgroup autoB210FDFD_g;
    int autoB210FDFD_u;
    unit autoB210FDFD_var;
    unitgroup autoFAC9917F_g;
    int autoFAC9917F_u;
    unit autoFAC9917F_var;
    unitgroup auto0027B6E3_g;
    int auto0027B6E3_u;
    unit auto0027B6E3_var;
    unitgroup auto5C6B520F_g;
    int auto5C6B520F_u;
    unit auto5C6B520F_var;
    unitgroup auto57B2F102_g;
    int auto57B2F102_u;
    unit auto57B2F102_var;

    // Variable Initialization
    lv_player_position = gv_players[lp_player].lv_position;

    // Implementation
    autoB26BB716_val = lv_player_position;
    if (autoB26BB716_val == 1) {
        auto5E9ED5C7_g = gv_spawnergroups[lv_player_position].lv_left;
        auto5E9ED5C7_u = UnitGroupCount(auto5E9ED5C7_g, c_unitCountAll);
        for (;; auto5E9ED5C7_u -= 1) {
            auto5E9ED5C7_var = UnitGroupUnitFromEnd(auto5E9ED5C7_g, auto5E9ED5C7_u);
            if (auto5E9ED5C7_var == null) { break; }
            gf_add_spawner_to_right(auto5E9ED5C7_var, lv_player_position);
        }
        auto1164BC81_g = gv_spawnergroups[lv_player_position].lv_front;
        auto1164BC81_u = UnitGroupCount(auto1164BC81_g, c_unitCountAll);
        for (;; auto1164BC81_u -= 1) {
            auto1164BC81_var = UnitGroupUnitFromEnd(auto1164BC81_g, auto1164BC81_u);
            if (auto1164BC81_var == null) { break; }
            gf_add_spawner_to_right(auto1164BC81_var, lv_player_position);
        }
        auto16F1F251_g = gv_spawnergroups[lv_player_position].lv_right;
        auto16F1F251_u = UnitGroupCount(auto16F1F251_g, c_unitCountAll);
        for (;; auto16F1F251_u -= 1) {
            auto16F1F251_var = UnitGroupUnitFromEnd(auto16F1F251_g, auto16F1F251_u);
            if (auto16F1F251_var == null) { break; }
            if ((lv_control_number == 0)) {
                gf_add_spawner_to_left(auto16F1F251_var, lv_player_position);
                lv_control_number += 1;
            }
            else {
                if ((lv_control_number == 1)) {
                    gf_add_spawner_to_front(auto16F1F251_var, lv_player_position);
                    lv_control_number += 1;
                }
                else {
                    break;
                }
            }
        }
    }
    else if (autoB26BB716_val == 3) {
        autoC816AF07_g = gv_spawnergroups[lv_player_position].lv_right;
        autoC816AF07_u = UnitGroupCount(autoC816AF07_g, c_unitCountAll);
        for (;; autoC816AF07_u -= 1) {
            autoC816AF07_var = UnitGroupUnitFromEnd(autoC816AF07_g, autoC816AF07_u);
            if (autoC816AF07_var == null) { break; }
            gf_add_spawner_to_left(autoC816AF07_var, lv_player_position);
        }
        auto88493E5C_g = gv_spawnergroups[lv_player_position].lv_front;
        auto88493E5C_u = UnitGroupCount(auto88493E5C_g, c_unitCountAll);
        for (;; auto88493E5C_u -= 1) {
            auto88493E5C_var = UnitGroupUnitFromEnd(auto88493E5C_g, auto88493E5C_u);
            if (auto88493E5C_var == null) { break; }
            gf_add_spawner_to_left(auto88493E5C_var, lv_player_position);
        }
        autoB72BCBDE_g = gv_spawnergroups[lv_player_position].lv_left;
        autoB72BCBDE_u = UnitGroupCount(autoB72BCBDE_g, c_unitCountAll);
        for (;; autoB72BCBDE_u -= 1) {
            autoB72BCBDE_var = UnitGroupUnitFromEnd(autoB72BCBDE_g, autoB72BCBDE_u);
            if (autoB72BCBDE_var == null) { break; }
            if ((lv_control_number == 0)) {
                gf_add_spawner_to_right(autoB72BCBDE_var, lv_player_position);
                lv_control_number += 1;
            }
            else {
                if ((lv_control_number == 1)) {
                    gf_add_spawner_to_front(autoB72BCBDE_var, lv_player_position);
                    lv_control_number += 1;
                }
                else {
                    break;
                }
            }
        }
    }
    else if (autoB26BB716_val == 4) {
        auto5FCA3503_g = gv_spawnergroups[lv_player_position].lv_right;
        auto5FCA3503_u = UnitGroupCount(auto5FCA3503_g, c_unitCountAll);
        for (;; auto5FCA3503_u -= 1) {
            auto5FCA3503_var = UnitGroupUnitFromEnd(auto5FCA3503_g, auto5FCA3503_u);
            if (auto5FCA3503_var == null) { break; }
            gf_add_spawner_to_left(auto5FCA3503_var, lv_player_position);
        }
        autoB210FDFD_g = gv_spawnergroups[lv_player_position].lv_front;
        autoB210FDFD_u = UnitGroupCount(autoB210FDFD_g, c_unitCountAll);
        for (;; autoB210FDFD_u -= 1) {
            autoB210FDFD_var = UnitGroupUnitFromEnd(autoB210FDFD_g, autoB210FDFD_u);
            if (autoB210FDFD_var == null) { break; }
            gf_add_spawner_to_left(autoB210FDFD_var, lv_player_position);
        }
        autoFAC9917F_g = gv_spawnergroups[lv_player_position].lv_left;
        autoFAC9917F_u = UnitGroupCount(autoFAC9917F_g, c_unitCountAll);
        for (;; autoFAC9917F_u -= 1) {
            autoFAC9917F_var = UnitGroupUnitFromEnd(autoFAC9917F_g, autoFAC9917F_u);
            if (autoFAC9917F_var == null) { break; }
            if ((lv_control_number == 0)) {
                gf_add_spawner_to_right(autoFAC9917F_var, lv_player_position);
                lv_control_number += 1;
            }
            else {
                if ((lv_control_number == 1)) {
                    gf_add_spawner_to_front(autoFAC9917F_var, lv_player_position);
                    lv_control_number += 1;
                }
                else {
                    break;
                }
            }
        }
    }
    else if (autoB26BB716_val == 6) {
        auto0027B6E3_g = gv_spawnergroups[lv_player_position].lv_left;
        auto0027B6E3_u = UnitGroupCount(auto0027B6E3_g, c_unitCountAll);
        for (;; auto0027B6E3_u -= 1) {
            auto0027B6E3_var = UnitGroupUnitFromEnd(auto0027B6E3_g, auto0027B6E3_u);
            if (auto0027B6E3_var == null) { break; }
            gf_add_spawner_to_right(auto0027B6E3_var, lv_player_position);
        }
        auto5C6B520F_g = gv_spawnergroups[lv_player_position].lv_front;
        auto5C6B520F_u = UnitGroupCount(auto5C6B520F_g, c_unitCountAll);
        for (;; auto5C6B520F_u -= 1) {
            auto5C6B520F_var = UnitGroupUnitFromEnd(auto5C6B520F_g, auto5C6B520F_u);
            if (auto5C6B520F_var == null) { break; }
            gf_add_spawner_to_right(auto5C6B520F_var, lv_player_position);
        }
        auto57B2F102_g = gv_spawnergroups[lv_player_position].lv_right;
        auto57B2F102_u = UnitGroupCount(auto57B2F102_g, c_unitCountAll);
        for (;; auto57B2F102_u -= 1) {
            auto57B2F102_var = UnitGroupUnitFromEnd(auto57B2F102_g, auto57B2F102_u);
            if (auto57B2F102_var == null) { break; }
            if ((lv_control_number == 0)) {
                gf_add_spawner_to_left(auto57B2F102_var, lv_player_position);
                lv_control_number += 1;
            }
            else {
                if ((lv_control_number == 1)) {
                    gf_add_spawner_to_front(auto57B2F102_var, lv_player_position);
                    lv_control_number += 1;
                }
                else {
                    break;
                }
            }
        }
    }
    else {
    }
}

void gf_rerally_dead_player_spawners (int lp_dead_player) {
    // Variable Declarations
    point lv_rally;
    int lv_closest_player_position;
    playergroup lv_player_group;
    unitgroup lv_crisis_rally;
    unitgroup lv_crisis_rally_player;

    // Automatic Variable Declarations
    unitgroup auto0F59C787_g;
    int auto0F59C787_u;
    unit auto0F59C787_var;
    unitgroup autoC8B4BF64_g;
    int autoC8B4BF64_u;
    unit autoC8B4BF64_var;
    unitgroup autoAC2DDC40_g;
    int autoAC2DDC40_u;
    unit autoAC2DDC40_var;
    unitgroup auto0244B6A1_g;
    int auto0244B6A1_u;
    unit auto0244B6A1_var;
    unitgroup auto66F38B3F_g;
    int auto66F38B3F_u;
    unit auto66F38B3F_var;

    // Variable Initialization
    lv_player_group = PlayerGroupEmpty();
    lv_crisis_rally = UnitGroupEmpty();
    lv_crisis_rally_player = UnitGroupEmpty();

    // Implementation
    if ((gf_is_3v3() == true) && (gf_is_terrans_team_top_dead() == false) && (gf_is_terrans_team_bottom_dead() == false)) {
        if ((gv_players[lp_dead_player].lv_position <= 3)) {
            lv_player_group = gv_terrans_team_top;
        }
        else {
            lv_player_group = gv_terrans_team_bottom;
        }
    }
    else {
        lv_player_group = gv_terrans;
    }
    auto0F59C787_g = gv_spawnergroups[gv_players[lp_dead_player].lv_position].lv_all;
    auto0F59C787_u = UnitGroupCount(auto0F59C787_g, c_unitCountAll);
    for (;; auto0F59C787_u -= 1) {
        auto0F59C787_var = UnitGroupUnitFromEnd(auto0F59C787_g, auto0F59C787_u);
        if (auto0F59C787_var == null) { break; }
        lv_closest_player_position = gf_get_closest_alive_player_position_from_group(UnitGetPosition(auto0F59C787_var), lv_player_group);
        gf_reassign_spawner_to_othergroup(auto0F59C787_var, gv_players[lp_dead_player].lv_position, lv_closest_player_position);
        gf_manage_spawners(lv_closest_player_position);
    }
    autoC8B4BF64_g = UnitGroup(null, 7, RegionCircle(PointFromName(("Zerg Rally " + IntToString(gv_players[lp_dead_player].lv_position))), 20.0), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC8B4BF64_u = UnitGroupCount(autoC8B4BF64_g, c_unitCountAll);
    for (;; autoC8B4BF64_u -= 1) {
        autoC8B4BF64_var = UnitGroupUnitFromEnd(autoC8B4BF64_g, autoC8B4BF64_u);
        if (autoC8B4BF64_var == null) { break; }
        UnitKill(autoC8B4BF64_var);
    }
    autoAC2DDC40_g = UnitGroup(null, 7, RegionCircle(PointFromName(("Zerg Rally " + IntToString(gv_players[lp_dead_player].lv_position))), 45.0), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAC2DDC40_u = UnitGroupCount(autoAC2DDC40_g, c_unitCountAll);
    for (;; autoAC2DDC40_u -= 1) {
        autoAC2DDC40_var = UnitGroupUnitFromEnd(autoAC2DDC40_g, autoAC2DDC40_u);
        if (autoAC2DDC40_var == null) { break; }
        lv_closest_player_position = gf_get_closest_alive_player_position_from_group(UnitGetPosition(autoAC2DDC40_var), lv_player_group);
        UnitIssueOrder(autoAC2DDC40_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Rally " + IntToString(lv_closest_player_position)))), c_orderQueueReplace);
    }
    auto0244B6A1_g = UnitGroup(null, 7, RegionCircle(PointFromName(("Zerg Rally " + IntToString(gv_players[lp_dead_player].lv_position))), 45.0), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0244B6A1_u = UnitGroupCount(auto0244B6A1_g, c_unitCountAll);
    for (;; auto0244B6A1_u -= 1) {
        auto0244B6A1_var = UnitGroupUnitFromEnd(auto0244B6A1_g, auto0244B6A1_u);
        if (auto0244B6A1_var == null) { break; }
        lv_closest_player_position = gf_get_closest_alive_player_position_from_group(UnitGetPosition(auto0244B6A1_var), lv_player_group);
        UnitIssueOrder(auto0244B6A1_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Rally " + IntToString(lv_closest_player_position)))), c_orderQueueReplace);
    }
    UnitGroupAddUnitGroup(lv_crisis_rally, UnitGroup("CharEggSackOneEgg", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_crisis_rally, UnitGroup("CharEggSackTwoEgg", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_crisis_rally, UnitGroup("CharEggSackThreeEgg", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_crisis_rally, UnitGroup("Hellfort", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_crisis_rally, UnitGroup("PlanetaryFortress", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto66F38B3F_g = lv_crisis_rally;
    auto66F38B3F_u = UnitGroupCount(auto66F38B3F_g, c_unitCountAll);
    for (;; auto66F38B3F_u -= 1) {
        auto66F38B3F_var = UnitGroupUnitFromEnd(auto66F38B3F_g, auto66F38B3F_u);
        if (auto66F38B3F_var == null) { break; }
        if ((RegionContainsPoint(RegionFromName(("player " + IntToString(lp_dead_player))), UnitRallyPointTargetPoint(auto66F38B3F_var, 1, 1)) == true)) {
            UnitGroupAdd(lv_crisis_rally_player, auto66F38B3F_var);
        }

    }
    UnitGroupIssueOrder(lv_crisis_rally_player, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(lv_closest_player_position)))), c_orderQueueReplace);
}

void gf_reassign_spawner_to_othergroup (unit lp_spawner, int lp_origin, int lp_target) {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupRemove(gv_spawnergroups[lp_origin].lv_all, lp_spawner);
    UnitGroupRemove(gv_spawnergroups[lp_origin].lv_front, lp_spawner);
    UnitGroupRemove(gv_spawnergroups[lp_origin].lv_left, lp_spawner);
    UnitGroupRemove(gv_spawnergroups[lp_origin].lv_right, lp_spawner);
    UnitGroupAdd(gv_spawnergroups[lp_target].lv_all, lp_spawner);
    gf_add_spawner_to_front(lp_spawner, lp_target);
}

void gf_check_flank_rallies () {
    // Variable Declarations
    point lv_np;
    unit lv_rul;
    unit lv_rur;

    // Automatic Variable Declarations
    playergroup auto9BE491A4_g;
    int auto9BE491A4_var;

    // Variable Initialization

    // Implementation
    auto9BE491A4_g = gv_terrans;
    auto9BE491A4_var = -1;
    while (true) {
        auto9BE491A4_var = PlayerGroupNextPlayer(auto9BE491A4_g, auto9BE491A4_var);
        if (auto9BE491A4_var < 0) { break; }
        lv_np = null;
        lv_rul = null;
        lv_rur = null;
        if ((gv_players[auto9BE491A4_var].lv_alive == true)) {
            lv_rul = UnitGroupRandomUnit(gv_spawnergroups[gv_players[auto9BE491A4_var].lv_position].lv_left, c_unitCountAlive);
            lv_rur = UnitGroupRandomUnit(gv_spawnergroups[gv_players[auto9BE491A4_var].lv_position].lv_right, c_unitCountAlive);
            if ((lv_rul != null)) {
                if ((gf_is_path_blocked(UnitGetPosition(lv_rul), PointFromName(("Zerg Flank Rally Left Pre " + IntToString(gv_players[auto9BE491A4_var].lv_position)))) == true)) {
                    lv_np = gf_get_new_valid_rally_point(gv_players[auto9BE491A4_var].lv_position, PointFromName(("Zerg Flank Rally Left Pre " + IntToString(gv_players[auto9BE491A4_var].lv_position))));
                    if ((lv_np != null)) {
                        PointSet(PointFromName(("Zerg Flank Rally Left Pre " + IntToString(gv_players[auto9BE491A4_var].lv_position))), lv_np);
                        gf_rerally_left(auto9BE491A4_var);
                    }

                }

            }

            lv_np = null;
            if ((lv_rur != null)) {
                if ((gf_is_path_blocked(UnitGetPosition(lv_rur), PointFromName(("Zerg Flank Rally Right Pre " + IntToString(gv_players[auto9BE491A4_var].lv_position)))) == true)) {
                    lv_np = gf_get_new_valid_rally_point(gv_players[auto9BE491A4_var].lv_position, PointFromName(("Zerg Flank Rally Right Pre " + IntToString(gv_players[auto9BE491A4_var].lv_position))));
                    if ((lv_np != null)) {
                        PointSet(PointFromName(("Zerg Flank Rally Right Pre " + IntToString(gv_players[auto9BE491A4_var].lv_position))), lv_np);
                        gf_rerally_right(auto9BE491A4_var);
                    }

                }

            }

        }

    }
}

bool gf_is_path_blocked (point lp_origin, point lp_target) {
    // Variable Declarations
    fixed lv_direct_distance;
    fixed lv_path_length;
    bool lv_return;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_direct_distance = DistanceBetweenPoints(lp_origin, lp_target);
    lv_path_length = PointPathingCost(lp_origin, lp_target);

    // Implementation
    if ((lv_path_length > (lv_direct_distance * 1.3))) {
        lv_return = true;
    }

    return lv_return;
}

point gf_get_new_valid_rally_point (int lp_position, point lp_old_point) {
    // Variable Declarations
    point lv_t_position;
    point lv_o_position;
    point lv_test_point;
    int lv_i;
    int lv_offset;
    point lv_pre_result;
    point lv_return;
    unit lv_closest_wall;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_t_position = PointFromName(("Zerg Rally " + IntToString(lp_position)));
    lv_o_position = RegionRandomPoint(RegionFromName(("spawner player zerg " + IntToString(lp_position))));
    lv_i = 1;

    // Implementation
    while ((lv_i <= 10)) {
        lv_offset = (0 - lv_i);
        lv_test_point = libNtve_gf_PointOffsetTowardsPoint(lp_old_point, lv_offset, lv_t_position);
        if ((gf_is_path_blocked(lv_o_position, lv_test_point) == false)) {
            lv_pre_result = lv_test_point;
            break;
        }

        lv_i += 1;
    }
    lv_closest_wall = UnitGroupClosestToPoint(UnitGroup("Wall2", c_playerAny, RegionCircle(lv_pre_result, 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_pre_result);
    if ((lv_closest_wall != null)) {
        lv_pre_result = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_closest_wall), 3.0, lv_pre_result);
    }

    lv_return = lv_pre_result;
    return lv_return;
}

void gf_rerally_left (int lp_player) {
    // Variable Declarations
    int lv_player_position;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    unitgroup autoDFF74998_g;
    int autoDFF74998_u;
    unit autoDFF74998_var;

    // Variable Initialization
    lv_player_position = gv_players[lp_player].lv_position;
    lv_ug = gv_spawnergroups[lv_player_position].lv_left;

    // Implementation
    autoDFF74998_g = lv_ug;
    autoDFF74998_u = UnitGroupCount(autoDFF74998_g, c_unitCountAll);
    for (;; autoDFF74998_u -= 1) {
        autoDFF74998_var = UnitGroupUnitFromEnd(autoDFF74998_g, autoDFF74998_u);
        if (autoDFF74998_var == null) { break; }
        UnitIssueOrder(autoDFF74998_var, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Flank Rally Left Pre " + IntToString(lv_player_position)))), c_orderQueueReplace);
        UnitIssueOrder(autoDFF74998_var, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Flank Rally Left " + IntToString(lv_player_position)))), c_orderQueueAddToEnd);
        UnitIssueOrder(autoDFF74998_var, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(lv_player_position)))), c_orderQueueAddToEnd);
    }
}

void gf_rerally_right (int lp_player) {
    // Variable Declarations
    int lv_player_position;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    unitgroup autoC2765AFE_g;
    int autoC2765AFE_u;
    unit autoC2765AFE_var;

    // Variable Initialization
    lv_player_position = gv_players[lp_player].lv_position;
    lv_ug = gv_spawnergroups[lv_player_position].lv_right;

    // Implementation
    autoC2765AFE_g = lv_ug;
    autoC2765AFE_u = UnitGroupCount(autoC2765AFE_g, c_unitCountAll);
    for (;; autoC2765AFE_u -= 1) {
        autoC2765AFE_var = UnitGroupUnitFromEnd(autoC2765AFE_g, autoC2765AFE_u);
        if (autoC2765AFE_var == null) { break; }
        UnitIssueOrder(autoC2765AFE_var, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Flank Rally Right Pre " + IntToString(lv_player_position)))), c_orderQueueReplace);
        UnitIssueOrder(autoC2765AFE_var, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Flank Rally Right " + IntToString(lv_player_position)))), c_orderQueueReplace);
        UnitIssueOrder(autoC2765AFE_var, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(lv_player_position)))), c_orderQueueAddToEnd);
    }
}

void gf_rerally_start_spawners () {
    // Variable Declarations
    int lv_i;
    int lv_rand;
    int lv_random;

    // Automatic Variable Declarations
    playergroup autoA4897AE1_g;
    int autoA4897AE1_var;
    unitgroup auto6C424EA9_g;
    int auto6C424EA9_u;
    unit auto6C424EA9_var;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    if ((gf_is_3v3() == true)) {
    }
    else {
        autoA4897AE1_g = gv_terrans;
        autoA4897AE1_var = -1;
        while (true) {
            autoA4897AE1_var = PlayerGroupNextPlayer(autoA4897AE1_g, autoA4897AE1_var);
            if (autoA4897AE1_var < 0) { break; }
            if ((gv_players[autoA4897AE1_var].lv_alive == true)) {
                lv_random = RandomInt(1, 11);
                if ((lv_random < gv_difficulty)) {
                    lv_rand = RandomInt(1, 2);
                    auto6C424EA9_g = UnitGroup(null, 7, RegionFromName(("spawner player zerg " + IntToString(gv_players[autoA4897AE1_var].lv_position))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto6C424EA9_u = UnitGroupCount(auto6C424EA9_g, c_unitCountAll);
                    for (;; auto6C424EA9_u -= 1) {
                        auto6C424EA9_var = UnitGroupUnitFromEnd(auto6C424EA9_g, auto6C424EA9_u);
                        if (auto6C424EA9_var == null) { break; }
                        if ((UnitGetType(auto6C424EA9_var) == "SlowlingSpawner")) {
                            if ((lv_rand == 0)) {
                                UnitIssueOrder(auto6C424EA9_var, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Flank Rally Left Pre " + IntToString(gv_players[autoA4897AE1_var].lv_position)))), c_orderQueueReplace);
                            }
                            else {
                                UnitIssueOrder(auto6C424EA9_var, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Flank Rally Right Pre " + IntToString(gv_players[autoA4897AE1_var].lv_position)))), c_orderQueueReplace);
                            }
                            UnitIssueOrder(auto6C424EA9_var, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(gv_players[autoA4897AE1_var].lv_position)))), c_orderQueueAddToEnd);
                        }

                    }
                }

            }

        }
    }
}

void gf_restore_improved_default_rallies () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup autoB1A83B70_g;
    int autoB1A83B70_var;
    int autoDE6AF862_val;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    if ((gv_restored == 0) && (gf_is_3v3() == false)) {
        autoB1A83B70_g = gv_terrans;
        autoB1A83B70_var = -1;
        while (true) {
            autoB1A83B70_var = PlayerGroupNextPlayer(autoB1A83B70_g, autoB1A83B70_var);
            if (autoB1A83B70_var < 0) { break; }
            if ((gv_players[autoB1A83B70_var].lv_alive == true)) {
                autoDE6AF862_val = gv_players[autoB1A83B70_var].lv_position;
                if (autoDE6AF862_val == 1) {
                    UnitIssueOrder(UnitFromId(185883577), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1188652380)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(185883577), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1769233779)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(185883577), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1813052249)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(1707666035), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(323652440)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(1707666035), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1000391812)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(1707666035), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1813052249)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(1200836898), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1813052249)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(1447669204), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1813052249)), c_orderQueueReplace);
                }
                else if (autoDE6AF862_val == 2) {
                    UnitIssueOrder(UnitFromId(2024257770), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(397200923)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(2024257770), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(2080536937)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(2024257770), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1384876706)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(1351078284), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(226347483)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(1351078284), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1225492054)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(1351078284), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1384876706)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(1581788852), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1384876706)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(1113700362), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1384876706)), c_orderQueueReplace);
                }
                else if (autoDE6AF862_val == 3) {
                    UnitIssueOrder(UnitFromId(323196844), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(625624498)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(323196844), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(234157281)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(323196844), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(921559064)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(164076), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(217608878)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(164076), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1134144376)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(164076), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(921559064)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(2136615420), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(921559064)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(1716235980), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(921559064)), c_orderQueueReplace);
                }
                else if (autoDE6AF862_val == 4) {
                    UnitIssueOrder(UnitFromId(585689597), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(118827045)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(585689597), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1954217478)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(585689597), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(873004648)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(317678471), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(2122490185)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(317678471), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(2061205250)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(317678471), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(873004648)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(1107745723), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(873004648)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(1459550541), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(873004648)), c_orderQueueReplace);
                }
                else if (autoDE6AF862_val == 5) {
                    UnitIssueOrder(UnitFromId(1288453920), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1691751936)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(1288453920), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1396407973)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(1288453920), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1791806517)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(1054314206), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(805596086)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(1054314206), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(14960067)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(1054314206), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1791806517)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(332008490), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1791806517)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(442686457), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1791806517)), c_orderQueueReplace);
                }
                else if (autoDE6AF862_val == 6) {
                    UnitIssueOrder(UnitFromId(551999031), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(133745824)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(551999031), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(2136568927)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(551999031), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1641586980)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(1931103063), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1323379293)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(1931103063), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(855168132)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(1931103063), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1641586980)), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitFromId(1247209867), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1641586980)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(76671948), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1641586980)), c_orderQueueReplace);
                }
                else {
                }
            }

        }
        gv_restored += 1;
    }

}

void gf_upgrade_a_spawner () {
    // Automatic Variable Declarations
    unitgroup auto55696E8F_g;
    int auto55696E8F_u;
    unit auto55696E8F_var;

    // Implementation
    auto55696E8F_g = UnitGroup(null, 7, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto55696E8F_u = UnitGroupCount(auto55696E8F_g, c_unitCountAll);
    for (;; auto55696E8F_u -= 1) {
        auto55696E8F_var = UnitGroupUnitFromEnd(auto55696E8F_g, auto55696E8F_u);
        if (auto55696E8F_var == null) { break; }
        if ((UnitHasBehavior2(auto55696E8F_var, "SpawnerUpgraded") == false) && (libNtve_gf_UnitIsUnderConstruction(auto55696E8F_var) == false)) {
            if (((UnitGetType(auto55696E8F_var) == "BrutaliskSpawner") || (UnitGetType(auto55696E8F_var) == "UltraliskSpawner") || (UnitGetType(auto55696E8F_var) == "PrimalRoachSpawner") || (UnitGetType(auto55696E8F_var) == "RoachSpawner") || (UnitGetType(auto55696E8F_var) == "TanklingSpawner") || (UnitGetType(auto55696E8F_var) == "CreeperSpawner") || (UnitGetType(auto55696E8F_var) == "SlowlingSpawner") || (UnitGetType(auto55696E8F_var) == "StrikelingSpawner"))) {
                UnitCreateEffectUnit(auto55696E8F_var, "SpawnerUpgradeUpgradeSet2", auto55696E8F_var);
                break;
            }

        }

    }
}

void gf_upgrade_start_spawners () {
    // Variable Declarations
    int lv_position;

    // Automatic Variable Declarations
    unitgroup auto27915776_g;
    int auto27915776_u;
    unit auto27915776_var;

    // Variable Initialization

    // Implementation
    if ((gv_upgrade_sets_left > 0)) {
        while (true) {
            lv_position = gv_players[gf_ai_get_random_player()].lv_position;
            if ((gv_early_upgraded_positions[1] != lv_position) && (gv_early_upgraded_positions[2] != lv_position)) {
                break;
            }

        }
        auto27915776_g = UnitGroup(null, 7, RegionFromName(("spawner player zerg " + IntToString(lv_position))), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 4);
        auto27915776_u = UnitGroupCount(auto27915776_g, c_unitCountAll);
        for (;; auto27915776_u -= 1) {
            auto27915776_var = UnitGroupUnitFromEnd(auto27915776_g, auto27915776_u);
            if (auto27915776_var == null) { break; }
            if ((UnitHasBehavior2(auto27915776_var, "SpawnerUpgraded") == false) && (libNtve_gf_UnitIsUnderConstruction(auto27915776_var) == false) && ((UnitGetType(auto27915776_var) == "CreeperSpawner") || (UnitGetType(auto27915776_var) == "SlowlingSpawner"))) {
                UnitCreateEffectUnit(auto27915776_var, "SpawnerUpgradeUpgradeSet2", auto27915776_var);
                PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperSubtract, 40);
            }

        }
        gv_upgrade_sets_left -= 1;
        if ((gv_early_upgraded_positions[1] == 0) && (gv_early_upgraded_positions[2] == 0)) {
            gv_early_upgraded_positions[1] = lv_position;
        }
        else {
            if ((gv_early_upgraded_positions[1] != 0) && (gv_early_upgraded_positions[2] == 0)) {
                gv_early_upgraded_positions[2] = lv_position;
            }

        }
    }

}

int gf_get_early_spawner_upgrade_set_count () {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_difficulty > 2)) {
        if ((gv_difficulty > 4)) {
            if ((gv_difficulty > 6)) {
                lv_r = 3;
            }
            else {
                lv_r = 2;
            }
        }
        else {
            lv_r = 1;
        }
    }
    else {
        lv_r = 0;
    }
    if ((lv_r > gv_player_count)) {
        lv_r = gv_player_count;
    }

    return lv_r;
}

int gf_get_hottest_sector () {
    // Variable Declarations
    int lv_r;
    int lv_hottest_sector;
    int lv_hs_threat;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        if ((gv_heatmap[lv_i].lv_threat_score > lv_hs_threat)) {
            lv_hottest_sector = lv_i;
            lv_hs_threat = gv_heatmap[lv_i].lv_threat_score;
        }

        lv_i += 1;
    }
    lv_r = lv_hottest_sector;
    return lv_r;
}

unit gf_get_kerrigan_unit () {
    // Variable Declarations
    unit lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_r = gv_kerrigan_unit;
    return lv_r;
}

int gf_get_kerrigan_position_sector () {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libNtve_gf_UnitInRegion(gv_kerrigan_unit, RegionFromId(23)) == true)) {
        lv_r = 1;
    }

    if ((libNtve_gf_UnitInRegion(gv_kerrigan_unit, RegionFromId(20)) == true)) {
        lv_r = 2;
    }

    if ((libNtve_gf_UnitInRegion(gv_kerrigan_unit, RegionFromId(24)) == true)) {
        lv_r = 3;
    }

    if ((libNtve_gf_UnitInRegion(gv_kerrigan_unit, RegionFromId(22)) == true)) {
        lv_r = 4;
    }

    if ((libNtve_gf_UnitInRegion(gv_kerrigan_unit, RegionFromId(21)) == true)) {
        lv_r = 5;
    }

    if ((libNtve_gf_UnitInRegion(gv_kerrigan_unit, RegionFromId(25)) == true)) {
        lv_r = 6;
    }

    return lv_r;
}

void gf_process_sector_data () {
    // Variable Declarations
    int lv_i;
    int lv_army_score;

    // Automatic Variable Declarations
    unitgroup auto5DD0B90A_g;
    int auto5DD0B90A_u;
    unit auto5DD0B90A_var;
    string auto25E18B01_val;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        lv_army_score = 0;
        if ((gv_players[gv_positions[lv_i]].lv_alive == true)) {
            lv_army_score += 1;
        }

        auto5DD0B90A_g = gv_heatmap[lv_i].lv_terran_units;
        auto5DD0B90A_u = UnitGroupCount(auto5DD0B90A_g, c_unitCountAll);
        for (;; auto5DD0B90A_u -= 1) {
            auto5DD0B90A_var = UnitGroupUnitFromEnd(auto5DD0B90A_g, auto5DD0B90A_u);
            if (auto5DD0B90A_var == null) { break; }
            auto25E18B01_val = UnitGetType(auto5DD0B90A_var);
            if (auto25E18B01_val == "InfestedExploder") {
                lv_army_score += 1;
            }
            else if (auto25E18B01_val == "InfestedTerranCampaign") {
                lv_army_score += 1;
            }
            else if (auto25E18B01_val == "Marine2") {
                lv_army_score += 2;
            }
            else if (auto25E18B01_val == "ChaosCultist") {
                lv_army_score += 2;
            }
            else if (auto25E18B01_val == "Reaper2") {
                lv_army_score += 1;
            }
            else if (auto25E18B01_val == "VeteranMarine") {
                lv_army_score += 3;
            }
            else if (auto25E18B01_val == "ChaosSpaceMarine") {
                lv_army_score += 3;
            }
            else if (auto25E18B01_val == "EliteMarine") {
                lv_army_score += 5;
            }
            else if (auto25E18B01_val == "EliteMarineSkin1") {
                lv_army_score += 5;
            }
            else if (auto25E18B01_val == "EliteMarineSkin2") {
                lv_army_score += 5;
            }
            else if (auto25E18B01_val == "EliteMarineSkin3") {
                lv_army_score += 5;
            }
            else if (auto25E18B01_val == "EliteMarineSkin4") {
                lv_army_score += 5;
            }
            else if (auto25E18B01_val == "ChaosLord") {
                lv_army_score += 5;
            }
            else if (auto25E18B01_val == "Battery") {
                lv_army_score += 5;
            }
            else if (auto25E18B01_val == "HighDensityBattery") {
                lv_army_score += 10;
            }
            else if (auto25E18B01_val == "AdvancedBattery") {
                lv_army_score += 10;
            }
            else if (auto25E18B01_val == "AdvancedBatteryPylon") {
                lv_army_score += 10;
            }
            else if (auto25E18B01_val == "ShockTrooper") {
                lv_army_score += 2;
            }
            else if (auto25E18B01_val == "FirebatZergHex") {
                lv_army_score += 2;
            }
            else if (auto25E18B01_val == "Italis") {
                lv_army_score += 50;
            }
            else if (auto25E18B01_val == "SiegeTank2") {
                lv_army_score += 50;
            }
            else if (auto25E18B01_val == "SiegeTankSieged2") {
                lv_army_score += 50;
            }
            else {
            }
        }
        gv_heatmap[lv_i].lv_threat_score = lv_army_score;
        lv_i += 1;
    }
}

void gf_kerrigan_jump_towards_position (point lp_target) {
    // Variable Declarations
    unit lv_kerrigan;
    point lv_kerrigan_position;
    point lv_target_point;
    fixed lv_remaining_distance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_kerrigan = gv_kerrigan_unit;
    lv_kerrigan_position = UnitGetPosition(lv_kerrigan);
    lv_remaining_distance = DistanceBetweenPoints(lv_kerrigan_position, lp_target);

    // Implementation
    if ((lv_remaining_distance >= 6.0)) {
        lv_target_point = libNtve_gf_PointOffsetTowardsPoint(lv_kerrigan_position, 6.0, lp_target);
        UnitIssueOrder(lv_kerrigan, OrderTargetingPoint(AbilityCommand("PrimalSlash", 0), lv_target_point), c_orderQueueReplace);
        lv_remaining_distance = (lv_remaining_distance - 6.0);
    }
    else {
        UnitIssueOrder(lv_kerrigan, OrderTargetingPoint(AbilityCommand("attack", 0), lv_target_point), c_orderQueueReplace);
    }
    if ((lv_remaining_distance >= 6.0)) {
        lv_target_point = libNtve_gf_PointOffsetTowardsPoint(lv_kerrigan_position, 12.0, lp_target);
        UnitIssueOrder(lv_kerrigan, OrderTargetingPoint(AbilityCommand("PrimalSlash", 0), lv_target_point), c_orderQueueAddToEnd);
        lv_remaining_distance = (lv_remaining_distance - 6.0);
    }
    else {
        UnitIssueOrder(lv_kerrigan, OrderTargetingPoint(AbilityCommand("attack", 0), lv_target_point), c_orderQueueAddToEnd);
    }
    if ((lv_remaining_distance >= 6.0)) {
        lv_target_point = libNtve_gf_PointOffsetTowardsPoint(lv_kerrigan_position, 18.0, lp_target);
        UnitIssueOrder(lv_kerrigan, OrderTargetingPoint(AbilityCommand("PrimalSlash", 0), lv_target_point), c_orderQueueAddToEnd);
        lv_remaining_distance = (lv_remaining_distance - 6.0);
    }
    else {
        UnitIssueOrder(lv_kerrigan, OrderTargetingPoint(AbilityCommand("attack", 0), lv_target_point), c_orderQueueAddToEnd);
    }
    if ((lv_remaining_distance >= 6.0)) {
        lv_target_point = libNtve_gf_PointOffsetTowardsPoint(lv_kerrigan_position, 24.0, lp_target);
        UnitIssueOrder(lv_kerrigan, OrderTargetingPoint(AbilityCommand("PrimalSlash", 0), lv_target_point), c_orderQueueAddToEnd);
        lv_remaining_distance = (lv_remaining_distance - 6.0);
    }
    else {
        UnitIssueOrder(lv_kerrigan, OrderTargetingPoint(AbilityCommand("attack", 0), lv_target_point), c_orderQueueAddToEnd);
    }
}

void gf_kerrigan_go_to_lane (int lp_sector) {
    // Variable Declarations
    point lv_p;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_p = PointFromName(("Hydra B " + IntToString(lp_sector)));
    gf_kerrigan_jump_towards_position(lv_p);
    UnitIssueOrder(gv_kerrigan_unit, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromName(("zergbase " + IntToString(lp_sector))))), c_orderQueueAddToEnd);
}

void gf_torment_1_game_modifiers () {
    // Variable Declarations
    point lv_cocoon_position;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cocoon_position = PointFromId(1910508930);
    lv_player = 7;

    // Implementation
    gv_kerrigan_respawn_cooldown_timer = 120;
    CatalogReferenceSet("Behavior,CocoonReviveTimer,Duration", lv_player, IntToString(gv_kerrigan_respawn_cooldown_timer));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganReviveCocoon", 0, lv_player, lv_cocoon_position);
    gv_kerrigan_cocoon = UnitLastCreated();
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "K5CrushingGrip", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "K5MindBolt", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "K5PrimalSlash", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "K5PsiStrike", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "K5Fury", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "K5Cooldowns", 1);
    gv_hydra_peacetime = (gv_hydra_peacetime - 60);
    TriggerEnable(gt_Unitenterssector, true);
    TriggerEnable(gt_Unitleavessector, true);
    TriggerEnable(gt_updatethreatscoreevery5s, true);
    TriggerEnable(gt_defendlanewithkerrigan, true);
    TriggerEnable(gt_Kerrigangetsattacked, true);
    TriggerEnable(gt_ReduceKerriganCooldowns, true);
    TriggerEnable(gt_defendsectorwithkerrigan, true);
    TriggerEnable(gt_CocoonCountdownhappend, true);
    TriggerEnable(gt_Kerrigandied, true);
    TriggerEnable(gt_Kerrigancocoondied, true);
    TriggerEnable(gt_instantlyupgradethespawner, true);
    TriggerEnable(gt_GapGenerationDummyEffecthappend, true);
    TriggerEnable(gt_Vipergetsattacked, true);
    TriggerEnable(gt_ViperCloudgotused, true);
}

void gf_torment_2_game_modifiers () {
    // Variable Declarations
    point lv_cocoon_position;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cocoon_position = PointFromId(1910508930);
    lv_player = 7;

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "K5DropPods", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "K5HeroicFortitude", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "K5ChainLightning", 1);
}

void gf_spawn_viper () {
    // Variable Declarations
    point lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = PointFromId(1910508930);

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Viper", 0, 7, lv_p);
}

void gf_torment_4_game_modifiers () {
    // Variable Declarations
    point lv_cocoon_position;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cocoon_position = PointFromId(1910508930);
    lv_player = 7;

    // Implementation
    CatalogReferenceSet("Unit,Slowling,LifeMax", lv_player, IntToString((CatalogReferenceGetAsInt("Unit,Slowling,LifeMax", c_playerAny) + 5)));
    CatalogReferenceSet("Unit,Slowling,LifeStart", lv_player, IntToString((CatalogReferenceGetAsInt("Unit,Slowling,LifeStart", c_playerAny) + 5)));
    CatalogReferenceSet("Unit,Creeper,LifeMax", lv_player, IntToString((CatalogReferenceGetAsInt("Unit,Creeper,LifeMax", c_playerAny) + 5)));
    CatalogReferenceSet("Unit,Creeper,LifeStart", lv_player, IntToString((CatalogReferenceGetAsInt("Unit,Creeper,LifeStart", c_playerAny) + 5)));
    CatalogReferenceSet("Unit,Tankling,LifeMax", lv_player, IntToString((CatalogReferenceGetAsInt("Unit,Tankling,LifeMax", c_playerAny) + 5)));
    CatalogReferenceSet("Unit,Tankling,LifeStart", lv_player, IntToString((CatalogReferenceGetAsInt("Unit,Tankling,LifeStart", c_playerAny) + 5)));
    CatalogReferenceSet("Unit,Roach2,LifeMax", lv_player, IntToString((CatalogReferenceGetAsInt("Unit,Roach2,LifeMax", c_playerAny) + 5)));
    CatalogReferenceSet("Unit,Roach2,LifeStart", lv_player, IntToString((CatalogReferenceGetAsInt("Unit,Roach2,LifeStart", c_playerAny) + 5)));
    CatalogReferenceSet("Unit,TarRoach,LifeMax", lv_player, IntToString((CatalogReferenceGetAsInt("Unit,TarRoach,LifeMax", c_playerAny) + 5)));
    CatalogReferenceSet("Unit,TarRoach,LifeStart", lv_player, IntToString((CatalogReferenceGetAsInt("Unit,TarRoach,LifeStart", c_playerAny) + 5)));
    CatalogReferenceSet("Unit,PrimalRoach2,LifeMax", lv_player, IntToString((CatalogReferenceGetAsInt("Unit,PrimalRoach2,LifeMax", c_playerAny) + 5)));
    CatalogReferenceSet("Unit,PrimalRoach2,LifeStart", lv_player, IntToString((CatalogReferenceGetAsInt("Unit,PrimalRoach2,LifeStart", c_playerAny) + 5)));
    CatalogReferenceSet("Unit,Ultralisk2,LifeMax", lv_player, IntToString((CatalogReferenceGetAsInt("Unit,Ultralisk2,LifeMax", c_playerAny) + 5)));
    CatalogReferenceSet("Unit,Ultralisk2,LifeStart", lv_player, IntToString((CatalogReferenceGetAsInt("Unit,Ultralisk2,LifeStart", c_playerAny) + 5)));
    CatalogReferenceSet("Unit,Brutalisk2,LifeMax", lv_player, IntToString((CatalogReferenceGetAsInt("Unit,Brutalisk2,LifeMax", c_playerAny) + 5)));
    CatalogReferenceSet("Unit,Brutalisk2,LifeStart", lv_player, IntToString((CatalogReferenceGetAsInt("Unit,Brutalisk2,LifeStart", c_playerAny) + 5)));
    CatalogReferenceSet("Unit,Strikeling,LifeMax", lv_player, IntToString((CatalogReferenceGetAsInt("Unit,Strikeling,LifeMax", c_playerAny) + 5)));
    CatalogReferenceSet("Unit,Strikeling,LifeStart", lv_player, IntToString((CatalogReferenceGetAsInt("Unit,Strikeling,LifeStart", c_playerAny) + 5)));
}

void gf_upgrade_a_spawner_instant_t5 (unit lp_u) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_u) == "BrutaliskSpawner") || (UnitGetType(lp_u) == "UltraliskSpawner") || (UnitGetType(lp_u) == "PrimalRoachSpawner") || (UnitGetType(lp_u) == "RoachSpawner") || (UnitGetType(lp_u) == "TanklingSpawner") || (UnitGetType(lp_u) == "CreeperSpawner") || (UnitGetType(lp_u) == "SlowlingSpawner") || (UnitGetType(lp_u) == "StrikelingSpawner"))) {
        UnitCreateEffectUnit(lp_u, "SpawnerUpgradeUpgradeSet2", lp_u);
    }

}

void gf_get_armor () {
    // Variable Declarations
    int lv_time;

    // Automatic Variable Declarations
    int auto05B155BA_val;

    // Variable Initialization
    lv_time = FixedToInt(GameGetMissionTime());

    // Implementation
    auto05B155BA_val = gv_difficulty;
    if (auto05B155BA_val == 1) {
        if ((lv_time > (10 * 60)) && (gv_armor_level == 0)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor1", 1);
            gv_armor_level = 1;
        }

        if ((lv_time > (15 * 60)) && (gv_armor_level == 1)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor2", 1);
            gv_armor_level = 2;
        }

        if ((lv_time > (20 * 60)) && (gv_armor_level == 2)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor3", 1);
            gv_armor_level = 3;
        }

        if ((lv_time > (25 * 60)) && (gv_armor_level == 3)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor4", 1);
            gv_armor_level = 4;
        }

        if ((lv_time > (30 * 60)) && (gv_armor_level == 4)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor5", 1);
            gv_armor_level = 5;
        }

    }
    else if (auto05B155BA_val == 2) {
        if ((lv_time > (9 * 60)) && (gv_armor_level == 0)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor1", 1);
            gv_armor_level = 1;
        }

        if ((lv_time > (13 * 60)) && (gv_armor_level == 1)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor2", 1);
            gv_armor_level = 2;
        }

        if ((lv_time > (20 * 60)) && (gv_armor_level == 2)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor3", 1);
            gv_armor_level = 3;
        }

        if ((lv_time > (25 * 60)) && (gv_armor_level == 3)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor4", 1);
            gv_armor_level = 4;
        }

        if ((lv_time > (28 * 60)) && (gv_armor_level == 4)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor5", 1);
            gv_armor_level = 5;
        }

    }
    else if (auto05B155BA_val == 3) {
        if ((lv_time > (9 * 60)) && (gv_armor_level == 0)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor1", 1);
            gv_armor_level = 1;
        }

        if ((lv_time > (13 * 60)) && (gv_armor_level == 1)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor2", 1);
            gv_armor_level = 2;
        }

        if ((lv_time > (17 * 60)) && (gv_armor_level == 2)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor3", 1);
            gv_armor_level = 3;
        }

        if ((lv_time > (22 * 60)) && (gv_armor_level == 3)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor4", 1);
            gv_armor_level = 4;
        }

        if ((lv_time > (27 * 60)) && (gv_armor_level == 4)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor5", 1);
            gv_armor_level = 5;
        }

    }
    else if (auto05B155BA_val == 4) {
        if ((lv_time > (9 * 60)) && (gv_armor_level == 0)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor1", 1);
            gv_armor_level = 1;
        }

        if ((lv_time > (13 * 60)) && (gv_armor_level == 1)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor2", 1);
            gv_armor_level = 2;
        }

        if ((lv_time > (19 * 60)) && (gv_armor_level == 2)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor3", 1);
            gv_armor_level = 3;
        }

        if ((lv_time > (20 * 60)) && (gv_armor_level == 3)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor4", 1);
            gv_armor_level = 4;
        }

        if ((lv_time > (25 * 60)) && (gv_armor_level == 4)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor5", 1);
            gv_armor_level = 5;
        }

    }
    else if (auto05B155BA_val == 5) {
        if ((lv_time > (7 * 60)) && (gv_armor_level == 0)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor1", 1);
            gv_armor_level = 1;
        }

        if ((lv_time > (14 * 60)) && (gv_armor_level == 1)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor2", 1);
            gv_armor_level = 2;
        }

        if ((lv_time > (17 * 60)) && (gv_armor_level == 2)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor3", 1);
            gv_armor_level = 3;
        }

        if ((lv_time > (25 * 60)) && (gv_armor_level == 3)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor4", 1);
            gv_armor_level = 4;
        }

        if ((lv_time > (26 * 60)) && (gv_armor_level == 4)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor5", 1);
            gv_armor_level = 5;
        }

    }
    else if (auto05B155BA_val == 6) {
        if ((lv_time > (7 * 60)) && (gv_armor_level == 0)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor1", 1);
            gv_armor_level = 1;
        }

        if ((lv_time > (14 * 60)) && (gv_armor_level == 1)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor2", 1);
            gv_armor_level = 2;
        }

        if ((lv_time > 1360) && (gv_armor_level == 2)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor3", 1);
            gv_armor_level = 3;
        }

        if ((lv_time > 1361) && (gv_armor_level == 3)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor4", 1);
            gv_armor_level = 4;
        }

        if ((lv_time > 1362) && (gv_armor_level == 4)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor5", 1);
            gv_armor_level = 5;
        }

    }
    else if (auto05B155BA_val == 7) {
        if ((lv_time > (8 * 60)) && (gv_armor_level == 0)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor1", 1);
            gv_armor_level = 1;
        }

        if ((lv_time > (13 * 60)) && (gv_armor_level == 1)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor2", 1);
            gv_armor_level = 2;
        }

        if ((lv_time > (17 * 60)) && (gv_armor_level == 2)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor3", 1);
            gv_armor_level = 3;
        }

        if ((lv_time > (22 * 60)) && (gv_armor_level == 3)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor4", 1);
            gv_armor_level = 4;
        }

        if ((lv_time > ((22 * 60) + 1)) && (gv_armor_level == 4)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor5", 1);
            gv_armor_level = 5;
        }

    }
    else {
        if ((lv_time > (7 * 60)) && (gv_armor_level == 0)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor1", 1);
            gv_armor_level = 1;
        }

        if ((lv_time > (14 * 60)) && (gv_armor_level == 1)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor2", 1);
            gv_armor_level = 2;
        }

        if ((lv_time > (15 * 60)) && (gv_armor_level == 2)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor3", 1);
            gv_armor_level = 3;
        }

        if ((lv_time > ((22 * 60) + 0)) && (gv_armor_level == 3)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor4", 1);
            gv_armor_level = 4;
        }

        if ((lv_time > ((22 * 60) + 1)) && (gv_armor_level == 4)) {
            TechTreeUpgradeAddLevel(7, "ZergArmor5", 1);
            gv_armor_level = 5;
        }

    }
}

void gf_get_attackup () {
    // Variable Declarations
    int lv_time;
    int lv_peacetime;
    int lv_interval;
    int lv_max_upgrade;
    int lv_upcnt;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_time = FixedToInt(GameGetMissionTime());
    lv_peacetime = (10 * 60);
    lv_interval = (150 - (gv_difficulty * 5));
    lv_max_upgrade = 50;
    lv_upcnt = 1;
    lv_i = 1;

    // Implementation
    if ((gv_difficulty < 4)) {
        lv_max_upgrade = (10 + (gv_difficulty * 10));
    }
    else {
        if ((gv_difficulty >= 7)) {
            lv_max_upgrade = (lv_max_upgrade + 10);
        }

    }
    if ((lv_time > (25 * 60)) && (gv_difficulty >= 5)) {
        lv_upcnt = (lv_upcnt + 1);
    }

    if ((lv_time > (28 * 60)) && (gv_difficulty >= 7)) {
        lv_upcnt = (lv_upcnt + 1);
    }

    if ((lv_time >= lv_peacetime) && (ModI(lv_time, lv_interval) == 0) && (TechTreeUpgradeCount(7, "ZergAttack", c_techCountQueuedOrBetter) < lv_max_upgrade)) {
        TechTreeUpgradeAddLevel(7, "ZergAttack", lv_upcnt);
        if ((gv_difficulty >= 7) && (lv_time > (19 * 60))) {
            TechTreeUpgradeAddLevel(7, "ZergDefenseDamage", 1);
        }

    }

}

void gf_get_speed () {
    // Variable Declarations
    int lv_time;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_time = FixedToInt(GameGetMissionTime());
    lv_i = 1;

    // Implementation
    if (((lv_time == (1100 - (gv_difficulty * 30))) || (lv_time == (1400 - (gv_difficulty * 30))) || (lv_time == (1700 - (gv_difficulty * 30)))) && (TechTreeUpgradeCount(7, "ZergMovement", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(7, "ZergMovement", 1);
    }

    if ((gv_difficulty >= 10) && (lv_time == (1900 - (gv_difficulty * 30)))) {
        TechTreeUpgradeAddLevel(7, "ZergMovement", 1);
    }

}

void gf_try_buy_supply () {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGetPropertyInt(7, c_playerPropMinerals) > CatalogReferenceGetAsInt("Abil,ZergResearch,InfoArray[Research10].Resource[Minerals]", 7))) {
        UnitIssueOrder(gf_get_hive(), Order(AbilityCommand("ZergResearch", 9)), c_orderQueueReplace);
    }

}

void gf_get_unit_upgrades () {
    // Variable Declarations
    int lv_time;
    int lv_roach_before_upgrade;
    int lv_tanklings_before_upgrade;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_time = FixedToInt(GameGetMissionTime());
    lv_roach_before_upgrade = 10;
    lv_tanklings_before_upgrade = 10;

    // Implementation
    if ((gv_build == "roach")) {
        lv_roach_before_upgrade = 8;
    }

    if ((gv_build == "tanklings")) {
        lv_tanklings_before_upgrade = 8;
    }

    if ((gv_difficulty > 1) && (TechTreeUpgradeCount(7, "TarInfection", c_techCountQueuedOrBetter) < 1)) {
        if ((lv_time >= (1200 - (gv_difficulty * 45))) && (UnitGroupCount(UnitGroup("RoachSpawner", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= lv_roach_before_upgrade)) {
            TechTreeUpgradeAddLevel(7, "TarInfection", 1);
            TechTreeUpgradeAddLevel(7, "TarSpawn", 1);
        }

    }

    if ((gv_difficulty > 1) && (TechTreeUpgradeCount(7, "ZergSpecializationTanklingBankling", c_techCountQueuedOrBetter) < 1)) {
        if ((lv_time >= (240 - (gv_difficulty * 5))) && (UnitGroupCount(UnitGroup("TanklingSpawner", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= lv_tanklings_before_upgrade)) {
            TechTreeUpgradeAddLevel(7, "ZergSpecializationTanklingBankling", 1);
        }

    }

    if ((gv_difficulty >= 3) && (TechTreeUpgradeCount(7, "PrimalRapidRespawn", c_techCountQueuedOrBetter) < 1)) {
        if ((lv_time >= (1200 - (gv_difficulty * 45))) && (UnitGroupCount(UnitGroup("PrimalRoachSpawner", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 10)) {
            TechTreeUpgradeAddLevel(7, "PrimalRapidRespawn", 1);
        }

    }

    if ((gv_difficulty >= 4) && (TechTreeUpgradeCount(7, "ZergSpecializationCreeperFerocity", c_techCountQueuedOrBetter) == 0)) {
        if ((lv_time >= 540) && (UnitGroupCount(UnitGroup("CreeperSpawner", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 6)) {
            TechTreeUpgradeAddLevel(7, "ZergSpecializationCreeperFerocity", 1);
        }

    }

}

void gf_smith_doing_stuff (unit lp_unit, int lp_owner, point lp_position) {
    // Variable Declarations
    int lv_rnd;
    bool lv_loop;
    unitgroup lv_ug;
    unit lv_u;
    string lv_n_ut;
    int lv_charged_unit_new_max_energy;

    // Automatic Variable Declarations
    int autoA57586D2_val;
    string auto968B0C03_val;
    int auto9F2DF62D_val;

    // Variable Initialization
    lv_ug = UnitGroupEmpty();

    // Implementation
    if ((gv_smith_last_used_effect_id > 0)) {
        lv_loop = true;
    }
    else {
        lv_rnd = gf_roll_dice();
    }
    while ((lv_loop == true)) {
        lv_rnd = gf_roll_dice();
        if ((lv_rnd != gv_smith_last_used_effect_id)) {
            lv_loop = false;
        }

    }
    gv_smith_last_used_effect_id = 0;
    autoA57586D2_val = lv_rnd;
    if (autoA57586D2_val == 1) {
        UnitBehaviorAdd(lp_unit, "ProbiusPylonBuffAuraDefense", lp_unit, 1);
        gv_smith_last_used_effect_id = 1;
    }
    else if (autoA57586D2_val == 2) {
        UnitBehaviorAdd(lp_unit, "ProbiusPylonBuffAuraAttack", lp_unit, 1);
        gv_smith_last_used_effect_id = 2;
    }
    else if (autoA57586D2_val == 3) {
        UnitBehaviorAdd(lp_unit, "ProbiusPylonBuffAuraPower", lp_unit, 1);
        gv_smith_last_used_effect_id = 3;
    }
    else if (autoA57586D2_val == 4) {
        lv_ug = gf_smith_get_upgradeable_units(lp_owner, lp_position);
        lv_u = UnitGroupRandomUnit(lv_ug, c_unitCountAlive);
        if ((lv_u != null)) {
            auto968B0C03_val = UnitGetType(lv_u);
            if (auto968B0C03_val == "Sheep2") {
                lv_n_ut = "Cow2";
            }
            else if (auto968B0C03_val == "Cow2") {
                lv_n_ut = "Fruitinator";
            }
            else if (auto968B0C03_val == "Marine2") {
                if ((gf_flip_coin() == 1)) {
                    lv_n_ut = "VeteranMarine";
                }
                else {
                    if ((gf_flip_coin() == 1)) {
                        lv_n_ut = "VeteranMarine";
                    }
                    else {
                        lv_n_ut = "ChaosSpaceMarine";
                    }
                }
            }
            else if (auto968B0C03_val == "VeteranMarine") {
                if ((gf_flip_coin() == 1)) {
                    lv_n_ut = "EliteMarine";
                }
                else {
                    if ((gf_flip_coin() == 1)) {
                        lv_n_ut = "EliteMarineSkin1";
                    }
                    else {
                        if ((gf_flip_coin() == 1)) {
                            lv_n_ut = "EliteMarineSkin2";
                        }
                        else {
                            lv_n_ut = "EliteMarineSkin3";
                        }
                    }
                }
            }
            else if (auto968B0C03_val == "Battery") {
                lv_n_ut = "AdvancedBattery";
            }
            else if (auto968B0C03_val == "AdvancedBattery") {
                lv_n_ut = "HighDensityBattery";
            }
            else if (auto968B0C03_val == "EliteMarine") {
                if ((gf_flip_coin() == 1)) {
                    auto9F2DF62D_val = gf_roll_dice();
                    if (auto9F2DF62D_val == 1) {
                        lv_n_ut = "Mantis";
                    }
                    else if (auto9F2DF62D_val == 2) {
                        lv_n_ut = "ChaosDefiler";
                    }
                    else if (auto9F2DF62D_val == 3) {
                        lv_n_ut = "Jaina";
                    }
                    else if (auto9F2DF62D_val == 4) {
                        lv_n_ut = "ChaosLord";
                    }
                    else if (auto9F2DF62D_val == 5) {
                        lv_n_ut = "AatroxArthasCritter";
                    }
                    else if (auto9F2DF62D_val == 6) {
                        lv_n_ut = "PickupPalletGas";
                    }
                    else {
                    }
                    if ((gf_roll_dice() == 1)) {
                        lv_n_ut = "Mantis";
                    }
                    else {
                        lv_n_ut = "ChaosDefiler";
                    }
                }

            }
            else {
            }
        }

        if ((lv_n_ut != null)) {
            UnitKill(lv_u);
            if ((lv_n_ut == "PickupPalletGas")) {
                libNtve_gf_CreateUnitsWithDefaultFacing(7, "PickupPalletGas", 0, lp_owner, lp_position);
                libNtve_gf_CreateUnitsWithDefaultFacing(7, "PickupPalletMinerals", 0, lp_owner, lp_position);
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_n_ut, 0, lp_owner, lp_position);
            }
        }

        gv_smith_last_used_effect_id = 4;
    }
    else if (autoA57586D2_val == 5) {
        lv_ug = gf_smith_get_chargeable_units(lp_owner, lp_position);
        lv_u = UnitGroupRandomUnit(lv_ug, c_unitCountAlive);
        if ((lv_u != null)) {
            lv_charged_unit_new_max_energy = (UnitGetPropertyInt(lv_u, c_unitPropEnergyMax, c_unitPropCurrent) + 500);
            UnitSetPropertyFixed(lv_u, c_unitPropEnergyMax, lv_charged_unit_new_max_energy);
            UnitSetPropertyFixed(lv_u, c_unitPropEnergy, lv_charged_unit_new_max_energy);
        }

        gv_smith_last_used_effect_id = 5;
    }
    else if (autoA57586D2_val == 6) {
        UnitSetPropertyFixed(lp_unit, c_unitPropLifeMax, (UnitGetPropertyInt(lp_unit, c_unitPropLifeMax, c_unitPropCurrent) + 50));
        UnitSetPropertyFixed(lp_unit, c_unitPropShieldsMax, (UnitGetPropertyInt(lp_unit, c_unitPropShieldsMax, c_unitPropCurrent) + 50));
        gv_smith_last_used_effect_id = 6;
    }
    else {
    }
}

void gf_smith_remove_last_used_effect (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorRemove(lp_unit, "ProbiusPylonBuffAuraDefense", 1);
    UnitBehaviorRemove(lp_unit, "ProbiusPylonBuffAuraAttack", 1);
    UnitBehaviorRemove(lp_unit, "ProbiusPylonBuffAuraPower", 1);
}

unitgroup gf_smith_get_upgradeable_units (int lp_owner, point lp_position) {
    // Variable Declarations
    unitgroup lv_result_ug;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_result_ug = UnitGroupEmpty();

    // Implementation
    lv_result_ug = UnitGroup("Sheep2", lp_owner, RegionCircle(lp_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_result_ug, UnitGroup("Cow2", lp_owner, RegionCircle(lp_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_result_ug, UnitGroup("Marine2", lp_owner, RegionCircle(lp_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_result_ug, UnitGroup("VeteranMarine", lp_owner, RegionCircle(lp_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_result_ug, UnitGroup("EliteMarine", lp_owner, RegionCircle(lp_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_result_ug, UnitGroup("Battery", lp_owner, RegionCircle(lp_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_result_ug, UnitGroup("AdvancedBattery", lp_owner, RegionCircle(lp_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    return lv_result_ug;
}

unitgroup gf_smith_get_chargeable_units (int lp_owner, point lp_position) {
    // Variable Declarations
    unitgroup lv_result_ug;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_result_ug = UnitGroupEmpty();

    // Implementation
    lv_result_ug = UnitGroup("Marine2", lp_owner, RegionCircle(lp_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_result_ug, UnitGroup("VeteranMarine", lp_owner, RegionCircle(lp_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_result_ug, UnitGroup("EliteMarine", lp_owner, RegionCircle(lp_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_result_ug, UnitGroup("FirebatZergHex", lp_owner, RegionCircle(lp_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_result_ug, UnitGroup("Battery", lp_owner, RegionCircle(lp_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_result_ug, UnitGroup("AdvancedBattery", lp_owner, RegionCircle(lp_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_result_ug, UnitGroup("HighDensityBattery", lp_owner, RegionCircle(lp_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_result_ug, UnitGroup("SiegeTank2", lp_owner, RegionCircle(lp_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_result_ug, UnitGroup("SiegeTankSieged2", lp_owner, RegionCircle(lp_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    return lv_result_ug;
}

bool gf_is_front_path_blocked (int lp_player) {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((PointPathingCost(PointFromName(("Zerg Front Rally Pre " + IntToString(gv_players[lp_player].lv_position))), PointFromName(("Terran Face " + IntToString(gv_players[lp_player].lv_position)))) > 30)) {
        lv_r = true;
    }

    return lv_r;
}

string gf_afterlife_get_hero_unit_type (int lp_player) {
    // Variable Declarations
    string lv_return;

    // Automatic Variable Declarations
    string autoC0F986B4_val;

    // Variable Initialization

    // Implementation
    autoC0F986B4_val = gv_players[lp_player].lv_support_type;
    if (autoC0F986B4_val == "Army") {
        lv_return = "ChaosLord";
    }
    else if (autoC0F986B4_val == "Hightech") {
        lv_return = "ArtanisVoid";
    }
    else if (autoC0F986B4_val == "v3x") {
        lv_return = "Blaze";
    }
    else if (autoC0F986B4_val == "Cash") {
        lv_return = "ZeratulVoidAiur01";
    }
    else if (autoC0F986B4_val == "Infested") {
        lv_return = "Dehaka";
    }
    else if (autoC0F986B4_val == "Raynor") {
        lv_return = "Raynor";
    }
    else if (autoC0F986B4_val == "Marauder") {
        lv_return = "MengskMarauder";
    }
    else if (autoC0F986B4_val == "Tank") {
        lv_return = "SiegeTank2";
    }
    else if (autoC0F986B4_val == "Probius") {
        lv_return = "Probius";
    }
    else if (autoC0F986B4_val == "Karax") {
        lv_return = "KaraxChampion";
    }
    else {
        lv_return = "KaraxChampion";
    }
    return lv_return;
}

void gf_firelings_set_vars () {
    // Automatic Variable Declarations
}

int gf_banelings_get_baneling_group_i_start () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_banelings_groups_max == 2)) {
        lv_i = 1;
    }
    else {
        if ((gv_banelings_groups_max == 4)) {
            lv_i = 3;
        }
        else {
            if ((gv_banelings_groups_max == 8)) {
                lv_i = 3;
            }

        }
    }
    return lv_i;
}

int gf_banelings_get_baneling_group_i_max () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_banelings_groups_max == 2)) {
        lv_i = 2;
    }
    else {
        if ((gv_banelings_groups_max == 4)) {
            lv_i = 6;
        }
        else {
            if ((gv_banelings_groups_max == 8)) {
                lv_i = 10;
            }

        }
    }
    return lv_i;
}

int gf_banelings_get_smallest_group_as_int_id () {
    // Variable Declarations
    int lv_i;
    int lv_max;
    int lv_r;
    int lv_tmp_lowest;
    int lv_tmp_lowest_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_max = gf_banelings_get_baneling_group_i_max();

    // Implementation
    lv_i = gf_banelings_get_baneling_group_i_start();
    while ((lv_i <= lv_max)) {
        if ((lv_i == gf_banelings_get_baneling_group_i_start())) {
            lv_tmp_lowest = UnitGroupCount(gv_banelings_groups[lv_i].lv_unit_group, c_unitCountAlive);
            lv_tmp_lowest_index = lv_i;
        }
        else {
            if ((UnitGroupCount(gv_banelings_groups[lv_i].lv_unit_group, c_unitCountAlive) < lv_tmp_lowest)) {
                lv_tmp_lowest = UnitGroupCount(gv_banelings_groups[lv_i].lv_unit_group, c_unitCountAlive);
                lv_tmp_lowest_index = lv_i;
            }
            else {
                if ((UnitGroupCount(gv_banelings_groups[lv_i].lv_unit_group, c_unitCountAlive) == lv_tmp_lowest)) {
                    if ((gf_flip_coin() == 1)) {
                        lv_tmp_lowest = UnitGroupCount(gv_banelings_groups[lv_i].lv_unit_group, c_unitCountAlive);
                        lv_tmp_lowest_index = lv_i;
                    }

                }

            }
        }
        lv_i += 1;
    }
    lv_r = lv_tmp_lowest_index;
    return lv_r;
}

bool gf_banelings_spawners_left () {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGroupCount(UnitGroup("BanelingSpawner", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        lv_r = true;
    }

    return lv_r;
}

unitgroup gf_banelings_get_all_unassigned_banelings_as_ug () {
    // Variable Declarations
    unitgroup lv_r;
    bool lv_assigned;
    int lv_i;
    int lv_max;

    // Automatic Variable Declarations
    unitgroup auto967CA21D_g;
    int auto967CA21D_u;
    unit auto967CA21D_var;

    // Variable Initialization
    lv_r = UnitGroupEmpty();
    lv_max = gf_banelings_get_baneling_group_i_max();

    // Implementation
    auto967CA21D_g = UnitGroup("BanelingZergHex", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto967CA21D_u = UnitGroupCount(auto967CA21D_g, c_unitCountAll);
    for (;; auto967CA21D_u -= 1) {
        auto967CA21D_var = UnitGroupUnitFromEnd(auto967CA21D_g, auto967CA21D_u);
        if (auto967CA21D_var == null) { break; }
        lv_assigned = false;
        lv_i = gf_banelings_get_baneling_group_i_start();
        while ((lv_i <= lv_max)) {
            if ((UnitGroupHasUnit(gv_banelings_groups[lv_i].lv_unit_group, auto967CA21D_var) == true)) {
                lv_assigned = true;
            }

            lv_i += 1;
        }
        if ((lv_assigned == false)) {
            UnitGroupAdd(lv_r, auto967CA21D_var);
        }

    }
    return lv_r;
}

void gf_banelings_init_vars () {
    // Automatic Variable Declarations
    // Implementation
    gv_banelings_groups[1].lv_position = PointFromId(1177115991);
    gv_banelings_groups[2].lv_position = PointFromId(20243859);
    gv_banelings_groups[3].lv_position = PointFromId(381968211);
    gv_banelings_groups[4].lv_position = PointFromId(299619688);
    gv_banelings_groups[5].lv_position = PointFromId(710338726);
    gv_banelings_groups[6].lv_position = PointFromId(1352331062);
    gv_banelings_groups[7].lv_position = PointFromId(1596347129);
    gv_banelings_groups[8].lv_position = PointFromId(887794054);
    gv_banelings_groups[9].lv_position = PointFromId(743371141);
    gv_banelings_groups[10].lv_position = PointFromId(399249919);
    if ((gv_difficulty == 7)) {
        gv_banelings_groups_max = 2;
        gv_banelings_max_units_in_group = 40;
    }
    else {
        gv_banelings_activation_offset = (gv_difficulty - 7);
        if ((gv_difficulty == 8)) {
            gv_banelings_groups_max = 4;
            gv_banelings_max_units_in_group = 25;
        }
        else {
            gv_banelings_groups_max = 8;
            gv_banelings_max_units_in_group = 15;
        }
    }
}

void gf_banelings_activate_spawners () {
    // Variable Declarations
    int lv_c;

    // Automatic Variable Declarations
    unitgroup auto31FF86A7_g;
    int auto31FF86A7_u;
    unit auto31FF86A7_var;

    // Variable Initialization

    // Implementation
    auto31FF86A7_g = UnitGroup("BanelingSpawner", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto31FF86A7_u = UnitGroupCount(auto31FF86A7_g, c_unitCountAll);
    for (;; auto31FF86A7_u -= 1) {
        auto31FF86A7_var = UnitGroupUnitFromEnd(auto31FF86A7_g, auto31FF86A7_u);
        if (auto31FF86A7_var == null) { break; }
        UnitBehaviorRemove(auto31FF86A7_var, "BanelingSpawnerDisabler", 1);
        lv_c += 1;
    }
    if ((lv_c > 0)) {
        gv_banelings_enabled = true;
    }

}

void gf_banelings_manage () {
    // Variable Declarations
    int lv_i;
    int lv_max;
    bool lv_assigned;
    unitgroup lv_attack_ug;
    unitgroup lv_temp_ug;
    int lv_temp_target_ug_index;
    int lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = gf_banelings_get_baneling_group_i_start();
    lv_max = gf_banelings_get_baneling_group_i_max();
    lv_attack_ug = UnitGroupEmpty();
    lv_temp_ug = UnitGroupEmpty();

    // Implementation
    if ((UnitGroupCount(gv_banelings_groups[gf_banelings_get_smallest_group_as_int_id()].lv_unit_group, c_unitCountAlive) < gv_banelings_max_units_in_group)) {
        lv_temp_ug = gf_banelings_get_all_unassigned_banelings_as_ug();
        lv_temp_target_ug_index = gf_banelings_get_smallest_group_as_int_id();
        UnitGroupAddUnitGroup(gv_banelings_groups[lv_temp_target_ug_index].lv_unit_group, lv_temp_ug);
        UnitGroupIssueOrder(lv_temp_ug, OrderTargetingPoint(AbilityCommand("attack", 0), gv_banelings_groups[lv_temp_target_ug_index].lv_position), c_orderQueueReplace);
        lv_assigned = true;
    }

    if ((lv_assigned == false) && (UnitGroupCount(gf_banelings_get_all_unassigned_banelings_as_ug(), c_unitCountAlive) >= 30)) {
        UnitGroupAddUnitGroup(lv_attack_ug, gf_banelings_get_all_unassigned_banelings_as_ug());
        if ((gv_difficulty == 13)) {
            lv_target = gf_ai_get_weakest_player();
        }
        else {
            lv_target = gf_ai_get_random_player();
        }
        if ((gf_flip_coin() == 1)) {
            UnitGroupIssueOrder(lv_attack_ug, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Flank Rally Left Pre " + IntToString(gv_players[lv_target].lv_position)))), c_orderQueueReplace);
        }
        else {
            UnitGroupIssueOrder(lv_attack_ug, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Flank Rally Right Pre " + IntToString(gv_players[lv_target].lv_position)))), c_orderQueueReplace);
        }
        UnitGroupIssueOrder(lv_attack_ug, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Rally " + IntToString(gv_players[lv_target].lv_position)))), c_orderQueueAddToEnd);
    }

}

void gf_scale_zerg (int lp_percent) {
    // Variable Declarations
    fixed lv_decreased_spawn_speed;
    int[3][9] lv_unit_hp_new;
    int lv_i;
    int lv_j;
    int lv_s;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_decreased_spawn_speed = 1.0;
    lv_i = 1;
    lv_j = 1;

    // Implementation
    lv_unit_hp_new[1][1] = 25;
    lv_unit_hp_new[1][2] = 30;
    lv_unit_hp_new[1][3] = 50;
    lv_unit_hp_new[1][4] = 90;
    lv_unit_hp_new[1][5] = 120;
    lv_unit_hp_new[1][6] = 155;
    lv_unit_hp_new[1][7] = 650;
    lv_unit_hp_new[1][8] = 400;
    while ((lv_j <= 8)) {
        lv_unit_hp_new[2][lv_j] = FixedToInt((lv_unit_hp_new[1][lv_j] + ((lv_unit_hp_new[1][lv_j] / 100.0) * (lp_percent + lp_percent))));
        lv_j += 1;
    }
    lv_j = 1;
    if ((gv_difficulty >= 11)) {
        while ((lv_j <= 8)) {
            lv_unit_hp_new[2][lv_j] = (lv_unit_hp_new[2][lv_j] + 10);
            lv_j += 1;
        }
    }

    if ((gv_difficulty >= 7)) {
        lv_unit_hp_new[2][7] = (lv_unit_hp_new[2][7] * 2);
    }

    if ((lp_percent > 0)) {
        lv_decreased_spawn_speed = (lv_decreased_spawn_speed - (lp_percent / 100.0));
        libNtve_gf_CatalogReferenceSetAsReal("Behavior,SpawnerSlowDown,Modification.TimeScale", 7, lv_decreased_spawn_speed);
        CatalogReferenceSet("Unit,Slowling,LifeMax", 7, IntToString(lv_unit_hp_new[2][1]));
        CatalogReferenceSet("Unit,Slowling,LifeStart", 7, IntToString(lv_unit_hp_new[2][1]));
        CatalogReferenceSet("Unit,Creeper,LifeMax", 7, IntToString(lv_unit_hp_new[2][2]));
        CatalogReferenceSet("Unit,Creeper,LifeStart", 7, IntToString(lv_unit_hp_new[2][2]));
        CatalogReferenceSet("Unit,Tankling,LifeMax", 7, IntToString(lv_unit_hp_new[2][3]));
        CatalogReferenceSet("Unit,Tankling,LifeStart", 7, IntToString(lv_unit_hp_new[2][3]));
        CatalogReferenceSet("Unit,Roach2,LifeMax", 7, IntToString(lv_unit_hp_new[2][4]));
        CatalogReferenceSet("Unit,Roach2,LifeStart", 7, IntToString(lv_unit_hp_new[2][4]));
        CatalogReferenceSet("Unit,PrimalRoach2,LifeMax", 7, IntToString(lv_unit_hp_new[2][5]));
        CatalogReferenceSet("Unit,PrimalRoach2,LifeStart", 7, IntToString(lv_unit_hp_new[2][5]));
        CatalogReferenceSet("Unit,Ultralisk2,LifeMax", 7, IntToString(lv_unit_hp_new[2][6]));
        CatalogReferenceSet("Unit,Ultralisk2,LifeStart", 7, IntToString(lv_unit_hp_new[2][6]));
        CatalogReferenceSet("Unit,Eroder,LifeMax", 7, IntToString(lv_unit_hp_new[2][7]));
        CatalogReferenceSet("Unit,Eroder,LifeStart", 7, IntToString(lv_unit_hp_new[2][7]));
        CatalogReferenceSet("Unit,Brutalisk2,LifeMax", 7, IntToString(lv_unit_hp_new[2][8]));
        CatalogReferenceSet("Unit,Brutalisk2,LifeStart", 7, IntToString(lv_unit_hp_new[2][8]));
    }

}

void gf_scale_zerg_start_init () {
    // Automatic Variable Declarations
    // Implementation
    gv_start_scale_zerg = true;
    if ((gv_difficulty == 5)) {
        gv_scale_zerg_max = 10;
    }
    else {
        if ((gv_difficulty >= 6) && (gv_difficulty <= 7)) {
            gv_scale_zerg_max = 20;
        }
        else {
            if ((gv_difficulty >= 8) && (gv_difficulty <= 10)) {
                gv_scale_zerg_max = 30;
            }
            else {
                if ((gv_difficulty >= 11)) {
                    gv_scale_zerg_max = 40;
                }

            }
        }
    }
}

void gf_save_initial_map_state () {
    // Automatic Variable Declarations
    unitgroup auto59F1EB51_g;
    int auto59F1EB51_u;
    unit auto59F1EB51_var;

    // Implementation
    auto59F1EB51_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto59F1EB51_u = UnitGroupCount(auto59F1EB51_g, c_unitCountAll);
    for (;; auto59F1EB51_u -= 1) {
        auto59F1EB51_var = UnitGroupUnitFromEnd(auto59F1EB51_g, auto59F1EB51_u);
        if (auto59F1EB51_var == null) { break; }
        if (((UnitGetType(auto59F1EB51_var) == "Hive2") || (UnitGetType(auto59F1EB51_var) == "Nest2") || (UnitGetType(auto59F1EB51_var) == "MineralExtractor") || (UnitGetType(auto59F1EB51_var) == "CreepTumor2") || (UnitGetType(auto59F1EB51_var) == "SpineCrawler") || (UnitGetType(auto59F1EB51_var) == "LargeSpineCrawler") || (UnitGetType(auto59F1EB51_var) == "GeyserBlocker") || (UnitGetType(auto59F1EB51_var) == "SlowlingSpawner") || (UnitGetType(auto59F1EB51_var) == "CreeperSpawner"))) {
            gv_initial_map_state_count += 1;
            gv_initial_map_state[gv_initial_map_state_count].lv_position = UnitGetPosition(auto59F1EB51_var);
            gv_initial_map_state[gv_initial_map_state_count].lv_type = UnitGetType(auto59F1EB51_var);
            gv_initial_map_state[gv_initial_map_state_count].lv_owner = 7;
        }

    }
}

bool gf_check_infestor_dead_directive_override () {
    // Variable Declarations
    bool lv_return;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_infestor_dead_count >= 10)) {
        gv_mass_infestor_death_exception_cooldown = 2;
        lv_return = true;
    }

    return lv_return;
}

void gf_try_prefuse_handler () {
    // Automatic Variable Declarations
    unitgroup autoB404B500_g;
    int autoB404B500_u;
    unit autoB404B500_var;

    // Implementation
    gf_cleanup_prefuse_infestor_group();
    autoB404B500_g = gv_zhg_prefuse_infestors;
    autoB404B500_u = UnitGroupCount(autoB404B500_g, c_unitCountAll);
    for (;; autoB404B500_u -= 1) {
        autoB404B500_var = UnitGroupUnitFromEnd(autoB404B500_g, autoB404B500_u);
        if (autoB404B500_var == null) { break; }
        if ((UnitGetPropertyInt(autoB404B500_var, c_unitPropEnergy, c_unitPropCurrent) >= 150)) {
            UnitIssueOrder(autoB404B500_var, OrderTargetingUnit(AbilityCommand("TransfusionInfestor", 0), UnitGroupClosestToPoint(UnitGroup("LargeSpineCrawler", 7, RegionCircle(UnitGetPosition(autoB404B500_var), 17.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(autoB404B500_var))), c_orderQueueReplace);
        }

    }
}

void gf_cleanup_prefuse_infestor_group () {
    // Automatic Variable Declarations
    unitgroup autoB688AD86_g;
    int autoB688AD86_u;
    unit autoB688AD86_var;

    // Implementation
    autoB688AD86_g = gv_zhg_prefuse_infestors;
    autoB688AD86_u = UnitGroupCount(autoB688AD86_g, c_unitCountAll);
    for (;; autoB688AD86_u -= 1) {
        autoB688AD86_var = UnitGroupUnitFromEnd(autoB688AD86_g, autoB688AD86_u);
        if (autoB688AD86_var == null) { break; }
        if ((UnitIsAlive(autoB688AD86_var) == false)) {
            UnitGroupRemove(gv_zhg_prefuse_infestors, autoB688AD86_var);
        }

    }
}

void gf_inject_extra_nest_positions () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 4)) {
        gv_dead_creep_count += 1;
        gv_dead_creep[gv_dead_creep_count].lv_position = gv_prefuse_infestors_nests_coords[lv_i];
        gv_dead_creep[gv_dead_creep_count].lv_unit_type = "Nest2";
        lv_i += 1;
    }
}

void gf_recruit_defensive_hg_hydras () {
    // Variable Declarations
    int lv_payback;

    // Automatic Variable Declarations
    unitgroup auto2A219317_g;
    int auto2A219317_u;
    unit auto2A219317_var;

    // Variable Initialization
    lv_payback = 10;

    // Implementation
    if ((gv_difficulty > 2)) {
        lv_payback += 10;
    }

    if ((gv_difficulty > 4)) {
        lv_payback += 10;
    }

    if ((gv_difficulty > 6)) {
        lv_payback += 20;
    }

    if ((UnitGroupCount(gv_prefuse_infestors_nests, c_unitCountAlive) >= 1)) {
        auto2A219317_g = gv_prefuse_infestors_nests;
        auto2A219317_u = UnitGroupCount(auto2A219317_g, c_unitCountAll);
        for (;; auto2A219317_u -= 1) {
            auto2A219317_var = UnitGroupUnitFromEnd(auto2A219317_g, auto2A219317_u);
            if (auto2A219317_var == null) { break; }
            if ((UnitOrderCount(auto2A219317_var) == 0)) {
                PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperAdd, lv_payback);
                UnitIssueOrder(auto2A219317_var, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1910508930)), c_orderQueueReplace);
                UnitIssueOrder(auto2A219317_var, Order(AbilityCommand("ZergTrain", 1)), c_orderQueueAddToEnd);
            }

        }
    }

}

void gf_recruit_defensive_hg_infestors () {
    // Variable Declarations
    int lv_payback;

    // Automatic Variable Declarations
    unitgroup auto9039A1B4_g;
    int auto9039A1B4_u;
    unit auto9039A1B4_var;

    // Variable Initialization
    lv_payback = 10;

    // Implementation
    if ((gv_difficulty > 2)) {
        lv_payback += 10;
    }

    if ((gv_difficulty > 4)) {
        lv_payback += 10;
    }

    if ((gv_difficulty > 6)) {
        lv_payback += 20;
    }

    if ((UnitGroupCount(gv_prefuse_infestors_nests, c_unitCountAlive) >= 1)) {
        auto9039A1B4_g = gv_prefuse_infestors_nests;
        auto9039A1B4_u = UnitGroupCount(auto9039A1B4_g, c_unitCountAll);
        for (;; auto9039A1B4_u -= 1) {
            auto9039A1B4_var = UnitGroupUnitFromEnd(auto9039A1B4_g, auto9039A1B4_u);
            if (auto9039A1B4_var == null) { break; }
            if ((UnitOrderCount(auto9039A1B4_var) == 0)) {
                PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperAdd, lv_payback);
                UnitIssueOrder(auto9039A1B4_var, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1910508930)), c_orderQueueReplace);
                UnitIssueOrder(auto9039A1B4_var, Order(AbilityCommand("ZergTrain", 5)), c_orderQueueAddToEnd);
            }

        }
    }

}

void gf_order_defensive_hg_hydras () {
    // Variable Declarations
    unitgroup lv_ug;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ug = UnitGroupEmpty();

    // Implementation
    lv_ug = gv_zhg_hydras;
}

void gf_Init_Player_Toplists () {
    // Automatic Variable Declarations
    playergroup auto9BDC27D7_g;
    int auto9BDC27D7_var;

    // Implementation
    auto9BDC27D7_g = gv_terrans;
    auto9BDC27D7_var = -1;
    while (true) {
        auto9BDC27D7_var = PlayerGroupNextPlayer(auto9BDC27D7_g, auto9BDC27D7_var);
        if (auto9BDC27D7_var < 0) { break; }
        BankLoad("aihextoplist", auto9BDC27D7_var);
    }
}

void gf_Generate_Toplist () {
    // Variable Declarations
    int lv_players;
    int[11][4] lv_games;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
}

text gf_generate_name_string_text () {
    // Variable Declarations
    text lv_name_text;
    text lv_name_appendix;

    // Automatic Variable Declarations
    playergroup auto0AC0C3C7_g;
    int auto0AC0C3C7_var;

    // Variable Initialization

    // Implementation
    auto0AC0C3C7_g = gv_terrans;
    auto0AC0C3C7_var = -1;
    while (true) {
        auto0AC0C3C7_var = PlayerGroupNextPlayer(auto0AC0C3C7_g, auto0AC0C3C7_var);
        if (auto0AC0C3C7_var < 0) { break; }
        lv_name_appendix = StringToText("");
        if ((gv_players[auto0AC0C3C7_var].lv_alive == true)) {
            lv_name_appendix = StringExternal("Param/Value/2A0454A4");
        }
        else {
            lv_name_appendix = StringExternal("Param/Value/6438B217");
        }
        lv_name_text = (lv_name_text + (PlayerName(auto0AC0C3C7_var) + lv_name_appendix));
    }
    return lv_name_text;
}

string gf_generate_game_data_hash () {
    // Variable Declarations
    text lv_difficulty_text;
    text lv_name_text;
    text lv_gametime_text;
    string lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_r = "";

    // Implementation
    lv_difficulty_text = (StringExternal("Param/Value/7D2DE920") + (IntToText(gv_difficulty) + StringExternal("Param/Value/B4F2EF01")));
    lv_name_text = gf_generate_name_string_text();
    lv_gametime_text = ((IntToText((gv_game_timer / 60)) + (StringExternal("Param/Value/4414646A") + gf_convert_int_to_text_with_leading_zero(ModI(gv_game_timer, 60)))) + StringExternal("Param/Value/C95FE488"));
    lib1_gf_InitializeHashInput();
    return lib1_gf_GenerateMD5HashCode();
}

void gf_save_game_in_toplist () {
    // Automatic Variable Declarations
}

int gf_get_level_from_xp (int lp_xp) {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_r = 1;

    // Implementation
    if ((lp_xp >= 1000)) {
        lv_r += 1;
    }

    if ((lp_xp >= 2000)) {
        lv_r += 1;
    }

    if ((lp_xp >= 4000)) {
        lv_r += 1;
    }

    if ((lp_xp >= 8000)) {
        lv_r += 1;
    }

    if ((lp_xp >= 16000)) {
        lv_r += 1;
    }

    if ((lp_xp >= 32000)) {
        lv_r += 1;
    }

    if ((lp_xp >= 64000)) {
        lv_r += 1;
    }

    if ((lp_xp >= 128000)) {
        lv_r += 1;
    }

    if ((lp_xp >= 256000)) {
        lv_r += 1;
    }

    if ((lp_xp >= 512000)) {
        lv_r += 1;
    }

    if ((lp_xp >= 1024000)) {
        lv_r += 1;
    }

    return lv_r;
}

int gf_get_needed_xp (int lp_level) {
    // Variable Declarations
    int lv_nxp;

    // Automatic Variable Declarations
    int autoD50D207A_val;

    // Variable Initialization

    // Implementation
    autoD50D207A_val = lp_level;
    if (autoD50D207A_val == 1) {
        lv_nxp = 1000;
    }
    else if (autoD50D207A_val == 2) {
        lv_nxp = 2000;
    }
    else if (autoD50D207A_val == 3) {
        lv_nxp = 4000;
    }
    else if (autoD50D207A_val == 4) {
        lv_nxp = 8000;
    }
    else if (autoD50D207A_val == 5) {
        lv_nxp = 16000;
    }
    else if (autoD50D207A_val == 6) {
        lv_nxp = 32000;
    }
    else if (autoD50D207A_val == 7) {
        lv_nxp = 64000;
    }
    else if (autoD50D207A_val == 8) {
        lv_nxp = 128000;
    }
    else if (autoD50D207A_val == 9) {
        lv_nxp = 256000;
    }
    else if (autoD50D207A_val == 10) {
        lv_nxp = 512000;
    }
    else if (autoD50D207A_val == 11) {
        lv_nxp = 1024000;
    }
    else {
        lv_nxp = 1000;
    }
    return lv_nxp;
}

void gf_Disable_timed_triggers () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(gt_tgaievery6s, false);
    TriggerEnable(gt_everysecond, false);
    TriggerEnable(gt_everytwoseconds, false);
    TriggerEnable(gt_everythreeseconds, false);
    TriggerEnable(gt_everyfiveseconds, false);
    TriggerEnable(gt_everytenseconds, false);
    TriggerEnable(gt_every15seconds, false);
    TriggerEnable(gt_every30seconds, false);
    TriggerEnable(gt_every45seconds, false);
    TriggerEnable(gt_everyminute, false);
    TriggerEnable(gt_every90seconds, false);
    TriggerEnable(gt_everyfiveminutes, false);
    TriggerEnable(gt_every15minutes, false);
    TriggerEnable(gt_checkhydras, false);
}

void gf_Enable_timed_triggers () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(gt_tgaievery6s, true);
    TriggerEnable(gt_everysecond, true);
    TriggerEnable(gt_everytwoseconds, true);
    TriggerEnable(gt_everythreeseconds, true);
    TriggerEnable(gt_everyfiveseconds, true);
    TriggerEnable(gt_everytenseconds, true);
    TriggerEnable(gt_every15seconds, true);
    TriggerEnable(gt_every30seconds, true);
    TriggerEnable(gt_every45seconds, true);
    TriggerEnable(gt_everyminute, true);
    TriggerEnable(gt_every90seconds, true);
    TriggerEnable(gt_everyfiveminutes, true);
    TriggerEnable(gt_every15minutes, true);
    TriggerEnable(gt_checkhydras, true);
}

int gf_tbp_get_difficulty_offset_vote_result () {
    // Variable Declarations
    int lv_i;
    int lv_p;
    int lv_n;
    int lv_m;
    int lv_r;

    // Automatic Variable Declarations
    int auto0E78FC64_val;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            auto0E78FC64_val = gv_difficulty_offset_votes[lv_i];
            if (auto0E78FC64_val == 0) {
                lv_n += 1;
            }
            else if (auto0E78FC64_val == 1) {
                lv_p += 1;
            }
            else if (auto0E78FC64_val == 2) {
                lv_m += 1;
            }
            else {
            }
        }

        lv_i += 1;
    }
    if (((lv_n >= 3) || (lv_m >= 3) || (lv_p >= 3))) {
        if ((lv_n >= lv_m)) {
            if ((lv_n >= lv_p)) {
                lv_r = 0;
            }
            else {
                lv_r = 1;
            }
        }
        else {
            if ((lv_m >= lv_p)) {
                lv_r = 2;
            }
            else {
                lv_r = 1;
            }
        }
    }
    else {
        lv_r = 0;
    }
    return lv_r;
}

int gf_tbp_get_mutator_vote_result () {
    // Variable Declarations
    int lv_i;
    int lv_y;
    int lv_n;
    int lv_r;

    // Automatic Variable Declarations
    int auto711B208B_val;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            auto711B208B_val = gv_tbp_mutator_votes[lv_i];
            if (auto711B208B_val == 0) {
                lv_n += 1;
            }
            else if (auto711B208B_val == 1) {
                lv_y += 1;
            }
            else if (auto711B208B_val == 2) {
                lv_n += 1;
            }
            else {
            }
        }

        lv_i += 1;
    }
    if (((lv_n >= 4) || (lv_y >= 4))) {
        if ((lv_n >= lv_y)) {
            lv_r = 2;
        }
        else {
            lv_r = 1;
        }
    }
    else {
        lv_r = 2;
    }
    return lv_r;
}

int gf_tbp_mgc_get_vote_result () {
    // Variable Declarations
    int lv_i;
    int lv_y;
    int lv_n;
    int lv_r;

    // Automatic Variable Declarations
    int autoC88E9E04_val;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            autoC88E9E04_val = gv_tbp_mgc_votes[lv_i];
            if (autoC88E9E04_val == 0) {
                lv_n += 1;
            }
            else if (autoC88E9E04_val == 1) {
                lv_y += 1;
            }
            else if (autoC88E9E04_val == 2) {
                lv_n += 1;
            }
            else {
            }
        }

        lv_i += 1;
    }
    if (((lv_n >= 4) || (lv_y >= 4))) {
        if ((lv_n >= lv_y)) {
            lv_r = 2;
        }
        else {
            lv_r = 1;
        }
    }
    else {
        lv_r = 2;
    }
    return lv_r;
}

int gf_tbp_get_zterran_vote_result () {
    // Variable Declarations
    int lv_i;
    int lv_y;
    int lv_n;
    int lv_r;

    // Automatic Variable Declarations
    int autoCDC9CD33_val;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            autoCDC9CD33_val = gv_tbp_zterran_votes[lv_i];
            if (autoCDC9CD33_val == 0) {
                lv_n += 1;
            }
            else if (autoCDC9CD33_val == 1) {
                lv_y += 1;
            }
            else if (autoCDC9CD33_val == 2) {
                lv_n += 1;
            }
            else {
            }
        }

        lv_i += 1;
    }
    if (((lv_n >= 4) || (lv_y >= 4))) {
        if ((lv_n >= lv_y)) {
            lv_r = 2;
        }
        else {
            lv_r = 1;
        }
    }
    else {
        lv_r = 2;
    }
    return lv_r;
}

int gf_tbp_get_tv_winner_vote () {
    // Variable Declarations
    int lv_i;
    int[6] lv_d;
    int lv_winner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_i <= 6)) {
        if ((gv_tbp_torment_votes[lv_i] > 0)) {
            lv_d[gv_tbp_torment_votes[lv_i]] += 1;
        }

        lv_i += 1;
    }
    lv_i = 1;
    while ((lv_i <= 5)) {
        if ((lv_d[lv_i] > 0)) {
            if ((lv_winner == 0)) {
                lv_winner = lv_i;
            }
            else {
                if ((lv_d[lv_i] >= lv_d[lv_winner])) {
                    lv_winner = lv_i;
                }

            }
        }

        lv_i += 1;
    }
    return lv_winner;
}

void gf_torment_special_units_refresh (int lp_d) {
    // Automatic Variable Declarations
    int autoA75F6658_val;

    // Implementation
    autoA75F6658_val = lp_d;
    if (autoA75F6658_val == 1) {
        gv_req_beastlings = 0;
        gv_req_ravs = 0;
        gv_req_infused = 0;
        gv_req_torra = 0;
    }
    else if (autoA75F6658_val == 2) {
        gv_req_beastlings = 0;
        gv_req_ravs = 0;
        gv_req_infused = 0;
        gv_req_torra = 0;
    }
    else if (autoA75F6658_val == 3) {
        gv_req_beastlings = 8;
        gv_req_ravs = 0;
        gv_req_infused = 0;
        gv_req_torra = 0;
    }
    else if (autoA75F6658_val == 4) {
        gv_req_beastlings = 10;
        gv_req_ravs = 6;
        gv_req_infused = 0;
        gv_req_torra = 1;
    }
    else if (autoA75F6658_val == 5) {
        gv_req_beastlings = 4;
        gv_req_ravs = 4;
        gv_req_infused = 2;
        gv_req_torra = 2;
    }
    else if (autoA75F6658_val == 6) {
        gv_req_beastlings = 0;
        gv_req_ravs = 8;
        gv_req_infused = 4;
        gv_req_torra = 4;
    }
    else if (autoA75F6658_val == 7) {
        gv_req_beastlings = 0;
        gv_req_ravs = 8;
        gv_req_infused = 6;
        gv_req_torra = 6;
    }
    else if (autoA75F6658_val == 8) {
        gv_req_beastlings = 0;
        gv_req_ravs = 6;
        gv_req_infused = 8;
        gv_req_torra = 6;
    }
    else if (autoA75F6658_val == 9) {
        gv_req_beastlings = 0;
        gv_req_ravs = 4;
        gv_req_infused = 10;
        gv_req_torra = 6;
    }
    else if (autoA75F6658_val == 10) {
        gv_req_beastlings = 0;
        gv_req_ravs = 2;
        gv_req_infused = 12;
        gv_req_torra = 6;
    }
    else if (autoA75F6658_val == 11) {
        gv_req_beastlings = 0;
        gv_req_ravs = 2;
        gv_req_infused = 10;
        gv_req_torra = 8;
    }
    else if (autoA75F6658_val == 12) {
        gv_req_beastlings = 0;
        gv_req_ravs = 2;
        gv_req_infused = 8;
        gv_req_torra = 10;
    }
    else if (autoA75F6658_val == 13) {
        gv_req_beastlings = 0;
        gv_req_ravs = 2;
        gv_req_infused = 6;
        gv_req_torra = 12;
    }
    else {
    }
}

void gf_tbp_archon_create_player_slot (int lp_position, int lp_player) {
    // Automatic Variable Declarations
    int auto75C24C29_val;

    // Implementation
    if ((gv_tbp_minimap_archon_slot_buttons[lp_position] == c_invalidDialogControlId)) {
        auto75C24C29_val = lp_position;
        if (auto75C24C29_val == 1) {
            libNtve_gf_CreateDialogItemButton(gv_tbp_minimap_dialog, 200, 60, c_anchorTopLeft, 90, 235, StringToText(""), StringExternal("Param/Value/6E661D79"), "Assets\\Textures\\ui_emoticons_random.dds");
        }
        else if (auto75C24C29_val == 2) {
            libNtve_gf_CreateDialogItemButton(gv_tbp_minimap_dialog, 200, 60, c_anchorTop, 5, 125, StringToText(""), StringExternal("Param/Value/24D928B1"), "Assets\\Textures\\ui_emoticons_random.dds");
        }
        else if (auto75C24C29_val == 3) {
            libNtve_gf_CreateDialogItemButton(gv_tbp_minimap_dialog, 200, 60, c_anchorTopRight, 85, 235, StringToText(""), StringExternal("Param/Value/7A9FCBD2"), "Assets\\Textures\\ui_emoticons_random.dds");
        }
        else if (auto75C24C29_val == 4) {
            libNtve_gf_CreateDialogItemButton(gv_tbp_minimap_dialog, 200, 60, c_anchorBottomLeft, 90, 140, StringToText(""), StringExternal("Param/Value/B1A9D2DC"), "Assets\\Textures\\ui_emoticons_random.dds");
        }
        else if (auto75C24C29_val == 5) {
            libNtve_gf_CreateDialogItemButton(gv_tbp_minimap_dialog, 200, 60, c_anchorBottom, 5, 20, StringToText(""), StringExternal("Param/Value/3CA9AA21"), "Assets\\Textures\\ui_emoticons_random.dds");
        }
        else if (auto75C24C29_val == 6) {
            libNtve_gf_CreateDialogItemButton(gv_tbp_minimap_dialog, 200, 60, c_anchorBottomRight, 85, 140, StringToText(""), StringExternal("Param/Value/2CF7A641"), "Assets\\Textures\\ui_emoticons_random.dds");
        }
        else {
        }
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupSingle(lp_player), false);
        gv_tbp_minimap_archon_slot_buttons[lp_position] = DialogControlLastCreated();
    }
    else {
        DialogControlSetVisible(gv_tbp_minimap_archon_slot_buttons[lp_position], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_tbp_minimap_archon_slot_buttons[lp_position], PlayerGroupSingle(lp_player), false);
    }
}

void gf_tbp_archon_create_add_player_slot (int lp_position, int lp_player) {
    // Automatic Variable Declarations
    int autoE3FFEFFC_val;

    // Implementation
    if ((gv_tbp_minimap_add_archon_buttons[lp_position] == c_invalidDialogControlId)) {
        autoE3FFEFFC_val = lp_position;
        if (autoE3FFEFFC_val == 1) {
            libNtve_gf_CreateDialogItemButton(gv_tbp_minimap_dialog, 60, 60, c_anchorTopLeft, 25, 180, StringToText(""), StringExternal("Param/Value/B69164CB"), "Assets\\Textures\\ui_emoticons_random.dds");
        }
        else if (autoE3FFEFFC_val == 2) {
            libNtve_gf_CreateDialogItemButton(gv_tbp_minimap_dialog, 60, 60, c_anchorTopLeft, 135, 70, StringToText(""), StringExternal("Param/Value/9B52C4A7"), "Assets\\Textures\\ui_emoticons_random.dds");
        }
        else if (autoE3FFEFFC_val == 3) {
            libNtve_gf_CreateDialogItemButton(gv_tbp_minimap_dialog, 60, 60, c_anchorTopRight, 25, 180, StringToText(""), StringExternal("Param/Value/5DFA8A1F"), "Assets\\Textures\\ui_emoticons_random.dds");
        }
        else if (autoE3FFEFFC_val == 4) {
            libNtve_gf_CreateDialogItemButton(gv_tbp_minimap_dialog, 60, 60, c_anchorBottomLeft, 25, 195, StringToText(""), StringExternal("Param/Value/685DFEF7"), "Assets\\Textures\\ui_emoticons_random.dds");
        }
        else if (autoE3FFEFFC_val == 5) {
            libNtve_gf_CreateDialogItemButton(gv_tbp_minimap_dialog, 60, 60, c_anchorBottomLeft, 135, 75, StringToText(""), StringExternal("Param/Value/4EF50D0B"), "Assets\\Textures\\ui_emoticons_random.dds");
        }
        else if (autoE3FFEFFC_val == 6) {
            libNtve_gf_CreateDialogItemButton(gv_tbp_minimap_dialog, 60, 60, c_anchorBottomRight, 25, 195, StringToText(""), StringExternal("Param/Value/7DCF3A8B"), "Assets\\Textures\\ui_emoticons_random.dds");
        }
        else {
        }
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
        gv_tbp_minimap_add_archon_buttons[lp_position] = DialogControlLastCreated();
    }
    else {
        DialogControlSetVisible(gv_tbp_minimap_add_archon_buttons[lp_position], PlayerGroupSingle(lp_player), true);
    }
}

void gf_tbp_archon_create_remove_player_slot (int lp_position, int lp_player) {
    // Automatic Variable Declarations
    int autoDCB5A029_val;

    // Implementation
    if ((gv_tbp_minimap_remove_archon_buttons[lp_position] == c_invalidDialogControlId)) {
        autoDCB5A029_val = lp_position;
        if (autoDCB5A029_val == 1) {
            libNtve_gf_CreateDialogItemButton(gv_tbp_minimap_dialog, 60, 60, c_anchorTopLeft, 25, 180, StringToText(""), StringExternal("Param/Value/6B046046"), "Assets\\Textures\\ui_emoticons_random.dds");
        }
        else if (autoDCB5A029_val == 2) {
            libNtve_gf_CreateDialogItemButton(gv_tbp_minimap_dialog, 60, 60, c_anchorTopLeft, 135, 70, StringToText(""), StringExternal("Param/Value/FA20E2F0"), "Assets\\Textures\\ui_emoticons_random.dds");
        }
        else if (autoDCB5A029_val == 3) {
            libNtve_gf_CreateDialogItemButton(gv_tbp_minimap_dialog, 60, 60, c_anchorTopRight, 25, 180, StringToText(""), StringExternal("Param/Value/988BD567"), "Assets\\Textures\\ui_emoticons_random.dds");
        }
        else if (autoDCB5A029_val == 4) {
            libNtve_gf_CreateDialogItemButton(gv_tbp_minimap_dialog, 60, 60, c_anchorBottomLeft, 25, 195, StringToText(""), StringExternal("Param/Value/102CE03C"), "Assets\\Textures\\ui_emoticons_random.dds");
        }
        else if (autoDCB5A029_val == 5) {
            libNtve_gf_CreateDialogItemButton(gv_tbp_minimap_dialog, 60, 60, c_anchorBottomLeft, 135, 75, StringToText(""), StringExternal("Param/Value/284D9D62"), "Assets\\Textures\\ui_emoticons_random.dds");
        }
        else if (autoDCB5A029_val == 6) {
            libNtve_gf_CreateDialogItemButton(gv_tbp_minimap_dialog, 60, 60, c_anchorBottomRight, 25, 195, StringToText(""), StringExternal("Param/Value/E22017B0"), "Assets\\Textures\\ui_emoticons_random.dds");
        }
        else {
        }
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
        gv_tbp_minimap_remove_archon_buttons[lp_position] = DialogControlLastCreated();
    }
    else {
        DialogControlSetVisible(gv_tbp_minimap_remove_archon_buttons[lp_position], PlayerGroupSingle(lp_player), true);
    }
}

void gf_tbp_archon_remove_add_player_slot (int lp_position, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(gv_tbp_minimap_add_archon_buttons[lp_position], PlayerGroupSingle(lp_player), false);
}

void gf_tbp_archon_remove_remove_player_slot (int lp_position, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(gv_tbp_minimap_remove_archon_buttons[lp_position], PlayerGroupSingle(lp_player), false);
}

void gf_tbp_archon_remove_player_slot (int lp_position, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(gv_tbp_minimap_archon_slot_buttons[lp_position], PlayerGroupSingle(lp_player), false);
    DialogControlSetVisible(gv_tbp_minimap_archon_slot_buttons[lp_position], PlayerGroupAll(), false);
}

void gf_tbp_make_player_position_random (int lp_player) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    gv_tbp_minimap_position_picks_cross[gv_tbp_minimap_position_picks[lp_player]] = 0;
    gv_tbp_minimap_position_picks[lp_player] = 0;
    DialogControlSetEnabled(gv_tbp_minimap_button_random, PlayerGroupSingle(lp_player), false);
    while ((lv_i <= 6)) {
        if ((gv_tbp_minimap_position_picks_cross[lv_i] == 0)) {
            DialogControlSetEnabled(gv_tbp_minimap_buttons[lv_i], PlayerGroupSingle(lp_player), true);
        }

        lv_i += 1;
    }
}

void gf_disable_button_for_all_players (int lp_position) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetEnabled(gv_tbp_minimap_buttons[lp_position], PlayerGroupAll(), false);
}

void gf_disable_all_buttons_for_player (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetEnabled(gv_tbp_minimap_button_random, PlayerGroupSingle(lp_player), false);
    DialogControlSetEnabled(gv_tbp_minimap_buttons[1], PlayerGroupSingle(lp_player), false);
    DialogControlSetEnabled(gv_tbp_minimap_buttons[2], PlayerGroupSingle(lp_player), false);
    DialogControlSetEnabled(gv_tbp_minimap_buttons[3], PlayerGroupSingle(lp_player), false);
    DialogControlSetEnabled(gv_tbp_minimap_buttons[4], PlayerGroupSingle(lp_player), false);
    DialogControlSetEnabled(gv_tbp_minimap_buttons[5], PlayerGroupSingle(lp_player), false);
    DialogControlSetEnabled(gv_tbp_minimap_buttons[6], PlayerGroupSingle(lp_player), false);
}

int gf_tbp_get_used_button_pos_id (int lp_button) {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    int auto05ABC57C_val;

    // Variable Initialization

    // Implementation
    if ((lp_button == gv_tbp_minimap_button_random)) {
        lv_r = 0;
    }
    else {
        auto05ABC57C_val = lp_button;
        if (auto05ABC57C_val == gv_tbp_minimap_buttons[1]) {
            lv_r = 1;
        }
        else if (auto05ABC57C_val == gv_tbp_minimap_buttons[2]) {
            lv_r = 2;
        }
        else if (auto05ABC57C_val == gv_tbp_minimap_buttons[3]) {
            lv_r = 3;
        }
        else if (auto05ABC57C_val == gv_tbp_minimap_buttons[4]) {
            lv_r = 4;
        }
        else if (auto05ABC57C_val == gv_tbp_minimap_buttons[5]) {
            lv_r = 5;
        }
        else if (auto05ABC57C_val == gv_tbp_minimap_buttons[6]) {
            lv_r = 6;
        }
        else {
        }
    }
    return lv_r;
}

int gf_tbp_get_used_add_archon_button_pos_id (int lp_button) {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    int autoF03EAD3E_val;

    // Variable Initialization

    // Implementation
    autoF03EAD3E_val = lp_button;
    if (autoF03EAD3E_val == gv_tbp_minimap_add_archon_buttons[1]) {
        lv_r = 1;
    }
    else if (autoF03EAD3E_val == gv_tbp_minimap_add_archon_buttons[2]) {
        lv_r = 2;
    }
    else if (autoF03EAD3E_val == gv_tbp_minimap_add_archon_buttons[3]) {
        lv_r = 3;
    }
    else if (autoF03EAD3E_val == gv_tbp_minimap_add_archon_buttons[4]) {
        lv_r = 4;
    }
    else if (autoF03EAD3E_val == gv_tbp_minimap_add_archon_buttons[5]) {
        lv_r = 5;
    }
    else if (autoF03EAD3E_val == gv_tbp_minimap_add_archon_buttons[6]) {
        lv_r = 6;
    }
    else {
    }
    return lv_r;
}

int gf_tbp_get_used_remove_archon_button_pos_id (int lp_button) {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    int auto0B644250_val;

    // Variable Initialization

    // Implementation
    auto0B644250_val = lp_button;
    if (auto0B644250_val == gv_tbp_minimap_remove_archon_buttons[1]) {
        lv_r = 1;
    }
    else if (auto0B644250_val == gv_tbp_minimap_remove_archon_buttons[2]) {
        lv_r = 2;
    }
    else if (auto0B644250_val == gv_tbp_minimap_remove_archon_buttons[3]) {
        lv_r = 3;
    }
    else if (auto0B644250_val == gv_tbp_minimap_remove_archon_buttons[4]) {
        lv_r = 4;
    }
    else if (auto0B644250_val == gv_tbp_minimap_remove_archon_buttons[5]) {
        lv_r = 5;
    }
    else if (auto0B644250_val == gv_tbp_minimap_remove_archon_buttons[6]) {
        lv_r = 6;
    }
    else {
    }
    return lv_r;
}

int gf_tbp_get_used_archon_slot_button_pos_id (int lp_button) {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    int auto47837688_val;

    // Variable Initialization

    // Implementation
    auto47837688_val = lp_button;
    if (auto47837688_val == gv_tbp_minimap_archon_slot_buttons[1]) {
        lv_r = 1;
    }
    else if (auto47837688_val == gv_tbp_minimap_archon_slot_buttons[2]) {
        lv_r = 2;
    }
    else if (auto47837688_val == gv_tbp_minimap_archon_slot_buttons[3]) {
        lv_r = 3;
    }
    else if (auto47837688_val == gv_tbp_minimap_archon_slot_buttons[4]) {
        lv_r = 4;
    }
    else if (auto47837688_val == gv_tbp_minimap_archon_slot_buttons[5]) {
        lv_r = 5;
    }
    else if (auto47837688_val == gv_tbp_minimap_archon_slot_buttons[6]) {
        lv_r = 6;
    }
    else {
    }
    return lv_r;
}

text gf_get_bonus_name_text_from_bid (int lp_bonus_int) {
    // Variable Declarations
    text lv_r;

    // Automatic Variable Declarations
    int auto566F021E_val;

    // Variable Initialization

    // Implementation
    auto566F021E_val = lp_bonus_int;
    if (auto566F021E_val == 0) {
        lv_r = StringExternal("Param/Value/DD5396A4");
    }
    else if (auto566F021E_val == 1) {
        lv_r = StringExternal("Param/Value/0E35134C");
    }
    else if (auto566F021E_val == 2) {
        lv_r = StringExternal("Param/Value/73BF34E4");
    }
    else if (auto566F021E_val == 3) {
        lv_r = StringExternal("Param/Value/64E57F01");
    }
    else if (auto566F021E_val == 4) {
        lv_r = StringExternal("Param/Value/8DFB1F87");
    }
    else if (auto566F021E_val == 5) {
        lv_r = StringExternal("Param/Value/1C734627");
    }
    else if (auto566F021E_val == 6) {
        lv_r = StringExternal("Param/Value/704B0AD1");
    }
    else if (auto566F021E_val == 7) {
        lv_r = StringExternal("Param/Value/0D95D3CD");
    }
    else if (auto566F021E_val == 8) {
        lv_r = StringExternal("Param/Value/D7A7EEF6");
    }
    else if (auto566F021E_val == 9) {
        lv_r = StringExternal("Param/Value/0FD0FC63");
    }
    else if (auto566F021E_val == 10) {
        lv_r = StringExternal("Param/Value/FFDAC1AE");
    }
    else if (auto566F021E_val == 11) {
        lv_r = StringExternal("Param/Value/0C325742");
    }
    else if (auto566F021E_val == 12) {
        lv_r = StringExternal("Param/Value/FC64C2D2");
    }
    else if (auto566F021E_val == 13) {
        lv_r = StringExternal("Param/Value/98B11280");
    }
    else if (auto566F021E_val == 14) {
        lv_r = StringExternal("Param/Value/F9A82BD7");
    }
    else {
        lv_r = StringExternal("Param/Value/FCB00C95");
    }
    return lv_r;
}

void gf_tbp_refresh_dialog_labels () {
    // Variable Declarations
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;
    lv_j = 1;

    // Implementation
    lv_i = 1;
    lv_j = 1;
    while ((lv_i <= 6)) {
        if ((lv_i <= gv_tbp_player_picked_terran_count)) {
            if ((gv_players[gv_tbp_player_picked_terran[lv_i]].lv_left_the_game == false)) {
                libNtve_gf_SetDialogItemText(gv_tbp_labels_terran[lv_j], (((StringToText("") + StringToText("")) + (TextWithColor(PlayerName(gv_tbp_player_picked_terran[lv_i]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_tbp_player_picked_terran[lv_i], false))) + StringToText(""))) + (StringExternal("Param/Value/886EE5AA") + gf_get_bonus_name_text_from_bid(gv_tbp_player_bonus_picks[lv_i]))), PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemText(gv_tbp_labels_terran[lv_j], (((StringToText("") + StringToText("")) + (TextWithColor(PlayerName(gv_tbp_player_picked_terran[lv_i]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_tbp_player_picked_terran[lv_i], false))) + StringToText(""))) + (StringExternal("Param/Value/D853AD01") + StringExternal("Param/Value/3F6CC9C6"))), PlayerGroupAll());
            }
            lv_j = (lv_j + 1);
            libNtve_gf_SetDialogItemText(gv_tbp_labels_terran[lv_j], (((((StringExternal("Param/Value/F21B9A6F") + IntToText(gf_get_level_from_xp(gv_players[gv_tbp_player_picked_terran[lv_i]].lv_xp))) + (StringExternal("Param/Value/DC00FE01") + StringToText(gf_tbp_transform_xp_string(gv_players[gv_tbp_player_picked_terran[lv_i]].lv_xp, gf_get_needed_xp(gf_get_level_from_xp(gv_players[gv_tbp_player_picked_terran[lv_i]].lv_xp)))))) + StringExternal("Param/Value/A8EE55C3")) + StringExternal("Param/Value/A6E28041")) + (StringExternal("Param/Value/3C111172") + StringToText(gf_tbp_transform_flags(gv_tbp_player_picked_terran[lv_i])))), PlayerGroupAll());
            lv_j = (lv_j + 1);
        }
        else {
            libNtve_gf_SetDialogItemText(gv_tbp_labels_terran[lv_j], StringToText(""), PlayerGroupAll());
            lv_j = (lv_j + 1);
            libNtve_gf_SetDialogItemText(gv_tbp_labels_terran[lv_j], StringToText(""), PlayerGroupAll());
            lv_j = (lv_j + 1);
        }
        lv_i = (lv_i + 1);
    }
    libNtve_gf_SetDialogItemText(gv_tbp_zerg_flags, StringToText(gf_tbp_get_zerg_flag_string()), PlayerGroupAll());
}

string gf_tbp_transform_xp_string (int lp_pxp, int lp_nxp) {
    // Variable Declarations
    string lv_pxp;
    string lv_nxp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pxp = "";
    lv_nxp = "";

    // Implementation
    if ((StringLength(IntToString(lp_pxp)) >= 4)) {
        if ((StringLength(IntToString(lp_pxp)) >= 5)) {
            if ((StringLength(IntToString(lp_pxp)) >= 6)) {
                if ((StringLength(IntToString(lp_pxp)) >= 7)) {
                    lv_pxp = StringSub(IntToString(lp_pxp), 1, 1);
                    lv_pxp = (lv_pxp + "m");
                }
                else {
                    lv_pxp = StringSub(IntToString(lp_pxp), 1, 3);
                    lv_pxp = (lv_pxp + "k");
                }
            }
            else {
                lv_pxp = StringSub(IntToString(lp_pxp), 1, 2);
                lv_pxp = (lv_pxp + "k");
            }
        }
        else {
            lv_pxp = StringSub(IntToString(lp_pxp), 1, 1);
            lv_pxp = (lv_pxp + "k");
        }
    }
    else {
        lv_pxp = IntToString(lp_pxp);
    }
    if ((lp_nxp >= 1000000)) {
        lv_nxp = StringSub(IntToString(lp_nxp), 1, 1);
        lv_nxp = (IntToString((StringToInt(lv_nxp) + 1)) + "m");
    }
    else {
        lv_nxp = StringSub(IntToString(lp_nxp), 1, (StringFind(IntToString(lp_nxp), "000", c_stringCase) - 1));
        lv_nxp = (lv_nxp + "k");
    }
    return (lv_pxp + ("/" + lv_nxp));
}

string gf_tbp_transform_flags (int lp_player) {
    // Variable Declarations
    string lv_return;
    string lv_dos;
    string lv_dos_spacer;
    string lv_ms;
    string lv_ms_spacer;
    string lv_zt;
    string lv_zt_spacer;
    string lv_mgc;

    // Automatic Variable Declarations
    int auto10517ED8_val;
    int auto76B8C404_val;
    int autoCED03BA8_val;
    int autoA4FD7813_val;
    int auto270868D9_val;

    // Variable Initialization
    lv_return = "";
    lv_dos = "";
    lv_dos_spacer = "";
    lv_ms = "";
    lv_ms_spacer = "";
    lv_zt = "";
    lv_zt_spacer = "";
    lv_mgc = "";

    // Implementation
    if ((gv_difficulty > 7)) {
        if ((gv_tbp_torment_votes[lp_player] == 0)) {
            lv_dos = "";
        }
        else {
            lv_dos = ("t" + IntToString((gv_tbp_torment_votes[lp_player] + 1)));
        }
    }
    else {
        auto10517ED8_val = gv_difficulty_offset_votes[lp_player];
        if (auto10517ED8_val == 0) {
            lv_dos = "";
        }
        else if (auto10517ED8_val == 1) {
            lv_dos = "d+";
        }
        else if (auto10517ED8_val == 2) {
            lv_dos = "d-";
        }
        else {
        }
    }
    if ((gf_is_sunday() == true)) {
        auto76B8C404_val = gv_tbp_mutator_votes[lp_player];
        if (auto76B8C404_val == 0) {
            lv_ms = "";
        }
        else if (auto76B8C404_val == 1) {
            lv_ms = "m-";
        }
        else if (auto76B8C404_val == 2) {
            lv_ms = "m+";
        }
        else {
        }
    }
    else {
        autoCED03BA8_val = gv_tbp_mutator_votes[lp_player];
        if (autoCED03BA8_val == 0) {
            lv_ms = "";
        }
        else if (autoCED03BA8_val == 1) {
            lv_ms = "m+";
        }
        else if (autoCED03BA8_val == 2) {
            lv_ms = "m-";
        }
        else {
        }
    }
    autoA4FD7813_val = gv_tbp_zterran_votes[lp_player];
    if (autoA4FD7813_val == 0) {
        lv_zt = "";
    }
    else if (autoA4FD7813_val == 1) {
        lv_zt = "zt+";
    }
    else if (autoA4FD7813_val == 2) {
        lv_zt = "zt-";
    }
    else {
    }
    auto270868D9_val = gv_tbp_mgc_votes[lp_player];
    if (auto270868D9_val == 0) {
        lv_mgc = "";
    }
    else if (auto270868D9_val == 1) {
        lv_mgc = "nc+";
    }
    else if (auto270868D9_val == 2) {
        lv_mgc = "nc-";
    }
    else {
    }
    if ((lv_dos != "")) {
        lv_dos_spacer = " ";
    }

    if ((lv_ms != "")) {
        lv_ms_spacer = " ";
    }

    if ((lv_zt != "")) {
        lv_zt_spacer = " ";
    }

    return (lv_dos + (lv_dos_spacer + (lv_ms + (lv_ms_spacer + (lv_zt + (lv_zt_spacer + lv_mgc))))));
}

string gf_tbp_get_zerg_flag_string () {
    // Variable Declarations
    string lv_return;
    string lv_ds;
    string lv_ms;
    int lv_xpr;
    string lv_bi;
    string lv_bo;
    string lv_zts;
    string lv_mgcs;
    string lv_winter;
    string lv_winter_space;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_return = "";
    lv_ds = "";
    lv_ms = "";
    lv_xpr = 100;
    lv_bi = "";
    lv_bo = "";
    lv_zts = "";
    lv_mgcs = "";
    lv_winter = "";
    lv_winter_space = "";

    // Implementation
    if ((gf_is_winter() == true) && (gv_difficulty >= 5)) {
        lv_winter = "Winter Mod";
        lv_winter_space = " ";
        lv_xpr = (lv_xpr + 15);
    }

    if ((gv_difficulty >= 5) && (gv_difficulty <= 7)) {
        if ((gf_tbp_mgc_get_vote_result() == 1)) {
            lv_mgcs = "mgc-";
        }
        else {
            lv_mgcs = "";
        }
    }
    else {
        lv_mgcs = "";
    }
    if ((gv_difficulty >= 8)) {
        if ((gf_tbp_get_tv_winner_vote() > 0)) {
            lv_ds = ("t" + IntToString((1 + gf_tbp_get_tv_winner_vote())));
        }

    }
    else {
        if ((gf_tbp_get_difficulty_offset_vote_result() != 0)) {
            if ((gf_tbp_get_difficulty_offset_vote_result() == 1)) {
                lv_ds = "d+";
            }
            else {
                lv_ds = "d-";
            }
        }

    }
    if ((lv_ds != "")) {
        lv_ds = (lv_ds + " ");
    }

    if ((gf_tbp_get_mutator_vote_result() == 0)) {
        if ((gf_is_sunday() == true)) {
            lv_ms = "m+";
        }
        else {
            lv_ms = "";
        }
    }
    else {
        if ((gf_tbp_get_mutator_vote_result() == 1)) {
            if ((gf_is_sunday() == true)) {
                lv_ms = "";
            }
            else {
                lv_ms = "m+";
            }
        }
        else {
            if ((gf_is_sunday() == true)) {
                lv_ms = "m+";
            }
            else {
                lv_ms = "";
            }
        }
    }
    if ((gf_tbp_get_zterran_vote_result() == 0)) {
        lv_zts = "";
    }
    else {
        if ((gf_tbp_get_zterran_vote_result() == 1)) {
            lv_zts = "zt+";
        }
        else {
            lv_zts = "";
        }
    }
    if ((lv_ms == "m+")) {
        lv_xpr = (lv_xpr + 20);
    }

    if ((lv_ms == "zt+")) {
        lv_xpr = (lv_xpr + 20);
    }

    if ((lv_ms == "mgc-")) {
        lv_xpr = (lv_xpr - 40);
    }

    if ((gv_difficulty >= 8)) {
        if ((gf_tbp_get_tv_winner_vote() > 0)) {
            lv_xpr = (lv_xpr + (gf_tbp_get_tv_winner_vote() * 20));
        }

    }

    if ((lv_ms != "")) {
        lv_ms = (lv_ms + " ");
    }

    if ((lv_zts != "")) {
        lv_zts = (lv_zts + " ");
    }

    if ((lv_mgcs != "")) {
        lv_mgcs = (lv_mgcs + "");
    }

    if (((lv_ms != "") || (lv_ds != "") || (lv_zts != "") || (lv_mgcs != ""))) {
        lv_bi = "(";
        lv_bo = ")";
    }

    lv_return = ((("XP " + IntToString(lv_xpr)) + ("% " + lv_bi)) + (lv_ds + (lv_ms + (lv_zts + ((lv_mgcs + (lv_winter + lv_winter_space)) + lv_bo)))));
    return lv_return;
}

void gf_ic_check_zerg_units () {
    // Variable Declarations
    unitgroup lv_ug;
    int lv_duc;

    // Automatic Variable Declarations
    unitgroup autoA5F21B59_g;
    int autoA5F21B59_u;
    unit autoA5F21B59_var;

    // Variable Initialization
    lv_ug = UnitGroupEmpty();

    // Implementation
    lv_ug = UnitGroup(null, 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA5F21B59_g = lv_ug;
    autoA5F21B59_u = UnitGroupCount(autoA5F21B59_g, c_unitCountAll);
    for (;; autoA5F21B59_u -= 1) {
        autoA5F21B59_var = UnitGroupUnitFromEnd(autoA5F21B59_g, autoA5F21B59_u);
        if (autoA5F21B59_var == null) { break; }
        if ((gf_is_zerg_unit_broken(autoA5F21B59_var) == true)) {
            UnitKill(autoA5F21B59_var);
            lv_duc += 1;
        }

    }
    if ((lv_duc > 0)) {
        if ((lv_duc == 1)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/9BD346A0") + IntToText(lv_duc)));
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/DD16F0A0") + IntToText(lv_duc)));
        }
    }

}

void gf_ic_check_terran_units () {
    // Variable Declarations
    unitgroup lv_ug;
    int lv_duc;

    // Automatic Variable Declarations
    playergroup autoA8BCCB69_g;
    int autoA8BCCB69_var;
    unitgroup auto2EE183A2_g;
    int auto2EE183A2_u;
    unit auto2EE183A2_var;

    // Variable Initialization
    lv_ug = UnitGroupEmpty();

    // Implementation
    autoA8BCCB69_g = gv_terrans;
    autoA8BCCB69_var = -1;
    while (true) {
        autoA8BCCB69_var = PlayerGroupNextPlayer(autoA8BCCB69_g, autoA8BCCB69_var);
        if (autoA8BCCB69_var < 0) { break; }
        lv_ug = UnitGroup(null, autoA8BCCB69_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2EE183A2_g = lv_ug;
        auto2EE183A2_u = UnitGroupCount(auto2EE183A2_g, c_unitCountAll);
        for (;; auto2EE183A2_u -= 1) {
            auto2EE183A2_var = UnitGroupUnitFromEnd(auto2EE183A2_g, auto2EE183A2_u);
            if (auto2EE183A2_var == null) { break; }
            if ((gf_is_terran_combat_unit_broken(auto2EE183A2_var) == true)) {
                UnitKill(auto2EE183A2_var);
                lv_duc += 1;
            }

        }
    }
    if ((lv_duc > 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/23A29375") + IntToText(lv_duc)));
    }

}

bool gf_is_zerg_unit_broken (unit lp_u) {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitAbilityExists(lp_u, "move") == true) && (UnitAbilityExists(lp_u, "attack") == true)) {
    }
    else {
        if ((UnitGetType(lp_u) != "Overlord") && (UnitGetType(lp_u) != "Drone2") && (UnitGetType(lp_u) != "BlightbringerEgg") && (UnitGetType(lp_u) != "SwarmQueenMorphing") && (UnitGetType(lp_u) != "BlightbringerLargeEgg")) {
            lv_r = true;
        }

    }
    return lv_r;
}

bool gf_is_terran_combat_unit_broken (unit lp_u) {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitAbilityExists(lp_u, "move") == true) && (UnitAbilityExists(lp_u, "attack") == true)) {
    }
    else {
        if ((gf_is_unittype_terran_combat_unit(UnitGetType(lp_u)) == true)) {
            lv_r = true;
        }

    }
    return lv_r;
}

bool gf_is_unittype_terran_combat_unit (string lp_ut) {
    // Variable Declarations
    bool lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_ut == "Marine2") || (lp_ut == "VeteranMarine") || (lp_ut == "EliteMarine") || (lp_ut == "EliteMarineSkin1") || (lp_ut == "EliteMarineSkin2") || (lp_ut == "EliteMarineSkin3") || (lp_ut == "EliteMarineSkin4") || (lp_ut == "ShockTrooper") || (lp_ut == "Reaper2") || (lp_ut == "FirebatZergHex") || (lp_ut == "Italis") || (lp_ut == "ChaosLord") || (lp_ut == "ChaosCultist") || (lp_ut == "ChaosSpaceMarine") || (lp_ut == "ChaosDefiler") || (lp_ut == "InfestedTerranCampaign") || (lp_ut == "FirebatZergHexOld"))) {
        lv_r = true;
    }

    return lv_r;
}

int gf_ic_all_Zerg_unit_count () {
    // Variable Declarations
    int lv_r;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_r = UnitGroupCount(UnitGroup(null, 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    return lv_r;
}

int gf_ic_update_terran_combat_unit_counts () {
    // Variable Declarations
    unitgroup lv_ug;
    int lv_ur;
    int lv_r;

    // Automatic Variable Declarations
    playergroup autoD410A9A4_g;
    int autoD410A9A4_var;
    unitgroup autoFC5191F9_g;
    int autoFC5191F9_u;
    unit autoFC5191F9_var;
    playergroup auto0105CC4B_g;
    int auto0105CC4B_var;

    // Variable Initialization
    lv_ug = UnitGroupEmpty();

    // Implementation
    autoD410A9A4_g = gv_terrans;
    autoD410A9A4_var = -1;
    while (true) {
        autoD410A9A4_var = PlayerGroupNextPlayer(autoD410A9A4_g, autoD410A9A4_var);
        if (autoD410A9A4_var < 0) { break; }
        lv_ug = UnitGroupEmpty();
        autoFC5191F9_g = UnitGroup(null, autoD410A9A4_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFC5191F9_u = UnitGroupCount(autoFC5191F9_g, c_unitCountAll);
        for (;; autoFC5191F9_u -= 1) {
            autoFC5191F9_var = UnitGroupUnitFromEnd(autoFC5191F9_g, autoFC5191F9_u);
            if (autoFC5191F9_var == null) { break; }
            if ((gf_is_unittype_terran_combat_unit(UnitGetType(autoFC5191F9_var)) == true)) {
                UnitGroupAdd(lv_ug, autoFC5191F9_var);
            }

        }
        gv_ic_terran_combat_unit_counts[autoD410A9A4_var] = UnitGroupCount(lv_ug, c_unitCountAlive);
    }
    auto0105CC4B_g = gv_terrans;
    auto0105CC4B_var = -1;
    while (true) {
        auto0105CC4B_var = PlayerGroupNextPlayer(auto0105CC4B_g, auto0105CC4B_var);
        if (auto0105CC4B_var < 0) { break; }
        lv_r = (lv_r + gv_ic_terran_combat_unit_counts[auto0105CC4B_var]);
    }
    return lv_r;
}

//--------------------------------------------------------------------------------------------------
// Trigger: tgai every 6s
//--------------------------------------------------------------------------------------------------
bool gt_tgaievery6s_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_no_genetron_players == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_tgai_issue_orders_to_genetron_ai();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tgaievery6s_Init () {
    gt_tgaievery6s = TriggerCreate("gt_tgaievery6s_Func");
    TriggerAddEventTimePeriodic(gt_tgaievery6s, 6.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tombstone Mineral Upgrade Finished
//--------------------------------------------------------------------------------------------------
bool gt_TombstoneMineralUpgradeFinished_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Tombstone"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() == "EnableMineralProduction"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "GenerateMineralsTombstone", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TombstoneMineralUpgradeFinished_Init () {
    gt_TombstoneMineralUpgradeFinished = TriggerCreate("gt_TombstoneMineralUpgradeFinished_Func");
    TriggerAddEventUnitResearchProgress(gt_TombstoneMineralUpgradeFinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop the rain Upgrade finished
//--------------------------------------------------------------------------------------------------
bool gt_StoptherainUpgradefinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_elo;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Tombstone"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() == "Stoptherain"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_elo = gv_players[lv_player].lv_elo;
    gv_players[lv_player].lv_weather = 0;
    gf_Remove_weather(gv_players[lv_player].lv_position);
    gf_Game_Banks_handler("changeweather", lv_player, lv_elo, 0, 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ChooseRain", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ChooseSnow", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ChooseAsh", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoptherainUpgradefinished_Init () {
    gt_StoptherainUpgradefinished = TriggerCreate("gt_StoptherainUpgradefinished_Func");
    TriggerAddEventUnitResearchProgress(gt_StoptherainUpgradefinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: transporter became idle
//--------------------------------------------------------------------------------------------------
bool gt_transporterbecameidle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;
    unit lv_unit;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_position = UnitGetPosition(EventUnit());
    lv_unit = EventUnit();
    lv_ug = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() > 5.0))) {
            return false;
        }

        if (!((GameGetMissionTime() < 720.0))) {
            return false;
        }

        if (!(((UnitGetType(lv_unit) == "Medivac") || (UnitGetType(lv_unit) == "WarpPrism") || (UnitGetType(lv_unit) == "Hercules")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_unit) == "Hercules")) {
        if ((UnitGroupCount(UnitCargoGroup(lv_unit), c_unitCountAlive) > 0)) {
            UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("HerculesTransport", 2), libNtve_gf_PointOffsetTowardsPoint(lv_position, 3.0, PointFromName(("Zerg Rally " + IntToString(gv_players[UnitGetOwner(lv_unit)].lv_position))))), c_orderQueueReplace);
        }
        else {
            UnitRemove(lv_unit);
        }
    }
    else {
        gf_disable_unit_pickup(lv_unit);
    }
    if ((gv_players[UnitGetOwner(EventUnit())].lv_support_type == "Raynor")) {
        UnitGroupAddUnitGroup(lv_ug, UnitGroup("EliteMarineSkin1", UnitGetOwner(lv_unit), RegionCircle(lv_position, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_ug, UnitGroup("EliteMarineSkin2", UnitGetOwner(lv_unit), RegionCircle(lv_position, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_ug, UnitGroup("EliteMarineSkin3", UnitGetOwner(lv_unit), RegionCircle(lv_position, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_ug, UnitGroup("EliteMarineSkin4", UnitGetOwner(lv_unit), RegionCircle(lv_position, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupIssueOrder(lv_ug, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_transporterbecameidle_Init () {
    gt_transporterbecameidle = TriggerCreate("gt_transporterbecameidle_Func");
    TriggerAddEventUnitBecomesIdle(gt_transporterbecameidle, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: disable_transporter_trigger
//--------------------------------------------------------------------------------------------------
bool gt_disable_transporter_trigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_transporterbecameidle, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_disable_transporter_trigger_Init () {
    gt_disable_transporter_trigger = TriggerCreate("gt_disable_transporter_trigger_Func");
    TriggerAddEventTimeElapsed(gt_disable_transporter_trigger, 120.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cash transporter became idle
//--------------------------------------------------------------------------------------------------
bool gt_Cashtransporterbecameidle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;
    unit lv_unit;
    int lv_owner;
    int lv_minerals;
    int lv_gas;
    int lv_is_ally;
    int lv_pp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_owner = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((lv_owner <= 6))) {
            return false;
        }

        if (!((lv_owner >= 1))) {
            return false;
        }

        if (!((gv_players[lv_owner].lv_support_type == "Cash"))) {
            return false;
        }

        if (!((UnitGetType(lv_unit) == "CashTransporter"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_position = UnitGetPosition(EventUnit());
    if ((RegionContainsPoint(RegionFromName(("player " + IntToString(gv_players[lv_owner].lv_position))), lv_position) == true)) {
        lv_pp = gv_players[lv_owner].lv_position;
    }
    else {
        lv_is_ally = 1;
        lv_pp = gf_get_closest_position(lv_position);
    }
    if ((lv_is_ally == 1)) {
        lv_minerals = gv_cash_drops[gf_get_player_at_position(lv_pp)][1];
        lv_gas = gv_cash_drops[gf_get_player_at_position(lv_pp)][2];
    }
    else {
        lv_minerals = gv_cash_drops[lv_owner][1];
        lv_gas = gv_cash_drops[lv_owner][2];
        if ((GameGetMissionTime() <= ((8 * 60) + 0))) {
            lv_minerals += 2;
            lv_gas += 2;
        }

    }
    libNtve_gf_CreateUnitsWithDefaultFacing(lv_gas, "PickupPalletGas", 0, gf_get_player_at_position(lv_pp), lv_position);
    libNtve_gf_CreateUnitsWithDefaultFacing(lv_minerals, "PickupPalletMinerals", 0, gf_get_player_at_position(lv_pp), lv_position);
    if ((lv_is_ally == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "GasTrader", 0, gf_get_player_at_position(lv_pp), lv_position);
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "MineralTrader", 0, gf_get_player_at_position(lv_pp), lv_position);
    }

    Wait(2.0, c_timeGame);
    UnitRemove(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cashtransporterbecameidle_Init () {
    gt_Cashtransporterbecameidle = TriggerCreate("gt_Cashtransporterbecameidle_Func");
    TriggerAddEventUnitBecomesIdle(gt_Cashtransporterbecameidle, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: More Cash Pickup Research Finished
//--------------------------------------------------------------------------------------------------
bool gt_MoreCashPickupResearchFinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    string autoCB4F09A8_val;

    // Variable Initialization
    lv_i = 1;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ConstructionYard"))) {
            return false;
        }

        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "MoreCashDrops") || (libNtve_gf_TriggeringProgressUpgrade() == "MoreCashDrops2") || (libNtve_gf_TriggeringProgressUpgrade() == "MoreCashDrops3") || (libNtve_gf_TriggeringProgressUpgrade() == "MoreCashDrops4") || (libNtve_gf_TriggeringProgressUpgrade() == "MoreCashDrops5")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_players[UnitGetOwner(EventUnit())].lv_more_cash_drop_level += 1;
    autoCB4F09A8_val = libNtve_gf_TriggeringProgressUpgrade();
    if (autoCB4F09A8_val == "MoreCashDrops") {
        gv_cash_drops[UnitGetOwner(EventUnit())][1] = (gv_cash_drops[UnitGetOwner(EventUnit())][1] + 1);
        gv_cash_drops[UnitGetOwner(EventUnit())][2] = (gv_cash_drops[UnitGetOwner(EventUnit())][2] + 1);
    }
    else if (autoCB4F09A8_val == "MoreCashDrops2") {
        gv_cash_drops[UnitGetOwner(EventUnit())][1] = (gv_cash_drops[UnitGetOwner(EventUnit())][1] + 2);
        gv_cash_drops[UnitGetOwner(EventUnit())][2] = (gv_cash_drops[UnitGetOwner(EventUnit())][2] + 2);
    }
    else if (autoCB4F09A8_val == "MoreCashDrops3") {
        if ((gv_cash_drops[UnitGetOwner(EventUnit())][3] > 0)) {
            gv_cash_drops[UnitGetOwner(EventUnit())][3] = (gv_cash_drops[UnitGetOwner(EventUnit())][3] - 1);
        }

    }
    else if (autoCB4F09A8_val == "MoreCashDrops4") {
        while ((lv_i <= 6)) {
            if ((lv_i != UnitGetOwner(EventUnit()))) {
                gv_cash_drops[lv_i][1] = (gv_cash_drops[lv_i][1] + 2);
                gv_cash_drops[lv_i][2] = (gv_cash_drops[lv_i][2] + 2);
            }

            lv_i += 1;
        }
    }
    else if (autoCB4F09A8_val == "MoreCashDrops5") {
        while ((lv_i <= 6)) {
            gv_cash_drops[lv_i][1] = (gv_cash_drops[lv_i][1] + 2);
            gv_cash_drops[lv_i][2] = (gv_cash_drops[lv_i][2] + 2);
            lv_i += 1;
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoreCashPickupResearchFinished_Init () {
    gt_MoreCashPickupResearchFinished = TriggerCreate("gt_MoreCashPickupResearchFinished_Func");
    TriggerAddEventUnitResearchProgress(gt_MoreCashPickupResearchFinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: choas lord created
//--------------------------------------------------------------------------------------------------
bool gt_choaslordcreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_barracks;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "ChaosLord"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_barracks = UnitGroupUnit(UnitGroup("Barracks2", lv_owner, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    UnitBehaviorRemove(lv_barracks, "BloodStacks", 100);
    UnitBehaviorAdd(EventUnitCreatedUnit(), "ChaosLordStacks", EventUnitCreatedUnit(), gf_get_player_blood(lv_owner));
    gf_update_blood_panel(lv_owner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_choaslordcreated_Init () {
    gt_choaslordcreated = TriggerCreate("gt_choaslordcreated_Func");
    TriggerAddEventUnitCreated(gt_choaslordcreated, null, "BarracksTrain2", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: choas marine created
//--------------------------------------------------------------------------------------------------
bool gt_choasmarinecreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_barracks;
    int lv_owner;
    unit lv_lord;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "ChaosSpaceMarine"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_barracks = UnitGroupUnit(UnitGroup("Barracks2", lv_owner, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    UnitBehaviorRemove(lv_barracks, "BloodStacks", 10);
    lv_lord = UnitGroupUnit(UnitGroup("ChaosLord", lv_owner, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    if ((lv_lord != null)) {
        UnitBehaviorRemove(lv_lord, "ChaosLordStacks", 10);
    }

    gf_update_blood_panel(lv_owner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_choasmarinecreated_Init () {
    gt_choasmarinecreated = TriggerCreate("gt_choasmarinecreated_Func");
    TriggerAddEventUnitCreated(gt_choasmarinecreated, null, "BarracksTrain2", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: cultist created
//--------------------------------------------------------------------------------------------------
bool gt_cultistcreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_barracks;
    int lv_owner;
    unit lv_lord;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "ChaosCultist"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_barracks = UnitGroupUnit(UnitGroup("Barracks2", lv_owner, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    UnitBehaviorRemove(lv_barracks, "BloodStacks", 2);
    lv_lord = UnitGroupUnit(UnitGroup("ChaosLord", lv_owner, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    if ((lv_lord != null)) {
        UnitBehaviorRemove(lv_lord, "ChaosLordStacks", 2);
    }

    gf_update_blood_panel(lv_owner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_cultistcreated_Init () {
    gt_cultistcreated = TriggerCreate("gt_cultistcreated_Func");
    TriggerAddEventUnitCreated(gt_cultistcreated, null, "BarracksTrain2", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: player collects blood
//--------------------------------------------------------------------------------------------------
bool gt_playercollectsblood_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_blood_position;
    unit lv_tu;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_blood_position = UnitGetPosition(EventUnit());
    lv_tu = EventUnitTargetUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    lv_player = UnitGetOwner(lv_tu);
    gf_Handle_blood_pickup(lv_player, lv_blood_position, 0);
    gf_update_blood_panel(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_playercollectsblood_Init () {
    gt_playercollectsblood = TriggerCreate("gt_playercollectsblood_Func");
    TriggerAddEventUnitAbility(gt_playercollectsblood, null, AbilityCommand("PickupBlood", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: player collects blood big
//--------------------------------------------------------------------------------------------------
bool gt_playercollectsbloodbig_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_blood_position;
    unit lv_tu;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_blood_position = UnitGetPosition(EventUnit());
    lv_tu = EventUnitTargetUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    lv_player = UnitGetOwner(lv_tu);
    gf_Handle_blood_pickup(lv_player, lv_blood_position, 1);
    gf_update_blood_panel(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_playercollectsbloodbig_Init () {
    gt_playercollectsbloodbig = TriggerCreate("gt_playercollectsbloodbig_Func");
    TriggerAddEventUnitAbility(gt_playercollectsbloodbig, null, AbilityCommand("PickupBloodBig", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Manufacturer dies
//--------------------------------------------------------------------------------------------------
bool gt_Manufacturerdies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((lv_p >= 1))) {
            return false;
        }

        if (!((lv_p <= 6))) {
            return false;
        }

        if (!(((UnitGetType(lv_u) == "Manufacturer")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogReferenceSet("Abil,GenetronTrainEdit,InfoArray[Train1].Time", lv_p, IntToString((CatalogReferenceGetAsInt("Abil,GenetronTrainEdit,InfoArray[Train1].Time", lv_p) + 2)));
    CatalogReferenceSet("Abil,GenetronTrainEdit,InfoArray[Train2].Time", lv_p, IntToString((CatalogReferenceGetAsInt("Abil,GenetronTrainEdit,InfoArray[Train2].Time", lv_p) + 2)));
    CatalogReferenceSet("Abil,GenetronTrainEdit,InfoArray[Train3].Time", lv_p, IntToString((CatalogReferenceGetAsInt("Abil,GenetronTrainEdit,InfoArray[Train3].Time", lv_p) + 2)));
    CatalogReferenceSet("Abil,GenetronTrainEdit,InfoArray[Train4].Time", lv_p, IntToString((CatalogReferenceGetAsInt("Abil,GenetronTrainEdit,InfoArray[Train4].Time", lv_p) + 2)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Manufacturerdies_Init () {
    gt_Manufacturerdies = TriggerCreate("gt_Manufacturerdies_Func");
    TriggerAddEventUnitDied(gt_Manufacturerdies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Manufacturer finished
//--------------------------------------------------------------------------------------------------
bool gt_Manufacturerfinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(EventUnitProgressUnit());

    // Conditions
    if (testConds) {
        if (!((lv_p >= 1))) {
            return false;
        }

        if (!((lv_p <= 6))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "Manufacturer")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogReferenceSet("Abil,GenetronTrainEdit,InfoArray[Train1].Time", lv_p, IntToString((CatalogReferenceGetAsInt("Abil,GenetronTrainEdit,InfoArray[Train1].Time", lv_p) - 2)));
    CatalogReferenceSet("Abil,GenetronTrainEdit,InfoArray[Train2].Time", lv_p, IntToString((CatalogReferenceGetAsInt("Abil,GenetronTrainEdit,InfoArray[Train2].Time", lv_p) - 2)));
    CatalogReferenceSet("Abil,GenetronTrainEdit,InfoArray[Train3].Time", lv_p, IntToString((CatalogReferenceGetAsInt("Abil,GenetronTrainEdit,InfoArray[Train3].Time", lv_p) - 2)));
    CatalogReferenceSet("Abil,GenetronTrainEdit,InfoArray[Train4].Time", lv_p, IntToString((CatalogReferenceGetAsInt("Abil,GenetronTrainEdit,InfoArray[Train4].Time", lv_p) - 2)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Manufacturerfinished_Init () {
    gt_Manufacturerfinished = TriggerCreate("gt_Manufacturerfinished_Func");
    TriggerAddEventUnitConstructProgress(gt_Manufacturerfinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Bomber Ability Used
//--------------------------------------------------------------------------------------------------
bool gt_SelectBomberAbilityUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunker;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bunker = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_bunker, "SpawnsBombers", lv_bunker, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectBomberAbilityUsed_Init () {
    gt_SelectBomberAbilityUsed = TriggerCreate("gt_SelectBomberAbilityUsed_Func");
    TriggerAddEventPlayerEffectUsed(gt_SelectBomberAbilityUsed, c_playerAny, "AddUpgradedBunker");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Infested Marine Ability Used
//--------------------------------------------------------------------------------------------------
bool gt_SelectInfestedMarineAbilityUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunker;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bunker = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_bunker, "SpawnsBombers", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectInfestedMarineAbilityUsed_Init () {
    gt_SelectInfestedMarineAbilityUsed = TriggerCreate("gt_SelectInfestedMarineAbilityUsed_Func");
    TriggerAddEventPlayerEffectUsed(gt_SelectInfestedMarineAbilityUsed, c_playerAny, "RemoveBomberSpawn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested building finished
//--------------------------------------------------------------------------------------------------
bool gt_Infestedbuildingfinished_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) <= 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_players[UnitGetOwner(EventUnitProgressUnit())].lv_support_type == "Infested") && ((UnitGetType(EventUnitProgressUnit()) == "InfestedBunker") || (UnitGetType(EventUnitProgressUnit()) == "Armory2") || (UnitGetType(EventUnitProgressUnit()) == "ConstructionYard"))) {
        UnitBehaviorAdd(EventUnitProgressUnit(), "InfestedVisual", EventUnitProgressUnit(), 1);
        if ((UnitGetType(EventUnitProgressUnit()) == "InfestedBunker")) {
            UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1910508930)), c_orderQueueReplace);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Infestedbuildingfinished_Init () {
    gt_Infestedbuildingfinished = TriggerCreate("gt_Infestedbuildingfinished_Func");
    TriggerAddEventUnitConstructProgress(gt_Infestedbuildingfinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested maybe stuck
//--------------------------------------------------------------------------------------------------
bool gt_Infestedmaybestuck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_position = UnitGetPosition(EventUnit());
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((gf_is_game_over() == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "InfestedExploder") || (UnitGetType(EventUnit()) == "InfestedTerranCampaign")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1910508930)), c_orderQueueReplace);
    gf_observe_or_kill_unit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Infestedmaybestuck_Init () {
    gt_Infestedmaybestuck = TriggerCreate("gt_Infestedmaybestuck_Func");
    TriggerAddEventUnitBecomesIdle(gt_Infestedmaybestuck, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Aura Got Clicked
//--------------------------------------------------------------------------------------------------
bool gt_PowerAuraGotClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pylon;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pylon = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_pylon, "ProbiusPylonBuffAuraPower", 1);
    UnitBehaviorRemove(lv_pylon, "ProbiusPylonBuffAuraAttack", 1);
    UnitBehaviorRemove(lv_pylon, "ProbiusPylonBuffAuraDefense", 1);
    if ((gv_players[UnitGetOwner(lv_pylon)].lv_probius_increased_income == true)) {
        UnitBehaviorRemove(lv_pylon, "GenerateMineralsCowFarm", 1);
        UnitBehaviorRemove(lv_pylon, "UpgradedVespeneHarvestingUnlimited", 1);
        UnitBehaviorAdd(lv_pylon, "GenerateMinerals", lv_pylon, 1);
        UnitBehaviorAdd(lv_pylon, "VespeneHarvestingUnlimited", lv_pylon, 1);
    }
    else {
        UnitBehaviorRemove(lv_pylon, "GenerateMinerals", 1);
        UnitBehaviorRemove(lv_pylon, "VespeneHarvestingUnlimited", 1);
    }
    UnitBehaviorAdd(lv_pylon, "ProbiusPylonBuffAuraPower", lv_pylon, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerAuraGotClicked_Init () {
    gt_PowerAuraGotClicked = TriggerCreate("gt_PowerAuraGotClicked_Func");
    TriggerAddEventPlayerEffectUsed(gt_PowerAuraGotClicked, c_playerAny, "AddProbiusPylonPowerAura");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Aura Got Clicked
//--------------------------------------------------------------------------------------------------
bool gt_AttackAuraGotClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pylon;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pylon = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_pylon, "ProbiusPylonBuffAuraPower", 1);
    UnitBehaviorRemove(lv_pylon, "ProbiusPylonBuffAuraAttack", 1);
    UnitBehaviorRemove(lv_pylon, "ProbiusPylonBuffAuraDefense", 1);
    if ((gv_players[UnitGetOwner(lv_pylon)].lv_probius_increased_income == true)) {
        UnitBehaviorRemove(lv_pylon, "GenerateMineralsCowFarm", 1);
        UnitBehaviorRemove(lv_pylon, "UpgradedVespeneHarvestingUnlimited", 1);
        UnitBehaviorAdd(lv_pylon, "GenerateMinerals", lv_pylon, 1);
        UnitBehaviorAdd(lv_pylon, "VespeneHarvestingUnlimited", lv_pylon, 1);
    }
    else {
        UnitBehaviorRemove(lv_pylon, "GenerateMinerals", 1);
        UnitBehaviorRemove(lv_pylon, "VespeneHarvestingUnlimited", 1);
    }
    UnitBehaviorAdd(lv_pylon, "ProbiusPylonBuffAuraAttack", lv_pylon, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackAuraGotClicked_Init () {
    gt_AttackAuraGotClicked = TriggerCreate("gt_AttackAuraGotClicked_Func");
    TriggerAddEventPlayerEffectUsed(gt_AttackAuraGotClicked, c_playerAny, "AddProbiusPylonAttackAura");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defense Aura Got Clicked
//--------------------------------------------------------------------------------------------------
bool gt_DefenseAuraGotClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pylon;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pylon = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_pylon, "ProbiusPylonBuffAuraPower", 1);
    UnitBehaviorRemove(lv_pylon, "ProbiusPylonBuffAuraAttack", 1);
    UnitBehaviorRemove(lv_pylon, "ProbiusPylonBuffAuraDefense", 1);
    if ((gv_players[UnitGetOwner(lv_pylon)].lv_probius_increased_income == true)) {
        UnitBehaviorRemove(lv_pylon, "GenerateMineralsCowFarm", 1);
        UnitBehaviorRemove(lv_pylon, "UpgradedVespeneHarvestingUnlimited", 1);
        UnitBehaviorAdd(lv_pylon, "GenerateMinerals", lv_pylon, 1);
        UnitBehaviorAdd(lv_pylon, "VespeneHarvestingUnlimited", lv_pylon, 1);
    }
    else {
        UnitBehaviorRemove(lv_pylon, "GenerateMinerals", 1);
        UnitBehaviorRemove(lv_pylon, "VespeneHarvestingUnlimited", 1);
    }
    UnitBehaviorAdd(lv_pylon, "ProbiusPylonBuffAuraDefense", lv_pylon, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefenseAuraGotClicked_Init () {
    gt_DefenseAuraGotClicked = TriggerCreate("gt_DefenseAuraGotClicked_Func");
    TriggerAddEventPlayerEffectUsed(gt_DefenseAuraGotClicked, c_playerAny, "AddProbiusPylonDefenseAura");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Inactive State Got Clicked
//--------------------------------------------------------------------------------------------------
bool gt_InactiveStateGotClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pylon;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pylon = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_pylon, "ProbiusPylonBuffAuraPower", 1);
    UnitBehaviorRemove(lv_pylon, "ProbiusPylonBuffAuraAttack", 1);
    UnitBehaviorRemove(lv_pylon, "ProbiusPylonBuffAuraDefense", 1);
    if ((gv_players[UnitGetOwner(lv_pylon)].lv_probius_increased_income == true)) {
        UnitBehaviorRemove(lv_pylon, "GenerateMinerals", 1);
        UnitBehaviorRemove(lv_pylon, "VespeneHarvestingUnlimited", 1);
        UnitBehaviorAdd(lv_pylon, "GenerateMineralsCowFarm", lv_pylon, 1);
        UnitBehaviorAdd(lv_pylon, "UpgradedVespeneHarvestingUnlimited", lv_pylon, 1);
    }
    else {
        UnitBehaviorAdd(lv_pylon, "GenerateMinerals", lv_pylon, 1);
        UnitBehaviorAdd(lv_pylon, "VespeneHarvestingUnlimited", lv_pylon, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InactiveStateGotClicked_Init () {
    gt_InactiveStateGotClicked = TriggerCreate("gt_InactiveStateGotClicked_Func");
    TriggerAddEventPlayerEffectUsed(gt_InactiveStateGotClicked, c_playerAny, "RemoveAnyProbiusPylonAura");
}

//--------------------------------------------------------------------------------------------------
// Trigger: use_tank_ability
//--------------------------------------------------------------------------------------------------
bool gt_use_tank_ability_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameAttributeGameValue("1") != "0002") && (TechTreeUpgradeCount(EventPlayer(), "SiegeTankExpertise", c_techCountCompleteOnly) < 30)) {
        if ((TechTreeUpgradeCount(EventPlayer(), "SiegeTankExpertise", c_techCountCompleteOnly) < 29) && ((EventUnitAbility() == AbilityCommand("FragmentBlast", 0)) || (EventUnitAbility() == AbilityCommand("FragmentBlastT2", 0)))) {
            if ((TechTreeUpgradeCount(EventPlayer(), "SiegeTankExpertise", c_techCountCompleteOnly) == 29)) {
                TechTreeUpgradeAddLevel(EventPlayer(), "SiegeTankExpertise", 1);
            }
            else {
                TechTreeUpgradeAddLevel(EventPlayer(), "SiegeTankExpertise", 2);
            }
        }
        else {
            TechTreeUpgradeAddLevel(EventPlayer(), "SiegeTankExpertise", 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_use_tank_ability_Init () {
    gt_use_tank_ability = TriggerCreate("gt_use_tank_ability_Func");
    TriggerAddEventUnitAbility(gt_use_tank_ability, null, AbilityCommand("SiegeTankModulate", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_use_tank_ability, null, AbilityCommand("PlasmaCannon", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_use_tank_ability, null, AbilityCommand("PlasmaCannonT2", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_use_tank_ability, null, AbilityCommand("PlasmaCannonT3", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_use_tank_ability, null, AbilityCommand("FragmentBlast", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_use_tank_ability, null, AbilityCommand("FragmentBlastT2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: use_tank_attack
//--------------------------------------------------------------------------------------------------
bool gt_use_tank_attack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_killer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_killer = libNtve_gf_KillingUnit();

    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("1") != "0002"))) {
            return false;
        }

        if (!((UnitGetType(lv_killer) == "SiegeTank2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_killer), "SiegeTankExpertise", c_techCountCompleteOnly) < 30)) {
        UnitBehaviorAdd(lv_killer, "SiegeTankExpertise", lv_killer, 1);
        if ((UnitBehaviorCount(lv_killer, "SiegeTankExpertise") >= 30)) {
            libNtve_gf_SetBehaviorCount(lv_killer, "SiegeTankExpertise", lv_killer, 0);
            TechTreeUpgradeAddLevel(UnitGetOwner(lv_killer), "SiegeTankExpertise", 1);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_use_tank_attack_Init () {
    gt_use_tank_attack = TriggerCreate("gt_use_tank_attack_Func");
    TriggerAddEventUnitDied(gt_use_tank_attack, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -af test public
//--------------------------------------------------------------------------------------------------
bool gt_aftestpublic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gv_practice_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_is_af_event == false)) {
        gv_is_af_event = true;
        if ((gv_is_af_event == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/818587D7") + StringToText("")));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/4955801C") + StringToText("")));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/E176759B") + StringToText("")));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/7CB86C9A") + StringToText("")));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/F766B22E") + StringToText("")));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/BE50D4E0") + StringToText("")));
            gf_Enable_AF_Event();
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_aftestpublic_Init () {
    gt_aftestpublic = TriggerCreate("gt_aftestpublic_Func");
    TriggerAddEventChatMessage(gt_aftestpublic, c_playerAny, "-april fools test", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -rtv
//--------------------------------------------------------------------------------------------------
bool gt_rtv_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gf_get_lobby_event_setting() == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_players[lv_player].lv_voted == false)) {
        if ((gf_is_event() == true)) {
            if ((gv_voted_event == false)) {
                if ((gv_rtv == 0)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/B8FD1F77") + (TextWithColor(PlayerName(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + StringExternal("Param/Value/C5E11B6D"))));
                    gf_handle_votes(lv_player, "");
                }
                else {
                    if (((4 - (gv_rtv + 1)) != 0)) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringToText("") + (IntToText((4 - (gv_rtv + 1))) + StringExternal("Param/Value/C4E3EE26"))));
                    }

                    gf_handle_votes(lv_player, "");
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, (StringExternal("Param/Value/80C4C460") + StringToText("")));
            }
        }
        else {
            if ((gv_rtv == 0)) {
                if ((gv_difficulty >= 5)) {
                    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, (StringExternal("Param/Value/3686ACEA") + StringToText("")));
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, (StringExternal("Param/Value/5EABCCA5") + StringToText("")));
                }
            }
            else {
                if (((4 - (gv_rtv + 1)) != 0)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringToText("") + (IntToText((4 - (gv_rtv + 1))) + StringExternal("Param/Value/5280043D"))));
                }

                gf_handle_votes(lv_player, "");
            }
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, (StringExternal("Param/Value/05AB1BA4") + StringToText("")));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_rtv_Init () {
    gt_rtv = TriggerCreate("gt_rtv_Func");
    TriggerAddEventChatMessage(gt_rtv, c_playerAny, "-rtv", true);
    TriggerAddEventChatMessage(gt_rtv, c_playerAny, "-rock the vote", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -rtv halloween
//--------------------------------------------------------------------------------------------------
bool gt_rtvhalloween_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gf_get_lobby_event_setting() == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_get_voted_event_as_typeint() == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/EBD7812F") + (TextWithColor(PlayerName(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + StringExternal("Param/Value/FFCFAEFF"))));
        gf_handle_votes(lv_player, "halloween");
    }
    else {
        if ((gf_get_voted_event_as_typeint() == 1)) {
            if (((4 - (gv_rtv + 1)) != 0)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringToText("") + (IntToText((4 - (gv_rtv + 1))) + StringExternal("Param/Value/E372FAEE"))));
            }

            gf_handle_votes(lv_player, "halloween");
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, (StringToText("") + (StringToText("") + StringExternal("Param/Value/4BAF69B2"))));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_rtvhalloween_Init () {
    gt_rtvhalloween = TriggerCreate("gt_rtvhalloween_Func");
    TriggerAddEventChatMessage(gt_rtvhalloween, c_playerAny, "-rtv halloween", true);
    TriggerAddEventChatMessage(gt_rtvhalloween, c_playerAny, "-rock the vote halloween", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -rtv xmas
//--------------------------------------------------------------------------------------------------
bool gt_rtvxmas_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gf_get_lobby_event_setting() == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_get_voted_event_as_typeint() == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/AA16B9E9") + (TextWithColor(PlayerName(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + StringExternal("Param/Value/168C7CC0"))));
        gf_handle_votes(lv_player, "xmas");
    }
    else {
        if ((gf_get_voted_event_as_typeint() == 2)) {
            if (((4 - (gv_rtv + 1)) != 0)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringToText("") + (IntToText((4 - (gv_rtv + 1))) + StringExternal("Param/Value/098207DD"))));
            }

            gf_handle_votes(lv_player, "xmas");
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, (StringToText("") + (StringToText("") + StringExternal("Param/Value/82C21B45"))));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_rtvxmas_Init () {
    gt_rtvxmas = TriggerCreate("gt_rtvxmas_Func");
    TriggerAddEventChatMessage(gt_rtvxmas, c_playerAny, "-rtv xmas", true);
    TriggerAddEventChatMessage(gt_rtvxmas, c_playerAny, "-rock the vote xmas", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -rtv hny
//--------------------------------------------------------------------------------------------------
bool gt_rtvhny_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gf_get_lobby_event_setting() == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_get_voted_event_as_typeint() == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/83F3589E") + (TextWithColor(PlayerName(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + StringExternal("Param/Value/4714AF2C"))));
        gf_handle_votes(lv_player, "hny");
    }
    else {
        if ((gf_get_voted_event_as_typeint() == 3)) {
            if (((4 - (gv_rtv + 1)) != 0)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringToText("") + (IntToText((4 - (gv_rtv + 1))) + StringExternal("Param/Value/6ECD78AD"))));
            }

            gf_handle_votes(lv_player, "hny");
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, (StringToText("") + (StringToText("") + StringExternal("Param/Value/2E438B93"))));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_rtvhny_Init () {
    gt_rtvhny = TriggerCreate("gt_rtvhny_Func");
    TriggerAddEventChatMessage(gt_rtvhny, c_playerAny, "-rtv hny", true);
    TriggerAddEventChatMessage(gt_rtvhny, c_playerAny, "-rock the vote hny", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -rtv vday
//--------------------------------------------------------------------------------------------------
bool gt_rtvvday_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gf_get_lobby_event_setting() == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_get_voted_event_as_typeint() == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/8CFA5A75") + (TextWithColor(PlayerName(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + StringExternal("Param/Value/F6E12D50"))));
        gf_handle_votes(lv_player, "vday");
    }
    else {
        if ((gf_get_voted_event_as_typeint() == 7)) {
            if (((4 - (gv_rtv + 1)) != 0)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringToText("") + (IntToText((4 - (gv_rtv + 1))) + StringExternal("Param/Value/851FD871"))));
            }

            gf_handle_votes(lv_player, "vday");
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, (StringToText("") + (StringToText("") + StringExternal("Param/Value/9398D9DE"))));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_rtvvday_Init () {
    gt_rtvvday = TriggerCreate("gt_rtvvday_Func");
    TriggerAddEventChatMessage(gt_rtvvday, c_playerAny, "-rtv vday", true);
    TriggerAddEventChatMessage(gt_rtvvday, c_playerAny, "-rtv valentines day", true);
    TriggerAddEventChatMessage(gt_rtvvday, c_playerAny, "-rock the vote vday", true);
    TriggerAddEventChatMessage(gt_rtvvday, c_playerAny, "-rock the vote valentines day", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -rtv thxg
//--------------------------------------------------------------------------------------------------
bool gt_rtvthxg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gf_get_lobby_event_setting() == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_get_voted_event_as_typeint() == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/9B777A43") + (TextWithColor(PlayerName(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + StringExternal("Param/Value/687DF3BB"))));
        gf_handle_votes(lv_player, "thxg");
    }
    else {
        if ((gf_get_voted_event_as_typeint() == 7)) {
            if (((4 - (gv_rtv + 1)) != 0)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringToText("") + (IntToText((4 - (gv_rtv + 1))) + StringExternal("Param/Value/662B39A4"))));
            }

            gf_handle_votes(lv_player, "thxg");
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, (StringToText("") + (StringToText("") + StringExternal("Param/Value/956222AD"))));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_rtvthxg_Init () {
    gt_rtvthxg = TriggerCreate("gt_rtvthxg_Func");
    TriggerAddEventChatMessage(gt_rtvthxg, c_playerAny, "-rtv thxg", true);
    TriggerAddEventChatMessage(gt_rtvthxg, c_playerAny, "-rtv thanksgiving", true);
    TriggerAddEventChatMessage(gt_rtvthxg, c_playerAny, "-rock the vote thxg", true);
    TriggerAddEventChatMessage(gt_rtvthxg, c_playerAny, "-rock the vote thanksgiving", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -clear
//--------------------------------------------------------------------------------------------------
bool gt_clear_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unitgroup lv_geysers;
    int[7][2] lv_refund;
    int lv_umv;
    int lv_ugv;
    int lv_i;
    string lv_output_string;

    // Automatic Variable Declarations
    unitgroup auto8B26AF0B_g;
    int auto8B26AF0B_u;
    unit auto8B26AF0B_var;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_geysers = UnitGroupEmpty();
    lv_i = 1;
    lv_output_string = "";

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_geysers = UnitGroup(null, c_playerAny, RegionFromName(("geysers p" + IntToString(gv_players[lv_player].lv_position))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8B26AF0B_g = lv_geysers;
    auto8B26AF0B_u = UnitGroupCount(auto8B26AF0B_g, c_unitCountAll);
    for (;; auto8B26AF0B_u -= 1) {
        auto8B26AF0B_var = UnitGroupUnitFromEnd(auto8B26AF0B_g, auto8B26AF0B_u);
        if (auto8B26AF0B_var == null) { break; }
        if ((UnitGetOwner(auto8B26AF0B_var) != lv_player) && (UnitGetOwner(auto8B26AF0B_var) != 7) && (UnitGetOwner(auto8B26AF0B_var) != 0)) {
            UnitKill(auto8B26AF0B_var);
            lv_umv = UnitTypeGetCost(UnitGetType(auto8B26AF0B_var), c_unitCostMinerals);
            lv_refund[UnitGetOwner(auto8B26AF0B_var)][0] = (lv_refund[UnitGetOwner(auto8B26AF0B_var)][0] + (lv_umv / 2));
            lv_ugv = UnitTypeGetCost(UnitGetType(auto8B26AF0B_var), c_unitCostVespene);
            lv_refund[UnitGetOwner(auto8B26AF0B_var)][1] = (lv_refund[UnitGetOwner(auto8B26AF0B_var)][1] + (lv_ugv / 2));
            PlayerModifyPropertyInt(UnitGetOwner(auto8B26AF0B_var), c_playerPropMinerals, c_playerPropOperAdd, (lv_umv / 2));
            PlayerModifyPropertyInt(UnitGetOwner(auto8B26AF0B_var), c_playerPropVespene, c_playerPropOperAdd, (lv_ugv / 2));
            lv_umv = 0;
            lv_ugv = 0;
        }

    }
    while ((lv_i <= 6)) {
        lv_output_string = "";
        if (((lv_refund[lv_i][0] > 0) || (lv_refund[lv_i][1] > 0))) {
            lv_output_string = ("(" + (IntToString(lv_refund[lv_i][0]) + ("/" + (IntToString(lv_refund[lv_i][1]) + ")"))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, ((PlayerName(lv_i) + StringExternal("Param/Value/13F996AD")) + (StringToText(lv_output_string) + StringExternal("Param/Value/E4B0AABC"))));
        }

        lv_i += 1;
    }
    UnitGroupClear(lv_geysers);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_clear_Init () {
    gt_clear = TriggerCreate("gt_clear_Func");
    TriggerAddEventChatMessage(gt_clear, c_playerAny, "-clear", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -debug
//--------------------------------------------------------------------------------------------------
bool gt_debug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debug_mode == 1)) {
        gv_debug_mode = 0;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/F561AF29") + StringToText("")));
    }
    else {
        gv_debug_mode = 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/9C37AD44") + StringToText("")));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_debug_Init () {
    gt_debug = TriggerCreate("gt_debug_Func");
    TriggerAddEventChatMessage(gt_debug, c_playerAny, "-debug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -debug_elo
//--------------------------------------------------------------------------------------------------
bool gt_debug_elo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto34934756_g;
    int auto34934756_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_practice_mode == true) || (gf_is_player_dev(EventPlayer()) == true))) {
        auto34934756_g = gv_terrans;
        auto34934756_var = -1;
        while (true) {
            auto34934756_var = PlayerGroupNextPlayer(auto34934756_g, auto34934756_var);
            if (auto34934756_var < 0) { break; }
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (PlayerName(auto34934756_var) + StringExternal("Param/Value/7A987D02") + IntToText(gf_get_player_elo_rating(auto34934756_var)) + StringExternal("Param/Value/21C051C7") + IntToText(MinI(gv_players[auto34934756_var].lv_games, 100))));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_debug_elo_Init () {
    gt_debug_elo = TriggerCreate("gt_debug_elo_Func");
    TriggerAddEventChatMessage(gt_debug_elo, c_playerAny, "-debug_elo", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -debug_lag
//--------------------------------------------------------------------------------------------------
bool gt_debug_lag_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_practice_mode == true) || (gf_is_player_dev(EventPlayer()) == true))) {
        TriggerDebugWindowOpen(true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_debug_lag_Init () {
    gt_debug_lag = TriggerCreate("gt_debug_lag_Func");
    TriggerAddEventChatMessage(gt_debug_lag, c_playerAny, "-debug_lag", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -energy
//--------------------------------------------------------------------------------------------------
bool gt_energy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBE865BF0_g;
    int autoBE865BF0_u;
    unit autoBE865BF0_var;

    // Conditions
    if (testConds) {
        if (!((gv_practice_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBE865BF0_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBE865BF0_u = UnitGroupCount(autoBE865BF0_g, c_unitCountAll);
    for (;; autoBE865BF0_u -= 1) {
        autoBE865BF0_var = UnitGroupUnitFromEnd(autoBE865BF0_g, autoBE865BF0_u);
        if (autoBE865BF0_var == null) { break; }
        UnitSetPropertyFixed(autoBE865BF0_var, c_unitPropEnergyRegen, 1000.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_energy_Init () {
    gt_energy = TriggerCreate("gt_energy_Func");
    TriggerAddEventChatMessage(gt_energy, c_playerAny, "-energy", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -help
//--------------------------------------------------------------------------------------------------
bool gt_help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/8C0FD4D8"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_help_Init () {
    gt_help = TriggerCreate("gt_help_Func");
    TriggerAddEventChatMessage(gt_help, c_playerAny, "-help", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -karax
//--------------------------------------------------------------------------------------------------
bool gt_karax_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_no_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_practice_mode == true)) {
        gf_create_karax_for_player(EventPlayer(), lv_no_point);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_karax_Init () {
    gt_karax = TriggerCreate("gt_karax_Func");
    TriggerAddEventChatMessage(gt_karax, c_playerAny, "-karax", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -drone
//--------------------------------------------------------------------------------------------------
bool gt_drone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_no_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_practice_mode == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MechaDrone", 0, 1, PointFromId(1384876706));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_drone_Init () {
    gt_drone = TriggerCreate("gt_drone_Func");
    TriggerAddEventChatMessage(gt_drone, c_playerAny, "-dronedev", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -money
//--------------------------------------------------------------------------------------------------
bool gt_money_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_practice_mode == true)) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 50000);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 50000);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropTerrazine, c_playerPropOperSetTo, 50000);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_money_Init () {
    gt_money = TriggerCreate("gt_money_Func");
    TriggerAddEventChatMessage(gt_money, c_playerAny, "-money", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -money_zerg
//--------------------------------------------------------------------------------------------------
bool gt_money_zerg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_practice_mode == true)) {
        PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperAdd, 50000);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_money_zerg_Init () {
    gt_money_zerg = TriggerCreate("gt_money_zerg_Func");
    TriggerAddEventChatMessage(gt_money_zerg, c_playerAny, "-money_zerg", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -reveal
//--------------------------------------------------------------------------------------------------
bool gt_reveal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_practice_mode == true)) {
        VisRevealArea(EventPlayer(), RegionEntireMap(), 30.0, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_reveal_Init () {
    gt_reveal = TriggerCreate("gt_reveal_Func");
    TriggerAddEventChatMessage(gt_reveal, c_playerAny, "-reveal", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -italis
//--------------------------------------------------------------------------------------------------
bool gt_italis_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_practice_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Italis", 0, EventPlayer(), PointFromName(("Zerg Rally " + IntToString(gv_players[EventPlayer()].lv_position))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_italis_Init () {
    gt_italis = TriggerCreate("gt_italis_Func");
    TriggerAddEventChatMessage(gt_italis, c_playerAny, "-italis", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -inf
//--------------------------------------------------------------------------------------------------
bool gt_inf_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gv_practice_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = PointFromName(("Zerg Rally " + IntToString(gv_players[lv_player].lv_position)));
    PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperSetTo, 100000);
    PlayerModifyPropertyInt(1, c_playerPropVespene, c_playerPropOperSetTo, 100000);
    if ((gf_is_3v3() == true)) {
        PlayerModifyPropertyInt(1, c_playerPropTerrazine, c_playerPropOperSetTo, 9999);
    }

    VisRevealArea(1, RegionEntireMap(), 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_inf_Init () {
    gt_inf = TriggerCreate("gt_inf_Func");
    TriggerAddEventChatMessage(gt_inf, c_playerAny, "-inf", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -immortal
//--------------------------------------------------------------------------------------------------
bool gt_immortal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_p;

    // Automatic Variable Declarations
    unitgroup auto2669CBCC_g;
    int auto2669CBCC_u;
    unit auto2669CBCC_var;
    unitgroup auto0282E90E_g;
    int auto0282E90E_u;
    unit auto0282E90E_var;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gv_practice_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2669CBCC_g = UnitGroup("TerranGate", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2669CBCC_u = UnitGroupCount(auto2669CBCC_g, c_unitCountAll);
    for (;; auto2669CBCC_u -= 1) {
        auto2669CBCC_var = UnitGroupUnitFromEnd(auto2669CBCC_g, auto2669CBCC_u);
        if (auto2669CBCC_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto2669CBCC_var, true);
    }
    auto0282E90E_g = UnitGroup("Repulsor", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0282E90E_u = UnitGroupCount(auto0282E90E_g, c_unitCountAll);
    for (;; auto0282E90E_u -= 1) {
        auto0282E90E_var = UnitGroupUnitFromEnd(auto0282E90E_g, auto0282E90E_u);
        if (auto0282E90E_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto0282E90E_var, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_immortal_Init () {
    gt_immortal = TriggerCreate("gt_immortal_Func");
    TriggerAddEventChatMessage(gt_immortal, c_playerAny, "-immortal", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -eggcluster test
//--------------------------------------------------------------------------------------------------
bool gt_eggclustertest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gv_practice_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_mgc_create_mgc_position();
    gf_mgc_create_mgc_position();
    gf_mgc_create_mgc_position();
    gf_mgc_create_mgc_position();
    gf_mgc_create_mgc_position();
    gf_mgc_create_mgc_position();
    gf_mgc_create_mgc_position();
    gf_mgc_create_mgc_position();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_eggclustertest_Init () {
    gt_eggclustertest = TriggerCreate("gt_eggclustertest_Func");
    TriggerAddEventChatMessage(gt_eggclustertest, c_playerAny, "-eggcluster test", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -create frostyspawners
//--------------------------------------------------------------------------------------------------
bool gt_createfrostyspawners_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_p;
    bool lv_d;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_i = 1;

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gv_practice_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_d == false)) {
        lv_p = null;
        lv_p = RegionRandomPoint(RegionFromName(("Bonus " + IntToString(lv_i))));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FrostySpawner", 0, 7, lv_p);
        if ((lv_i == 40)) {
            lv_d = true;
        }
        else {
            lv_i = (lv_i + 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_createfrostyspawners_Init () {
    gt_createfrostyspawners = TriggerCreate("gt_createfrostyspawners_Func");
    TriggerAddEventChatMessage(gt_createfrostyspawners, c_playerAny, "-create frostyspawners", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -makemegenetron
//--------------------------------------------------------------------------------------------------
bool gt_makemegenetron_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gv_practice_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_make_player_genetron(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_makemegenetron_Init () {
    gt_makemegenetron = TriggerCreate("gt_makemegenetron_Func");
    TriggerAddEventChatMessage(gt_makemegenetron, c_playerAny, "-makemegenetron", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -cheat
//--------------------------------------------------------------------------------------------------
bool gt_cheat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gv_practice_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = PointFromName(("Zerg Rally " + IntToString(gv_players[lv_player].lv_position)));
    PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(lv_player, c_playerPropMinerals) + 275));
    PlayerModifyPropertyInt(lv_player, c_playerPropVespene, c_playerPropOperSetTo, (PlayerGetPropertyInt(lv_player, c_playerPropVespene) + 275));
    gf_create_raynor_support_forplayer(lv_player);
    gf_create_marauder_support_forplayer(lv_player);
    gf_create_artanis_support_forplayer(lv_player);
    gf_create_tank_support_forplayer(lv_player);
    gf_create_probius_support_forplayer(lv_player);
    gv_players[lv_player].lv_support_type = "Artanis";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_cheat_Init () {
    gt_cheat = TriggerCreate("gt_cheat_Func");
    TriggerAddEventChatMessage(gt_cheat, c_playerAny, "-cheat", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -disable tutorial
//--------------------------------------------------------------------------------------------------
bool gt_disabletutorial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_i = 1;

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gv_players[lv_player].lv_wants_tutorial == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_players[lv_player].lv_wants_tutorial = 0;
    while ((lv_i <= gv_players[lv_player].lv_tutorial_stage)) {
        ObjectiveSetState(gv_objectives[lv_player][lv_i], c_objectiveStateHidden);
        lv_i += 1;
    }
    if ((gv_players[lv_player].lv_tutorial_stage >= 2)) {
        ObjectiveSetState(gv_bonus_objectives[lv_player][1], c_objectiveStateHidden);
        ObjectiveSetState(gv_bonus_objectives[lv_player][2], c_objectiveStateHidden);
    }

    if ((gv_players[lv_player].lv_tutorial_stage >= 5)) {
        ObjectiveSetState(gv_bonus_objectives[lv_player][3], c_objectiveStateHidden);
    }

    if ((gv_players[lv_player].lv_tutorial_stage >= 8)) {
        ObjectiveSetState(gv_bonus_objectives[lv_player][4], c_objectiveStateHidden);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_disabletutorial_Init () {
    gt_disabletutorial = TriggerCreate("gt_disabletutorial_Func");
    TriggerAddEventChatMessage(gt_disabletutorial, c_playerAny, "-disable tutorial", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -tutorial
//--------------------------------------------------------------------------------------------------
bool gt_tutorial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_i = 1;

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gv_players[lv_player].lv_wants_tutorial == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_players[lv_player].lv_wants_tutorial = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tutorial_Init () {
    gt_tutorial = TriggerCreate("gt_tutorial_Func");
    TriggerAddEventChatMessage(gt_tutorial, c_playerAny, "-tutorial", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player binds units
//--------------------------------------------------------------------------------------------------
bool gt_Playerbindsunits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_key_int;
    unitgroup lv_ug;
    unit lv_u;
    string lv_ut;

    // Automatic Variable Declarations
    int auto7A47CAE8_val;

    // Variable Initialization
    lv_ug = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto7A47CAE8_val = EventKeyPressed();
    if (auto7A47CAE8_val == c_key0) {
        lv_key_int = 0;
    }
    else if (auto7A47CAE8_val == c_key1) {
        lv_key_int = 1;
    }
    else if (auto7A47CAE8_val == c_key2) {
        lv_key_int = 2;
    }
    else if (auto7A47CAE8_val == c_key3) {
        lv_key_int = 3;
    }
    else if (auto7A47CAE8_val == c_key4) {
        lv_key_int = 4;
    }
    else if (auto7A47CAE8_val == c_key5) {
        lv_key_int = 5;
    }
    else if (auto7A47CAE8_val == c_key6) {
        lv_key_int = 6;
    }
    else if (auto7A47CAE8_val == c_key7) {
        lv_key_int = 7;
    }
    else if (auto7A47CAE8_val == c_key8) {
        lv_key_int = 8;
    }
    else if (auto7A47CAE8_val == c_key9) {
        lv_key_int = 9;
    }
    else {
    }
    lv_ug = UnitGroupSelected(EventPlayer());
    if ((UnitGroupCount(lv_ug, c_unitCountAlive) == 1)) {
        lv_u = UnitGroupUnit(lv_ug, 1);
        lv_ut = UnitGetType(lv_u);
    }

    if (((lv_ut == "TechLab3") || (lv_ut == "Barracks2") || (lv_ut == "CommandCenter2") || (lv_ut == "Generator"))) {
        BankValueSetFromString(gv_players[EventPlayer()].lv_bank, "keybinds", ("key" + IntToString(lv_key_int)), (lv_ut));
        BankOptionSet(gv_players[EventPlayer()].lv_bank, c_bankOptionSignature, true);
        BankSave(gv_players[EventPlayer()].lv_bank);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Playerbindsunits_Init () {
    gt_Playerbindsunits = TriggerCreate("gt_Playerbindsunits_Func");
    TriggerAddEventKeyPressed(gt_Playerbindsunits, c_playerAny, c_key1, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(gt_Playerbindsunits, c_playerAny, c_key2, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(gt_Playerbindsunits, c_playerAny, c_key3, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(gt_Playerbindsunits, c_playerAny, c_key4, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(gt_Playerbindsunits, c_playerAny, c_key5, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(gt_Playerbindsunits, c_playerAny, c_key6, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(gt_Playerbindsunits, c_playerAny, c_key7, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(gt_Playerbindsunits, c_playerAny, c_key8, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(gt_Playerbindsunits, c_playerAny, c_key9, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(gt_Playerbindsunits, c_playerAny, c_key0, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Techlab finished
//--------------------------------------------------------------------------------------------------
bool gt_Techlabfinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    string lv_kbs;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_kbs = "";

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "TechLab3"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_i <= 9)) {
        lv_kbs = BankValueGetAsString(gv_players[UnitGetOwner(EventUnitProgressUnit())].lv_bank, "keybinds", ("key" + IntToString(lv_i)));
        if ((lv_kbs == (UnitGetType(EventUnitProgressUnit())))) {
            UnitControlGroupAddUnit(UnitGetOwner(EventUnitProgressUnit()), lv_i, EventUnitProgressUnit());
            lv_i += 10;
        }
        else {
            lv_i += 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Techlabfinished_Init () {
    gt_Techlabfinished = TriggerCreate("gt_Techlabfinished_Func");
    TriggerAddEventUnitConstructProgress(gt_Techlabfinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karax Death Timer
//--------------------------------------------------------------------------------------------------
bool gt_KaraxDeathTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    point lv_no_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "KaraxChampion"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owner = UnitGetOwner(EventUnit());
    UIDisplayMessage(PlayerGroupSingle(lv_owner), c_messageAreaChat, StringExternal("Param/Value/1384C7EF"));
    UIDisplayMessage(PlayerGroupSingle(lv_owner), c_messageAreaChat, StringExternal("Param/Value/4B0EE28B"));
    Wait(10.0, c_timeGame);
    UIDisplayMessage(PlayerGroupSingle(lv_owner), c_messageAreaChat, StringExternal("Param/Value/BF7D0FF4"));
    Wait(10.0, c_timeGame);
    gf_create_karax_for_player(lv_owner, lv_no_point);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KaraxDeathTimer_Init () {
    gt_KaraxDeathTimer = TriggerCreate("gt_KaraxDeathTimer_Func");
    TriggerAddEventUnitDied(gt_KaraxDeathTimer, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -test forced_mid_buff
//--------------------------------------------------------------------------------------------------
bool gt_testforced_mid_buff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_p;
    unit lv_generator;

    // Automatic Variable Declarations
    playergroup autoF38D97DB_g;
    int autoF38D97DB_var;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gv_practice_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF38D97DB_g = gv_terrans;
    autoF38D97DB_var = -1;
    while (true) {
        autoF38D97DB_var = PlayerGroupNextPlayer(autoF38D97DB_g, autoF38D97DB_var);
        if (autoF38D97DB_var < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine2", 0, autoF38D97DB_var, PointFromName(("Zerg Rally " + IntToString(gv_players[autoF38D97DB_var].lv_position))));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighDensityBattery", 0, autoF38D97DB_var, PointFromName(("Zerg Rally " + IntToString(gv_players[autoF38D97DB_var].lv_position))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        lv_generator = UnitGroupRandomUnit(UnitGroup("Generator", autoF38D97DB_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive);
        UnitSetPropertyFixed(lv_generator, c_unitPropEnergy, (UnitGetPropertyInt(lv_generator, c_unitPropEnergy, c_unitPropCurrent) + 99999));
        UnitSetPropertyFixed(lv_generator, c_unitPropEnergyMax, (UnitGetPropertyInt(lv_generator, c_unitPropEnergyMax, c_unitPropCurrent) + 99999));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_testforced_mid_buff_Init () {
    gt_testforced_mid_buff = TriggerCreate("gt_testforced_mid_buff_Func");
    TriggerAddEventChatMessage(gt_testforced_mid_buff, c_playerAny, "-test forced_mid_buff", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Veteran gets promoted
//--------------------------------------------------------------------------------------------------
bool gt_Veterangetspromoted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_owner;
    int lv_cg;

    // Automatic Variable Declarations
    int autoD0971710_val;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_owner = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_players[lv_owner].lv_eliteskin != 0)) {
        autoD0971710_val = gv_players[lv_owner].lv_eliteskin;
        if (autoD0971710_val == 1) {
            libNtve_gf_ReplaceUnit(lv_unit, "EliteMarineSkin1", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoD0971710_val == 2) {
            libNtve_gf_ReplaceUnit(lv_unit, "EliteMarineSkin3", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoD0971710_val == 3) {
            libNtve_gf_ReplaceUnit(lv_unit, "EliteMarineSkin2", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoD0971710_val == 4) {
            libNtve_gf_ReplaceUnit(lv_unit, "EliteMarineSkin4", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else {
            libNtve_gf_ReplaceUnit(lv_unit, "EliteMarine", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
    }
    else {
        libNtve_gf_ReplaceUnit(lv_unit, "EliteMarine", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }
    libNtve_gf_CopyUnitControlGroups(lv_unit, libNtve_gf_LastReplacedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Veterangetspromoted_Init () {
    gt_Veterangetspromoted = TriggerCreate("gt_Veterangetspromoted_Func");
    TriggerAddEventUnitAbility(gt_Veterangetspromoted, null, AbilityCommand("PromoteToElite", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Skin Jimmy got selected
//--------------------------------------------------------------------------------------------------
bool gt_SkinJimmygotselected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeAbilityAllow(lv_player, AbilityCommand("BarracksTrain2", 2), false);
    TechTreeAbilityAllow(lv_player, AbilityCommand("BarracksTrain2", 8), true);
    gv_players[lv_player].lv_eliteskin = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkinJimmygotselected_Init () {
    gt_SkinJimmygotselected = TriggerCreate("gt_SkinJimmygotselected_Func");
    TriggerAddEventUnitAbility(gt_SkinJimmygotselected, null, AbilityCommand("CCSkinSwitcher", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Skin Madaxe got selected
//--------------------------------------------------------------------------------------------------
bool gt_SkinMadaxegotselected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeAbilityAllow(lv_player, AbilityCommand("BarracksTrain2", 2), false);
    TechTreeAbilityAllow(lv_player, AbilityCommand("BarracksTrain2", 10), true);
    gv_players[lv_player].lv_eliteskin = 2;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkinMadaxegotselected_Init () {
    gt_SkinMadaxegotselected = TriggerCreate("gt_SkinMadaxegotselected_Func");
    TriggerAddEventUnitAbility(gt_SkinMadaxegotselected, null, AbilityCommand("CCSkinSwitcher", 2), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Skin Ultimate got selected
//--------------------------------------------------------------------------------------------------
bool gt_SkinUltimategotselected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeAbilityAllow(lv_player, AbilityCommand("BarracksTrain2", 2), false);
    TechTreeAbilityAllow(lv_player, AbilityCommand("BarracksTrain2", 9), true);
    gv_players[lv_player].lv_eliteskin = 3;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkinUltimategotselected_Init () {
    gt_SkinUltimategotselected = TriggerCreate("gt_SkinUltimategotselected_Func");
    TriggerAddEventUnitAbility(gt_SkinUltimategotselected, null, AbilityCommand("CCSkinSwitcher", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Skin marshall got selected
//--------------------------------------------------------------------------------------------------
bool gt_Skinmarshallgotselected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeAbilityAllow(lv_player, AbilityCommand("BarracksTrain2", 2), false);
    TechTreeAbilityAllow(lv_player, AbilityCommand("BarracksTrain2", 12), true);
    gv_players[lv_player].lv_eliteskin = 4;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Skinmarshallgotselected_Init () {
    gt_Skinmarshallgotselected = TriggerCreate("gt_Skinmarshallgotselected_Func");
    TriggerAddEventUnitAbility(gt_Skinmarshallgotselected, null, AbilityCommand("CCSkinSwitcher", 4), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Lab Warp Italis Cost
//--------------------------------------------------------------------------------------------------
bool gt_TechLabWarpItalisCost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Italis"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "TechLabCharge", 25);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TechLabWarpItalisCost_Init () {
    gt_TechLabWarpItalisCost = TriggerCreate("gt_TechLabWarpItalisCost_Func");
    TriggerAddEventUnitCreated(gt_TechLabWarpItalisCost, null, "TechLabWarpTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Lab Charge Apply
//--------------------------------------------------------------------------------------------------
bool gt_TechLabChargeApply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto54392B83_g;
    int auto54392B83_u;
    unit auto54392B83_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "TechLabCharge", UnitBehaviorCount(EventUnit(), EventUnitBehavior()));
    if ((gv_players[UnitGetOwner(EventUnit())].lv_support_type == "Probius")) {
        if ((UnitGetType(EventUnit()) == "TechLab3")) {
            auto54392B83_g = UnitGroup("ProbiusPylon", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto54392B83_u = UnitGroupCount(auto54392B83_g, c_unitCountAll);
            for (;; auto54392B83_u -= 1) {
                auto54392B83_var = UnitGroupUnitFromEnd(auto54392B83_g, auto54392B83_u);
                if (auto54392B83_var == null) { break; }
                libNtve_gf_SetBehaviorCount(auto54392B83_var, EventUnitBehavior(), auto54392B83_var, UnitBehaviorCount(EventUnit(), EventUnitBehavior()));
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TechLabChargeApply_Init () {
    gt_TechLabChargeApply = TriggerCreate("gt_TechLabChargeApply_Func");
    TriggerAddEventUnitBehaviorChange(gt_TechLabChargeApply, null, "TechLabCharge", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(gt_TechLabChargeApply, null, "TechLabCharge", c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ion Cannon Notification
//--------------------------------------------------------------------------------------------------
bool gt_IonCannonNotification_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ping;
    string lv_s;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = c_invalidPingId;
    lv_s = "";
    lv_owner = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    lv_s = "Ion Cannon activated by ";
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringToText(lv_s) + TextWithColor(PlayerName(lv_owner), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_owner, false)))));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(EventUnitCreatedUnit()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_owner, false)), 30.0, 270.0);
    lv_ping = PingLastCreated();
    while ((!((UnitIsAlive(EventUnitCreatedUnit()) == false)))) {
        PingSetPosition(lv_ping, UnitGetPosition(EventUnitCreatedUnit()));
        Wait(1.0, c_timeGame);
    }
    PingDestroy(lv_ping);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IonCannonNotification_Init () {
    gt_IonCannonNotification = TriggerCreate("gt_IonCannonNotification_Func");
    TriggerAddEventUnitCreated(gt_IonCannonNotification, null, "IonCannon", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gas Extraction Finished
//--------------------------------------------------------------------------------------------------
bool gt_GasExtractionFinished_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ConstructionYard"))) {
            return false;
        }

        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "GasExtraction") || (libNtve_gf_TriggeringProgressUpgrade() == "GasExtraction2") || (libNtve_gf_TriggeringProgressUpgrade() == "GasExtraction3")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "GasExtraction", EventUnit(), 1);
    gv_players[UnitGetOwner(EventUnit())].lv_gas_extraction += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GasExtractionFinished_Init () {
    gt_GasExtractionFinished = TriggerCreate("gt_GasExtractionFinished_Func");
    TriggerAddEventUnitResearchProgress(gt_GasExtractionFinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: probius increased income finished
//--------------------------------------------------------------------------------------------------
bool gt_probiusincreasedincomefinished_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto91F062DC_g;
    int auto91F062DC_u;
    unit auto91F062DC_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Forge"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() == "IncreasedPylonIncome"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_players[UnitGetOwner(EventUnit())].lv_probius_increased_income = true;
    auto91F062DC_g = UnitGroup("ProbiusPylon", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto91F062DC_u = UnitGroupCount(auto91F062DC_g, c_unitCountAll);
    for (;; auto91F062DC_u -= 1) {
        auto91F062DC_var = UnitGroupUnitFromEnd(auto91F062DC_g, auto91F062DC_u);
        if (auto91F062DC_var == null) { break; }
        if ((UnitHasBehavior2(auto91F062DC_var, "ProbiusPylonBuffAuraAttack") == false) && (UnitHasBehavior2(auto91F062DC_var, "ProbiusPylonBuffAuraDefense") == false) && (UnitHasBehavior2(auto91F062DC_var, "ProbiusPylonBuffAuraPower") == false)) {
            UnitBehaviorRemove(auto91F062DC_var, "GenerateMinerals", 1);
            UnitBehaviorRemove(auto91F062DC_var, "VespeneHarvestingUnlimited", 1);
            UnitBehaviorAdd(auto91F062DC_var, "GenerateMineralsCowFarm", auto91F062DC_var, 1);
            UnitBehaviorAdd(auto91F062DC_var, "UpgradedVespeneHarvestingUnlimited", auto91F062DC_var, 1);
        }
        else {
            UnitBehaviorAdd(auto91F062DC_var, "GenerateMinerals", auto91F062DC_var, 1);
            UnitBehaviorAdd(auto91F062DC_var, "VespeneHarvestingUnlimited", auto91F062DC_var, 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_probiusincreasedincomefinished_Init () {
    gt_probiusincreasedincomefinished = TriggerCreate("gt_probiusincreasedincomefinished_Func");
    TriggerAddEventUnitResearchProgress(gt_probiusincreasedincomefinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: probius pylon finished
//--------------------------------------------------------------------------------------------------
bool gt_probiuspylonfinished_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "ProbiusPylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_players[UnitGetOwner(EventUnitProgressUnit())].lv_probius_increased_income == true)) {
        UnitBehaviorRemove(EventUnitProgressUnit(), "GenerateMinerals", 1);
        UnitBehaviorRemove(EventUnitProgressUnit(), "VespeneHarvestingUnlimited", 1);
        UnitBehaviorAdd(EventUnitProgressUnit(), "GenerateMineralsCowFarm", EventUnitProgressUnit(), 1);
        UnitBehaviorAdd(EventUnitProgressUnit(), "UpgradedVespeneHarvestingUnlimited", EventUnitProgressUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_probiuspylonfinished_Init () {
    gt_probiuspylonfinished = TriggerCreate("gt_probiuspylonfinished_Func");
    TriggerAddEventUnitConstructProgress(gt_probiuspylonfinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy Upgrade Finished
//--------------------------------------------------------------------------------------------------
bool gt_EnergyUpgradeFinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    int autoD223BE50_val;
    int autoFDE39493_val;

    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "Generator"))) {
            return false;
        }

        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "EnergyGeneration") || (libNtve_gf_TriggeringProgressUpgrade() == "EnergyGenerationCapacity")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameAttributeGameValue("1") != "0002")) {
        autoD223BE50_val = gv_players[UnitGetOwner(lv_unit)].lv_energy_ups;
        if (autoD223BE50_val == 0) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades0", 1);
        }
        else if (autoD223BE50_val == 1) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades1", 1);
        }
        else if (autoD223BE50_val == 2) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades2", 1);
        }
        else if (autoD223BE50_val == 3) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades3", 1);
        }
        else if (autoD223BE50_val == 4) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades4", 1);
        }
        else if (autoD223BE50_val == 5) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades5", 1);
        }
        else if (autoD223BE50_val == 6) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades6", 1);
        }
        else if (autoD223BE50_val == 7) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades7", 1);
        }
        else if (autoD223BE50_val == 8) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades8", 1);
        }
        else if (autoD223BE50_val == 9) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades9", 1);
        }
        else if (autoD223BE50_val == 10) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades10", 1);
        }
        else if (autoD223BE50_val == 11) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades11", 1);
        }
        else if (autoD223BE50_val == 12) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades12", 1);
        }
        else if (autoD223BE50_val == 13) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades13", 1);
        }
        else if (autoD223BE50_val == 14) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades14", 1);
        }
        else if (autoD223BE50_val == 15) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades15", 1);
        }
        else if (autoD223BE50_val == 16) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades16", 1);
        }
        else if (autoD223BE50_val == 17) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades17", 1);
        }
        else if (autoD223BE50_val == 18) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades18", 1);
        }
        else if (autoD223BE50_val == 19) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades19", 1);
        }
        else if (autoD223BE50_val == 20) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades20", 1);
        }
        else if (autoD223BE50_val == 21) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades21", 1);
        }
        else if (autoD223BE50_val == 22) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades22", 1);
        }
        else if (autoD223BE50_val == 23) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades23", 1);
        }
        else if (autoD223BE50_val == 24) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades24", 1);
        }
        else if (autoD223BE50_val == 25) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades25", 1);
        }
        else if (autoD223BE50_val == 26) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades26", 1);
        }
        else if (autoD223BE50_val == 27) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades27", 1);
        }
        else if (autoD223BE50_val == 28) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades28", 1);
        }
        else if (autoD223BE50_val == 29) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades29", 1);
        }
        else if (autoD223BE50_val == 30) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades30", 1);
        }
        else if (autoD223BE50_val == 31) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades31", 1);
        }
        else if (autoD223BE50_val == 32) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades32", 1);
        }
        else if (autoD223BE50_val == 33) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades33", 1);
        }
        else if (autoD223BE50_val == 34) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades34", 1);
        }
        else if (autoD223BE50_val == 35) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades35", 1);
        }
        else if (autoD223BE50_val == 36) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades36", 1);
        }
        else if (autoD223BE50_val == 37) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades37", 1);
        }
        else if (autoD223BE50_val == 38) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades38", 1);
        }
        else if (autoD223BE50_val == 39) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades39", 1);
        }
        else if (autoD223BE50_val == 40) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades40", 1);
        }
        else if (autoD223BE50_val == 41) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades41", 1);
        }
        else if (autoD223BE50_val == 42) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades42", 1);
        }
        else if (autoD223BE50_val == 43) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades43", 1);
        }
        else if (autoD223BE50_val == 44) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades44", 1);
        }
        else if (autoD223BE50_val == 45) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades45", 1);
        }
        else if (autoD223BE50_val == 46) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades46", 1);
        }
        else if (autoD223BE50_val == 47) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades47", 1);
        }
        else if (autoD223BE50_val == 48) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades48", 1);
        }
        else if (autoD223BE50_val == 49) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades49", 1);
        }
        else if (autoD223BE50_val == 50) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades50", 1);
        }
        else if (autoD223BE50_val == 51) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades51", 1);
        }
        else if (autoD223BE50_val == 52) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades52", 1);
        }
        else if (autoD223BE50_val == 53) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades53", 1);
        }
        else if (autoD223BE50_val == 54) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades54", 1);
        }
        else if (autoD223BE50_val == 55) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades55", 1);
        }
        else if (autoD223BE50_val == 56) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades56", 1);
        }
        else if (autoD223BE50_val == 57) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades57", 1);
        }
        else if (autoD223BE50_val == 58) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades58", 1);
        }
        else if (autoD223BE50_val == 59) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades59", 1);
        }
        else if (autoD223BE50_val == 60) {
            UnitBehaviorRemove(lv_unit, "GeneratorUpgrades60", 1);
        }
        else {
        }
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "EnergyGenerationCapacity")) {
        gv_players[UnitGetOwner(lv_unit)].lv_energy_ups += 10;
    }
    else {
        gv_players[UnitGetOwner(lv_unit)].lv_energy_ups += 1;
    }
    if ((GameAttributeGameValue("1") != "0002")) {
        autoFDE39493_val = gv_players[UnitGetOwner(lv_unit)].lv_energy_ups;
        if (autoFDE39493_val == 0) {
        }
        else if (autoFDE39493_val == 1) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades1", lv_unit, 1);
        }
        else if (autoFDE39493_val == 2) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades2", lv_unit, 1);
        }
        else if (autoFDE39493_val == 3) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades3", lv_unit, 1);
        }
        else if (autoFDE39493_val == 4) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades4", lv_unit, 1);
        }
        else if (autoFDE39493_val == 5) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades5", lv_unit, 1);
        }
        else if (autoFDE39493_val == 6) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades6", lv_unit, 1);
        }
        else if (autoFDE39493_val == 7) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades7", lv_unit, 1);
        }
        else if (autoFDE39493_val == 8) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades8", lv_unit, 1);
        }
        else if (autoFDE39493_val == 9) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades9", lv_unit, 1);
        }
        else if (autoFDE39493_val == 10) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades10", lv_unit, 1);
        }
        else if (autoFDE39493_val == 11) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades11", lv_unit, 1);
        }
        else if (autoFDE39493_val == 12) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades12", lv_unit, 1);
        }
        else if (autoFDE39493_val == 13) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades13", lv_unit, 1);
        }
        else if (autoFDE39493_val == 14) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades14", lv_unit, 1);
        }
        else if (autoFDE39493_val == 15) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades15", lv_unit, 1);
        }
        else if (autoFDE39493_val == 16) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades16", lv_unit, 1);
        }
        else if (autoFDE39493_val == 17) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades17", lv_unit, 1);
        }
        else if (autoFDE39493_val == 18) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades18", lv_unit, 1);
        }
        else if (autoFDE39493_val == 19) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades19", lv_unit, 1);
        }
        else if (autoFDE39493_val == 20) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades20", lv_unit, 1);
        }
        else if (autoFDE39493_val == 21) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades21", lv_unit, 1);
        }
        else if (autoFDE39493_val == 22) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades22", lv_unit, 1);
        }
        else if (autoFDE39493_val == 23) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades23", lv_unit, 1);
        }
        else if (autoFDE39493_val == 24) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades24", lv_unit, 1);
        }
        else if (autoFDE39493_val == 25) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades25", lv_unit, 1);
        }
        else if (autoFDE39493_val == 26) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades26", lv_unit, 1);
        }
        else if (autoFDE39493_val == 27) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades27", lv_unit, 1);
        }
        else if (autoFDE39493_val == 28) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades28", lv_unit, 1);
        }
        else if (autoFDE39493_val == 29) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades29", lv_unit, 1);
        }
        else if (autoFDE39493_val == 30) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades30", lv_unit, 1);
        }
        else if (autoFDE39493_val == 31) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades31", lv_unit, 1);
        }
        else if (autoFDE39493_val == 32) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades32", lv_unit, 1);
        }
        else if (autoFDE39493_val == 33) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades33", lv_unit, 1);
        }
        else if (autoFDE39493_val == 34) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades34", lv_unit, 1);
        }
        else if (autoFDE39493_val == 35) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades35", lv_unit, 1);
        }
        else if (autoFDE39493_val == 36) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades36", lv_unit, 1);
        }
        else if (autoFDE39493_val == 37) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades37", lv_unit, 1);
        }
        else if (autoFDE39493_val == 38) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades38", lv_unit, 1);
        }
        else if (autoFDE39493_val == 39) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades39", lv_unit, 1);
        }
        else if (autoFDE39493_val == 40) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades40", lv_unit, 1);
        }
        else if (autoFDE39493_val == 41) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades41", lv_unit, 1);
        }
        else if (autoFDE39493_val == 42) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades42", lv_unit, 1);
        }
        else if (autoFDE39493_val == 43) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades43", lv_unit, 1);
        }
        else if (autoFDE39493_val == 44) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades44", lv_unit, 1);
        }
        else if (autoFDE39493_val == 45) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades45", lv_unit, 1);
        }
        else if (autoFDE39493_val == 46) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades46", lv_unit, 1);
        }
        else if (autoFDE39493_val == 47) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades47", lv_unit, 1);
        }
        else if (autoFDE39493_val == 48) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades48", lv_unit, 1);
        }
        else if (autoFDE39493_val == 49) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades49", lv_unit, 1);
        }
        else if (autoFDE39493_val == 50) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades50", lv_unit, 1);
        }
        else if (autoFDE39493_val == 51) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades51", lv_unit, 1);
        }
        else if (autoFDE39493_val == 52) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades52", lv_unit, 1);
        }
        else if (autoFDE39493_val == 53) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades53", lv_unit, 1);
        }
        else if (autoFDE39493_val == 54) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades54", lv_unit, 1);
        }
        else if (autoFDE39493_val == 55) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades55", lv_unit, 1);
        }
        else if (autoFDE39493_val == 56) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades56", lv_unit, 1);
        }
        else if (autoFDE39493_val == 57) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades57", lv_unit, 1);
        }
        else if (autoFDE39493_val == 58) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades58", lv_unit, 1);
        }
        else if (autoFDE39493_val == 59) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades59", lv_unit, 1);
        }
        else if (autoFDE39493_val == 60) {
            UnitBehaviorAdd(lv_unit, "GeneratorUpgrades60", lv_unit, 1);
        }
        else {
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyUpgradeFinished_Init () {
    gt_EnergyUpgradeFinished = TriggerCreate("gt_EnergyUpgradeFinished_Func");
    TriggerAddEventUnitResearchProgress(gt_EnergyUpgradeFinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pickup Locator Upgrade Finished
//--------------------------------------------------------------------------------------------------
bool gt_PickupLocatorUpgradeFinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "BarracksTechReactor"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() == "PickupLocator"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_players[UnitGetOwner(lv_unit)].lv_has_locator_upgrade = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickupLocatorUpgradeFinished_Init () {
    gt_PickupLocatorUpgradeFinished = TriggerCreate("gt_PickupLocatorUpgradeFinished_Func");
    TriggerAddEventUnitResearchProgress(gt_PickupLocatorUpgradeFinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pickup Doubler Upgrade Finished
//--------------------------------------------------------------------------------------------------
bool gt_PickupDoublerUpgradeFinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "BarracksTechReactor"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() == "DoubledRewards"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_players[UnitGetOwner(lv_unit)].lv_has_pickup_doubler = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickupDoublerUpgradeFinished_Init () {
    gt_PickupDoublerUpgradeFinished = TriggerCreate("gt_PickupDoublerUpgradeFinished_Func");
    TriggerAddEventUnitResearchProgress(gt_PickupDoublerUpgradeFinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Conyard Finished
//--------------------------------------------------------------------------------------------------
bool gt_ConyardFinished_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "ConstructionYard"))) {
            return false;
        }

        if (!((RegionContainsPoint(RegionFromName(("player " + IntToString(gv_players[UnitGetOwner(EventUnitProgressUnit())].lv_position))), UnitGetPosition(EventUnitProgressUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitProgressUnit(), "CanExtractGas", EventUnitProgressUnit(), 1);
    UnitBehaviorAdd(EventUnitProgressUnit(), "GasExtraction", EventUnitProgressUnit(), gv_players[UnitGetOwner(EventUnitProgressUnit())].lv_gas_extraction);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConyardFinished_Init () {
    gt_ConyardFinished = TriggerCreate("gt_ConyardFinished_Func");
    TriggerAddEventUnitConstructProgress(gt_ConyardFinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: No Weather got selected
//--------------------------------------------------------------------------------------------------
bool gt_NoWeathergotselected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_elo;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_elo = gv_players[EventPlayer()].lv_elo;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_players[lv_player].lv_weather = 0;
    gf_Remove_weather(gv_players[lv_player].lv_position);
    gf_Game_Banks_handler("changeweather", EventPlayer(), lv_elo, 0, 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ChooseRain", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ChooseSnow", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ChooseAsh", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NoWeathergotselected_Init () {
    gt_NoWeathergotselected = TriggerCreate("gt_NoWeathergotselected_Func");
    TriggerAddEventUnitAbility(gt_NoWeathergotselected, null, AbilityCommand("CCWeatherSwitcher", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rain got selected
//--------------------------------------------------------------------------------------------------
bool gt_Raingotselected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_elo;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_elo = gv_players[EventPlayer()].lv_elo;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_players[lv_player].lv_weather = 2;
    if (((gf_get_level_from_xp(gv_players[lv_player].lv_xp) >= 6) || (GameIsOnline() == false))) {
        gf_Create_weather(gv_players[lv_player].lv_position, 2, true);
    }
    else {
        gf_Create_weather(gv_players[lv_player].lv_position, 2, false);
    }
    gf_Game_Banks_handler("changeweather", EventPlayer(), lv_elo, 2, 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ChooseNoWeather", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ChooseSnow", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ChooseAsh", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Raingotselected_Init () {
    gt_Raingotselected = TriggerCreate("gt_Raingotselected_Func");
    TriggerAddEventUnitAbility(gt_Raingotselected, null, AbilityCommand("CCWeatherSwitcher", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Snow got selected
//--------------------------------------------------------------------------------------------------
bool gt_Snowgotselected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_elo;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_elo = gv_players[EventPlayer()].lv_elo;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_players[lv_player].lv_weather = 3;
    if (((gf_get_level_from_xp(gv_players[lv_player].lv_xp) >= 6) || (GameIsOnline() == false))) {
        gf_Create_weather(gv_players[lv_player].lv_position, 3, true);
    }
    else {
        gf_Create_weather(gv_players[lv_player].lv_position, 3, false);
    }
    gf_Game_Banks_handler("changeweather", EventPlayer(), lv_elo, 3, 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ChooseNoWeather", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ChooseRain", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ChooseAsh", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Snowgotselected_Init () {
    gt_Snowgotselected = TriggerCreate("gt_Snowgotselected_Func");
    TriggerAddEventUnitAbility(gt_Snowgotselected, null, AbilityCommand("CCWeatherSwitcher", 2), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ash got selected
//--------------------------------------------------------------------------------------------------
bool gt_Ashgotselected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_elo;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_elo = gv_players[EventPlayer()].lv_elo;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_players[lv_player].lv_weather = 1;
    if (((gf_get_level_from_xp(gv_players[lv_player].lv_xp) >= 6) || (GameIsOnline() == false))) {
        gf_Create_weather(gv_players[lv_player].lv_position, 1, true);
    }
    else {
        gf_Create_weather(gv_players[lv_player].lv_position, 1, false);
    }
    gf_Game_Banks_handler("changeweather", EventPlayer(), lv_elo, 1, 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ChooseNoWeather", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ChooseRain", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ChooseSnow", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ashgotselected_Init () {
    gt_Ashgotselected = TriggerCreate("gt_Ashgotselected_Func");
    TriggerAddEventUnitAbility(gt_Ashgotselected, null, AbilityCommand("CCWeatherSwitcher", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: hive_top_killed
//--------------------------------------------------------------------------------------------------
bool gt_hive_top_killed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto0FCD60F4_g;
    int auto0FCD60F4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0FCD60F4_g = gv_terrans_team_top;
    auto0FCD60F4_var = -1;
    while (true) {
        auto0FCD60F4_var = PlayerGroupNextPlayer(auto0FCD60F4_g, auto0FCD60F4_var);
        if (auto0FCD60F4_var < 0) { break; }
        PlayerModifyPropertyFixed(auto0FCD60F4_var, c_playerPropTerrazine, c_playerPropOperAdd, 3000.0);
        TechTreeUpgradeAddLevel(auto0FCD60F4_var, "HiveKilled", 1);
        TechTreeUpgradeAddLevel(gv_players[auto0FCD60F4_var].lv__3v3_zerg_pid, "HiveKilled", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_hive_top_killed_Init () {
    gt_hive_top_killed = TriggerCreate("gt_hive_top_killed_Func");
    TriggerEnable(gt_hive_top_killed, false);
    TriggerAddEventUnitDied(gt_hive_top_killed, UnitRefFromUnit(UnitFromId(706616818)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: hive_bottom_killed
//--------------------------------------------------------------------------------------------------
bool gt_hive_bottom_killed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto80DECFFE_g;
    int auto80DECFFE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto80DECFFE_g = gv_terrans_team_bottom;
    auto80DECFFE_var = -1;
    while (true) {
        auto80DECFFE_var = PlayerGroupNextPlayer(auto80DECFFE_g, auto80DECFFE_var);
        if (auto80DECFFE_var < 0) { break; }
        PlayerModifyPropertyFixed(auto80DECFFE_var, c_playerPropTerrazine, c_playerPropOperAdd, 3000.0);
        TechTreeUpgradeAddLevel(auto80DECFFE_var, "HiveKilled", 1);
        TechTreeUpgradeAddLevel(gv_players[auto80DECFFE_var].lv__3v3_zerg_pid, "HiveKilled", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_hive_bottom_killed_Init () {
    gt_hive_bottom_killed = TriggerCreate("gt_hive_bottom_killed_Func");
    TriggerEnable(gt_hive_bottom_killed, false);
    TriggerAddEventUnitDied(gt_hive_bottom_killed, UnitRefFromUnit(UnitFromId(478555519)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: -test fw
//--------------------------------------------------------------------------------------------------
bool gt_testfw_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gv_practice_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_shot_fireworks(20);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_testfw_Init () {
    gt_testfw = TriggerCreate("gt_testfw_Func");
    TriggerAddEventChatMessage(gt_testfw, c_playerAny, "-fw", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: remove_invalid_ion
//--------------------------------------------------------------------------------------------------
bool gt_remove_invalid_ion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tech_lab;
    point lv_target_point;
    region lv_valid_region;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tech_lab = EventUnit();
    lv_target_point = EventUnitTargetPoint();
    lv_valid_region = gf_get_region_of_influence_3v3(gv_players[UnitGetOwner(lv_tech_lab)].lv_position);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(lv_valid_region, lv_target_point) == true)) {
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/3FC6E54E"));
        lv_target_point = UnitGetPosition(lv_tech_lab);
        UnitRemove(lv_tech_lab);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TechLabCharge", 0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TechLab3", 0, UnitGetOwner(lv_tech_lab), lv_target_point);
        libNtve_gf_CopyUnitControlGroups(lv_tech_lab, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "TechLabCharge", UnitLastCreated(), 40);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_remove_invalid_ion_Init () {
    gt_remove_invalid_ion = TriggerCreate("gt_remove_invalid_ion_Func");
    TriggerEnable(gt_remove_invalid_ion, false);
    TriggerAddEventUnitAbility(gt_remove_invalid_ion, null, AbilityCommand("IonCannon", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: protect_top_hive_from_allies
//--------------------------------------------------------------------------------------------------
bool gt_protect_top_hive_from_allies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_terrans_team_bottom, EventUnitDamageSourcePlayer()) == true)) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + EventUnitDamageAmount()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_protect_top_hive_from_allies_Init () {
    gt_protect_top_hive_from_allies = TriggerCreate("gt_protect_top_hive_from_allies_Func");
    TriggerEnable(gt_protect_top_hive_from_allies, false);
    TriggerAddEventUnitDamaged(gt_protect_top_hive_from_allies, UnitRefFromUnit(UnitFromId(706616818)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: protect_bottom_hive_from_allies
//--------------------------------------------------------------------------------------------------
bool gt_protect_bottom_hive_from_allies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_terrans_team_top, EventUnitDamageSourcePlayer()) == true)) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + EventUnitDamageAmount()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_protect_bottom_hive_from_allies_Init () {
    gt_protect_bottom_hive_from_allies = TriggerCreate("gt_protect_bottom_hive_from_allies_Func");
    TriggerEnable(gt_protect_bottom_hive_from_allies, false);
    TriggerAddEventUnitDamaged(gt_protect_bottom_hive_from_allies, UnitRefFromUnit(UnitFromId(478555519)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: firewall_kill
//--------------------------------------------------------------------------------------------------
bool gt_firewall_kill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 7))) {
            return false;
        }

        if (!((gf_can_cross_middle_in_3v3(EventUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_firewall_kill_Init () {
    gt_firewall_kill = TriggerCreate("gt_firewall_kill_Func");
    TriggerEnable(gt_firewall_kill, false);
    TriggerAddEventUnitRegion(gt_firewall_kill, null, RegionFromId(102), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: update_3v3_objectives
//--------------------------------------------------------------------------------------------------
bool gt_update_3v3_objectives_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2BE65F3E_g;
    int auto2BE65F3E_var;
    playergroup auto7964F223_g;
    int auto7964F223_var;

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() > 10.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2BE65F3E_g = gv_terrans_team_top;
    auto2BE65F3E_var = -1;
    while (true) {
        auto2BE65F3E_var = PlayerGroupNextPlayer(auto2BE65F3E_g, auto2BE65F3E_var);
        if (auto2BE65F3E_var < 0) { break; }
        if ((gf_is_terrans_team_bottom_dead() == true)) {
            ObjectiveSetState(gv__3v3_objective_kill_other_team[auto2BE65F3E_var], c_objectiveStateCompleted);
        }
        else {
            ObjectiveSetState(gv__3v3_objective_kill_other_team[auto2BE65F3E_var], c_objectiveStateActive);
        }
        if ((gf_is_top_hive_dead() == true)) {
            ObjectiveSetState(gv__3v3_objective_kill_hive[auto2BE65F3E_var], c_objectiveStateCompleted);
        }
        else {
            ObjectiveSetState(gv__3v3_objective_kill_hive[auto2BE65F3E_var], c_objectiveStateActive);
        }
    }
    auto7964F223_g = gv_terrans_team_bottom;
    auto7964F223_var = -1;
    while (true) {
        auto7964F223_var = PlayerGroupNextPlayer(auto7964F223_g, auto7964F223_var);
        if (auto7964F223_var < 0) { break; }
        if ((gf_is_terrans_team_top_dead() == true)) {
            ObjectiveSetState(gv__3v3_objective_kill_other_team[auto7964F223_var], c_objectiveStateCompleted);
        }
        else {
            ObjectiveSetState(gv__3v3_objective_kill_other_team[auto7964F223_var], c_objectiveStateActive);
        }
        if ((gf_is_bottom_hive_dead() == true)) {
            ObjectiveSetState(gv__3v3_objective_kill_hive[auto7964F223_var], c_objectiveStateCompleted);
        }
        else {
            ObjectiveSetState(gv__3v3_objective_kill_hive[auto7964F223_var], c_objectiveStateActive);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_update_3v3_objectives_Init () {
    gt_update_3v3_objectives = TriggerCreate("gt_update_3v3_objectives_Func");
    TriggerEnable(gt_update_3v3_objectives, false);
    TriggerAddEventTimePeriodic(gt_update_3v3_objectives, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cocoon or Omega dies 3v3
//--------------------------------------------------------------------------------------------------
bool gt_CocoonorOmegadies3v3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_ut;
    int lv_killer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ut = UnitGetType(EventUnit());
    lv_killer = libNtve_gf_KillingPlayer();

    // Conditions
    if (testConds) {
        if (!(((lv_ut == "OmegaliskCocoon2") || (lv_ut == "OmegaliskZergHex")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CocoonorOmegadies3v3_Init () {
    gt_CocoonorOmegadies3v3 = TriggerCreate("gt_CocoonorOmegadies3v3_Func");
    TriggerEnable(gt_CocoonorOmegadies3v3, false);
    TriggerAddEventUnitDied(gt_CocoonorOmegadies3v3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cocoon got spawned 3v3
//--------------------------------------------------------------------------------------------------
bool gt_Cocoongotspawned3v3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cocoon;
    point lv_cocoon_position;

    // Automatic Variable Declarations
    playergroup auto3B4C0210_g;
    int auto3B4C0210_var;

    // Variable Initialization
    lv_cocoon = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_cocoon_position = UnitGetPosition(lv_cocoon);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(gv_terrans, "PingBoss", lv_cocoon_position, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9999.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_cocoon);
    libHots_gf_StorePingForUnit(lv_cocoon, 1, PingLastCreated());
    SoundPlayForPlayer(SoundLink("UI_Zerg_Warning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto3B4C0210_g = gv_terrans;
    auto3B4C0210_var = -1;
    while (true) {
        auto3B4C0210_var = PlayerGroupNextPlayer(auto3B4C0210_g, auto3B4C0210_var);
        if (auto3B4C0210_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(lv_cocoon, true, auto3B4C0210_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cocoongotspawned3v3_Init () {
    gt_Cocoongotspawned3v3 = TriggerCreate("gt_Cocoongotspawned3v3_Func");
    TriggerEnable(gt_Cocoongotspawned3v3, false);
    TriggerAddEventPlayerEffectUsed(gt_Cocoongotspawned3v3, c_playerAny, "OmegaliskTriggerSpawnCocoon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cocoon spawn finished 3v3
//--------------------------------------------------------------------------------------------------
bool gt_Cocoonspawnfinished3v3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cocoon;
    point lv_cocoon_position;
    unit lv_omega;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cocoon = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_cocoon_position = UnitGetPosition(lv_cocoon);

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(libHots_gf_PingStoredForUnit(lv_cocoon, 1));
    UnitKill(lv_cocoon);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "OmegaliskZergHex", c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth, EventPlayer(), lv_cocoon_position);
    lv_omega = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(gv_terrans, "PingBoss", UnitGetPosition(lv_omega), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9999.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_omega);
    libHots_gf_StorePingForUnit(lv_omega, 1, PingLastCreated());
    SoundPlayForPlayer(SoundLink("Omegalisk_Roar", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cocoonspawnfinished3v3_Init () {
    gt_Cocoonspawnfinished3v3 = TriggerCreate("gt_Cocoonspawnfinished3v3_Func");
    TriggerEnable(gt_Cocoonspawnfinished3v3, false);
    TriggerAddEventPlayerEffectUsed(gt_Cocoonspawnfinished3v3, c_playerAny, "OmegaliskTriggerSpawnCompleted");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terrazine Income
//--------------------------------------------------------------------------------------------------
bool gt_TerrazineIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_terrazine_amount;

    // Automatic Variable Declarations
    playergroup autoB2C4F675_g;
    int autoB2C4F675_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB2C4F675_g = gv_terrans;
    autoB2C4F675_var = -1;
    while (true) {
        autoB2C4F675_var = PlayerGroupNextPlayer(autoB2C4F675_g, autoB2C4F675_var);
        if (autoB2C4F675_var < 0) { break; }
        if ((gv_players[autoB2C4F675_var].lv_alive == true)) {
            lv_terrazine_amount = gf_get_terrazine_income(autoB2C4F675_var);
            PlayerModifyPropertyFixed(autoB2C4F675_var, c_playerPropTerrazine, c_playerPropOperAdd, lv_terrazine_amount);
            PlayerModifyPropertyFixed(autoB2C4F675_var, c_playerPropTerrazineCollected, c_playerPropOperAdd, lv_terrazine_amount);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerrazineIncome_Init () {
    gt_TerrazineIncome = TriggerCreate("gt_TerrazineIncome_Func");
    TriggerEnable(gt_TerrazineIncome, false);
    TriggerAddEventTimePeriodic(gt_TerrazineIncome, 6.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: zagara_death_timer
//--------------------------------------------------------------------------------------------------
bool gt_zagara_death_timer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ZaGara"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owner = gf_get_terran_id_from_zpid(EventPlayer());
    UIDisplayMessage(PlayerGroupSingle(lv_owner), c_messageAreaChat, StringExternal("Param/Value/052C5FDB"));
    UIDisplayMessage(PlayerGroupSingle(lv_owner), c_messageAreaChat, StringExternal("Param/Value/5C311BD0"));
    Wait(10.0, c_timeGame);
    UIDisplayMessage(PlayerGroupSingle(lv_owner), c_messageAreaChat, StringExternal("Param/Value/008594BF"));
    Wait(10.0, c_timeGame);
    gf_create_zagara(lv_owner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_zagara_death_timer_Init () {
    gt_zagara_death_timer = TriggerCreate("gt_zagara_death_timer_Func");
    TriggerEnable(gt_zagara_death_timer, false);
    TriggerAddEventUnitDied(gt_zagara_death_timer, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha Upgrade finished
//--------------------------------------------------------------------------------------------------
bool gt_MechaUpgradefinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_upgrade;
    playergroup lv_team;
    int lv_zerg_pid;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    playergroup autoCC720E6B_g;
    int autoCC720E6B_var;
    string autoF493FD12_val;
    unitgroup auto5B21AB29_g;
    int auto5B21AB29_u;
    unit auto5B21AB29_var;
    unitgroup autoAC9DC226_g;
    int autoAC9DC226_u;
    unit autoAC9DC226_var;
    unitgroup auto2AB97F38_g;
    int auto2AB97F38_u;
    unit auto2AB97F38_var;
    string auto1C59175E_val;
    unitgroup auto55C975D3_g;
    int auto55C975D3_u;
    unit auto55C975D3_var;
    unitgroup auto4D0A4A7E_g;
    int auto4D0A4A7E_u;
    unit auto4D0A4A7E_var;
    unitgroup auto1C9A3F6B_g;
    int auto1C9A3F6B_u;
    unit auto1C9A3F6B_var;
    unitgroup auto23C05FB4_g;
    int auto23C05FB4_u;
    unit auto23C05FB4_var;
    unitgroup autoF0518C9E_g;
    int autoF0518C9E_u;
    unit autoF0518C9E_var;

    // Variable Initialization
    lv_upgrade = libNtve_gf_TriggeringProgressUpgrade();
    lv_team = gf_get_team_of_player(gf_get_terran_id_from_zpid(UnitGetOwner(EventUnit())));
    lv_ug = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MechaTechlab"))) {
            return false;
        }

        if (!(((lv_upgrade == "MechalingDurability") || (lv_upgrade == "RecyclingProtocol") || (lv_upgrade == "RecyclingProtocol2") || (lv_upgrade == "MetalbolicBoost") || (lv_upgrade == "JUICEModule") || (lv_upgrade == "ImprovedLiquids") || (lv_upgrade == "SynteticAdrenalPumps") || (lv_upgrade == "UnstableCore") || (lv_upgrade == "HUGSAlgorythm") || (lv_upgrade == "HydralicAugment") || (lv_upgrade == "SelfRecharchingBatteries") || (lv_upgrade == "NydusUpgrade") || (lv_upgrade == "NydusUpgrade2") || (lv_upgrade == "NydusUpgrade3")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCC720E6B_g = lv_team;
    autoCC720E6B_var = -1;
    while (true) {
        autoCC720E6B_var = PlayerGroupNextPlayer(autoCC720E6B_g, autoCC720E6B_var);
        if (autoCC720E6B_var < 0) { break; }
        lv_zerg_pid = gv_players[autoCC720E6B_var].lv__3v3_zerg_pid;
        if ((lv_zerg_pid != UnitGetOwner(EventUnit()))) {
            UIDisplayMessage(PlayerGroupSingle(gf_get_terran_id_from_zpid(lv_zerg_pid)), c_messageAreaChat, (TextWithColor(PlayerName(gf_get_terran_id_from_zpid(UnitGetOwner(EventUnit()))), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gf_get_terran_id_from_zpid(UnitGetOwner(EventUnit())), false))) + (StringExternal("Param/Value/E4CB8C23") + TextWithColor(StringExternal(CatalogFieldValueGet(c_gameCatalogUpgrade, libNtve_gf_TriggeringProgressUpgrade(), "Name", c_playerAny)), Color(100.00, 100.00, 0.00)))));
            TechTreeUpgradeAddLevel(lv_zerg_pid, lv_upgrade, 1);
        }

        if (((lv_upgrade == "NydusUpgrade") || (lv_upgrade == "NydusUpgrade2") || (lv_upgrade == "NydusUpgrade3"))) {
            lv_ug = UnitGroup("NydusCanal", lv_zerg_pid, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoF493FD12_val = lv_upgrade;
            if (autoF493FD12_val == "NydusUpgrade") {
                auto5B21AB29_g = lv_ug;
                auto5B21AB29_u = UnitGroupCount(auto5B21AB29_g, c_unitCountAll);
                for (;; auto5B21AB29_u -= 1) {
                    auto5B21AB29_var = UnitGroupUnitFromEnd(auto5B21AB29_g, auto5B21AB29_u);
                    if (auto5B21AB29_var == null) { break; }
                    UnitSetScale(auto5B21AB29_var, 90.0, 90.0, 90.0);
                }
            }
            else if (autoF493FD12_val == "NydusUpgrade2") {
                autoAC9DC226_g = lv_ug;
                autoAC9DC226_u = UnitGroupCount(autoAC9DC226_g, c_unitCountAll);
                for (;; autoAC9DC226_u -= 1) {
                    autoAC9DC226_var = UnitGroupUnitFromEnd(autoAC9DC226_g, autoAC9DC226_u);
                    if (autoAC9DC226_var == null) { break; }
                    UnitSetScale(autoAC9DC226_var, 100.0, 100.0, 100.0);
                }
            }
            else if (autoF493FD12_val == "NydusUpgrade3") {
                auto2AB97F38_g = lv_ug;
                auto2AB97F38_u = UnitGroupCount(auto2AB97F38_g, c_unitCountAll);
                for (;; auto2AB97F38_u -= 1) {
                    auto2AB97F38_var = UnitGroupUnitFromEnd(auto2AB97F38_g, auto2AB97F38_u);
                    if (auto2AB97F38_var == null) { break; }
                    UnitSetScale(auto2AB97F38_var, 110.0, 110.0, 110.0);
                }
            }
            else {
            }
        }

        if (((lv_upgrade == "MechalingDurability") || (lv_upgrade == "JUICEModule") || (lv_upgrade == "ImprovedLiquids") || (lv_upgrade == "UnstableCore") || (lv_upgrade == "HUGSAlgorythm"))) {
            lv_ug = UnitGroup("Mechaling", lv_zerg_pid, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto1C59175E_val = lv_upgrade;
            if (auto1C59175E_val == "MechalingDurability") {
                auto55C975D3_g = lv_ug;
                auto55C975D3_u = UnitGroupCount(auto55C975D3_g, c_unitCountAll);
                for (;; auto55C975D3_u -= 1) {
                    auto55C975D3_var = UnitGroupUnitFromEnd(auto55C975D3_g, auto55C975D3_u);
                    if (auto55C975D3_var == null) { break; }
                    UnitSetScale(auto55C975D3_var, 120.0, 120.0, 120.0);
                }
            }
            else if (auto1C59175E_val == "JUICEModule") {
                UnitGroupAddUnitGroup(lv_ug, UnitGroup("MechaHydralisk", lv_zerg_pid, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                auto4D0A4A7E_g = lv_ug;
                auto4D0A4A7E_u = UnitGroupCount(auto4D0A4A7E_g, c_unitCountAll);
                for (;; auto4D0A4A7E_u -= 1) {
                    auto4D0A4A7E_var = UnitGroupUnitFromEnd(auto4D0A4A7E_g, auto4D0A4A7E_u);
                    if (auto4D0A4A7E_var == null) { break; }
                    UnitSetPropertyFixed(auto4D0A4A7E_var, c_unitPropEnergy, 50.0);
                }
            }
            else if (auto1C59175E_val == "ImprovedLiquids") {
                UnitGroupAddUnitGroup(lv_ug, UnitGroup("MechaHydralisk", lv_zerg_pid, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                auto1C9A3F6B_g = lv_ug;
                auto1C9A3F6B_u = UnitGroupCount(auto1C9A3F6B_g, c_unitCountAll);
                for (;; auto1C9A3F6B_u -= 1) {
                    auto1C9A3F6B_var = UnitGroupUnitFromEnd(auto1C9A3F6B_g, auto1C9A3F6B_u);
                    if (auto1C9A3F6B_var == null) { break; }
                    UnitSetPropertyFixed(auto1C9A3F6B_var, c_unitPropEnergy, (UnitGetPropertyFixed(auto1C9A3F6B_var, c_unitPropEnergy, c_unitPropCurrent) + 50.0));
                }
            }
            else if (auto1C59175E_val == "UnstableCore") {
                auto23C05FB4_g = lv_ug;
                auto23C05FB4_u = UnitGroupCount(auto23C05FB4_g, c_unitCountAll);
                for (;; auto23C05FB4_u -= 1) {
                    auto23C05FB4_var = UnitGroupUnitFromEnd(auto23C05FB4_g, auto23C05FB4_u);
                    if (auto23C05FB4_var == null) { break; }
                    UnitBehaviorAdd(auto23C05FB4_var, "UnstableCore", auto23C05FB4_var, 1);
                }
            }
            else if (auto1C59175E_val == "HUGSAlgorythm") {
                autoF0518C9E_g = lv_ug;
                autoF0518C9E_u = UnitGroupCount(autoF0518C9E_g, c_unitCountAll);
                for (;; autoF0518C9E_u -= 1) {
                    autoF0518C9E_var = UnitGroupUnitFromEnd(autoF0518C9E_g, autoF0518C9E_u);
                    if (autoF0518C9E_var == null) { break; }
                    UnitBehaviorAdd(autoF0518C9E_var, "HUGSAlgorythm", autoF0518C9E_var, 1);
                }
            }
            else {
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MechaUpgradefinished_Init () {
    gt_MechaUpgradefinished = TriggerCreate("gt_MechaUpgradefinished_Func");
    TriggerEnable(gt_MechaUpgradefinished, false);
    TriggerAddEventUnitResearchProgress(gt_MechaUpgradefinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Larva dies
//--------------------------------------------------------------------------------------------------
bool gt_Larvadies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    int lv_terran_id;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());
    lv_terran_id = gf_get_terran_id_from_zpid(lv_owner);

    // Conditions
    if (testConds) {
        if (!((gf_is_3v3() == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Larva3v3"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_remove_count_dummy_stack(lv_terran_id, UnitGetType(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Larvadies_Init () {
    gt_Larvadies = TriggerCreate("gt_Larvadies_Func");
    TriggerEnable(gt_Larvadies, false);
    TriggerAddEventUnitDied(gt_Larvadies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Larva mutates into building
//--------------------------------------------------------------------------------------------------
bool gt_Larvamutatesintobuilding_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitProgressUnit()) == "NydusCanal") || (UnitGetType(EventUnitProgressUnit()) == "NydusCanalCreeper") || (UnitGetType(EventUnitProgressUnit()) == "SpineCrawlerMecha") || (UnitGetType(EventUnitProgressUnit()) == "MechaTerrazineExtractor") || (UnitGetType(EventUnitProgressUnit()) == "MechaTechlab")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_remove_count_dummy_stack(gf_get_terran_id_from_zpid(lv_owner), "Larva3v3");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Larvamutatesintobuilding_Init () {
    gt_Larvamutatesintobuilding = TriggerCreate("gt_Larvamutatesintobuilding_Func");
    TriggerEnable(gt_Larvamutatesintobuilding, false);
    TriggerAddEventUnitConstructProgress(gt_Larvamutatesintobuilding, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: zcc built
//--------------------------------------------------------------------------------------------------
bool gt_zccbuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_zcc;
    int lv_terran_id;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_terran_id = UnitGetOwner(EventUnitProgressUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "HiveMindEmulator"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_zcc = EventUnitProgressUnit();
    if ((gv_zcc_stack_backup[lv_terran_id].lv_larva > 0)) {
        UnitBehaviorAdd(lv_zcc, "LarvaCountDummyStack", lv_zcc, gv_zcc_stack_backup[lv_terran_id].lv_larva);
        gv_zcc_stack_backup[lv_terran_id].lv_larva = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_zccbuilt_Init () {
    gt_zccbuilt = TriggerCreate("gt_zccbuilt_Func");
    TriggerEnable(gt_zccbuilt, false);
    TriggerAddEventUnitConstructProgress(gt_zccbuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: zcc dies
//--------------------------------------------------------------------------------------------------
bool gt_zccdies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_zcc;
    int lv_terran_id;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_terran_id = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HiveMindEmulator"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_zcc = EventUnit();
    gv_zcc_stack_backup[lv_terran_id].lv_firelings = UnitBehaviorCount(lv_zcc, "FirelingCountDummyStack");
    gv_zcc_stack_backup[lv_terran_id].lv_larva = UnitBehaviorCount(lv_zcc, "LarvaCountDummyStack");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_zccdies_Init () {
    gt_zccdies = TriggerCreate("gt_zccdies_Func");
    TriggerEnable(gt_zccdies, false);
    TriggerAddEventUnitDied(gt_zccdies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic ZCC Spawn
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicZCCSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unit_type;
    fixed lv_spawn_rate;
    fixed lv_current_spawn_amount;
    int lv_spawn_count;

    // Automatic Variable Declarations
    playergroup auto0C595BDC_g;
    int auto0C595BDC_var;
    const int auto6D139C0C_ae = 14;
    int auto6D139C0C_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto0C595BDC_g = gv_terrans;
    auto0C595BDC_var = -1;
    while (true) {
        auto0C595BDC_var = PlayerGroupNextPlayer(auto0C595BDC_g, auto0C595BDC_var);
        if (auto0C595BDC_var < 0) { break; }
        auto6D139C0C_var = 1;
        for ( ; auto6D139C0C_var <= auto6D139C0C_ae; auto6D139C0C_var += 1 ) {
            lv_unit_type = gv_zcc_spawn[auto0C595BDC_var][auto6D139C0C_var].lv_unit_type;
            lv_spawn_count = gv_zcc_spawn[auto0C595BDC_var][auto6D139C0C_var].lv_spawn_count;
            lv_spawn_rate = gf_get_zcc_spawn_rate(auto0C595BDC_var, lv_unit_type, lv_spawn_count);
            lv_current_spawn_amount = gv_zcc_spawn[auto0C595BDC_var][auto6D139C0C_var].lv_current_spawn_amount;
            lv_current_spawn_amount += lv_spawn_rate;
            while ((lv_unit_type != "") && (lv_current_spawn_amount >= 1)) {
                gf_spawn_3v3_zerg_unit(auto0C595BDC_var, 1, lv_unit_type);
                lv_current_spawn_amount -= 1.0;
            }
            gv_zcc_spawn[auto0C595BDC_var][auto6D139C0C_var].lv_current_spawn_amount = lv_current_spawn_amount;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicZCCSpawn_Init () {
    gt_PeriodicZCCSpawn = TriggerCreate("gt_PeriodicZCCSpawn_Func");
    TriggerEnable(gt_PeriodicZCCSpawn, false);
    TriggerAddEventTimePeriodic(gt_PeriodicZCCSpawn, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn ZCC Unit 3v3
//--------------------------------------------------------------------------------------------------
bool gt_SpawnZCCUnit3v3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto011C7887_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto011C7887_val = EventPlayerEffectUsed();
    if (auto011C7887_val == "SpawnBanelingsDummy") {
        gf_update_zcc_spawn(EventPlayer(), "BanelingZergHex");
    }
    else if (auto011C7887_val == "SpawnBeastlingDummy3v3") {
        gf_update_zcc_spawn(EventPlayer(), "Beastling");
    }
    else if (auto011C7887_val == "SpawnBrutaDummy3v3") {
        gf_update_zcc_spawn(EventPlayer(), "Brutalisk2");
    }
    else if (auto011C7887_val == "SpawnCreeperDummy") {
        gf_update_zcc_spawn(EventPlayer(), "Creeper");
    }
    else if (auto011C7887_val == "SpawnFirelingsDummy") {
        gf_spawn_3v3_zerg_unit(EventPlayer(), 5, "Fireling");
    }
    else if (auto011C7887_val == "SpawnInfestorDummy") {
        gf_spawn_3v3_zerg_unit(EventPlayer(), 1, "InfestorZergHex3v3");
        TechTreeUpgradeAddLevel(EventPlayer(), "ZCCEnergyUpgrade", 1);
    }
    else if (auto011C7887_val == "SpawnLarvaDummy") {
        gf_spawn_3v3_zerg_unit(EventPlayer(), 1, "Larva3v3");
    }
    else if (auto011C7887_val == "SpawnInfusedDummy") {
        gf_update_zcc_spawn(EventPlayer(), "InfusedRoach");
    }
    else if (auto011C7887_val == "SpawnMutaliskDummy3v3") {
        gf_update_zcc_spawn(EventPlayer(), "Mutalisk3v3");
    }
    else if (auto011C7887_val == "SpawnPrimalDummy3v3") {
        gf_update_zcc_spawn(EventPlayer(), "PrimalRoach2");
    }
    else if (auto011C7887_val == "SpawnRavDummy") {
        gf_update_zcc_spawn(EventPlayer(), "Ravator");
    }
    else if (auto011C7887_val == "SpawnRoachDummy3v3") {
        gf_update_zcc_spawn(EventPlayer(), "Roach2");
    }
    else if (auto011C7887_val == "SpawnSlowlingDummy") {
        gf_update_zcc_spawn(EventPlayer(), "Slowling");
    }
    else if (auto011C7887_val == "SpawnStrikelingDummy") {
        gf_update_zcc_spawn(EventPlayer(), "Strikeling");
    }
    else if (auto011C7887_val == "SpawnTanklingDummy3v3") {
        gf_update_zcc_spawn(EventPlayer(), "Tankling");
    }
    else if (auto011C7887_val == "SpawnTorraDummy") {
        gf_update_zcc_spawn(EventPlayer(), "Torralisk");
    }
    else if (auto011C7887_val == "SpawnUltraDummy3v3") {
        gf_update_zcc_spawn(EventPlayer(), "Ultralisk2");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnZCCUnit3v3_Init () {
    gt_SpawnZCCUnit3v3 = TriggerCreate("gt_SpawnZCCUnit3v3_Func");
    TriggerEnable(gt_SpawnZCCUnit3v3, false);
    TriggerAddEventPlayerEffectUsed(gt_SpawnZCCUnit3v3, c_playerAny, "SpawnBanelingsDummy");
    TriggerAddEventPlayerEffectUsed(gt_SpawnZCCUnit3v3, c_playerAny, "SpawnBeastlingDummy3v3");
    TriggerAddEventPlayerEffectUsed(gt_SpawnZCCUnit3v3, c_playerAny, "SpawnBrutaDummy3v3");
    TriggerAddEventPlayerEffectUsed(gt_SpawnZCCUnit3v3, c_playerAny, "SpawnCreeperDummy");
    TriggerAddEventPlayerEffectUsed(gt_SpawnZCCUnit3v3, c_playerAny, "SpawnFirelingsDummy");
    TriggerAddEventPlayerEffectUsed(gt_SpawnZCCUnit3v3, c_playerAny, "SpawnInfestorDummy");
    TriggerAddEventPlayerEffectUsed(gt_SpawnZCCUnit3v3, c_playerAny, "SpawnInfusedDummy");
    TriggerAddEventPlayerEffectUsed(gt_SpawnZCCUnit3v3, c_playerAny, "SpawnPrimalDummy3v3");
    TriggerAddEventPlayerEffectUsed(gt_SpawnZCCUnit3v3, c_playerAny, "SpawnRavDummy");
    TriggerAddEventPlayerEffectUsed(gt_SpawnZCCUnit3v3, c_playerAny, "SpawnRoachDummy3v3");
    TriggerAddEventPlayerEffectUsed(gt_SpawnZCCUnit3v3, c_playerAny, "SpawnSlowlingDummy");
    TriggerAddEventPlayerEffectUsed(gt_SpawnZCCUnit3v3, c_playerAny, "SpawnStrikelingDummy");
    TriggerAddEventPlayerEffectUsed(gt_SpawnZCCUnit3v3, c_playerAny, "SpawnTanklingDummy3v3");
    TriggerAddEventPlayerEffectUsed(gt_SpawnZCCUnit3v3, c_playerAny, "SpawnTorraDummy");
    TriggerAddEventPlayerEffectUsed(gt_SpawnZCCUnit3v3, c_playerAny, "SpawnUltraDummy3v3");
    TriggerAddEventPlayerEffectUsed(gt_SpawnZCCUnit3v3, c_playerAny, "SpawnLarvaDummy");
    TriggerAddEventPlayerEffectUsed(gt_SpawnZCCUnit3v3, c_playerAny, "SpawnMutaliskDummy3v3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZCC upgrades
//--------------------------------------------------------------------------------------------------
bool gt_ZCCupgrades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_upgrade;
    int lv_zerg_player;

    // Automatic Variable Declarations
    playergroup auto425C9A02_g;
    int auto425C9A02_var;

    // Variable Initialization
    lv_upgrade = libNtve_gf_TriggeringProgressUpgrade();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HiveMindEmulator"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto425C9A02_g = gf_get_team_of_player(UnitGetOwner(EventUnit()));
    auto425C9A02_var = -1;
    while (true) {
        auto425C9A02_var = PlayerGroupNextPlayer(auto425C9A02_g, auto425C9A02_var);
        if (auto425C9A02_var < 0) { break; }
        if ((UnitGetOwner(EventUnit()) != auto425C9A02_var)) {
            UIDisplayMessage(PlayerGroupSingle(auto425C9A02_var), c_messageAreaChat, (TextWithColor(PlayerName(UnitGetOwner(EventUnit())), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnit()), false))) + (StringExternal("Param/Value/E6AB5EF3") + TextWithColor(StringExternal(CatalogFieldValueGet(c_gameCatalogUpgrade, libNtve_gf_TriggeringProgressUpgrade(), "Name", c_playerAny)), Color(100.00, 100.00, 0.00)))));
            TechTreeUpgradeAddLevel(auto425C9A02_var, libNtve_gf_TriggeringProgressUpgrade(), 1);
        }

        TechTreeUpgradeAddLevel(gv_players[auto425C9A02_var].lv__3v3_zerg_pid, libNtve_gf_TriggeringProgressUpgrade(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZCCupgrades_Init () {
    gt_ZCCupgrades = TriggerCreate("gt_ZCCupgrades_Func");
    TriggerEnable(gt_ZCCupgrades, false);
    TriggerAddEventUnitResearchProgress(gt_ZCCupgrades, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus finished
//--------------------------------------------------------------------------------------------------
bool gt_Nydusfinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_terran_player_id;

    // Automatic Variable Declarations
    const int autoB3C999BB_ae = 14;
    int autoB3C999BB_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) >= 8))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) <= 13))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "NydusCanal"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_terran_player_id = gf_get_terran_id_from_zpid(UnitGetOwner(EventUnitProgressUnit()));
    if ((gv_players[lv_terran_player_id].lv_position <= 3)) {
        UnitGroupAdd(gv_nydus_team_top, EventUnitProgressUnit());
    }
    else {
        UnitGroupAdd(gv_nydus_team_bottom, EventUnitProgressUnit());
    }
    autoB3C999BB_var = 1;
    for ( ; autoB3C999BB_var <= autoB3C999BB_ae; autoB3C999BB_var += 1 ) {
        UnitSetCustomValue(EventUnitProgressUnit(), autoB3C999BB_var, RandomInt(0, (gv_nydus_zcc_ratio - 1)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Nydusfinished_Init () {
    gt_Nydusfinished = TriggerCreate("gt_Nydusfinished_Func");
    TriggerEnable(gt_Nydusfinished, false);
    TriggerAddEventUnitConstructProgress(gt_Nydusfinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus died
//--------------------------------------------------------------------------------------------------
bool gt_Nydusdied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_type;
    int lv_owner;
    int lv_terran_player_id;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_type = UnitGetType(lv_unit);
    lv_owner = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((lv_owner >= 8))) {
            return false;
        }

        if (!((lv_owner <= 13))) {
            return false;
        }

        if (!((lv_type == "NydusCanal"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_terran_player_id = gf_get_terran_id_from_zpid(UnitGetOwner(EventUnit()));
    if ((gv_players[lv_terran_player_id].lv_position <= 3)) {
        UnitGroupRemove(gv_nydus_team_top, EventUnit());
    }
    else {
        UnitGroupRemove(gv_nydus_team_bottom, EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Nydusdied_Init () {
    gt_Nydusdied = TriggerCreate("gt_Nydusdied_Func");
    TriggerEnable(gt_Nydusdied, false);
    TriggerAddEventUnitDied(gt_Nydusdied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: zerg_rally_center
//--------------------------------------------------------------------------------------------------
bool gt_zerg_rally_center_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player_id;

    // Automatic Variable Declarations
    unitgroup auto78F988E6_g;
    int auto78F988E6_u;
    unit auto78F988E6_var;

    // Variable Initialization
    lv_player_id = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    auto78F988E6_g = UnitGroup("Overseer", lv_player_id, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto78F988E6_u = UnitGroupCount(auto78F988E6_g, c_unitCountAll);
    for (;; auto78F988E6_u -= 1) {
        auto78F988E6_var = UnitGroupUnitFromEnd(auto78F988E6_g, auto78F988E6_u);
        if (auto78F988E6_var == null) { break; }
        UnitBehaviorRemove(auto78F988E6_var, "SpawnFromCenter", c_unitBehaviorCountAll);
        UnitBehaviorRemove(auto78F988E6_var, "SpawnFromLeft", c_unitBehaviorCountAll);
        UnitBehaviorRemove(auto78F988E6_var, "SpawnFromRight", c_unitBehaviorCountAll);
        UnitBehaviorAdd(auto78F988E6_var, "SpawnFromCenter", auto78F988E6_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_zerg_rally_center_Init () {
    gt_zerg_rally_center = TriggerCreate("gt_zerg_rally_center_Func");
    TriggerEnable(gt_zerg_rally_center, false);
    TriggerAddEventPlayerEffectUsed(gt_zerg_rally_center, c_playerAny, "ZCCCenter");
}

//--------------------------------------------------------------------------------------------------
// Trigger: zerg_rally_left
//--------------------------------------------------------------------------------------------------
bool gt_zerg_rally_left_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player_id;

    // Automatic Variable Declarations
    unitgroup auto8C16D8A3_g;
    int auto8C16D8A3_u;
    unit auto8C16D8A3_var;

    // Variable Initialization
    lv_player_id = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    auto8C16D8A3_g = UnitGroup("Overseer", lv_player_id, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8C16D8A3_u = UnitGroupCount(auto8C16D8A3_g, c_unitCountAll);
    for (;; auto8C16D8A3_u -= 1) {
        auto8C16D8A3_var = UnitGroupUnitFromEnd(auto8C16D8A3_g, auto8C16D8A3_u);
        if (auto8C16D8A3_var == null) { break; }
        UnitBehaviorRemove(auto8C16D8A3_var, "SpawnFromCenter", c_unitBehaviorCountAll);
        UnitBehaviorRemove(auto8C16D8A3_var, "SpawnFromLeft", c_unitBehaviorCountAll);
        UnitBehaviorRemove(auto8C16D8A3_var, "SpawnFromRight", c_unitBehaviorCountAll);
        UnitBehaviorAdd(auto8C16D8A3_var, "SpawnFromLeft", auto8C16D8A3_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_zerg_rally_left_Init () {
    gt_zerg_rally_left = TriggerCreate("gt_zerg_rally_left_Func");
    TriggerEnable(gt_zerg_rally_left, false);
    TriggerAddEventPlayerEffectUsed(gt_zerg_rally_left, c_playerAny, "ZCCLeft");
}

//--------------------------------------------------------------------------------------------------
// Trigger: zerg_rally_right
//--------------------------------------------------------------------------------------------------
bool gt_zerg_rally_right_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player_id;

    // Automatic Variable Declarations
    unitgroup auto31DC56AE_g;
    int auto31DC56AE_u;
    unit auto31DC56AE_var;

    // Variable Initialization
    lv_player_id = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    auto31DC56AE_g = UnitGroup("Overseer", lv_player_id, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto31DC56AE_u = UnitGroupCount(auto31DC56AE_g, c_unitCountAll);
    for (;; auto31DC56AE_u -= 1) {
        auto31DC56AE_var = UnitGroupUnitFromEnd(auto31DC56AE_g, auto31DC56AE_u);
        if (auto31DC56AE_var == null) { break; }
        UnitBehaviorRemove(auto31DC56AE_var, "SpawnFromCenter", c_unitBehaviorCountAll);
        UnitBehaviorRemove(auto31DC56AE_var, "SpawnFromLeft", c_unitBehaviorCountAll);
        UnitBehaviorRemove(auto31DC56AE_var, "SpawnFromRight", c_unitBehaviorCountAll);
        UnitBehaviorAdd(auto31DC56AE_var, "SpawnFromRight", auto31DC56AE_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_zerg_rally_right_Init () {
    gt_zerg_rally_right = TriggerCreate("gt_zerg_rally_right_Func");
    TriggerEnable(gt_zerg_rally_right, false);
    TriggerAddEventPlayerEffectUsed(gt_zerg_rally_right, c_playerAny, "ZCCRight");
}

//--------------------------------------------------------------------------------------------------
// Trigger: zerg_rally_equal_on
//--------------------------------------------------------------------------------------------------
bool gt_zerg_rally_equal_on_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_overseer;
    int lv_player_id;
    int lv_player_position;

    // Automatic Variable Declarations
    unitgroup autoBCE818F8_g;
    int autoBCE818F8_u;
    unit autoBCE818F8_var;

    // Variable Initialization
    lv_overseer = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player_id = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_player_position = FixedToInt(UnitGetCustomValue(lv_overseer, 1));

    // Actions
    if (!runActions) {
        return true;
    }

    autoBCE818F8_g = UnitGroup("Overseer", lv_player_id, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBCE818F8_u = UnitGroupCount(autoBCE818F8_g, c_unitCountAll);
    for (;; autoBCE818F8_u -= 1) {
        autoBCE818F8_var = UnitGroupUnitFromEnd(autoBCE818F8_g, autoBCE818F8_u);
        if (autoBCE818F8_var == null) { break; }
        UnitBehaviorRemove(autoBCE818F8_var, "ZergRallyEqual", c_unitBehaviorCountAll);
        UnitBehaviorRemove(autoBCE818F8_var, "ZergRallyMinus", c_unitBehaviorCountAll);
        UnitBehaviorRemove(autoBCE818F8_var, "ZergRallyPlus", c_unitBehaviorCountAll);
        if ((autoBCE818F8_var == lv_overseer)) {
            UnitBehaviorAdd(lv_overseer, "ZergRallyEqual", lv_overseer, 1);
            UnitSetScale(autoBCE818F8_var, 100.0, 100.0, 100.0);
        }
        else {
            UnitBehaviorAdd(autoBCE818F8_var, "ZergRallyEqual", autoBCE818F8_var, 1);
            UnitSetScale(autoBCE818F8_var, 100.0, 100.0, 100.0);
        }
    }
    gf_manage_spawners_3v3(lv_player_position);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_zerg_rally_equal_on_Init () {
    gt_zerg_rally_equal_on = TriggerCreate("gt_zerg_rally_equal_on_Func");
    TriggerEnable(gt_zerg_rally_equal_on, false);
    TriggerAddEventPlayerEffectUsed(gt_zerg_rally_equal_on, c_playerAny, "ZergRallyEqualON");
}

//--------------------------------------------------------------------------------------------------
// Trigger: zerg_rally_minus_on
//--------------------------------------------------------------------------------------------------
bool gt_zerg_rally_minus_on_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_overseer;
    int lv_player_id;
    int lv_player_position;

    // Automatic Variable Declarations
    unitgroup autoA8500579_g;
    int autoA8500579_u;
    unit autoA8500579_var;

    // Variable Initialization
    lv_overseer = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player_id = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_player_position = FixedToInt(UnitGetCustomValue(lv_overseer, 1));

    // Actions
    if (!runActions) {
        return true;
    }

    autoA8500579_g = UnitGroup("Overseer", lv_player_id, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA8500579_u = UnitGroupCount(autoA8500579_g, c_unitCountAll);
    for (;; autoA8500579_u -= 1) {
        autoA8500579_var = UnitGroupUnitFromEnd(autoA8500579_g, autoA8500579_u);
        if (autoA8500579_var == null) { break; }
        UnitBehaviorRemove(autoA8500579_var, "ZergRallyEqual", c_unitBehaviorCountAll);
        UnitBehaviorRemove(autoA8500579_var, "ZergRallyMinus", c_unitBehaviorCountAll);
        UnitBehaviorRemove(autoA8500579_var, "ZergRallyPlus", c_unitBehaviorCountAll);
        if ((autoA8500579_var == lv_overseer)) {
            UnitBehaviorAdd(lv_overseer, "ZergRallyMinus", lv_overseer, 1);
            UnitSetScale(autoA8500579_var, 70.0, 70.0, 70.0);
        }
        else {
            UnitBehaviorAdd(autoA8500579_var, "ZergRallyPlus", autoA8500579_var, 1);
            UnitSetScale(autoA8500579_var, 145.0, 145.0, 145.0);
        }
    }
    gf_manage_spawners_3v3(lv_player_position);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_zerg_rally_minus_on_Init () {
    gt_zerg_rally_minus_on = TriggerCreate("gt_zerg_rally_minus_on_Func");
    TriggerEnable(gt_zerg_rally_minus_on, false);
    TriggerAddEventPlayerEffectUsed(gt_zerg_rally_minus_on, c_playerAny, "ZergRallyMinusON");
}

//--------------------------------------------------------------------------------------------------
// Trigger: zerg_rally_plus_on
//--------------------------------------------------------------------------------------------------
bool gt_zerg_rally_plus_on_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_overseer;
    int lv_player_id;
    int lv_player_position;

    // Automatic Variable Declarations
    unitgroup auto57753B17_g;
    int auto57753B17_u;
    unit auto57753B17_var;

    // Variable Initialization
    lv_overseer = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player_id = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_player_position = FixedToInt(UnitGetCustomValue(lv_overseer, 1));

    // Actions
    if (!runActions) {
        return true;
    }

    auto57753B17_g = UnitGroup("Overseer", lv_player_id, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto57753B17_u = UnitGroupCount(auto57753B17_g, c_unitCountAll);
    for (;; auto57753B17_u -= 1) {
        auto57753B17_var = UnitGroupUnitFromEnd(auto57753B17_g, auto57753B17_u);
        if (auto57753B17_var == null) { break; }
        UnitBehaviorRemove(auto57753B17_var, "ZergRallyEqual", c_unitBehaviorCountAll);
        UnitBehaviorRemove(auto57753B17_var, "ZergRallyMinus", c_unitBehaviorCountAll);
        UnitBehaviorRemove(auto57753B17_var, "ZergRallyPlus", c_unitBehaviorCountAll);
        if ((auto57753B17_var == lv_overseer)) {
            UnitBehaviorAdd(lv_overseer, "ZergRallyPlus", lv_overseer, 1);
            UnitSetScale(auto57753B17_var, 145.0, 145.0, 145.0);
        }
        else {
            UnitBehaviorAdd(auto57753B17_var, "ZergRallyMinus", auto57753B17_var, 1);
            UnitSetScale(auto57753B17_var, 70.0, 70.0, 70.0);
        }
    }
    gf_manage_spawners_3v3(lv_player_position);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_zerg_rally_plus_on_Init () {
    gt_zerg_rally_plus_on = TriggerCreate("gt_zerg_rally_plus_on_Func");
    TriggerEnable(gt_zerg_rally_plus_on, false);
    TriggerAddEventPlayerEffectUsed(gt_zerg_rally_plus_on, c_playerAny, "ZergRallyPlusON");
}

//--------------------------------------------------------------------------------------------------
// Trigger: relocate_spawners_rally_action
//--------------------------------------------------------------------------------------------------
bool gt_relocate_spawners_rally_action_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player_position;
    int lv_unit_group_index;
    point lv_initial_rally_point;
    int lv_cc_player_position;
    point lv_cc_point;
    playergroup lv_player_group;

    // Automatic Variable Declarations
    unitgroup auto86980782_g;
    int auto86980782_u;
    unit auto86980782_var;
    unitgroup autoF9E9E436_g;
    int autoF9E9E436_u;
    unit autoF9E9E436_var;

    // Variable Initialization
    lv_player_group = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_flying_rally_group, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player_position = FixedToInt(UnitGetCustomValue(EventUnit(), 1));
    lv_initial_rally_point = UnitGetPosition(EventUnit());
    if ((lv_player_position <= 3)) {
        lv_player_group = gv_terrans_team_top;
    }
    else {
        lv_player_group = gv_terrans_team_bottom;
    }
    if ((OrderGetTargetPoint(EventUnitOrder()) != null)) {
        UnitSetPosition(EventUnit(), OrderGetTargetPoint(EventUnitOrder()), false);
    }

    if ((OrderGetTargetPosition(EventUnitOrder()) != null)) {
        UnitSetPosition(EventUnit(), OrderGetTargetPosition(EventUnitOrder()), false);
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    auto86980782_g = UnitGroup(null, c_playerAny, RegionCircle(lv_initial_rally_point, 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto86980782_u = UnitGroupCount(auto86980782_g, c_unitCountAll);
    for (;; auto86980782_u -= 1) {
        auto86980782_var = UnitGroupUnitFromEnd(auto86980782_g, auto86980782_u);
        if (auto86980782_var == null) { break; }
        if ((gf_is_spawner_unit(auto86980782_var) == true) && (libNtve_gf_UnitInRegion(auto86980782_var, gf_get_region_of_influence_3v3(lv_player_position)) == true)) {
            UnitIssueOrder(auto86980782_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
            lv_cc_player_position = gf_get_closest_alive_player_position_from_group(UnitGetPosition(EventUnit()), lv_player_group);
            lv_cc_point = PointFromName(("Zerg Rally " + IntToString(lv_cc_player_position)));
            UnitIssueOrder(auto86980782_var, OrderTargetingPoint(AbilityCommand("attack", 0), lv_cc_point), c_orderQueueAddToEnd);
            if ((UnitGetOwner(auto86980782_var) == 7)) {
                lv_unit_group_index = gf_get_observed_unit_index(auto86980782_var);
                UnitGroupRemove(gv_observed_units[lv_unit_group_index], auto86980782_var);
            }

        }

    }
    autoF9E9E436_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF9E9E436_u = UnitGroupCount(autoF9E9E436_g, c_unitCountAll);
    for (;; autoF9E9E436_u -= 1) {
        autoF9E9E436_var = UnitGroupUnitFromEnd(autoF9E9E436_g, autoF9E9E436_u);
        if (autoF9E9E436_var == null) { break; }
        if ((gf_is_spawner_unit(autoF9E9E436_var) == true) && (libNtve_gf_UnitInRegion(autoF9E9E436_var, gf_get_region_of_influence_3v3(lv_player_position)) == true)) {
            UnitIssueOrder(autoF9E9E436_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
            lv_cc_player_position = gf_get_closest_alive_player_position_from_group(UnitGetPosition(EventUnit()), lv_player_group);
            lv_cc_point = PointFromName(("Zerg Rally " + IntToString(lv_cc_player_position)));
            UnitIssueOrder(autoF9E9E436_var, OrderTargetingPoint(AbilityCommand("attack", 0), lv_cc_point), c_orderQueueAddToEnd);
            if ((UnitGetOwner(autoF9E9E436_var) == 7)) {
                lv_unit_group_index = gf_get_observed_unit_index(autoF9E9E436_var);
                UnitGroupRemove(gv_observed_units[lv_unit_group_index], autoF9E9E436_var);
            }

        }

    }
    gf_manage_spawners_3v3(lv_player_position);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_relocate_spawners_rally_action_Init () {
    gt_relocate_spawners_rally_action = TriggerCreate("gt_relocate_spawners_rally_action_Func");
    TriggerEnable(gt_relocate_spawners_rally_action, false);
    TriggerAddEventUnitOrder(gt_relocate_spawners_rally_action, null, AbilityCommand("move", 0));
    TriggerAddEventUnitOrder(gt_relocate_spawners_rally_action, null, AbilityCommand("move", 1));
    TriggerAddEventUnitOrder(gt_relocate_spawners_rally_action, null, AbilityCommand("move", 3));
}

//--------------------------------------------------------------------------------------------------
// Trigger: -3v3test
//--------------------------------------------------------------------------------------------------
bool gt__3v3test_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gv_practice_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_create_zagara(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3v3test_Init () {
    gt__3v3test = TriggerCreate("gt__3v3test_Func");
    TriggerAddEventChatMessage(gt__3v3test, c_playerAny, "-3v3test", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC destroyed
//--------------------------------------------------------------------------------------------------
bool gt_CCdestroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    int lv_attacker_owner;
    unit lv_n;
    int lv_cap;
    point lv_no_point;

    // Automatic Variable Declarations
    unitgroup autoA1C2F3A3_g;
    int autoA1C2F3A3_u;
    unit autoA1C2F3A3_var;
    unitgroup auto1F8A9550_g;
    int auto1F8A9550_u;
    unit auto1F8A9550_var;
    unitgroup auto4FDCE40E_g;
    int auto4FDCE40E_u;
    unit auto4FDCE40E_var;

    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());
    lv_attacker_owner = UnitGetOwner(libNtve_gf_KillingUnit());

    // Conditions
    if (testConds) {
        if (!((lv_owner != 0))) {
            return false;
        }

        if (!((gv_players[lv_owner].lv_alive == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_players[lv_owner].lv_alive = false;
    PlayerModifyPropertyInt(lv_owner, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(lv_owner, c_playerPropVespene, c_playerPropOperSetTo, 0);
    autoA1C2F3A3_g = UnitGroup(null, lv_owner, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA1C2F3A3_u = UnitGroupCount(autoA1C2F3A3_g, c_unitCountAll);
    for (;; autoA1C2F3A3_u -= 1) {
        autoA1C2F3A3_var = UnitGroupUnitFromEnd(autoA1C2F3A3_g, autoA1C2F3A3_u);
        if (autoA1C2F3A3_var == null) { break; }
        UnitKill(autoA1C2F3A3_var);
    }
    auto1F8A9550_g = UnitGroup(null, c_playerAny, RegionFromName(("geysers p" + IntToString(gv_players[lv_owner].lv_position))), UnitFilter(0, 0, (1 << c_targetFilterRawResource), 0), 0);
    auto1F8A9550_u = UnitGroupCount(auto1F8A9550_g, c_unitCountAll);
    for (;; auto1F8A9550_u -= 1) {
        auto1F8A9550_var = UnitGroupUnitFromEnd(auto1F8A9550_g, auto1F8A9550_u);
        if (auto1F8A9550_var == null) { break; }
        if ((UnitGetOwner(auto1F8A9550_var) != 7) && (UnitGetOwner(auto1F8A9550_var) != 0) && (gf_is_overseer(auto1F8A9550_var) == false) && (UnitGetType(auto1F8A9550_var) != "Medivac") && (UnitGetType(auto1F8A9550_var) != "CashTransporter") && (UnitGetType(auto1F8A9550_var) != "Hercules") && (UnitGetType(auto1F8A9550_var) != "WarpPrism") && (UnitGetType(auto1F8A9550_var) != "Italis")) {
            UnitKill(auto1F8A9550_var);
        }

    }
    auto4FDCE40E_g = UnitGroup(null, c_playerAny, RegionFromName(("geysers p" + IntToString(gv_players[lv_owner].lv_position))), UnitFilter((1 << c_targetFilterRawResource), 0, 0, 0), 0);
    auto4FDCE40E_u = UnitGroupCount(auto4FDCE40E_g, c_unitCountAll);
    for (;; auto4FDCE40E_u -= 1) {
        auto4FDCE40E_var = UnitGroupUnitFromEnd(auto4FDCE40E_g, auto4FDCE40E_u);
        if (auto4FDCE40E_var == null) { break; }
        libNtve_gf_ReplaceUnit(auto4FDCE40E_var, "GeyserBlocker", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "InvulnerableBlockers", libNtve_gf_LastReplacedUnit(), 1);
    }
    gf_remove_tutorial_after_death(lv_owner);
    if ((gf_is_game_over() == true)) {
        gf_end_game(gf_get_winning_team());
    }
    else {
        lv_cap = gf_get_closest_alive_player_position(PointFromName(("Blocker " + IntToString(gv_players[lv_owner].lv_position))));
        gv_spawner_distro[lv_cap] = (gv_spawner_distro[lv_cap] + gv_spawner_distro[gv_players[lv_owner].lv_position]);
        gv_spawner_distro[gv_players[lv_owner].lv_position] = 0;
        gv_t1_spawner_distro[lv_cap] = (gv_t1_spawner_distro[lv_cap] + gv_t1_spawner_distro[gv_players[lv_owner].lv_position]);
        gv_t1_spawner_distro[gv_players[lv_owner].lv_position] = 0;
        if ((gf_is_terran_dead() == false)) {
            gf_rerally_dead_player_spawners(lv_owner);
        }

        gf_inject_extra_positions(gv_players[lv_owner].lv_position);
        if ((gv_is_crazyminions == true)) {
            lv_n = UnitGroupClosestToPoint(UnitGroup("Hellfort", 7, RegionCircle(gv_outer_nest[gv_players[lv_owner].lv_position].lv_position, 3.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_outer_nest[gv_players[lv_owner].lv_position].lv_position);
        }
        else {
            lv_n = UnitGroupClosestToPoint(UnitGroup("Nest2", 7, RegionCircle(gv_outer_nest[gv_players[lv_owner].lv_position].lv_position, 3.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_outer_nest[gv_players[lv_owner].lv_position].lv_position);
        }
        if ((lv_n == null)) {
            gv_dead_creep_count += 1;
            gv_dead_creep[gv_dead_creep_count].lv_position = gv_outer_nest[gv_players[lv_owner].lv_position].lv_position;
            gv_dead_creep[gv_dead_creep_count].lv_unit_type = "Nest2";
        }

        gf_rebalance_zerg_after_early_terran_death(lv_owner);
        if ((GameGetMissionTime() >= (11 * 60)) && (GameGetMissionTime() <= (25 * 60))) {
            gv_reward_related_deaths += 1;
        }

        if (((gv_practice_mode == true) || (gv_players[lv_owner].lv_lost_elo == true) || (gf_is_zerg_dead() == true))) {
        }
        else {
            if ((gf_is_player_banned(lv_owner) == true)) {
                gv_players[lv_owner].lv_elo = 0;
                gf_Game_Banks_handler("save", lv_owner, gv_players[lv_owner].lv_elo, 0, 0);
                gv_players[lv_owner].lv_lost_elo = true;
            }
            else {
                gv_players[lv_owner].lv_elo = (gv_players[lv_owner].lv_elo - gf_get_base_penalty_elo_count());
                gf_Game_Banks_handler("save", lv_owner, gv_players[lv_owner].lv_elo, 0, 0);
                gv_players[lv_owner].lv_lost_elo = true;
            }
        }
        if ((PlayerStatus(lv_owner) == c_playerStatusActive)) {
            if ((gf_is_game_over() == false) && (gf_is_player_banned(lv_owner) == false)) {
                if ((GameAttributeGameValue("1") == "0001")) {
                    PlayerModifyPropertyInt(lv_owner, c_playerPropVespene, c_playerPropOperSetTo, 150);
                    PlayerModifyPropertyInt(lv_owner, c_playerPropMinerals, c_playerPropOperSetTo, 150);
                    gf_handle_dead_player_afterlife_start(lv_owner);
                }

            }

        }

        if ((gf_is_3v3() == true)) {
            gf__3v3_player_died(lv_owner);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CCdestroyed_Init () {
    gt_CCdestroyed = TriggerCreate("gt_CCdestroyed_Func");
    TriggerAddEventUnitDied(gt_CCdestroyed, UnitRefFromUnit(UnitFromId(661619592)));
    TriggerAddEventUnitDied(gt_CCdestroyed, UnitRefFromUnit(UnitFromId(147076391)));
    TriggerAddEventUnitDied(gt_CCdestroyed, UnitRefFromUnit(UnitFromId(33588891)));
    TriggerAddEventUnitDied(gt_CCdestroyed, UnitRefFromUnit(UnitFromId(17)));
    TriggerAddEventUnitDied(gt_CCdestroyed, UnitRefFromUnit(UnitFromId(956769915)));
    TriggerAddEventUnitDied(gt_CCdestroyed, UnitRefFromUnit(UnitFromId(2138647265)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: player leaves game
//--------------------------------------------------------------------------------------------------
bool gt_playerleavesgame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    unitgroup autoF9D16F6B_g;
    int autoF9D16F6B_u;
    unit autoF9D16F6B_var;
    unitgroup auto52B26352_g;
    int auto52B26352_u;
    unit auto52B26352_var;
    unitgroup auto004CC2FD_g;
    int auto004CC2FD_u;
    unit auto004CC2FD_var;
    unitgroup autoEEF32174_g;
    int autoEEF32174_u;
    unit autoEEF32174_var;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_is_setup_phase == true)) {
        gv_players[lv_player].lv_left_the_game = true;
        gf_tbp_refresh_dialog_labels();
    }
    else {
        if ((gf_is_game_over() == false)) {
            if (((gv_practice_mode == true) || (gv_players[lv_player].lv_lost_elo == true) || (gf_is_zerg_dead() == true))) {
            }
            else {
                gv_players[lv_player].lv_elo = (gv_players[lv_player].lv_elo - gf_get_base_penalty_elo_count());
                gf_Game_Banks_handler("save", lv_player, gv_players[lv_player].lv_elo, 0, 0);
                gv_players[lv_player].lv_lost_elo = true;
            }
        }

        if ((gv_players[lv_player].lv_alive == true)) {
            autoEEF32174_g = UnitGroup("CommandCenter2", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoEEF32174_u = UnitGroupCount(autoEEF32174_g, c_unitCountAll);
            for (;; autoEEF32174_u -= 1) {
                autoEEF32174_var = UnitGroupUnitFromEnd(autoEEF32174_g, autoEEF32174_u);
                if (autoEEF32174_var == null) { break; }
                UnitKill(autoEEF32174_var);
            }
        }
        else {
            autoF9D16F6B_g = UnitGroup("Italis", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoF9D16F6B_u = UnitGroupCount(autoF9D16F6B_g, c_unitCountAll);
            for (;; autoF9D16F6B_u -= 1) {
                autoF9D16F6B_var = UnitGroupUnitFromEnd(autoF9D16F6B_g, autoF9D16F6B_u);
                if (autoF9D16F6B_var == null) { break; }
                UnitKill(autoF9D16F6B_var);
            }
            auto52B26352_g = UnitGroup("KaraxChampion", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto52B26352_u = UnitGroupCount(auto52B26352_g, c_unitCountAll);
            for (;; auto52B26352_u -= 1) {
                auto52B26352_var = UnitGroupUnitFromEnd(auto52B26352_g, auto52B26352_u);
                if (auto52B26352_var == null) { break; }
                UnitKill(auto52B26352_var);
            }
            auto004CC2FD_g = UnitGroup("Mantis", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto004CC2FD_u = UnitGroupCount(auto004CC2FD_g, c_unitCountAll);
            for (;; auto004CC2FD_u -= 1) {
                auto004CC2FD_var = UnitGroupUnitFromEnd(auto004CC2FD_g, auto004CC2FD_u);
                if (auto004CC2FD_var == null) { break; }
                UnitKill(auto004CC2FD_var);
            }
        }
        PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(lv_player, c_playerPropVespene, c_playerPropOperSetTo, 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_playerleavesgame_Init () {
    gt_playerleavesgame = TriggerCreate("gt_playerleavesgame_Func");
    TriggerAddEventPlayerLeft(gt_playerleavesgame, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: af_relevant_building_finished
//--------------------------------------------------------------------------------------------------
bool gt_af_relevant_building_finished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    point lv_position;
    playergroup lv_player_group;
    int lv_target_position;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = EventPlayer();
    lv_position = UnitGetPosition(EventUnitProgressUnit());
    lv_player_group = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((lv_owner == 7))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "Nest2") || (UnitGetType(EventUnitProgressUnit()) == "CreepTumor2") || (UnitGetType(EventUnitProgressUnit()) == "SpineCrawler") || (UnitGetType(EventUnitProgressUnit()) == "MineralExtractor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_af_model_swap(EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_af_relevant_building_finished_Init () {
    gt_af_relevant_building_finished = TriggerCreate("gt_af_relevant_building_finished_Func");
    TriggerEnable(gt_af_relevant_building_finished, false);
    TriggerAddEventUnitConstructProgress(gt_af_relevant_building_finished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spawn turkey
//--------------------------------------------------------------------------------------------------
bool gt_spawnturkey_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_is_thxg == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_spawn_turkey();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spawnturkey_Init () {
    gt_spawnturkey = TriggerCreate("gt_spawnturkey_Func");
    TriggerEnable(gt_spawnturkey, false);
    TriggerAddEventTimePeriodic(gt_spawnturkey, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: turkey dies
//--------------------------------------------------------------------------------------------------
bool gt_turkeydies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killing_player;
    point lv_position;
    int lv_rng;
    int lv_color;
    int lv_size;

    // Automatic Variable Declarations
    int autoC51E6CD5_val;
    int auto6A59537F_val;
    int autoE2CDDB45_val;
    int auto72968182_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_is_thxg == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "UglyTurkey") || (UnitGetType(EventUnit()) == "SpaceTurkey")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killing_player = libNtve_gf_KillingPlayer();
    lv_color = gf_thxg_get_turkey_color(EventUnit());
    if ((UnitGetType(EventUnit()) == "SpaceTurkey")) {
        lv_size = 2;
    }
    else {
        lv_size = 1;
    }
    if ((gv_players[lv_killing_player].lv_has_pickup_doubler == true)) {
        lv_size = (lv_size * 2);
    }

    if ((lv_killing_player >= 1) && (lv_killing_player <= 6)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(lv_killing_player) + StringExternal("Param/Value/BB169735")));
        lv_position = UnitGetPosition(EventUnit());
        lv_rng = RandomInt(1, 3);
        autoC51E6CD5_val = lv_color;
        if (autoC51E6CD5_val == 1) {
            auto6A59537F_val = lv_rng;
            if (auto6A59537F_val == 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing((lv_size * 1), "AdvancedBattery", 0, lv_killing_player, lv_position);
            }
            else if (auto6A59537F_val == 2) {
                libNtve_gf_CreateUnitsWithDefaultFacing((lv_size * 1), "AdvancedBattery", 0, lv_killing_player, lv_position);
            }
            else if (auto6A59537F_val == 3) {
                libNtve_gf_CreateUnitsWithDefaultFacing((lv_size * 1), "HighDensityBattery", 0, lv_killing_player, lv_position);
            }
            else {
            }
        }
        else if (autoC51E6CD5_val == 2) {
            autoE2CDDB45_val = lv_rng;
            if (autoE2CDDB45_val == 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing((lv_size * 1), "MineralTrader", 0, lv_killing_player, lv_position);
            }
            else if (autoE2CDDB45_val == 2) {
                libNtve_gf_CreateUnitsWithDefaultFacing((lv_size * 1), "GasTrader", 0, lv_killing_player, lv_position);
            }
            else if (autoE2CDDB45_val == 3) {
                libNtve_gf_CreateUnitsWithDefaultFacing((lv_size * 1), "MineralTrader", 0, lv_killing_player, lv_position);
                libNtve_gf_CreateUnitsWithDefaultFacing((lv_size * 1), "GasTrader", 0, lv_killing_player, lv_position);
            }
            else {
            }
        }
        else if (autoC51E6CD5_val == 3) {
            auto72968182_val = lv_rng;
            if (auto72968182_val == 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing((lv_size * 1), "EliteMarineSkin4", 0, lv_killing_player, lv_position);
            }
            else if (auto72968182_val == 2) {
                libNtve_gf_CreateUnitsWithDefaultFacing((lv_size * 2), "VeteranMarine", 0, lv_killing_player, lv_position);
            }
            else if (auto72968182_val == 3) {
                libNtve_gf_CreateUnitsWithDefaultFacing((lv_size * 2), "ChaosSpaceMarine", 0, lv_killing_player, lv_position);
            }
            else {
            }
        }
        else {
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_turkeydies_Init () {
    gt_turkeydies = TriggerCreate("gt_turkeydies_Func");
    TriggerEnable(gt_turkeydies, false);
    TriggerAddEventUnitDied(gt_turkeydies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spawn heart
//--------------------------------------------------------------------------------------------------
bool gt_spawnheart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_is_vday == true))) {
            return false;
        }

        if (!((gv_heart_count <= 30))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_spawn_heart();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spawnheart_Init () {
    gt_spawnheart = TriggerCreate("gt_spawnheart_Func");
    TriggerEnable(gt_spawnheart, false);
    TriggerAddEventTimePeriodic(gt_spawnheart, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: player collects heart
//--------------------------------------------------------------------------------------------------
bool gt_playercollectsheart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_present_position;
    int lv_rand_amount;
    int lv_luck;

    // Automatic Variable Declarations
    int autoBF298446_val;
    int auto698726D5_val;

    // Variable Initialization
    lv_present_position = UnitGetPosition(EventUnit());
    lv_luck = RandomInt(1, 5);

    // Conditions
    if (testConds) {
        if (!((gv_is_vday == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(UnitGroupClosestToPoint(UnitGroup(null, c_playerAny, RegionCircle(lv_present_position, 1.8), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), lv_present_position));
    if ((lv_player <= 7) && (lv_player >= 1)) {
        if ((lv_player <= 6)) {
            if ((lv_luck <= 3)) {
                if ((gf_is_3v3() == true)) {
                    auto698726D5_val = RandomInt(1, 3);
                    if (auto698726D5_val == 1) {
                        lv_rand_amount = RandomInt(5, 10);
                        PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperAdd, lv_rand_amount);
                    }
                    else if (auto698726D5_val == 2) {
                        lv_rand_amount = RandomInt(5, 10);
                        PlayerModifyPropertyInt(lv_player, c_playerPropVespene, c_playerPropOperAdd, lv_rand_amount);
                    }
                    else if (auto698726D5_val == 3) {
                        lv_rand_amount = RandomInt(15, 30);
                        PlayerModifyPropertyInt(lv_player, c_playerPropTerrazine, c_playerPropOperAdd, lv_rand_amount);
                    }
                    else {
                    }
                }
                else {
                    autoBF298446_val = RandomInt(1, 2);
                    if (autoBF298446_val == 1) {
                        lv_rand_amount = RandomInt(5, 10);
                        PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperAdd, lv_rand_amount);
                    }
                    else if (autoBF298446_val == 2) {
                        lv_rand_amount = RandomInt(5, 10);
                        PlayerModifyPropertyInt(lv_player, c_playerPropVespene, c_playerPropOperAdd, lv_rand_amount);
                    }
                    else {
                    }
                }
                libNtve_gf_CreateActorAtPoint("GainBountyTextKicker", lv_present_position);
            }
            else {
                if ((lv_luck == 4)) {
                    if ((RandomInt(1, 2) == 1)) {
                        if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "MineralTrader", 0, lv_player, lv_present_position);
                        }
                        else {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralTrader", 0, lv_player, lv_present_position);
                        }
                    }
                    else {
                        if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "GasTrader", 0, lv_player, lv_present_position);
                        }
                        else {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "GasTrader", 0, lv_player, lv_present_position);
                        }
                    }
                }
                else {
                    if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                    }
                    else {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                    }
                }
            }
        }
        else {
            lv_rand_amount = RandomInt(25, 60);
            PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperAdd, lv_rand_amount);
        }
    }

    UnitRemove(EventUnit());
    gv_heart_count = (gv_heart_count - 1);
    gf_spawn_heart();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_playercollectsheart_Init () {
    gt_playercollectsheart = TriggerCreate("gt_playercollectsheart_Func");
    TriggerEnable(gt_playercollectsheart, false);
    TriggerAddEventUnitAbility(gt_playercollectsheart, null, AbilityCommand("PickupHNYgift", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: grab a heart
//--------------------------------------------------------------------------------------------------
bool gt_grabaheart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_present;
    unitgroup lv_ugroup;

    // Automatic Variable Declarations
    unitgroup auto9ECB6A1C_g;
    int auto9ECB6A1C_u;
    unit auto9ECB6A1C_var;

    // Variable Initialization
    lv_ugroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_is_vday == true))) {
            return false;
        }

        if (!((gv_difficulty > 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9ECB6A1C_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9ECB6A1C_u = UnitGroupCount(auto9ECB6A1C_g, c_unitCountAll);
    for (;; auto9ECB6A1C_u -= 1) {
        auto9ECB6A1C_var = UnitGroupUnitFromEnd(auto9ECB6A1C_g, auto9ECB6A1C_u);
        if (auto9ECB6A1C_var == null) { break; }
        if ((UnitGetType(auto9ECB6A1C_var) == "ShapeHeart")) {
            UnitGroupAdd(lv_ugroup, auto9ECB6A1C_var);
        }

    }
    lv_present = UnitGroupClosestToPoint(lv_ugroup, PointFromId(1910508930));
    if ((lv_present != null)) {
        UnitIssueOrder(UnitGroupClosestToPoint(UnitGroup("Slowling", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_present)), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_present)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_grabaheart_Init () {
    gt_grabaheart = TriggerCreate("gt_grabaheart_Func");
    TriggerEnable(gt_grabaheart, false);
    TriggerAddEventTimePeriodic(gt_grabaheart, 11.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: kill a pumpkin
//--------------------------------------------------------------------------------------------------
bool gt_killapumpkin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pumpkin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_is_halloween == true))) {
            return false;
        }

        if (!((gv_difficulty > 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pumpkin = UnitGroupClosestToPoint(UnitGroup("Pumpkin2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(1910508930));
    if ((lv_pumpkin == null)) {
        lv_pumpkin = UnitGroupClosestToPoint(UnitGroup("Pumpkin", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(1910508930));
    }

    if ((lv_pumpkin == null)) {
        lv_pumpkin = UnitGroupClosestToPoint(UnitGroup("Pumpkin3", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(1910508930));
    }

    if ((lv_pumpkin != null)) {
        UnitIssueOrder(UnitGroupClosestToPoint(UnitGroup("Slowling", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_pumpkin)), OrderTargetingUnit(AbilityCommand("attack", 0), lv_pumpkin), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_killapumpkin_Init () {
    gt_killapumpkin = TriggerCreate("gt_killapumpkin_Func");
    TriggerEnable(gt_killapumpkin, false);
    TriggerAddEventTimePeriodic(gt_killapumpkin, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spawn pumpkin
//--------------------------------------------------------------------------------------------------
bool gt_spawnpumpkin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    int lv_r;
    string lv_ut;

    // Automatic Variable Declarations
    int autoD80274B5_val;

    // Variable Initialization
    lv_r = RandomInt(1, 40);

    // Conditions
    if (testConds) {
        if (!((gv_is_halloween == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = RegionRandomPoint(RegionFromName(("Bonus " + IntToString(lv_r))));
    autoD80274B5_val = RandomInt(1, 3);
    if (autoD80274B5_val == 1) {
        lv_ut = "Pumpkin";
    }
    else if (autoD80274B5_val == 2) {
        lv_ut = "Pumpkin2";
    }
    else if (autoD80274B5_val == 3) {
        lv_ut = "Pumpkin3";
    }
    else {
        lv_ut = "Pumpkin";
    }
    if ((gf_roll_dice() == 1)) {
        lv_ut = "MegaPumpkin";
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_ut, 0, 0, lv_p);
    gf_revealpickup(UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spawnpumpkin_Init () {
    gt_spawnpumpkin = TriggerCreate("gt_spawnpumpkin_Func");
    TriggerEnable(gt_spawnpumpkin, false);
    TriggerAddEventTimePeriodic(gt_spawnpumpkin, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: pumpkin dies
//--------------------------------------------------------------------------------------------------
bool gt_pumpkindies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_is_halloween == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Pumpkin") || (UnitGetType(EventUnit()) == "Pumpkin2") || (UnitGetType(EventUnit()) == "Pumpkin3") || (UnitGetType(EventUnit()) == "MegaPumpkin")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    if ((UnitGetType(EventUnit()) == "MegaPumpkin")) {
        if ((libNtve_gf_KillingPlayer() < 7)) {
            gv_players[libNtve_gf_KillingPlayer()].lv_killed_pumpkins = (gv_players[libNtve_gf_KillingPlayer()].lv_killed_pumpkins + 1);
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "PickupNovaTechnology", 0, libNtve_gf_KillingPlayer(), UnitGetPosition(EventUnit()));
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/22248B00") + StringToText("")));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/A1CBAF31") + StringToText("")));
            gf_spawn_sappers();
        }
    }
    else {
        if ((libNtve_gf_KillingPlayer() < 7)) {
            gv_players[libNtve_gf_KillingPlayer()].lv_killed_pumpkins = (gv_players[libNtve_gf_KillingPlayer()].lv_killed_pumpkins + 1);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupNovaTechnology", 0, libNtve_gf_KillingPlayer(), UnitGetPosition(EventUnit()));
        }
        else {
            gv_zerg_pumpkins = (gv_zerg_pumpkins + 1);
            PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperAdd, 20);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/6AABEA78") + (IntToText(gv_zerg_pumpkins) + StringExternal("Param/Value/33DAD69F"))));
            if ((gv_zerg_pumpkins == 10)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/97FDD7DB") + StringToText("")));
                gf_spawn_sappers();
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_pumpkindies_Init () {
    gt_pumpkindies = TriggerCreate("gt_pumpkindies_Func");
    TriggerEnable(gt_pumpkindies, false);
    TriggerAddEventUnitDied(gt_pumpkindies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: player collects bonuscard
//--------------------------------------------------------------------------------------------------
bool gt_playercollectsbonuscard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_card_position;
    int lv_rand;
    int lv_reward_multi;
    int lv_end_count;
    string lv_unit_type;

    // Automatic Variable Declarations
    int auto082B3130_val;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_card_position = UnitGetPosition(EventUnit());
    lv_rand = RandomInt(1, 35);
    lv_reward_multi = 1;
    lv_end_count = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_can_spawn_smith_for_player(lv_player) == false)) {
        lv_rand = RandomInt(1, 34);
    }

    if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
        lv_reward_multi = (lv_reward_multi + 1);
    }

    auto082B3130_val = lv_rand;
    if (auto082B3130_val == 1) {
        lv_unit_type = "EliteMarineSkin1";
        lv_end_count = (1 * lv_reward_multi);
    }
    else if (auto082B3130_val == 2) {
        lv_unit_type = "EliteMarineSkin2";
        lv_end_count = (1 * lv_reward_multi);
    }
    else if (auto082B3130_val == 3) {
        lv_unit_type = "EliteMarineSkin3";
        lv_end_count = (1 * lv_reward_multi);
    }
    else if (auto082B3130_val == 4) {
        lv_unit_type = "EliteMarineSkin4";
        lv_end_count = (1 * lv_reward_multi);
    }
    else if (auto082B3130_val == 5) {
        lv_unit_type = "VeteranMarine";
        lv_end_count = (2 * lv_reward_multi);
    }
    else if (auto082B3130_val == 6) {
        lv_unit_type = "Marine2";
        lv_end_count = (4 * lv_reward_multi);
    }
    else if (auto082B3130_val == 7) {
        lv_unit_type = "Mantis";
        lv_end_count = (1 * lv_reward_multi);
    }
    else if (auto082B3130_val == 8) {
        lv_unit_type = "Fruitinator";
        lv_end_count = (1 * lv_reward_multi);
    }
    else if (auto082B3130_val == 9) {
        lv_unit_type = "PickupPalletGas";
        lv_end_count = (3 * lv_reward_multi);
    }
    else if (auto082B3130_val == 10) {
        lv_unit_type = "PickupPalletMinerals";
        lv_end_count = (3 * lv_reward_multi);
    }
    else if (auto082B3130_val == 11) {
        lv_unit_type = "AdvancedBattery";
        lv_end_count = (1 * lv_reward_multi);
    }
    else if (auto082B3130_val == 12) {
        lv_unit_type = "HighDensityBattery";
        lv_end_count = (1 * lv_reward_multi);
    }
    else if (auto082B3130_val == 13) {
        lv_unit_type = "FirebatZergHex";
        lv_end_count = (2 * lv_reward_multi);
    }
    else if (auto082B3130_val == 14) {
        lv_unit_type = "AatroxArthasCritter";
        lv_end_count = (1 * lv_reward_multi);
    }
    else if (auto082B3130_val == 15) {
        lv_unit_type = "ChaosSpaceMarine";
        lv_end_count = (2 * lv_reward_multi);
    }
    else if (auto082B3130_val == 16) {
        lv_unit_type = "ChaosLord";
        lv_end_count = (1 * lv_reward_multi);
    }
    else if (auto082B3130_val == 17) {
        lv_unit_type = "ChaosCultist";
        lv_end_count = (5 * lv_reward_multi);
    }
    else if (auto082B3130_val == 18) {
        lv_unit_type = "SiegeTank22";
        lv_end_count = (1 * lv_reward_multi);
    }
    else if (auto082B3130_val == 19) {
        lv_unit_type = "FirebatZergHexOld";
        lv_end_count = (1 * lv_reward_multi);
    }
    else if (auto082B3130_val == 20) {
        lv_unit_type = "FirebatZergHex";
        lv_end_count = (2 * lv_reward_multi);
    }
    else if (auto082B3130_val == 21) {
        lv_unit_type = "EliteMarine";
        lv_end_count = (2 * lv_reward_multi);
    }
    else if (auto082B3130_val == 22) {
        lv_unit_type = "Buggo";
        if ((gf_flip_coin() == 1)) {
            lv_unit_type = "Oggub";
        }

        lv_end_count = (1 * lv_reward_multi);
    }
    else if (auto082B3130_val == 23) {
        lv_unit_type = "EliteMarine";
        lv_end_count = (2 * lv_reward_multi);
    }
    else if (auto082B3130_val == 24) {
        lv_unit_type = "EliteMarineSkin1";
        lv_end_count = (1 * lv_reward_multi);
    }
    else if (auto082B3130_val == 25) {
        lv_unit_type = "EliteMarineSkin2";
        lv_end_count = (1 * lv_reward_multi);
    }
    else if (auto082B3130_val == 26) {
        lv_unit_type = "EliteMarineSkin3";
        lv_end_count = (1 * lv_reward_multi);
    }
    else if (auto082B3130_val == 27) {
        lv_unit_type = "EliteMarineSkin4";
        lv_end_count = (1 * lv_reward_multi);
    }
    else if (auto082B3130_val == 28) {
        lv_unit_type = "VeteranMarine";
        lv_end_count = (2 * lv_reward_multi);
    }
    else if (auto082B3130_val == 29) {
        lv_unit_type = "Marine2";
        lv_end_count = (4 * lv_reward_multi);
    }
    else if (auto082B3130_val == 30) {
        lv_unit_type = "PickupPalletGas";
        lv_end_count = (3 * lv_reward_multi);
    }
    else if (auto082B3130_val == 31) {
        lv_unit_type = "PickupPalletMinerals";
        lv_end_count = (3 * lv_reward_multi);
    }
    else if (auto082B3130_val == 32) {
        lv_unit_type = "AdvancedBattery";
        lv_end_count = (1 * lv_reward_multi);
    }
    else if (auto082B3130_val == 33) {
        lv_unit_type = "ChaosSpaceMarine";
        lv_end_count = (2 * lv_reward_multi);
    }
    else if (auto082B3130_val == 34) {
        lv_unit_type = "ChaosCultist";
        lv_end_count = (5 * lv_reward_multi);
    }
    else if (auto082B3130_val == 35) {
        lv_unit_type = "SmithCritter";
        lv_end_count = (1 * lv_reward_multi);
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(lv_end_count, lv_unit_type, 0, lv_player, lv_card_position);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_playercollectsbonuscard_Init () {
    gt_playercollectsbonuscard = TriggerCreate("gt_playercollectsbonuscard_Func");
    TriggerEnable(gt_playercollectsbonuscard, false);
    TriggerAddEventUnitAbility(gt_playercollectsbonuscard, null, AbilityCommand("PickupNovaTechnology", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spawn present
//--------------------------------------------------------------------------------------------------
bool gt_spawnpresent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    int lv_r;
    int lv_pr;
    int lv_ptr;

    // Automatic Variable Declarations
    int auto45EE9BC5_val;
    int autoB609189F_val;

    // Variable Initialization
    lv_r = RandomInt(1, 40);
    lv_pr = RandomInt(1, 3);

    // Conditions
    if (testConds) {
        if (!((gv_is_xmas == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = RegionRandomPoint(RegionFromName(("Bonus " + IntToString(lv_r))));
    if ((lv_pr <= 2)) {
        lv_ptr = RandomInt(1, 5);
        autoB609189F_val = lv_ptr;
        if (autoB609189F_val == 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Candy4", 0, 0, lv_p);
        }
        else if (autoB609189F_val == 2) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Candy5", 0, 0, lv_p);
        }
        else if (autoB609189F_val == 3) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Candy", 0, 0, lv_p);
        }
        else if (autoB609189F_val == 4) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Candy2", 0, 0, lv_p);
        }
        else if (autoB609189F_val == 5) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Candy3", 0, 0, lv_p);
        }
        else {
        }
    }
    else {
        lv_ptr = RandomInt(1, 5);
        auto45EE9BC5_val = lv_ptr;
        if (auto45EE9BC5_val == 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SmallPresent", 0, 0, lv_p);
        }
        else if (auto45EE9BC5_val == 2) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Present2", 0, 0, lv_p);
        }
        else if (auto45EE9BC5_val == 3) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Present3", 0, 0, lv_p);
        }
        else if (auto45EE9BC5_val == 4) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Present", 0, 0, lv_p);
        }
        else if (auto45EE9BC5_val == 5) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "LargePresent", 0, 0, lv_p);
        }
        else {
        }
        if ((gf_flip_coin() == 1)) {
            if ((gf_flip_coin() == 1)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 255,0,0");
            }
            else {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 0,0,255");
            }
        }
        else {
            if ((gf_flip_coin() == 1)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 0,128,0");
            }
            else {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 255,0,128");
            }
        }
    }
    gf_revealpickup(UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spawnpresent_Init () {
    gt_spawnpresent = TriggerCreate("gt_spawnpresent_Func");
    TriggerEnable(gt_spawnpresent, false);
    TriggerAddEventTimePeriodic(gt_spawnpresent, 7.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: player collects present
//--------------------------------------------------------------------------------------------------
bool gt_playercollectspresent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_present_position;
    string lv_present_type;
    int lv_rand;
    int lv_rand_amount;
    string lv_elite_skin;

    // Automatic Variable Declarations
    int auto10FC66AF_val;
    int auto38D12FC5_val;
    int auto550510B2_val;
    int auto2BEA1BB1_val;
    int autoD6A894C4_val;
    int autoCE46644F_val;
    int autoE2CC568D_val;

    // Variable Initialization
    lv_present_position = UnitGetPosition(EventUnit());
    lv_present_type = UnitGetType(EventUnit());
    lv_rand = RandomInt(3, 10);

    // Conditions
    if (testConds) {
        if (!((gv_is_xmas == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    lv_player = UnitGetOwner(UnitGroupClosestToPoint(UnitGroup(null, c_playerAny, RegionCircle(lv_present_position, 1.8), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), lv_present_position));
    if ((lv_player <= 6) && (gv_players[lv_player].lv_eliteskin != 0)) {
        auto10FC66AF_val = gv_players[lv_player].lv_eliteskin;
        if (auto10FC66AF_val == 1) {
            lv_elite_skin = "EliteMarineSkin1";
        }
        else if (auto10FC66AF_val == 2) {
            lv_elite_skin = "EliteMarineSkin3";
        }
        else if (auto10FC66AF_val == 3) {
            lv_elite_skin = "EliteMarineSkin2";
        }
        else if (auto10FC66AF_val == 4) {
            lv_elite_skin = "EliteMarineSkin4";
        }
        else {
            lv_elite_skin = "EliteMarine";
        }
    }
    else {
        lv_elite_skin = "EliteMarine";
    }
    if ((lv_player <= 6)) {
        if (((lv_present_type == "Candy4") || (lv_present_type == "Candy5"))) {
            if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                lv_rand_amount = RandomInt(10, 40);
            }
            else {
                lv_rand_amount = RandomInt(5, 20);
            }
            PlayerModifyPropertyInt(lv_player, c_playerPropVespene, c_playerPropOperAdd, lv_rand_amount);
            libNtve_gf_CreateActorAtPoint("GainBountyTextKicker", lv_present_position);
        }
        else {
            if (((lv_present_type == "Candy") || (lv_present_type == "Candy2") || (lv_present_type == "Candy3"))) {
                if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                    lv_rand_amount = RandomInt(10, 40);
                }
                else {
                    lv_rand_amount = RandomInt(5, 20);
                }
                PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperAdd, lv_rand_amount);
                libNtve_gf_CreateActorAtPoint("GainBountyTextKicker", lv_present_position);
            }
            else {
                if ((lv_present_type == "SmallPresent")) {
                    autoD6A894C4_val = RandomInt(1, 4);
                    if (autoD6A894C4_val == 1) {
                        if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Sheep2", 0, lv_player, lv_present_position);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Sheep2", 0, lv_player, lv_present_position);
                        }
                        else {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Sheep2", 0, lv_player, lv_present_position);
                        }
                    }
                    else if (autoD6A894C4_val == 2) {
                        if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Cow2", 0, lv_player, lv_present_position);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Cow2", 0, lv_player, lv_present_position);
                        }
                        else {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Cow2", 0, lv_player, lv_present_position);
                        }
                    }
                    else if (autoD6A894C4_val == 3) {
                        if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Battery", 0, lv_player, lv_present_position);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Battery", 0, lv_player, lv_present_position);
                        }
                        else {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Battery", 0, lv_player, lv_present_position);
                        }
                    }
                    else if (autoD6A894C4_val == 4) {
                        if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                        }
                        else {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                        }
                    }
                    else {
                    }
                }
                else {
                    if ((lv_present_type == "LargePresent")) {
                        if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                            lv_rand_amount = RandomInt(5, 9);
                        }
                        else {
                            lv_rand_amount = RandomInt(3, 5);
                        }
                        autoCE46644F_val = RandomInt(1, 5);
                        if (autoCE46644F_val == 1) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "Reaper2", 0, lv_player, lv_present_position);
                        }
                        else if (autoCE46644F_val == 2) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "ShockTrooper", 0, lv_player, lv_present_position);
                        }
                        else if (autoCE46644F_val == 3) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "Marine2", 0, lv_player, lv_present_position);
                        }
                        else if (autoCE46644F_val == 4) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "VeteranMarine", 0, lv_player, lv_present_position);
                        }
                        else if (autoCE46644F_val == 5) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, lv_elite_skin, 0, lv_player, lv_present_position);
                        }
                        else {
                        }
                    }
                    else {
                        if (((lv_present_type == "Present2") || (lv_present_type == "Present3") || (lv_present_type == "Present"))) {
                            if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                                lv_rand_amount = RandomInt(3, 5);
                            }
                            else {
                                lv_rand_amount = RandomInt(1, 2);
                            }
                            autoE2CC568D_val = RandomInt(1, 5);
                            if (autoE2CC568D_val == 1) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "Reaper2", 0, lv_player, lv_present_position);
                            }
                            else if (autoE2CC568D_val == 2) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "ShockTrooper", 0, lv_player, lv_present_position);
                            }
                            else if (autoE2CC568D_val == 3) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "Marine2", 0, lv_player, lv_present_position);
                            }
                            else if (autoE2CC568D_val == 4) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "VeteranMarine", 0, lv_player, lv_present_position);
                            }
                            else if (autoE2CC568D_val == 5) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, lv_elite_skin, 0, lv_player, lv_present_position);
                            }
                            else {
                            }
                        }

                    }
                }
            }
        }
    }
    else {
        if (((lv_present_type == "Candy4") || (lv_present_type == "Candy5") || (lv_present_type == "Candy") || (lv_present_type == "Candy2") || (lv_present_type == "Candy3"))) {
            lv_rand_amount = RandomInt(10, 40);
            PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperAdd, lv_rand_amount);
        }
        else {
            if ((lv_present_type == "SmallPresent")) {
                auto38D12FC5_val = RandomInt(1, 4);
                if (auto38D12FC5_val == 1) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Slowling", 0, lv_player, lv_present_position);
                }
                else if (auto38D12FC5_val == 2) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Creeper", 0, lv_player, lv_present_position);
                }
                else if (auto38D12FC5_val == 3) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tankling", 0, lv_player, lv_present_position);
                }
                else if (auto38D12FC5_val == 4) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Strikeling", 0, lv_player, lv_present_position);
                }
                else {
                }
                UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), lv_present_position), c_orderQueueReplace);
            }
            else {
                if ((lv_present_type == "LargePresent")) {
                    lv_rand_amount = RandomInt(5, 9);
                    auto550510B2_val = RandomInt(1, 4);
                    if (auto550510B2_val == 1) {
                        if ((gv_armor_level >= 3)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "PrimalRoach2", 0, lv_player, lv_present_position);
                        }
                        else {
                            libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "Tankling", 0, lv_player, lv_present_position);
                        }
                    }
                    else if (auto550510B2_val == 2) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "Tankling", 0, lv_player, lv_present_position);
                    }
                    else if (auto550510B2_val == 3) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "Creeper", 0, lv_player, lv_present_position);
                    }
                    else if (auto550510B2_val == 4) {
                        if ((gv_armor_level >= 2)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "Roach2", 0, lv_player, lv_present_position);
                        }
                        else {
                            libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "Creeper", 0, lv_player, lv_present_position);
                        }
                    }
                    else {
                    }
                    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), lv_present_position), c_orderQueueReplace);
                }
                else {
                    if (((lv_present_type == "Present2") || (lv_present_type == "Present3") || (lv_present_type == "Present"))) {
                        lv_rand_amount = RandomInt(1, 2);
                        auto2BEA1BB1_val = RandomInt(1, 4);
                        if (auto2BEA1BB1_val == 1) {
                            if ((gv_armor_level >= 3)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "PrimalRoach2", 0, lv_player, lv_present_position);
                            }
                            else {
                                libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "Tankling", 0, lv_player, lv_present_position);
                            }
                        }
                        else if (auto2BEA1BB1_val == 2) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "Tankling", 0, lv_player, lv_present_position);
                        }
                        else if (auto2BEA1BB1_val == 3) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "Creeper", 0, lv_player, lv_present_position);
                        }
                        else if (auto2BEA1BB1_val == 4) {
                            if ((gv_armor_level >= 2)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "Roach2", 0, lv_player, lv_present_position);
                            }
                            else {
                                libNtve_gf_CreateUnitsWithDefaultFacing(lv_rand_amount, "Creeper", 0, lv_player, lv_present_position);
                            }
                        }
                        else {
                        }
                        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), lv_present_position), c_orderQueueReplace);
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_playercollectspresent_Init () {
    gt_playercollectspresent = TriggerCreate("gt_playercollectspresent_Func");
    TriggerEnable(gt_playercollectspresent, false);
    TriggerAddEventUnitAbility(gt_playercollectspresent, null, AbilityCommand("PickupXmasPresent", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: grab a present
//--------------------------------------------------------------------------------------------------
bool gt_grabapresent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_present;
    unitgroup lv_ugroup;

    // Automatic Variable Declarations
    unitgroup autoCFB24A23_g;
    int autoCFB24A23_u;
    unit autoCFB24A23_var;

    // Variable Initialization
    lv_ugroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_is_xmas == true))) {
            return false;
        }

        if (!((gv_difficulty > 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCFB24A23_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCFB24A23_u = UnitGroupCount(autoCFB24A23_g, c_unitCountAll);
    for (;; autoCFB24A23_u -= 1) {
        autoCFB24A23_var = UnitGroupUnitFromEnd(autoCFB24A23_g, autoCFB24A23_u);
        if (autoCFB24A23_var == null) { break; }
        if (((UnitGetType(autoCFB24A23_var) == "Candy4") || (UnitGetType(autoCFB24A23_var) == "Candy5") || (UnitGetType(autoCFB24A23_var) == "Candy") || (UnitGetType(autoCFB24A23_var) == "Candy2") || (UnitGetType(autoCFB24A23_var) == "Candy3") || (UnitGetType(autoCFB24A23_var) == "LargePresent") || (UnitGetType(autoCFB24A23_var) == "Present2") || (UnitGetType(autoCFB24A23_var) == "Present3") || (UnitGetType(autoCFB24A23_var) == "Present") || (UnitGetType(autoCFB24A23_var) == "SmallPresent"))) {
            UnitGroupAdd(lv_ugroup, autoCFB24A23_var);
        }

    }
    lv_present = UnitGroupClosestToPoint(lv_ugroup, PointFromId(1910508930));
    if ((lv_present != null)) {
        UnitIssueOrder(UnitGroupClosestToPoint(UnitGroup("Slowling", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_present)), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_present)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_grabapresent_Init () {
    gt_grabapresent = TriggerCreate("gt_grabapresent_Func");
    TriggerEnable(gt_grabapresent, false);
    TriggerAddEventTimePeriodic(gt_grabapresent, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spawn happy new year gift
//--------------------------------------------------------------------------------------------------
bool gt_spawnhappynewyeargift_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    int lv_r;
    int lv_pr;
    int lv_ptr;

    // Automatic Variable Declarations
    int auto4F539C53_val;
    int auto3ECE22DD_val;
    int auto8FAD6EC9_val;

    // Variable Initialization
    lv_r = RandomInt(1, 40);
    lv_pr = RandomInt(1, 3);

    // Conditions
    if (testConds) {
        if (!((gv_is_hny == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = RegionRandomPoint(RegionFromName(("Bonus " + IntToString(lv_r))));
    auto4F539C53_val = lv_pr;
    if (auto4F539C53_val == 1) {
        lv_ptr = RandomInt(1, 3);
        auto3ECE22DD_val = lv_ptr;
        if (auto3ECE22DD_val == 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupScrapSalvage1x1", 0, 0, lv_p);
        }
        else if (auto3ECE22DD_val == 2) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupScrapSalvage2x2", 0, 0, lv_p);
        }
        else if (auto3ECE22DD_val == 3) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupScrapSalvage3x3", 0, 0, lv_p);
        }
        else {
        }
    }
    else if (auto4F539C53_val == 2) {
        lv_ptr = RandomInt(1, 3);
        auto8FAD6EC9_val = lv_ptr;
        if (auto8FAD6EC9_val == 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupHealth100", 0, 0, lv_p);
        }
        else if (auto8FAD6EC9_val == 2) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupEnergy100", 0, 0, lv_p);
        }
        else if (auto8FAD6EC9_val == 3) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupRestorationCharge", 0, 0, lv_p);
        }
        else {
        }
    }
    else if (auto4F539C53_val == 3) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupPlasmaRounds", 0, 0, lv_p);
    }
    else {
    }
    gf_revealpickup(UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spawnhappynewyeargift_Init () {
    gt_spawnhappynewyeargift = TriggerCreate("gt_spawnhappynewyeargift_Func");
    TriggerEnable(gt_spawnhappynewyeargift, false);
    TriggerAddEventTimePeriodic(gt_spawnhappynewyeargift, 9.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: player collects happy new year gift
//--------------------------------------------------------------------------------------------------
bool gt_playercollectshappynewyeargift_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_present_position;
    string lv_present_type;
    int lv_rand;
    int lv_rand_amount;

    // Automatic Variable Declarations
    int auto68BE1E46_val;
    int auto0A032D53_val;
    int autoAF63B087_val;
    int auto7EFBD487_val;

    // Variable Initialization
    lv_present_position = UnitGetPosition(EventUnit());
    lv_present_type = UnitGetType(EventUnit());
    lv_rand = RandomInt(3, 10);

    // Conditions
    if (testConds) {
        if (!((gv_is_hny == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(UnitGroupClosestToPoint(UnitGroup(null, c_playerAny, RegionCircle(lv_present_position, 1.8), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), lv_present_position));
    if ((lv_player <= 7) && (lv_player >= 1)) {
        if ((lv_player <= 6)) {
            if (((lv_present_type == "PickupScrapSalvage1x1") || (lv_present_type == "PickupScrapSalvage2x2") || (lv_present_type == "PickupScrapSalvage3x3"))) {
                if ((lv_present_type == "PickupScrapSalvage1x1")) {
                    auto68BE1E46_val = RandomInt(1, 3);
                    if (auto68BE1E46_val == 1) {
                        lv_rand_amount = RandomInt(20, 30);
                    }
                    else if (auto68BE1E46_val == 2) {
                        if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Battery", 0, lv_player, lv_present_position);
                            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Battery", 0, lv_player, lv_present_position);
                            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                        }
                        else {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Battery", 0, lv_player, lv_present_position);
                            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                        }
                    }
                    else if (auto68BE1E46_val == 3) {
                        if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralTrader", 0, lv_player, lv_present_position);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralTrader", 0, lv_player, lv_present_position);
                        }
                        else {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralTrader", 0, lv_player, lv_present_position);
                        }
                    }
                    else {
                    }
                }
                else {
                    if ((lv_present_type == "PickupScrapSalvage2x2")) {
                        auto0A032D53_val = RandomInt(1, 3);
                        if (auto0A032D53_val == 1) {
                            lv_rand_amount = RandomInt(40, 60);
                        }
                        else if (auto0A032D53_val == 2) {
                            if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                            }
                            else {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                            }
                        }
                        else if (auto0A032D53_val == 3) {
                            if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "GasTrader", 0, lv_player, lv_present_position);
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "GasTrader", 0, lv_player, lv_present_position);
                            }
                            else {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "GasTrader", 0, lv_player, lv_present_position);
                            }
                        }
                        else {
                        }
                    }
                    else {
                        if ((lv_present_type == "PickupScrapSalvage3x3")) {
                            autoAF63B087_val = RandomInt(1, 3);
                            if (autoAF63B087_val == 1) {
                                if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                                    lv_rand_amount = RandomInt(120, 180);
                                }
                                else {
                                    lv_rand_amount = RandomInt(60, 90);
                                }
                            }
                            else if (autoAF63B087_val == 2) {
                                if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                                }
                                else {
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                                }
                            }
                            else if (autoAF63B087_val == 3) {
                                if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralTrader", 0, lv_player, lv_present_position);
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GasTrader", 0, lv_player, lv_present_position);
                                }
                                else {
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralTrader", 0, lv_player, lv_present_position);
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GasTrader", 0, lv_player, lv_present_position);
                                }
                            }
                            else {
                            }
                        }

                    }
                }
                if ((lv_rand_amount != 0)) {
                    PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperAdd, lv_rand_amount);
                    libNtve_gf_CreateActorAtPoint("GainBountyTextKicker", lv_present_position);
                }

            }
            else {
                if (((lv_present_type == "PickupHealth100") || (lv_present_type == "PickupEnergy100") || (lv_present_type == "PickupRestorationCharge"))) {
                    if ((lv_present_type == "PickupHealth100")) {
                        if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FirebatZergHex", 0, lv_player, lv_present_position);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FirebatZergHex", 0, lv_player, lv_present_position);
                        }
                        else {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FirebatZergHex", 0, lv_player, lv_present_position);
                        }
                    }
                    else {
                        if ((lv_present_type == "PickupEnergy100")) {
                            if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                            }
                            else {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                            }
                        }
                        else {
                            if ((lv_present_type == "PickupRestorationCharge")) {
                                if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FirebatZergHex", 0, lv_player, lv_present_position);
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                                }
                                else {
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FirebatZergHex", 0, lv_player, lv_present_position);
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdvancedBattery", 0, lv_player, lv_present_position);
                                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                                }
                            }

                        }
                    }
                }
                else {
                    if ((lv_present_type == "PickupPlasmaRounds")) {
                        gv_plasma_rounds[lv_player] = (gv_plasma_rounds[lv_player] + 1);
                        if ((gv_plasma_rounds[lv_player] == 3)) {
                            if ((gv_players[lv_player].lv_has_pickup_doubler == true)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighDensityBattery", 0, lv_player, lv_present_position);
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighDensityBattery", 0, lv_player, lv_present_position);
                                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(lv_player) + StringExternal("Param/Value/AEE0EC62")));
                            }
                            else {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighDensityBattery", 0, lv_player, lv_present_position);
                                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(lv_player) + StringExternal("Param/Value/B7A2DC2E")));
                            }
                            gv_plasma_rounds[lv_player] = 0;
                        }
                        else {
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(lv_player) + (StringExternal("Param/Value/A941D8BE") + (IntToText(gv_plasma_rounds[lv_player]) + (StringExternal("Param/Value/41EEE019") + StringExternal("Param/Value/E07D26ED"))))));
                        }
                    }

                }
            }
        }
        else {
            if (((lv_present_type == "PickupScrapSalvage1x1") || (lv_present_type == "PickupScrapSalvage2x2") || (lv_present_type == "PickupScrapSalvage3x3") || (lv_present_type == "PickupHealth100") || (lv_present_type == "PickupEnergy100") || (lv_present_type == "PickupRestorationCharge") || (lv_present_type == "PickupPlasmaRounds"))) {
                lv_rand_amount = RandomInt(50, 100);
                PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperAdd, lv_rand_amount);
            }

        }
        auto7EFBD487_val = RandomInt(1, 3);
        if (auto7EFBD487_val == 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksBlue", 0, 0, lv_present_position);
        }
        else if (auto7EFBD487_val == 2) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksRed", 0, 0, lv_present_position);
        }
        else if (auto7EFBD487_val == 3) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksYellow", 0, 0, lv_present_position);
        }
        else {
        }
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_playercollectshappynewyeargift_Init () {
    gt_playercollectshappynewyeargift = TriggerCreate("gt_playercollectshappynewyeargift_Func");
    TriggerEnable(gt_playercollectshappynewyeargift, false);
    TriggerAddEventUnitAbility(gt_playercollectshappynewyeargift, null, AbilityCommand("PickupHNYgift", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: grab a hny gift
//--------------------------------------------------------------------------------------------------
bool gt_grabahnygift_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_present;
    unitgroup lv_ugroup;

    // Automatic Variable Declarations
    unitgroup auto9B8C2E7F_g;
    int auto9B8C2E7F_u;
    unit auto9B8C2E7F_var;

    // Variable Initialization
    lv_ugroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_is_hny == true))) {
            return false;
        }

        if (!((gv_difficulty > 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9B8C2E7F_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9B8C2E7F_u = UnitGroupCount(auto9B8C2E7F_g, c_unitCountAll);
    for (;; auto9B8C2E7F_u -= 1) {
        auto9B8C2E7F_var = UnitGroupUnitFromEnd(auto9B8C2E7F_g, auto9B8C2E7F_u);
        if (auto9B8C2E7F_var == null) { break; }
        if (((UnitGetType(auto9B8C2E7F_var) == "PickupScrapSalvage1x1") || (UnitGetType(auto9B8C2E7F_var) == "PickupScrapSalvage2x2") || (UnitGetType(auto9B8C2E7F_var) == "PickupScrapSalvage3x3") || (UnitGetType(auto9B8C2E7F_var) == "PickupHealth100") || (UnitGetType(auto9B8C2E7F_var) == "PickupEnergy100") || (UnitGetType(auto9B8C2E7F_var) == "PickupRestorationCharge") || (UnitGetType(auto9B8C2E7F_var) == "PickupPlasmaRounds"))) {
            UnitGroupAdd(lv_ugroup, auto9B8C2E7F_var);
        }

    }
    lv_present = UnitGroupClosestToPoint(lv_ugroup, PointFromId(1910508930));
    if ((lv_present != null)) {
        UnitIssueOrder(UnitGroupClosestToPoint(UnitGroup("Slowling", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_present)), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_present)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_grabahnygift_Init () {
    gt_grabahnygift = TriggerCreate("gt_grabahnygift_Func");
    TriggerEnable(gt_grabahnygift, false);
    TriggerAddEventTimePeriodic(gt_grabahnygift, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: remove all fireworks
//--------------------------------------------------------------------------------------------------
bool gt_removeallfireworks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_ugroup;

    // Automatic Variable Declarations
    unitgroup auto68449A95_g;
    int auto68449A95_u;
    unit auto68449A95_var;
    unitgroup autoD33CBC2A_g;
    int autoD33CBC2A_u;
    unit autoD33CBC2A_var;
    unitgroup auto0E846CE5_g;
    int auto0E846CE5_u;
    unit auto0E846CE5_var;

    // Variable Initialization
    lv_ugroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_is_hny == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ugroup = UnitGroup("FireworksBlue", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto68449A95_g = lv_ugroup;
    auto68449A95_u = UnitGroupCount(auto68449A95_g, c_unitCountAll);
    for (;; auto68449A95_u -= 1) {
        auto68449A95_var = UnitGroupUnitFromEnd(auto68449A95_g, auto68449A95_u);
        if (auto68449A95_var == null) { break; }
        UnitRemove(auto68449A95_var);
    }
    lv_ugroup = UnitGroup("FireworksRed", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD33CBC2A_g = lv_ugroup;
    autoD33CBC2A_u = UnitGroupCount(autoD33CBC2A_g, c_unitCountAll);
    for (;; autoD33CBC2A_u -= 1) {
        autoD33CBC2A_var = UnitGroupUnitFromEnd(autoD33CBC2A_g, autoD33CBC2A_u);
        if (autoD33CBC2A_var == null) { break; }
        UnitRemove(autoD33CBC2A_var);
    }
    lv_ugroup = UnitGroup("FireworksYellow", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0E846CE5_g = lv_ugroup;
    auto0E846CE5_u = UnitGroupCount(auto0E846CE5_g, c_unitCountAll);
    for (;; auto0E846CE5_u -= 1) {
        auto0E846CE5_var = UnitGroupUnitFromEnd(auto0E846CE5_g, auto0E846CE5_u);
        if (auto0E846CE5_var == null) { break; }
        UnitRemove(auto0E846CE5_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_removeallfireworks_Init () {
    gt_removeallfireworks = TriggerCreate("gt_removeallfireworks_Func");
    TriggerEnable(gt_removeallfireworks, false);
    TriggerAddEventTimePeriodic(gt_removeallfireworks, 120.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spawn hell forces
//--------------------------------------------------------------------------------------------------
bool gt_spawnhellforces_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;
    unitgroup lv_agroup;
    int lv_offset;

    // Automatic Variable Declarations
    unitgroup autoEE1A3A02_g;
    int autoEE1A3A02_u;
    unit autoEE1A3A02_var;

    // Variable Initialization
    lv_group = UnitGroupEmpty();
    lv_agroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, "MeleeMinionHell", "LifeStart", 7, (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "MeleeMinionHell", "LifeStart", 7) + 2.0));
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, "MeleeMinionHell", "LifeMax", 7, (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "MeleeMinionHell", "LifeMax", 7) + 2.0));
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, "RangedMinionHell", "LifeStart", 7, (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "RangedMinionHell", "LifeStart", 7) + 2.0));
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, "RangedMinionHell", "LifeMax", 7, (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "RangedMinionHell", "LifeMax", 7) + 2.0));
    if ((gv_difficulty >= 5)) {
        lv_offset = (gv_difficulty - 5);
    }
    else {
        lv_offset = 1;
    }
    autoEE1A3A02_g = UnitGroup("Hellfort", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEE1A3A02_u = UnitGroupCount(autoEE1A3A02_g, c_unitCountAll);
    for (;; autoEE1A3A02_u -= 1) {
        autoEE1A3A02_var = UnitGroupUnitFromEnd(autoEE1A3A02_g, autoEE1A3A02_u);
        if (autoEE1A3A02_var == null) { break; }
        libNtve_gf_CreateUnitsAtPoint2((6 + lv_offset), "MeleeMinionHell", 0, 7, UnitGetPosition(autoEE1A3A02_var));
        UnitGroupAddUnitGroup(lv_agroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsAtPoint2((6 + lv_offset), "RangedMinionHell", 0, 7, UnitGetPosition(autoEE1A3A02_var));
        UnitGroupAddUnitGroup(lv_agroup, UnitLastCreatedGroup());
        if ((UnitGroupCount(UnitGroup("WizardMinion", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 80)) {
            if ((gv_difficulty >= 7)) {
                libNtve_gf_CreateUnitsAtPoint2(2, "WizardMinion", 0, 7, UnitGetPosition(autoEE1A3A02_var));
            }
            else {
                libNtve_gf_CreateUnitsAtPoint2(1, "WizardMinion", 0, 7, UnitGetPosition(autoEE1A3A02_var));
            }
            UnitGroupAddUnitGroup(lv_group, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_infestors[gv_wizard_ug_counter].lv_unit_group, UnitLastCreatedGroup());
            gv_wizard_ug_counter += 1;
            if ((gv_wizard_ug_counter == 13)) {
                gv_wizard_ug_counter = 1;
            }

        }

    }
    if ((UnitGroupCount(lv_group, c_unitCountAlive) > 0)) {
        UnitGroupIssueOrder(lv_group, OrderTargetingUnit(AbilityCommand("TransfusionInfestor", 0), UnitGroupRandomUnit(UnitGroup("Hellfort", 7, RegionCircle(UnitGetPosition(UnitGroupRandomUnit(lv_group, c_unitCountAlive)), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
        UnitGroupIssueOrder(lv_group, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1910508930)), c_orderQueueAddToEnd);
    }

    if ((UnitGroupCount(lv_agroup, c_unitCountAlive) > 0)) {
        UnitGroupIssueOrder(lv_agroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Rally " + IntToString(gf_get_closest_alive_player_position(UnitGroupCenterOfGroup(lv_agroup)))))), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spawnhellforces_Init () {
    gt_spawnhellforces = TriggerCreate("gt_spawnhellforces_Func");
    TriggerEnable(gt_spawnhellforces, false);
    TriggerAddEventTimePeriodic(gt_spawnhellforces, 45.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: building gets attacked try defend with wizards
//--------------------------------------------------------------------------------------------------
bool gt_buildinggetsattackedtrydefendwithwizards_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((gv_mgc_type == 2))) {
            return false;
        }

        if (!((gv_wizard_action_cooldown == false))) {
            return false;
        }

        if (!((UnitGetOwner(lv_unit) == 7))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "ShatterL1Damage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "ShatterL2Damage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "ShatterL3Damage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "ZergBuildingNotOnCreepDamage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "IonBeamDirectDamage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "IonBeamDirectBonusDamageOmegalisk"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "IonStormDoTDamage"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) != "IonBeam"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) != "IonStorm"))) {
            return false;
        }

        if (!((gf_unit_is_in_pocketbase(lv_unit) != true))) {
            return false;
        }

        if (!(((UnitGetType(lv_unit) == "SpineCrawler") || (UnitGetType(lv_unit) == "SlowlingSpawner") || (UnitGetType(lv_unit) == "CreeperSpawner") || (UnitGetType(lv_unit) == "StrikelingSpawner") || (UnitGetType(lv_unit) == "TanklingSpawner") || (UnitGetType(lv_unit) == "RoachSpawner") || (UnitGetType(lv_unit) == "PrimalRoachSpawner") || (UnitGetType(lv_unit) == "UltraliskSpawner") || (UnitGetType(lv_unit) == "BrutaliskSpawner") || (UnitGetType(lv_unit) == "BanelingSpawner") || (UnitGetType(lv_unit) == "BeastlingSpawner") || (UnitGetType(lv_unit) == "InfusedRoachSpawner") || (UnitGetType(lv_unit) == "RavatorSpawner") || (UnitGetType(lv_unit) == "TorraliskSpawner") || (UnitGetType(lv_unit) == "MineralExtractor") || (UnitGetType(lv_unit) == "CreepTumor2") || (UnitGetType(lv_unit) == "LargeSpineCrawler") || (UnitGetType(lv_unit) == "Nest2") || (UnitGetType(lv_unit) == "Hellfort") || (UnitGetType(lv_unit) == "CharEggSackOneEgg") || (UnitGetType(lv_unit) == "CharEggSackTwoEgg") || (UnitGetType(lv_unit) == "CharEggSackThreeEgg")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_defend_point_with_wizard(EventUnitDamageSourcePoint(), gf_get_closest_position(EventUnitDamageSourcePoint()), lv_unit);
    gv_wizard_action_cooldown = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_buildinggetsattackedtrydefendwithwizards_Init () {
    gt_buildinggetsattackedtrydefendwithwizards = TriggerCreate("gt_buildinggetsattackedtrydefendwithwizards_Func");
    TriggerEnable(gt_buildinggetsattackedtrydefendwithwizards, false);
    TriggerAddEventUnitDamaged(gt_buildinggetsattackedtrydefendwithwizards, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: reset wizard action cooldown
//--------------------------------------------------------------------------------------------------
bool gt_resetwizardactioncooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_mgc_type == 2))) {
            return false;
        }

        if (!((gv_wizard_action_cooldown == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wizard_action_cooldown = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_resetwizardactioncooldown_Init () {
    gt_resetwizardactioncooldown = TriggerCreate("gt_resetwizardactioncooldown_Func");
    TriggerEnable(gt_resetwizardactioncooldown, false);
    TriggerAddEventTimePeriodic(gt_resetwizardactioncooldown, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: remove fort debris (actorfix)
//--------------------------------------------------------------------------------------------------
bool gt_removefortdebrisactorfix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Hellfort"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AnimWait(libNtve_gf_MainActorofUnit(EventUnit()), "Death", 9.0, c_animationOffsetStart);
    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "Destroy");
    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_removefortdebrisactorfix_Init () {
    gt_removefortdebrisactorfix = TriggerCreate("gt_removefortdebrisactorfix_Func");
    TriggerEnable(gt_removefortdebrisactorfix, false);
    TriggerAddEventUnitDied(gt_removefortdebrisactorfix, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: change daytime
//--------------------------------------------------------------------------------------------------
bool gt_changedaytime_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_is_night_king == true))) {
            return false;
        }

        if (!((GameGetMissionTime() > 5.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_last_daytime_switch_time + gv_night_length) == FixedToInt(GameGetMissionTime()))) {
        if ((gv_is_night == true)) {
            gf_make_day();
            gv_long_night = false;
            gv_night_length = 240;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/FAAFEC5F") + StringToText("")));
        }
        else {
            if ((RandomInt(1, 4) == 1)) {
                gv_long_night = true;
                gv_night_length = RandomInt(240, 480);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/852EC2E6") + StringToText("")));
            }
            else {
                gv_night_length = RandomInt(180, 240);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/33A95AC9") + StringToText("")));
            }
            gf_make_night();
        }
        gv_last_daytime_switch_time = FixedToInt(GameGetMissionTime());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_changedaytime_Init () {
    gt_changedaytime = TriggerCreate("gt_changedaytime_Func");
    TriggerEnable(gt_changedaytime, false);
    TriggerAddEventTimePeriodic(gt_changedaytime, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solar Weapons finished
//--------------------------------------------------------------------------------------------------
bool gt_SolarWeaponsfinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_o;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "BarracksTechReactor"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() == "SolarWeapons"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_players[UnitGetOwner(EventUnit())].lv_solar_weapons += 1;
    if ((gv_is_night == false)) {
        CatalogReferenceSet("Unit,FirebatZergHex,EnergyRegenRate", UnitGetOwner(EventUnit()), IntToString(2));
        CatalogReferenceSet("Unit,EliteMarine,EnergyRegenRate", UnitGetOwner(EventUnit()), IntToString(2));
        CatalogReferenceSet("Unit,EliteMarineSkin1,EnergyRegenRate", UnitGetOwner(EventUnit()), IntToString(2));
        CatalogReferenceSet("Unit,EliteMarineSkin2,EnergyRegenRate", UnitGetOwner(EventUnit()), IntToString(2));
        CatalogReferenceSet("Unit,EliteMarineSkin3,EnergyRegenRate", UnitGetOwner(EventUnit()), IntToString(2));
        CatalogReferenceSet("Unit,Marine2,EnergyRegenRate", UnitGetOwner(EventUnit()), IntToString(2));
        CatalogReferenceSet("Unit,ShockTrooper,EnergyRegenRate", UnitGetOwner(EventUnit()), IntToString(2));
        CatalogReferenceSet("Unit,VeteranMarine,EnergyRegenRate", UnitGetOwner(EventUnit()), IntToString(2));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolarWeaponsfinished_Init () {
    gt_SolarWeaponsfinished = TriggerCreate("gt_SolarWeaponsfinished_Func");
    TriggerEnable(gt_SolarWeaponsfinished, false);
    TriggerAddEventUnitResearchProgress(gt_SolarWeaponsfinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord dies
//--------------------------------------------------------------------------------------------------
bool gt_Overlorddies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_is_night_king == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Overlord"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    if ((libNtve_gf_KillingPlayer() < 7)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupNovaTechnology", 0, libNtve_gf_KillingPlayer(), UnitGetPosition(EventUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Overlorddies_Init () {
    gt_Overlorddies = TriggerCreate("gt_Overlorddies_Func");
    TriggerEnable(gt_Overlorddies, false);
    TriggerAddEventUnitDied(gt_Overlorddies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -timer
//--------------------------------------------------------------------------------------------------
bool gt_timer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_players[lv_player].lv_old_timer == 1)) {
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/93530990"));
    }
    else {
        DialogSetVisible(gv_timer_countdown_dialog, PlayerGroupSingle(lv_player), false);
        gv_players[lv_player].lv_old_timer = 1;
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/5815D306"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_timer_Init () {
    gt_timer = TriggerCreate("gt_timer_Func");
    TriggerAddEventChatMessage(gt_timer, c_playerAny, "-timer", true);
    TriggerAddEventChatMessage(gt_timer, c_playerAny, "-original countdown", true);
    TriggerAddEventChatMessage(gt_timer, c_playerAny, "-original timer", true);
    TriggerAddEventChatMessage(gt_timer, c_playerAny, "-countdown", true);
    TriggerAddEventChatMessage(gt_timer, c_playerAny, "-old countdown", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: send buggo home
//--------------------------------------------------------------------------------------------------
bool gt_sendbuggohome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Buggo"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_owner < 1) || (lv_owner > 6))) {
        UnitRemove(EventUnitCreatedUnit());
    }
    else {
        if ((gv_players[lv_owner].lv_support_type == "Marauder")) {
            libNtve_gf_ReplaceUnit(EventUnitCreatedUnit(), "Oggub", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
            UnitIssueOrder(libNtve_gf_LastReplacedUnit(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupUnit(UnitGroup("CommandCenter2", lv_owner, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1))), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(EventUnitCreatedUnit(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupUnit(UnitGroup("CommandCenter2", lv_owner, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1))), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_sendbuggohome_Init () {
    gt_sendbuggohome = TriggerCreate("gt_sendbuggohome_Func");
    TriggerAddEventUnitCreated(gt_sendbuggohome, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: nest is low health
//--------------------------------------------------------------------------------------------------
bool gt_nestislowhealth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((gv_difficulty > 3))) {
            return false;
        }

        if (!((UnitGetOwner(lv_unit) == 7))) {
            return false;
        }

        if (!(((UnitGetType(lv_unit) == "Nest2") || (UnitGetType(lv_unit) == "Hellfort")))) {
            return false;
        }

        if (!((gv_nest_snipe_cd == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_is_pvp() == true)) {
    }
    else {
        if ((UnitGetPropertyInt(lv_unit, c_unitPropLife, c_unitPropCurrent) < 210)) {
            gf_try_kill_nest(lv_unit);
            gv_nest_snipe_cd = 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_nestislowhealth_Init () {
    gt_nestislowhealth = TriggerCreate("gt_nestislowhealth_Func");
    TriggerAddEventUnitDamaged(gt_nestislowhealth, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: creep source died
//--------------------------------------------------------------------------------------------------
bool gt_creepsourcedied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_owner;
    point lv_unit_position;
    string lv_type;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_owner = UnitGetOwner(EventUnit());
    lv_unit_position = UnitGetPosition(lv_unit);
    lv_type = UnitGetType(lv_unit);

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(lv_unit) == "CreepTumor2") || (UnitGetType(lv_unit) == "Nest2")))) {
            return false;
        }

        if (!((lv_owner == 7))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_outer_tumors, lv_unit) == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_outer_nests, lv_unit) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_dead_creep_count += 1;
    gv_dead_creep[gv_dead_creep_count].lv_position = lv_unit_position;
    gv_dead_creep[gv_dead_creep_count].lv_unit_type = lv_type;
    if ((UnitGroupHasUnit(gv_prefuse_infestors_nests, lv_unit) == true)) {
        UnitGroupRemove(gv_prefuse_infestors_nests, lv_unit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_creepsourcedied_Init () {
    gt_creepsourcedied = TriggerCreate("gt_creepsourcedied_Func");
    TriggerAddEventUnitDied(gt_creepsourcedied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: creep source rebuild started
//--------------------------------------------------------------------------------------------------
bool gt_creepsourcerebuildstarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    point lv_position;
    point lv_unit_position;
    string lv_type;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = EventPlayer();
    lv_position = UnitGetPosition(EventUnitProgressUnit());
    lv_unit_position = UnitGetPosition(EventUnitProgressUnit());
    lv_type = UnitGetType(EventUnitProgressUnit());

    // Conditions
    if (testConds) {
        if (!(((lv_type == "CreepTumor2") || (lv_type == "Nest2")))) {
            return false;
        }

        if (!((lv_owner == 7))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_difficulty >= 7)) {
        UnitBehaviorAdd(EventUnitProgressUnit(), "SpawnProtection", EventUnitProgressUnit(), 1);
    }

    gf_rebuild_dead_creep_array(EventUnitProgressUnit());
    if ((RegionContainsPoint(RegionCircle(PointFromId(1910508930), 10.0), lv_position) == true)) {
        UnitGroupAdd(gv_prefuse_infestors_nests, EventUnitProgressUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_creepsourcerebuildstarted_Init () {
    gt_creepsourcerebuildstarted = TriggerCreate("gt_creepsourcerebuildstarted_Func");
    TriggerAddEventUnitConstructProgress(gt_creepsourcerebuildstarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: check hazard zones
//--------------------------------------------------------------------------------------------------
bool gt_checkhazardzones_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hazard_zones_count > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_check_hazard_zones();
    if ((gv_deprecated_hazard_zones_count > 0)) {
        gf_refresh_hazard_zone_array();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_checkhazardzones_Init () {
    gt_checkhazardzones = TriggerCreate("gt_checkhazardzones_Func");
    TriggerAddEventTimePeriodic(gt_checkhazardzones, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: stasis got used
//--------------------------------------------------------------------------------------------------
bool gt_stasisgotused_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_target;
    region lv_impact_area;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventUnitTargetPoint();
    lv_impact_area = RegionCircle(lv_target, 8.0);

    // Conditions
    if (testConds) {
        if (!((gv_difficulty > 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_add_hazard_zone(lv_impact_area);
    gf_dodge_stasis(lv_target);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_stasisgotused_Init () {
    gt_stasisgotused = TriggerCreate("gt_stasisgotused_Func");
    TriggerAddEventUnitAbility(gt_stasisgotused, null, AbilityCommand("StasisCannon", 0), c_unitAbilStageExecute, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: drone_finished
//--------------------------------------------------------------------------------------------------
bool gt_drone_finished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((lv_owner == 7))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "Drone2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ai_building_drone = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_drone_finished_Init () {
    gt_drone_finished = TriggerCreate("gt_drone_finished_Func");
    TriggerAddEventUnitCreated(gt_drone_finished, null, "ZergTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Spawn Trigger Dummy
//--------------------------------------------------------------------------------------------------
bool gt_EggSpawnTriggerDummy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    unit lv_unit;
    point lv_pos;
    point lv_rt_pos;
    int lv_egg_tier;

    // Automatic Variable Declarations
    string autoC25255F6_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_type = UnitGetType(lv_unit);
    lv_pos = UnitGetPosition(lv_unit);
    lv_rt_pos = UnitRallyPointTargetPoint(lv_unit, 1, 1);
    autoC25255F6_val = lv_type;
    if (autoC25255F6_val == "BlightbringerEgg") {
        lv_egg_tier = 1;
    }
    else if (autoC25255F6_val == "SwarmQueenMorphing") {
        lv_egg_tier = 2;
    }
    else if (autoC25255F6_val == "BlightbringerLargeEgg") {
        lv_egg_tier = 3;
    }
    else {
    }
    gf_spawn_unit_from_egg(lv_egg_tier, lv_pos, lv_rt_pos);
    UnitKill(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggSpawnTriggerDummy_Init () {
    gt_EggSpawnTriggerDummy = TriggerCreate("gt_EggSpawnTriggerDummy_Func");
    TriggerAddEventPlayerEffectUsed(gt_EggSpawnTriggerDummy, 7, "EggSpawnDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check bridges every 45s
//--------------------------------------------------------------------------------------------------
bool gt_Checkbridgesevery45s_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_bridge_left_unitgroup;
    unitgroup lv_bridge_right_unitgroup;
    unitgroup lv_defender_units_tmp;
    unitgroup lv_defender_units;
    int lv_needed_units;
    int lv_taken_units;

    // Automatic Variable Declarations
    unitgroup auto24B856A7_g;
    int auto24B856A7_u;
    unit auto24B856A7_var;
    unitgroup auto8861F20B_g;
    int auto8861F20B_u;
    unit auto8861F20B_var;
    unitgroup autoF63D0C68_g;
    int autoF63D0C68_u;
    unit autoF63D0C68_var;
    unitgroup autoBAC47D70_g;
    int autoBAC47D70_u;
    unit autoBAC47D70_var;
    unitgroup auto3EAE3005_g;
    int auto3EAE3005_u;
    unit auto3EAE3005_var;
    unitgroup autoBED333AE_g;
    int autoBED333AE_u;
    unit autoBED333AE_var;
    unitgroup autoE9D9A36E_g;
    int autoE9D9A36E_u;
    unit autoE9D9A36E_var;
    unitgroup auto44FBDE9D_g;
    int auto44FBDE9D_u;
    unit auto44FBDE9D_var;

    // Variable Initialization
    lv_bridge_left_unitgroup = UnitGroupEmpty();
    lv_bridge_right_unitgroup = UnitGroupEmpty();
    lv_defender_units_tmp = UnitGroupEmpty();
    lv_defender_units = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_difficulty >= 2))) {
            return false;
        }

        if (!((GameGetMissionTime() >= (3 * 60)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_is_pvp() == true)) {
    }
    else {
        lv_bridge_left_unitgroup = UnitGroup(null, c_playerAny, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto24B856A7_g = lv_bridge_left_unitgroup;
        auto24B856A7_u = UnitGroupCount(auto24B856A7_g, c_unitCountAll);
        for (;; auto24B856A7_u -= 1) {
            auto24B856A7_var = UnitGroupUnitFromEnd(auto24B856A7_g, auto24B856A7_u);
            if (auto24B856A7_var == null) { break; }
            if (((UnitGetOwner(auto24B856A7_var) == 7) || (UnitGetOwner(auto24B856A7_var) == 0))) {
                UnitGroupRemove(lv_bridge_left_unitgroup, auto24B856A7_var);
            }

        }
        if ((UnitGroupCount(lv_bridge_left_unitgroup, c_unitCountAlive) > 0)) {
            lv_needed_units = (lv_needed_units + 2);
            if ((gv_difficulty > 4)) {
                lv_needed_units = (lv_needed_units + 6);
            }

            if ((UnitGroupCount(lv_bridge_left_unitgroup, c_unitCountAlive) > 4)) {
                lv_needed_units = (lv_needed_units + 8);
            }

        }

        lv_defender_units_tmp = UnitGroup(null, 7, RegionCircle(RegionGetCenter(RegionFromId(26)), 75.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8861F20B_g = lv_defender_units_tmp;
        auto8861F20B_u = UnitGroupCount(auto8861F20B_g, c_unitCountAll);
        for (;; auto8861F20B_u -= 1) {
            auto8861F20B_var = UnitGroupUnitFromEnd(auto8861F20B_g, auto8861F20B_u);
            if (auto8861F20B_var == null) { break; }
            if ((UnitGetType(auto8861F20B_var) != "Drone2") && (UnitGetType(auto8861F20B_var) != "InfestorZergHex2") && (UnitGetType(auto8861F20B_var) != "HydraliskLevel2") && (UnitGetType(auto8861F20B_var) != "SpineCrawler") && (UnitGetType(auto8861F20B_var) != "LargeSpineCrawler")) {
                UnitGroupAdd(lv_defender_units, auto8861F20B_var);
                lv_taken_units = (lv_taken_units + 1);
                if ((lv_taken_units >= lv_needed_units)) {
                    break;
                }

            }

        }
        UnitGroupIssueOrder(lv_defender_units, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(26))), c_orderQueueReplace);
        if ((gv_infestors[1].lv_spine != null)) {
            autoF63D0C68_g = gv_infestors[1].lv_unit_group;
            autoF63D0C68_u = UnitGroupCount(autoF63D0C68_g, c_unitCountAll);
            for (;; autoF63D0C68_u -= 1) {
                autoF63D0C68_var = UnitGroupUnitFromEnd(autoF63D0C68_g, autoF63D0C68_u);
                if (autoF63D0C68_var == null) { break; }
                if ((UnitGetPropertyFixed(autoF63D0C68_var, c_unitPropLife, c_unitPropCurrent) >= 170.0) && (UnitOrderCount(autoF63D0C68_var) == 0)) {
                    UnitIssueOrder(autoF63D0C68_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(26))), c_orderQueueReplace);
                }

            }
        }

        if ((gv_infestors[7].lv_spine != null)) {
            autoBAC47D70_g = gv_infestors[7].lv_unit_group;
            autoBAC47D70_u = UnitGroupCount(autoBAC47D70_g, c_unitCountAll);
            for (;; autoBAC47D70_u -= 1) {
                autoBAC47D70_var = UnitGroupUnitFromEnd(autoBAC47D70_g, autoBAC47D70_u);
                if (autoBAC47D70_var == null) { break; }
                if ((UnitGetPropertyFixed(autoBAC47D70_var, c_unitPropLife, c_unitPropCurrent) >= 170.0) && (UnitOrderCount(autoBAC47D70_var) == 0)) {
                    UnitIssueOrder(autoBAC47D70_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(26))), c_orderQueueReplace);
                }

            }
        }

        lv_taken_units = 0;
        lv_needed_units = 0;
        lv_defender_units_tmp = UnitGroupEmpty();
        lv_defender_units = UnitGroupEmpty();
        lv_bridge_right_unitgroup = UnitGroup(null, c_playerAny, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3EAE3005_g = lv_bridge_right_unitgroup;
        auto3EAE3005_u = UnitGroupCount(auto3EAE3005_g, c_unitCountAll);
        for (;; auto3EAE3005_u -= 1) {
            auto3EAE3005_var = UnitGroupUnitFromEnd(auto3EAE3005_g, auto3EAE3005_u);
            if (auto3EAE3005_var == null) { break; }
            if (((UnitGetOwner(auto3EAE3005_var) == 7) || (UnitGetOwner(auto3EAE3005_var) == 0))) {
                UnitGroupRemove(lv_bridge_right_unitgroup, auto3EAE3005_var);
            }

        }
        if ((UnitGroupCount(lv_bridge_right_unitgroup, c_unitCountAlive) > 0)) {
            lv_needed_units = (lv_needed_units + 2);
            if ((gv_difficulty > 4)) {
                lv_needed_units = (lv_needed_units + 6);
            }

            if ((UnitGroupCount(lv_bridge_right_unitgroup, c_unitCountAlive) > 4)) {
                lv_needed_units = (lv_needed_units + 8);
            }

        }

        lv_defender_units_tmp = UnitGroup(null, 7, RegionCircle(RegionGetCenter(RegionFromId(27)), 75.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoBED333AE_g = lv_defender_units_tmp;
        autoBED333AE_u = UnitGroupCount(autoBED333AE_g, c_unitCountAll);
        for (;; autoBED333AE_u -= 1) {
            autoBED333AE_var = UnitGroupUnitFromEnd(autoBED333AE_g, autoBED333AE_u);
            if (autoBED333AE_var == null) { break; }
            if ((UnitGetType(autoBED333AE_var) != "Drone2") && (UnitGetType(autoBED333AE_var) != "InfestorZergHex2") && (UnitGetType(autoBED333AE_var) != "HydraliskLevel2") && (UnitGetType(autoBED333AE_var) != "SpineCrawler") && (UnitGetType(autoBED333AE_var) != "LargeSpineCrawler")) {
                UnitGroupAdd(lv_defender_units, autoBED333AE_var);
                lv_taken_units = (lv_taken_units + 1);
                if ((lv_taken_units >= lv_needed_units)) {
                    break;
                }

            }

        }
        UnitGroupIssueOrder(lv_defender_units, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(27))), c_orderQueueReplace);
        if ((gv_infestors[6].lv_spine != null)) {
            autoE9D9A36E_g = gv_infestors[6].lv_unit_group;
            autoE9D9A36E_u = UnitGroupCount(autoE9D9A36E_g, c_unitCountAll);
            for (;; autoE9D9A36E_u -= 1) {
                autoE9D9A36E_var = UnitGroupUnitFromEnd(autoE9D9A36E_g, autoE9D9A36E_u);
                if (autoE9D9A36E_var == null) { break; }
                if ((UnitGetPropertyFixed(autoE9D9A36E_var, c_unitPropLife, c_unitPropCurrent) >= 170.0) && (UnitOrderCount(autoE9D9A36E_var) == 0)) {
                    UnitIssueOrder(autoE9D9A36E_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(27))), c_orderQueueReplace);
                }

            }
        }

        if ((gv_infestors[12].lv_spine != null)) {
            auto44FBDE9D_g = gv_infestors[12].lv_unit_group;
            auto44FBDE9D_u = UnitGroupCount(auto44FBDE9D_g, c_unitCountAll);
            for (;; auto44FBDE9D_u -= 1) {
                auto44FBDE9D_var = UnitGroupUnitFromEnd(auto44FBDE9D_g, auto44FBDE9D_u);
                if (auto44FBDE9D_var == null) { break; }
                if ((UnitGetPropertyFixed(auto44FBDE9D_var, c_unitPropLife, c_unitPropCurrent) >= 170.0) && (UnitOrderCount(auto44FBDE9D_var) == 0)) {
                    UnitIssueOrder(auto44FBDE9D_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(27))), c_orderQueueReplace);
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Checkbridgesevery45s_Init () {
    gt_Checkbridgesevery45s = TriggerCreate("gt_Checkbridgesevery45s_Func");
    TriggerAddEventTimePeriodic(gt_Checkbridgesevery45s, 45.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spine gets attacked
//--------------------------------------------------------------------------------------------------
bool gt_spinegetsattacked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    point lv_unit_position;
    unitgroup lv_infestors;
    unit lv_infestor;
    effecthistory lv_effect;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_unit_position = UnitGetPosition(lv_unit);
    lv_infestors = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "LargeSpineCrawler"))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_egg_cluster_large_spines, lv_unit) == false))) {
            return false;
        }

        if (!((gf_unit_is_in_pocketbase(lv_unit) != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_infestors = UnitGroup("InfestorZergHex2", 7, RegionCircle(lv_unit_position, 25.0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((gv_mgc_type == 2)) {
        UnitGroupAddUnitGroup(lv_infestors, UnitGroup("WizardMinion", 7, RegionCircle(lv_unit_position, 30.0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }

    lv_infestor = gf_get_ready_infestor(lv_infestors);
    gf_infestor_heal(lv_infestor, lv_unit);
    lv_infestor = gf_get_ready_infestor(lv_infestors);
    gf_infestor_heal(lv_infestor, lv_unit);
    if ((gv_f2_cooldown == 0) && (GameGetMissionTime() > 150.0) && (UnitGetType(EventUnitDamageSourceUnit()) != "UrunWeaponLeft") && (UnitGetType(EventUnitDamageSourceUnit()) != "IonCannonsWeapon") && (UnitGetType(EventUnitDamageSourceUnit()) != "UrunWeaponRight") && (UnitGetType(EventUnitDamageSourceUnit()) != "IonBeam") && (UnitGetType(EventUnitDamageSourceUnit()) != "IonStorm") && (EventUnitDamageEffect() != "ZergBuildingNotOnCreepDamage") && (EventUnitDamageEffect() != "IonBeamDirectDamage") && (EventUnitDamageEffect() != "IonBeamDirectBonusDamageOmegalisk") && (EventUnitDamageEffect() != "IonStormDoTDamage")) {
        gf_f2_point(EventUnitDamageSourcePoint(), true);
        if ((gv_defensive_egg_spawn_cooldown == 0)) {
            gf_spawn_eggs(gf_get_closest_position(lv_unit_position), gf_get_egg_count_front_spawn(), 1);
        }

    }
    else {
        gv_f2_cooldown = (gv_f2_cooldown - 1);
        if ((gv_f2_cooldown < 0)) {
            gv_f2_cooldown = 0;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spinegetsattacked_Init () {
    gt_spinegetsattacked = TriggerCreate("gt_spinegetsattacked_Func");
    TriggerAddEventUnitDamaged(gt_spinegetsattacked, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: building gets attacked
//--------------------------------------------------------------------------------------------------
bool gt_buildinggetsattacked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    point lv_unit_position;
    unitgroup lv_nests;
    unitgroup lv_temp_all;
    unit lv_nest;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_unit_position = UnitGetPosition(lv_unit);
    lv_nests = UnitGroupEmpty();
    lv_temp_all = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourcePlayer() >= 1))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() <= 6))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "ShatterL1Damage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "ShatterL2Damage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "ShatterL3Damage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "ZergBuildingNotOnCreepDamage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "IonBeamDirectDamage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "IonBeamDirectBonusDamageOmegalisk"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "IonStormDoTDamage"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) != "IonBeam"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) != "IonStorm"))) {
            return false;
        }

        if (!((gv_cloud_cd == 0))) {
            return false;
        }

        if (!((gf_unit_is_in_pocketbase(lv_unit) != true))) {
            return false;
        }

        if (!((UnitGetOwner(lv_unit) == 7))) {
            return false;
        }

        if (!(((UnitGetType(lv_unit) == "SpineCrawler") || (UnitGetType(lv_unit) == "SlowlingSpawner") || (UnitGetType(lv_unit) == "CreeperSpawner") || (UnitGetType(lv_unit) == "StrikelingSpawner") || (UnitGetType(lv_unit) == "TanklingSpawner") || (UnitGetType(lv_unit) == "RoachSpawner") || (UnitGetType(lv_unit) == "PrimalRoachSpawner") || (UnitGetType(lv_unit) == "UltraliskSpawner") || (UnitGetType(lv_unit) == "BrutaliskSpawner") || (UnitGetType(lv_unit) == "BanelingSpawner") || (UnitGetType(lv_unit) == "BeastlingSpawner") || (UnitGetType(lv_unit) == "InfusedRoachSpawner") || (UnitGetType(lv_unit) == "RavatorSpawner") || (UnitGetType(lv_unit) == "TorraliskSpawner") || (UnitGetType(lv_unit) == "MineralExtractor") || (UnitGetType(lv_unit) == "CreepTumor2") || (UnitGetType(lv_unit) == "LargeSpineCrawler") || (UnitGetType(lv_unit) == "Nest2") || (UnitGetType(lv_unit) == "Hellfort")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_players[EventUnitDamageSourcePlayer()].lv_pet_score = 0;
    if ((gv_mgc_type == 2)) {
        lv_nests = UnitGroup("Hellfort", 7, RegionCircle(lv_unit_position, 25.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_temp_all, lv_nests);
    }

    lv_nests = UnitGroupEmpty();
    lv_nests = UnitGroup("Nest2", 7, RegionCircle(lv_unit_position, 25.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_temp_all, lv_nests);
    lv_nest = UnitGroupClosestToPoint(lv_temp_all, EventUnitDamageSourcePoint());
    if ((DistanceBetweenPoints(EventUnitDamageSourcePoint(), UnitGetPosition(lv_nest)) <= 15.0)) {
        UnitIssueOrder(lv_nest, OrderTargetingPoint(AbilityCommand("AbsorbingCloud", 0), EventUnitDamageSourcePoint()), c_orderQueueReplace);
        gv_cloud_cd = 1;
    }

    if ((UnitGroupCount(UnitGroup("LargeSpineCrawler", 7, RegionCircle(UnitGetPosition(lv_unit), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1)) {
        if ((GameGetMissionTime() > 150.0) && (gv_f2_cooldown == 0) && (UnitGetType(EventUnitDamageSourceUnit()) != "UrunWeaponLeft") && (UnitGetType(EventUnitDamageSourceUnit()) != "IonCannonsWeapon") && (UnitGetType(EventUnitDamageSourceUnit()) != "UrunWeaponRight") && (UnitGetType(EventUnitDamageSourceUnit()) != "IonBeam") && (UnitGetType(EventUnitDamageSourceUnit()) != "IonStorm")) {
            if (true) {
                gf_f2_point(EventUnitDamageSourcePoint(), true);
            }

        }
        else {
            gv_f2_cooldown = (gv_f2_cooldown - 1);
            if ((gv_f2_cooldown < 0)) {
                gv_f2_cooldown = 0;
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_buildinggetsattacked_Init () {
    gt_buildinggetsattacked = TriggerCreate("gt_buildinggetsattacked_Func");
    TriggerAddEventUnitDamaged(gt_buildinggetsattacked, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: check players every minute
//--------------------------------------------------------------------------------------------------
bool gt_checkplayerseveryminute_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() >= (4 * 60)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_i <= 6)) {
        if ((gv_players[lv_i].lv_alive == true)) {
            gv_weak_players[lv_i].lv_is_weak = gf_is_weak(lv_i);
        }

        lv_i += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_checkplayerseveryminute_Init () {
    gt_checkplayerseveryminute = TriggerCreate("gt_checkplayerseveryminute_Func");
    TriggerAddEventTimePeriodic(gt_checkplayerseveryminute, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran enters zerg highground
//--------------------------------------------------------------------------------------------------
bool gt_Terranenterszerghighground_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    string lv_unit_type;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = EventPlayer();
    lv_unit_type = UnitGetType(EventUnit());

    // Conditions
    if (testConds) {
        if (!((lv_owner > 0))) {
            return false;
        }

        if (!((lv_owner < 7))) {
            return false;
        }

        if (!((lv_unit_type != "IonBeam"))) {
            return false;
        }

        if (!((lv_unit_type != "IonStorm"))) {
            return false;
        }

        if (!((lv_unit_type != "Buggo"))) {
            return false;
        }

        if (!((lv_unit_type != "VespeneGeyser"))) {
            return false;
        }

        if (!((lv_unit_type != "Medivac"))) {
            return false;
        }

        if (!((lv_unit_type != "ImmortalShakurasStasisCannonMissile"))) {
            return false;
        }

        if (!((lv_unit_type != "SpaceBalls"))) {
            return false;
        }

        if (!((lv_unit_type != "KaraxServitorWeaponA"))) {
            return false;
        }

        if (!((lv_unit_type != "KaraxServitorWeaponB"))) {
            return false;
        }

        if (!((lv_unit_type != "Oracle"))) {
            return false;
        }

        if (!((lv_unit_type != gf_get_zerg_rally_point_unit_type()))) {
            return false;
        }

        if (!((lv_unit_type != "SiegeTankFragmentBlastFire"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_highground_invaders, EventUnit());
    gv_highground_invader_count += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Terranenterszerghighground_Init () {
    gt_Terranenterszerghighground = TriggerCreate("gt_Terranenterszerghighground_Func");
    TriggerAddEventUnitRegion(gt_Terranenterszerghighground, null, RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: invader leaves zerg highground
//--------------------------------------------------------------------------------------------------
bool gt_invaderleaveszerghighground_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_highground_invaders, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_highground_invaders, EventUnit());
    gv_highground_invader_count -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_invaderleaveszerghighground_Init () {
    gt_invaderleaveszerghighground = TriggerCreate("gt_invaderleaveszerghighground_Func");
    TriggerAddEventUnitRegion(gt_invaderleaveszerghighground, null, RegionFromId(1), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: invader dies
//--------------------------------------------------------------------------------------------------
bool gt_invaderdies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_owner = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_highground_invaders, lv_unit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_highground_invaders, lv_unit);
    gv_highground_invader_count -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_invaderdies_Init () {
    gt_invaderdies = TriggerCreate("gt_invaderdies_Func");
    TriggerAddEventUnitDied(gt_invaderdies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: special unit got born
//--------------------------------------------------------------------------------------------------
bool gt_specialunitgotborn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_type = UnitGetType(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!(((lv_type == "Beastling") || (lv_type == "Ravator") || (lv_type == "Torralisk") || (lv_type == "InfusedRoach") || (lv_type == "Cyclone3") || (lv_type == "Hellion2")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_special_units, EventUnitCreatedUnit());
    gv_special_unit_count += 1;
    gv_special_unit_array[gv_special_unit_count].lv_birthtime = FixedToInt(GameGetMissionTime());
    gv_special_unit_array[gv_special_unit_count].lv_unit = EventUnitCreatedUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_specialunitgotborn_Init () {
    gt_specialunitgotborn = TriggerCreate("gt_specialunitgotborn_Func");
    TriggerAddEventUnitCreated(gt_specialunitgotborn, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: every five minutes
//--------------------------------------------------------------------------------------------------
bool gt_everyfiveminutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_flush_special_unit_array();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_everyfiveminutes_Init () {
    gt_everyfiveminutes = TriggerCreate("gt_everyfiveminutes_Func");
    TriggerAddEventTimePeriodic(gt_everyfiveminutes, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: every 45 seconds
//--------------------------------------------------------------------------------------------------
bool gt_every45seconds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_is_pvp() == true)) {
    }
    else {
        gf_check_unit_age();
        gf_order_old_units();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_every45seconds_Init () {
    gt_every45seconds = TriggerCreate("gt_every45seconds_Func");
    TriggerAddEventTimePeriodic(gt_every45seconds, 45.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: use idle units
//--------------------------------------------------------------------------------------------------
bool gt_useidleunits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_position = UnitGetPosition(EventUnit());
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((gf_is_game_over() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 7))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Slowling") || (UnitGetType(EventUnit()) == "Strikeling") || (UnitGetType(EventUnit()) == "Creeper") || (UnitGetType(EventUnit()) == "Tankling") || (UnitGetType(EventUnit()) == "Roach2") || (UnitGetType(EventUnit()) == "TarRoach") || (UnitGetType(EventUnit()) == "PrimalRoach2") || (UnitGetType(EventUnit()) == "Ultralisk2") || (UnitGetType(EventUnit()) == "Brutalisk2") || (UnitGetType(EventUnit()) == "Beastling") || (UnitGetType(EventUnit()) == "InfusedRoach") || (UnitGetType(EventUnit()) == "Ravator") || (UnitGetType(EventUnit()) == "Torralisk") || (UnitGetType(EventUnit()) == "MeleeMinionHell") || (UnitGetType(EventUnit()) == "RangedMinionHell") || (UnitGetType(EventUnit()) == "ZerglingCarbot") || (UnitGetType(EventUnit()) == "Cyclone3") || (UnitGetType(EventUnit()) == "Firebat2") || (UnitGetType(EventUnit()) == "Marauder2") || (UnitGetType(EventUnit()) == "Marine3") || (UnitGetType(EventUnit()) == "Hellion2") || (UnitGetType(EventUnit()) == "Massalisk") || (UnitGetType(EventUnit()) == "DevilDog") || (UnitGetType(EventUnit()) == "HelsAngelAssault") || (UnitGetType(EventUnit()) == "WarPig") || (UnitGetType(EventUnit()) == "Eroder") || (UnitGetType(EventUnit()) == "Corroslash") || (UnitGetType(EventUnit()) == "MrFrosty")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Rally " + IntToString(gf_get_closest_alive_player_position(lv_position))))), c_orderQueueReplace);
    if ((UnitGroupHasUnit(gv_f2_unit_group, EventUnit()) == true)) {
        UnitGroupRemove(gv_f2_unit_group, EventUnit());
    }

    gf_observe_or_kill_unit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_useidleunits_Init () {
    gt_useidleunits = TriggerCreate("gt_useidleunits_Func");
    TriggerAddEventUnitBecomesIdle(gt_useidleunits, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: f2 trigger every 5s
//--------------------------------------------------------------------------------------------------
bool gt_f2triggerevery5s_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_want_f2 == true))) {
            return false;
        }

        if (!((gv_did_f2 == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_is_pvp() == true)) {
    }
    else {
        if ((gv_f2_tick < 3)) {
            gf_try_f2_mid();
        }
        else {
            gv_did_f2 = true;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_f2triggerevery5s_Init () {
    gt_f2triggerevery5s = TriggerCreate("gt_f2triggerevery5s_Func");
    TriggerAddEventTimePeriodic(gt_f2triggerevery5s, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ion Cannon Apply Perma Damage
//--------------------------------------------------------------------------------------------------
bool gt_IonCannonApplyPermaDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damage = 6.0;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnitImpact()) == "Hive2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HiveDamageRecieved(lv_damage, EventPlayerEffectUsedUnitImpact());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IonCannonApplyPermaDamage_Init () {
    gt_IonCannonApplyPermaDamage = TriggerCreate("gt_IonCannonApplyPermaDamage_Func");
    TriggerAddEventPlayerEffectUsed(gt_IonCannonApplyPermaDamage, c_playerAny, "IonBeamDirectDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: hydra got born
//--------------------------------------------------------------------------------------------------
bool gt_hydragotborn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    point lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_type = UnitGetType(EventUnitCreatedUnit());
    lv_p = UnitGetGoalPosition(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((lv_type == "HydraliskLevel2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_mutator_mega_mecha_hydras == true)) {
        libNtve_gf_ReplaceUnit(EventUnitCreatedUnit(), "MechaHydralisk", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
    }

    if ((RegionContainsPoint(RegionFromId(1), lv_p) == true)) {
        if ((gv_mutator_mega_mecha_hydras == true)) {
            UnitGroupAdd(gv_zhg_hydras, libNtve_gf_LastReplacedUnit());
        }
        else {
            UnitGroupAdd(gv_zhg_hydras, EventUnitCreatedUnit());
        }
    }
    else {
        if ((gv_mutator_mega_mecha_hydras == true)) {
            UnitGroupAdd(gv_hydra_groups[gf_get_new_hydra_groupindex(EventUnitCreatedUnit())].lv_units, libNtve_gf_LastReplacedUnit());
        }
        else {
            UnitGroupAdd(gv_hydra_groups[gf_get_new_hydra_groupindex(EventUnitCreatedUnit())].lv_units, EventUnitCreatedUnit());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_hydragotborn_Init () {
    gt_hydragotborn = TriggerCreate("gt_hydragotborn_Func");
    TriggerAddEventUnitCreated(gt_hydragotborn, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: hydra gets attacked
//--------------------------------------------------------------------------------------------------
bool gt_hydragetsattacked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(lv_unit) == "HydraliskLevel2") || (UnitGetType(lv_unit) == "MechaHydralisk")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_mutator_mega_mecha_hydras == true)) {
        if (((EventUnitDamageEffect() == "HydraliskNotOnCreepDamage") || (UnitGetPropertyInt(lv_unit, c_unitPropLifePercent, c_unitPropCurrent) < 15) || ((UnitGetPropertyInt(lv_unit, c_unitPropLifePercent, c_unitPropCurrent) < 40) && (DistanceBetweenPoints(UnitGetPosition(lv_unit), gv_hydra_groups[gf_get_hydras_groupindex(lv_unit)].lv_point) > 6.5)))) {
            gf_send_hydra_home(lv_unit);
        }

    }
    else {
        if (((EventUnitDamageEffect() == "HydraliskNotOnCreepDamage") || (UnitGetPropertyInt(lv_unit, c_unitPropLifePercent, c_unitPropCurrent) < 9) || ((UnitGetPropertyInt(lv_unit, c_unitPropLifePercent, c_unitPropCurrent) < 25) && (DistanceBetweenPoints(UnitGetPosition(lv_unit), gv_hydra_groups[gf_get_hydras_groupindex(lv_unit)].lv_point) > 6.5)))) {
            gf_send_hydra_home(lv_unit);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_hydragetsattacked_Init () {
    gt_hydragetsattacked = TriggerCreate("gt_hydragetsattacked_Func");
    TriggerAddEventUnitDamaged(gt_hydragetsattacked, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: building gets attacked try defend with hydras
//--------------------------------------------------------------------------------------------------
bool gt_buildinggetsattackedtrydefendwithhydras_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((gv_hydra_action_cooldown == false))) {
            return false;
        }

        if (!((UnitGetOwner(lv_unit) == 7))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_outer_tumors, lv_unit) == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_outer_smallspines, lv_unit) == false))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "ZergBuildingNotOnCreepDamage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "ZergBuildingNotOnCreepDamage"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) != "IonBeam"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) != "IonStorm"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) != "ImmortalShakurasStasisCannonMissile"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) != "TechLab3"))) {
            return false;
        }

        if (!(((UnitGetType(lv_unit) == "SpineCrawler") || (UnitGetType(lv_unit) == "SlowlingSpawner") || (UnitGetType(lv_unit) == "CreeperSpawner") || (UnitGetType(lv_unit) == "StrikelingSpawner") || (UnitGetType(lv_unit) == "TanklingSpawner") || (UnitGetType(lv_unit) == "RoachSpawner") || (UnitGetType(lv_unit) == "PrimalRoachSpawner") || (UnitGetType(lv_unit) == "UltraliskSpawner") || (UnitGetType(lv_unit) == "BrutaliskSpawner") || (UnitGetType(lv_unit) == "BanelingSpawner") || (UnitGetType(lv_unit) == "BeastlingSpawner") || (UnitGetType(lv_unit) == "InfusedRoachSpawner") || (UnitGetType(lv_unit) == "RavatorSpawner") || (UnitGetType(lv_unit) == "TorraliskSpawner") || (UnitGetType(lv_unit) == "MineralExtractor") || (UnitGetType(lv_unit) == "CreepTumor2") || (UnitGetType(lv_unit) == "LargeSpineCrawler") || (UnitGetType(lv_unit) == "Nest2") || (UnitGetType(lv_unit) == "Hellfort") || (UnitGetType(lv_unit) == "SpineCrawlerMecha") || (UnitGetType(lv_unit) == "NydusCanal") || (UnitGetType(lv_unit) == "MechaTechlab") || (UnitGetType(lv_unit) == "MechaTerrazineExtractor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_attack_point_with_hydra_group(EventUnitDamageSourcePoint(), gf_get_closest_position(EventUnitDamageSourcePoint()));
    gv_hydra_action_cooldown = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_buildinggetsattackedtrydefendwithhydras_Init () {
    gt_buildinggetsattackedtrydefendwithhydras = TriggerCreate("gt_buildinggetsattackedtrydefendwithhydras_Func");
    TriggerAddEventUnitDamaged(gt_buildinggetsattackedtrydefendwithhydras, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: check hydras
//--------------------------------------------------------------------------------------------------
bool gt_checkhydras_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameGetMissionTime() >= gv_hydra_peacetime) && (UnitGroupCount(gv_outer_nests, c_unitCountAlive) > 0) && (PlayerGetPropertyInt(7, c_playerPropMinerals) >= 50) && (gv_mass_infestor_death_exception == false)) {
        gf_try_buy_hydras();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_checkhydras_Init () {
    gt_checkhydras = TriggerCreate("gt_checkhydras_Func");
    TriggerAddEventTimePeriodic(gt_checkhydras, 11.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: nest died
//--------------------------------------------------------------------------------------------------
bool gt_nestdied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_owner;
    point lv_unit_position;
    string lv_type;
    int lv_index;
    point lv_ramp_position;

    // Automatic Variable Declarations
    unitgroup auto57650358_g;
    int auto57650358_u;
    unit auto57650358_var;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_owner = UnitGetOwner(EventUnit());
    lv_unit_position = UnitGetPosition(lv_unit);
    lv_type = UnitGetType(lv_unit);
    lv_index = gf_get_closest_position(lv_unit_position);

    // Conditions
    if (testConds) {
        if (!((lv_type == "Nest2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_outer_nests, lv_unit) == true)) {
        if ((gv_difficulty >= 5)) {
            gf_create_defensive_egg_cluster(lv_index);
        }

        gv_hydra_groups[lv_index].lv_nest = gv_hydra_groups[lv_index].lv_nestb;
        gv_hydra_groups[lv_index].lv_point = gv_hydra_groups[lv_index].lv_pointb;
        gv_hydra_groups[lv_index].lv_stock = (gv_hydra_groups[lv_index].lv_stock + gf_outer_nest_death_stock_increase());
        if ((UnitGroupCount(gv_hydra_groups[lv_index].lv_units, c_unitCountAlive) > 0)) {
            UnitGroupIssueOrder(gv_hydra_groups[lv_index].lv_units, OrderTargetingPoint(AbilityCommand("attack", 0), gv_hydra_groups[lv_index].lv_point), c_orderQueueReplace);
        }

    }
    else {
        if ((lv_unit == gv_hydra_groups[lv_index].lv_nestb)) {
            gv_hydra_groups[lv_index].lv_nest = null;
            if ((lv_index <= 3)) {
                lv_ramp_position = PointFromId(1352576071);
            }
            else {
                lv_ramp_position = PointFromId(1723757530);
            }
            if ((UnitGroupCount(gv_hydra_groups[lv_index].lv_units, c_unitCountAlive) > 0)) {
                UnitGroupIssueOrder(gv_hydra_groups[lv_index].lv_units, OrderTargetingPoint(AbilityCommand("attack", 0), lv_ramp_position), c_orderQueueReplace);
            }

            auto57650358_g = gv_hydra_groups[lv_index].lv_units;
            auto57650358_u = UnitGroupCount(auto57650358_g, c_unitCountAll);
            for (;; auto57650358_u -= 1) {
                auto57650358_var = UnitGroupUnitFromEnd(auto57650358_g, auto57650358_u);
                if (auto57650358_var == null) { break; }
                UnitGroupRemove(gv_hydra_groups[lv_index].lv_units, auto57650358_var);
                if ((lv_index <= 3)) {
                    UnitGroupAdd(gv_hydras_north, auto57650358_var);
                }
                else {
                    UnitGroupAdd(gv_hydras_south, auto57650358_var);
                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_nestdied_Init () {
    gt_nestdied = TriggerCreate("gt_nestdied_Func");
    TriggerAddEventUnitDied(gt_nestdied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: add_infestor_to_group
//--------------------------------------------------------------------------------------------------
bool gt_add_infestor_to_group_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unit_type;
    point lv_p;
    int lv_position;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit_type = UnitGetType(EventUnitCreatedUnit());
    lv_p = UnitGetGoalPosition(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((lv_unit_type == "InfestorZergHex2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionFromId(1), lv_p) == true)) {
        UnitGroupAdd(gv_zhg_prefuse_infestors, EventUnitCreatedUnit());
    }
    else {
        lv_position = gf_get_infestor_group_i(lv_p);
        UnitGroupAdd(gv_infestors[lv_position].lv_unit_group, EventUnitCreatedUnit());
        if ((gv_difficulty > 6)) {
            PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperAdd, 20);
        }
        else {
            PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperAdd, 10);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_add_infestor_to_group_Init () {
    gt_add_infestor_to_group = TriggerCreate("gt_add_infestor_to_group_Func");
    TriggerAddEventUnitCreated(gt_add_infestor_to_group, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spine dies
//--------------------------------------------------------------------------------------------------
bool gt_spinedies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    point lv_unit_position;
    int lv_spine_group_array_key;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_unit_position = UnitGetPosition(lv_unit);
    lv_spine_group_array_key = gf_get_spines_group(lv_unit);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "LargeSpineCrawler"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_infestors[lv_spine_group_array_key].lv_spine = null;
    gf_move_infestors(lv_spine_group_array_key);
    if (((lv_spine_group_array_key == 1) || (lv_spine_group_array_key == 6) || (lv_spine_group_array_key == 7) || (lv_spine_group_array_key == 12))) {
        gf_move_edge_infestor_gatherpoint(lv_spine_group_array_key);
    }

    gv_possible_positions_t1_dead_count += 1;
    gv_possible_positions_t1_dead[gv_possible_positions_t1_dead_count] = lv_unit_position;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spinedies_Init () {
    gt_spinedies = TriggerCreate("gt_spinedies_Func");
    TriggerAddEventUnitDied(gt_spinedies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: infestor gets attacked
//--------------------------------------------------------------------------------------------------
bool gt_infestorgetsattacked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    point lv_attacker_pos;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "InfestorZergHex2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_is_pvp() == true)) {
    }
    else {
        if ((gv_difficulty >= 5)) {
            if ((UnitGetPropertyInt(lv_unit, c_unitPropLife, c_unitPropCurrent) <= 165)) {
                gf_send_infestor_home(lv_unit, lv_attacker_pos);
            }

        }
        else {
            gf_send_infestor_home(lv_unit, lv_attacker_pos);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_infestorgetsattacked_Init () {
    gt_infestorgetsattacked = TriggerCreate("gt_infestorgetsattacked_Func");
    TriggerAddEventUnitDamaged(gt_infestorgetsattacked, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Feed idle infestors every 21s
//--------------------------------------------------------------------------------------------------
bool gt_Feedidleinfestorsevery21s_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_infestors;
    int lv_cp;
    string lv_angle;
    point lv_np;
    point lv_checkpoint;
    unitgroup lv_ugroup;

    // Automatic Variable Declarations
    unitgroup auto748CCE6B_g;
    int auto748CCE6B_u;
    unit auto748CCE6B_var;
    unitgroup auto156AEDC5_g;
    int auto156AEDC5_u;
    unit auto156AEDC5_var;

    // Variable Initialization
    lv_i = 1;
    lv_infestors = UnitGroupEmpty();
    lv_angle = "";
    lv_ugroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_difficulty >= 3))) {
            return false;
        }

        if (!((gv_armor_level >= 1))) {
            return false;
        }

        if (!((GameGetMissionTime() >= (9 * 60)))) {
            return false;
        }

        if (!((GameGetMissionTime() <= (25 * 60)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_feeding_infestors, c_unitCountAlive) > 0)) {
        auto748CCE6B_g = gv_feeding_infestors;
        auto748CCE6B_u = UnitGroupCount(auto748CCE6B_g, c_unitCountAll);
        for (;; auto748CCE6B_u -= 1) {
            auto748CCE6B_var = UnitGroupUnitFromEnd(auto748CCE6B_g, auto748CCE6B_u);
            if (auto748CCE6B_var == null) { break; }
            if ((UnitGetPropertyFixed(auto748CCE6B_var, c_unitPropEnergy, c_unitPropCurrent) >= 850.0)) {
                gf_send_infestor_home(auto748CCE6B_var, lv_np);
            }

        }
    }

    while ((lv_i <= 12)) {
        lv_infestors = UnitGroupEmpty();
        if ((gv_infestors[lv_i].lv_spine != null)) {
            if ((UnitGroupCount(gv_infestors[lv_i].lv_unit_group, c_unitCountAlive) > 1)) {
                auto156AEDC5_g = gv_infestors[lv_i].lv_unit_group;
                auto156AEDC5_u = UnitGroupCount(auto156AEDC5_g, c_unitCountAll);
                for (;; auto156AEDC5_u -= 1) {
                    auto156AEDC5_var = UnitGroupUnitFromEnd(auto156AEDC5_g, auto156AEDC5_u);
                    if (auto156AEDC5_var == null) { break; }
                    if ((UnitGetType(auto156AEDC5_var) == "InfestorZergHex2") && (UnitGetPropertyFixed(auto156AEDC5_var, c_unitPropLife, c_unitPropCurrent) >= 180.0) && (UnitGetPropertyFixed(auto156AEDC5_var, c_unitPropEnergy, c_unitPropCurrent) < 400.0) && (UnitOrderCount(auto156AEDC5_var) == 0)) {
                        UnitGroupAdd(lv_infestors, auto156AEDC5_var);
                    }

                }
            }

            if ((UnitGroupCount(lv_infestors, c_unitCountAlive) > 0)) {
                lv_cp = gf_get_closest_alive_player_position(UnitGetPosition(gv_infestors[lv_i].lv_spine));
                if ((RandomInt(1, 2) == 1)) {
                    lv_angle = "Left";
                    if ((UnitGroupCount(UnitGroup("Italis", c_playerAny, RegionCircle(PointFromName(("Zerg Flank Rally " + (lv_angle + (" Pre " + IntToString(lv_cp))))), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Italis", c_playerAny, RegionCircle(PointFromName(("Zerg Flank Rally " + (lv_angle + (" " + IntToString(lv_cp))))), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    }
                    else {
                        lv_angle = "Right";
                        if ((UnitGroupCount(UnitGroup("Italis", c_playerAny, RegionCircle(PointFromName(("Zerg Flank Rally " + (lv_angle + (" Pre " + IntToString(lv_cp))))), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Italis", c_playerAny, RegionCircle(PointFromName(("Zerg Flank Rally " + (lv_angle + (" " + IntToString(lv_cp))))), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                        }
                        else {
                            lv_angle = "guarded";
                        }
                    }
                }
                else {
                    lv_angle = "Right";
                    if ((UnitGroupCount(UnitGroup("Italis", c_playerAny, RegionCircle(PointFromName(("Zerg Flank Rally " + (lv_angle + (" Pre " + IntToString(lv_cp))))), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Italis", c_playerAny, RegionCircle(PointFromName(("Zerg Flank Rally " + (lv_angle + (" " + IntToString(lv_cp))))), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    }
                    else {
                        lv_angle = "Left";
                        if ((UnitGroupCount(UnitGroup("Italis", c_playerAny, RegionCircle(PointFromName(("Zerg Flank Rally " + (lv_angle + (" Pre " + IntToString(lv_cp))))), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Italis", c_playerAny, RegionCircle(PointFromName(("Zerg Flank Rally " + (lv_angle + (" " + IntToString(lv_cp))))), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                        }
                        else {
                            lv_angle = "guarded";
                        }
                    }
                }
                if ((lv_angle != "guarded")) {
                    UnitGroupIssueOrder(lv_infestors, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Flank Rally " + (lv_angle + (" Pre " + IntToString(lv_cp)))))), c_orderQueueReplace);
                    UnitGroupIssueOrder(lv_infestors, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Flank Rally " + (lv_angle + (" " + IntToString(lv_cp)))))), c_orderQueueAddToEnd);
                    UnitGroupIssueOrder(lv_infestors, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Rally " + IntToString(lv_cp)))), c_orderQueueAddToEnd);
                    UnitGroupAddUnitGroup(gv_feeding_infestors, lv_infestors);
                }

            }

        }

        lv_i += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Feedidleinfestorsevery21s_Init () {
    gt_Feedidleinfestorsevery21s = TriggerCreate("gt_Feedidleinfestorsevery21s_Func");
    TriggerAddEventTimePeriodic(gt_Feedidleinfestorsevery21s, 21.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spawn warfield forces
//--------------------------------------------------------------------------------------------------
bool gt_spawnwarfieldforces_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;
    unitgroup lv_agroup;
    int lv_offset;

    // Automatic Variable Declarations
    unitgroup autoC45F6AFA_g;
    int autoC45F6AFA_u;
    unit autoC45F6AFA_var;

    // Variable Initialization
    lv_group = UnitGroupEmpty();
    lv_agroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_difficulty >= 5)) {
        lv_offset = (gv_difficulty - 5);
    }
    else {
        lv_offset = 1;
    }
    autoC45F6AFA_g = UnitGroup("PlanetaryFortress", 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC45F6AFA_u = UnitGroupCount(autoC45F6AFA_g, c_unitCountAll);
    for (;; autoC45F6AFA_u -= 1) {
        autoC45F6AFA_var = UnitGroupUnitFromEnd(autoC45F6AFA_g, autoC45F6AFA_u);
        if (autoC45F6AFA_var == null) { break; }
        libNtve_gf_CreateUnitsAtPoint2((12 + lv_offset), "WarPig", 0, 7, UnitGetPosition(autoC45F6AFA_var));
        UnitGroupAddUnitGroup(lv_agroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsAtPoint2((6 + lv_offset), "DevilDog", 0, 7, UnitGetPosition(autoC45F6AFA_var));
        UnitGroupAddUnitGroup(lv_agroup, UnitLastCreatedGroup());
        if ((gv_difficulty >= 7)) {
            libNtve_gf_CreateUnitsAtPoint2(2, "HelsAngelAssault", 0, 7, UnitGetPosition(autoC45F6AFA_var));
        }
        else {
            libNtve_gf_CreateUnitsAtPoint2(1, "HelsAngelAssault", 0, 7, UnitGetPosition(autoC45F6AFA_var));
        }
        UnitGroupAddUnitGroup(lv_agroup, UnitLastCreatedGroup());
        UnitGroupIssueOrder(lv_agroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Zerg Rally " + IntToString(gf_get_closest_alive_player_position(UnitGroupCenterOfGroup(lv_agroup)))))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spawnwarfieldforces_Init () {
    gt_spawnwarfieldforces = TriggerCreate("gt_spawnwarfieldforces_Func");
    TriggerEnable(gt_spawnwarfieldforces, false);
    TriggerAddEventTimePeriodic(gt_spawnwarfieldforces, 45.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Cluster Trigger Dummy
//--------------------------------------------------------------------------------------------------
bool gt_EggClusterTriggerDummy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    unit lv_unit;
    point lv_pos;
    point lv_rt_pos;
    int lv_pool;

    // Automatic Variable Declarations
    string auto568EEEB1_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_type = UnitGetType(lv_unit);
    lv_pos = UnitGetPosition(lv_unit);
    lv_rt_pos = UnitRallyPointTargetPoint(lv_unit, 1, 1);
    auto568EEEB1_val = lv_type;
    if (auto568EEEB1_val == "CharEggSackOneEgg") {
        lv_pool = 1;
    }
    else if (auto568EEEB1_val == "CharEggSackTwoEgg") {
        lv_pool = 2;
    }
    else if (auto568EEEB1_val == "CharEggSackThreeEgg") {
        lv_pool = 3;
    }
    else {
    }
    if ((gv_ic_unit_count < 2000)) {
        gf_Create_wave_and_send_from_to(lv_pool, lv_pos, lv_rt_pos);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggClusterTriggerDummy_Init () {
    gt_EggClusterTriggerDummy = TriggerCreate("gt_EggClusterTriggerDummy_Func");
    TriggerAddEventPlayerEffectUsed(gt_EggClusterTriggerDummy, 7, "EggClusterDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cocoon got spawned
//--------------------------------------------------------------------------------------------------
bool gt_Cocoongotspawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cocoon;
    point lv_cocoon_position;

    // Automatic Variable Declarations
    playergroup auto4663D198_g;
    int auto4663D198_var;

    // Variable Initialization
    lv_cocoon = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_cocoon_position = UnitGetPosition(lv_cocoon);

    // Actions
    if (!runActions) {
        return true;
    }

    gv_omega_active = true;
    libNtve_gf_CreatePingFacingAngle(gv_terrans, "PingBoss", lv_cocoon_position, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9999.0, 270.0);
    gv_omega_ping = PingLastCreated();
    SoundPlayForPlayer(SoundLink("UI_Zerg_Warning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TechTreeAbilityAllow(7, AbilityCommand("HiveBuildOmegaliskCocoonZergHex", 0), false);
    auto4663D198_g = gv_terrans;
    auto4663D198_var = -1;
    while (true) {
        auto4663D198_var = PlayerGroupNextPlayer(auto4663D198_g, auto4663D198_var);
        if (auto4663D198_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(lv_cocoon, true, auto4663D198_var);
    }
    if ((gv_difficulty >= 6)) {
        UnitSetPropertyFixed(lv_cocoon, c_unitPropLifeMax, 6000.0);
        UnitSetPropertyFixed(lv_cocoon, c_unitPropLife, 6000.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cocoongotspawned_Init () {
    gt_Cocoongotspawned = TriggerCreate("gt_Cocoongotspawned_Func");
    TriggerAddEventPlayerEffectUsed(gt_Cocoongotspawned, 7, "OmegaliskTriggerSpawnCocoon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cocoon spawn finished
//--------------------------------------------------------------------------------------------------
bool gt_Cocoonspawnfinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cocoon;
    point lv_cocoon_position;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cocoon = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_cocoon_position = UnitGetPosition(lv_cocoon);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(lv_cocoon);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "OmegaliskZergHex", c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth, 7, lv_cocoon_position);
    PingSetUnit(gv_omega_ping, UnitLastCreated());
    gv_omega_target_player = gv_positions[gf_get_closest_alive_player_position(lv_cocoon_position)];
    gf_order_omega(UnitLastCreated());
    gv_omega_unit = UnitLastCreated();
    SoundPlayForPlayer(SoundLink("Omegalisk_Roar", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    if ((gv_difficulty >= 7)) {
        UnitIssueOrder(gv_omega_unit, Order(AbilityCommand("EnhancePlating", 0)), c_orderQueueReplace);
        gf_order_omega(gv_omega_unit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cocoonspawnfinished_Init () {
    gt_Cocoonspawnfinished = TriggerCreate("gt_Cocoonspawnfinished_Func");
    TriggerAddEventPlayerEffectUsed(gt_Cocoonspawnfinished, 7, "OmegaliskTriggerSpawnCompleted");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cocoon or Omega dies
//--------------------------------------------------------------------------------------------------
bool gt_CocoonorOmegadies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_ut;
    int lv_killer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ut = UnitGetType(EventUnit());
    lv_killer = libNtve_gf_KillingPlayer();

    // Conditions
    if (testConds) {
        if (!(((lv_ut == "OmegaliskCocoon2") || (lv_ut == "OmegaliskZergHex")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_ut == "OmegaliskCocoon2")) {
        if ((lv_killer >= 1) && (lv_killer <= 6)) {
            gf_omega_data_cleanup();
        }

    }
    else {
        gf_omega_data_cleanup();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CocoonorOmegadies_Init () {
    gt_CocoonorOmegadies = TriggerCreate("gt_CocoonorOmegadies_Func");
    TriggerAddEventUnitDied(gt_CocoonorOmegadies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Try Omega Order Refresh
//--------------------------------------------------------------------------------------------------
bool gt_TryOmegaOrderRefresh_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_omega_active == true))) {
            return false;
        }

        if (!((gv_omega_unit != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_players[gv_omega_target_player].lv_alive == false)) {
        lv_p = gf_ai_get_weakest_player();
        gv_omega_target_player = lv_p;
        gf_order_omega(gv_omega_unit);
    }
    else {
        if ((UnitGroupHasUnit(UnitGroupIdle(7, false), gv_omega_unit) == true)) {
            gf_order_omega(gv_omega_unit);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TryOmegaOrderRefresh_Init () {
    gt_TryOmegaOrderRefresh = TriggerCreate("gt_TryOmegaOrderRefresh_Func");
    TriggerAddEventTimePeriodic(gt_TryOmegaOrderRefresh, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: extractor dies
//--------------------------------------------------------------------------------------------------
bool gt_extractordies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_type;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_type = UnitGetType(lv_unit);
    lv_owner = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() > 10.0))) {
            return false;
        }

        if (!((lv_owner == 7))) {
            return false;
        }

        if (!(((lv_type == "MineralExtractor") || (lv_type == "GreaterMineralExtractor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperAdd, (UnitTypeGetCost(lv_type, c_unitCostMinerals) - (UnitTypeGetCost(lv_type, c_unitCostMinerals) / 4)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_extractordies_Init () {
    gt_extractordies = TriggerCreate("gt_extractordies_Func");
    TriggerAddEventUnitDied(gt_extractordies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spawner_started
//--------------------------------------------------------------------------------------------------
bool gt_spawner_started_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    point lv_position;
    string lv_ut;
    int lv_capp;

    // Automatic Variable Declarations
    string auto64493330_val;

    // Variable Initialization
    lv_owner = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lv_owner == 7))) {
            return false;
        }

        if (!((UnitAbilityExists(EventUnitProgressUnit(), "Rally") == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "CharEggSackOneEgg"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "CharEggSackTwoEgg"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "CharEggSackThreeEgg"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_position = UnitGetPosition(EventUnitProgressUnit());
    lv_ut = UnitGetType(EventUnitProgressUnit());
    lv_capp = gf_get_closest_alive_player_position(lv_position);
    gv_spawner_distro[lv_capp] += 1;
    if ((gv_difficulty >= 7)) {
        UnitBehaviorAdd(EventUnitProgressUnit(), "SpawnProtection", EventUnitProgressUnit(), 1);
    }

    if (((lv_ut == "SlowlingSpawner") || (lv_ut == "CreeperSpawner") || (lv_ut == "TanklingSpawner"))) {
        gv_t1_spawner_distro[lv_capp] += 1;
    }

    if ((lv_ut == "StrikelingSpawner")) {
        gf_add_strikeling_spawner_to_group(EventUnitProgressUnit());
    }

    if (((lv_ut == "BeastlingSpawner") || (lv_ut == "RavatorSpawner") || (lv_ut == "InfusedRoachSpawner") || (lv_ut == "TorraliskSpawner"))) {
        auto64493330_val = UnitGetType(EventUnitProgressUnit());
        if (auto64493330_val == "BeastlingSpawner") {
            gv_req_beastlings = (gv_req_beastlings - 1);
        }
        else if (auto64493330_val == "RavatorSpawner") {
            gv_req_ravs = (gv_req_ravs - 1);
        }
        else if (auto64493330_val == "InfusedRoachSpawner") {
            gv_req_infused = (gv_req_infused - 1);
        }
        else if (auto64493330_val == "TorraliskSpawner") {
            gv_req_torra = (gv_req_torra - 1);
        }
        else {
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spawner_started_Init () {
    gt_spawner_started = TriggerCreate("gt_spawner_started_Func");
    TriggerAddEventUnitConstructProgress(gt_spawner_started, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spawner dies
//--------------------------------------------------------------------------------------------------
bool gt_spawnerdies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_type;
    int lv_owner;
    point lv_unit_position;

    // Automatic Variable Declarations
    string auto4D3412C2_val;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_type = UnitGetType(EventUnit());
    lv_owner = UnitGetOwner(EventUnit());
    lv_unit_position = UnitGetPosition(lv_unit);

    // Conditions
    if (testConds) {
        if (!((lv_owner == 7))) {
            return false;
        }

        if (!(((lv_type == "SlowlingSpawner") || (lv_type == "CreeperSpawner") || (lv_type == "StrikelingSpawner") || (lv_type == "TanklingSpawner") || (lv_type == "RoachSpawner") || (lv_type == "PrimalRoachSpawner") || (lv_type == "UltraliskSpawner") || (lv_type == "BrutaliskSpawner") || (lv_type == "BanelingSpawner") || (lv_type == "BeastlingSpawner") || (lv_type == "InfusedRoachSpawner") || (lv_type == "RavatorSpawner") || (lv_type == "TorraliskSpawner")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_spawner_distro[gf_get_closest_alive_player_position(lv_unit_position)] -= 1;
    PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperAdd, (UnitTypeGetCost(lv_type, c_unitCostMinerals) - (UnitTypeGetCost(lv_type, c_unitCostMinerals) / 4)));
    if (((lv_type == "SlowlingSpawner") || (lv_type == "CreeperSpawner") || (lv_type == "TanklingSpawner") || (lv_type == "StrikelingSpawner"))) {
        gv_t1_spawner_distro[gf_get_closest_alive_player_position(lv_unit_position)] -= 1;
    }

    if (((lv_type == "SlowlingSpawner") || (lv_type == "CreeperSpawner") || (lv_type == "TanklingSpawner"))) {
        if ((libNtve_gf_UnitInRegion(lv_unit, RegionFromName(("spawner player zerg " + IntToString(1)))) != true) && (libNtve_gf_UnitInRegion(lv_unit, RegionFromName(("spawner player zerg " + IntToString(2)))) != true) && (libNtve_gf_UnitInRegion(lv_unit, RegionFromName(("spawner player zerg " + IntToString(3)))) != true) && (libNtve_gf_UnitInRegion(lv_unit, RegionFromName(("spawner player zerg " + IntToString(4)))) != true) && (libNtve_gf_UnitInRegion(lv_unit, RegionFromName(("spawner player zerg " + IntToString(5)))) != true) && (libNtve_gf_UnitInRegion(lv_unit, RegionFromName(("spawner player zerg " + IntToString(6)))) != true)) {
            gv_possible_positions_t1_dead_count += 1;
            gv_possible_positions_t1_dead[gv_possible_positions_t1_dead_count] = lv_unit_position;
        }

    }
    else {
        if (((lv_type == "RoachSpawner") || (lv_type == "PrimalRoachSpawner"))) {
            gv_possible_positions_t2_dead_count += 1;
            gv_possible_positions_t2_dead[gv_possible_positions_t2_dead_count] = lv_unit_position;
        }
        else {
            if (((lv_type == "UltraliskSpawner") || (lv_type == "BrutaliskSpawner"))) {
                gv_possible_positions_t3_dead_count += 1;
                gv_possible_positions_t3_dead[gv_possible_positions_t3_count] = lv_unit_position;
            }
            else {
                if (((lv_type == "BanelingSpawner") || (lv_type == "BeastlingSpawner") || (lv_type == "InfusedRoachSpawner") || (lv_type == "RavatorSpawner") || (lv_type == "TorraliskSpawner"))) {
                    gv_possible_positions_special_dead_count += 1;
                    gv_possible_positions_special_dead[gv_possible_positions_special_dead_count] = lv_unit_position;
                    auto4D3412C2_val = lv_type;
                    if (auto4D3412C2_val == "BeastlingSpawner") {
                        gv_req_beastlings += 0;
                    }
                    else if (auto4D3412C2_val == "RavatorSpawner") {
                        gv_req_ravs += 1;
                    }
                    else if (auto4D3412C2_val == "InfusedRoachSpawner") {
                        gv_req_infused += 1;
                    }
                    else if (auto4D3412C2_val == "TorraliskSpawner") {
                        gv_req_torra += 1;
                    }
                    else {
                    }
                }
                else {
                    if ((lv_type == "StrikelingSpawner")) {
                        gv_possible_positions_strikelings_count += 1;
                        gv_possible_positions_strikelings_dead[gv_possible_positions_strikelings_count] = lv_unit_position;
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spawnerdies_Init () {
    gt_spawnerdies = TriggerCreate("gt_spawnerdies_Func");
    TriggerAddEventUnitDied(gt_spawnerdies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spawner_finished
//--------------------------------------------------------------------------------------------------
bool gt_spawner_finished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    point lv_position;
    playergroup lv_player_group;
    int lv_target_position;
    bool lv_unit_got_replaced;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = EventPlayer();
    lv_position = UnitGetPosition(EventUnitProgressUnit());
    lv_player_group = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((lv_owner == 7))) {
            return false;
        }

        if (!((UnitAbilityExists(EventUnitProgressUnit(), "Rally") == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "Nest2"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "Hellfort"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "CreepTumor2"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "MineralExtractor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "GreaterMineralExtractor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "CharEggSackOneEgg"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "CharEggSackTwoEgg"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "CharEggSackThreeEgg"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "BanelingSpawner"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player_group = gv_terrans;
    lv_target_position = gf_get_closest_alive_player_position_from_group(lv_position, lv_player_group);
    if (((gv_is_af_event == true) || (gv_mutator_massalisks == true))) {
        if ((gv_is_af_event == true)) {
            if (((UnitGetType(EventUnitProgressUnit()) == "SlowlingSpawner") || (UnitGetType(EventUnitProgressUnit()) == "StrikelingSpawner") || (UnitGetType(EventUnitProgressUnit()) == "CreeperSpawner") || (UnitGetType(EventUnitProgressUnit()) == "TanklingSpawner"))) {
                libNtve_gf_ReplaceUnit(EventUnitProgressUnit(), "MarineSpawner", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
            }
            else {
                if (((UnitGetType(EventUnitProgressUnit()) == "RoachSpawner") || (UnitGetType(EventUnitProgressUnit()) == "PrimalRoachSpawner"))) {
                    libNtve_gf_ReplaceUnit(EventUnitProgressUnit(), "MarauderSpawner", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
                }
                else {
                    if ((UnitGetType(EventUnitProgressUnit()) != "BanelingSpawner") && (UnitGetType(EventUnitProgressUnit()) != "BeastlingSpawner") && (UnitGetType(EventUnitProgressUnit()) != "InfusedRoachSpawner") && (UnitGetType(EventUnitProgressUnit()) != "RavatorSpawner") && (UnitGetType(EventUnitProgressUnit()) != "TorraliskSpawner")) {
                        libNtve_gf_ReplaceUnit(EventUnitProgressUnit(), "FirebatSpawner", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
                    }
                    else {
                        libNtve_gf_ReplaceUnit(EventUnitProgressUnit(), "MechSpawner", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
                    }
                }
            }
            lv_unit_got_replaced = true;
        }

        if ((gv_mutator_massalisks == true)) {
            if (((UnitGetType(EventUnitProgressUnit()) == "UltraliskSpawner") || (UnitGetType(EventUnitProgressUnit()) == "BrutaliskSpawner"))) {
                libNtve_gf_ReplaceUnit(EventUnitProgressUnit(), "SpecialZergSpawner", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
                lv_unit_got_replaced = true;
            }

        }

    }

    if ((gv_is_winter == true)) {
        if ((gf_get_frosty_spawner_count() <= 20)) {
            if (((UnitGetType(EventUnitProgressUnit()) == "RoachSpawner") || (UnitGetType(EventUnitProgressUnit()) == "PrimalRoachSpawner"))) {
                if ((gf_flip_coin() == 1)) {
                    libNtve_gf_ReplaceUnit(EventUnitProgressUnit(), "FrostySpawner", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
                    lv_unit_got_replaced = true;
                }

            }

        }

    }

    if ((lv_unit_got_replaced == false) && (gv_difficulty >= 5) && ((UnitGetType(EventUnitProgressUnit()) == "UltraliskSpawner") || (UnitGetType(EventUnitProgressUnit()) == "BrutaliskSpawner"))) {
        if ((UnitGetType(EventUnitProgressUnit()) == "UltraliskSpawner")) {
            if ((gf_flip_coin() == 1)) {
                libNtve_gf_ReplaceUnit(EventUnitProgressUnit(), "EroderSpawner", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
                lv_unit_got_replaced = true;
            }

        }
        else {
            if ((gv_difficulty >= 7)) {
                if ((gf_roll_dice() == 1)) {
                    libNtve_gf_ReplaceUnit(EventUnitProgressUnit(), "EroderSpawner", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
                    lv_unit_got_replaced = true;
                }

            }

        }
    }

    if ((lv_unit_got_replaced == false) && (gv_difficulty >= 5) && ((UnitGetType(EventUnitProgressUnit()) == "TanklingSpawner") || (UnitGetType(EventUnitProgressUnit()) == "CreeperSpawner"))) {
        if ((UnitGetType(EventUnitProgressUnit()) == "CreeperSpawner")) {
            if ((gv_difficulty <= 7)) {
                if ((gf_flip_coin() == 1)) {
                    libNtve_gf_ReplaceUnit(EventUnitProgressUnit(), "CorroslashSpawner", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
                    lv_unit_got_replaced = true;
                }

            }
            else {
                libNtve_gf_ReplaceUnit(EventUnitProgressUnit(), "CorroslashSpawner", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
                lv_unit_got_replaced = true;
            }
        }
        else {
            libNtve_gf_ReplaceUnit(EventUnitProgressUnit(), "CorroslashSpawner", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
            lv_unit_got_replaced = true;
        }
    }

    if ((lv_unit_got_replaced == true)) {
        lv_unit = libNtve_gf_LastReplacedUnit();
    }
    else {
        lv_unit = EventUnitProgressUnit();
    }
    if ((gf_is_front_path_blocked(gf_get_player_at_position(lv_target_position)) == true)) {
        UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Front Rally Pre " + IntToString(lv_target_position)))), c_orderQueueReplace);
        UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(lv_target_position)))), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromName(("Zerg Rally " + IntToString(lv_target_position)))), c_orderQueueReplace);
    }
    UnitGroupAdd(gv_spawnergroups[lv_target_position].lv_all, lv_unit);
    UnitGroupAdd(gv_spawnergroups[lv_target_position].lv_front, lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spawner_finished_Init () {
    gt_spawner_finished = TriggerCreate("gt_spawner_finished_Func");
    TriggerAddEventUnitConstructProgress(gt_spawner_finished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: check flank rallies
//--------------------------------------------------------------------------------------------------
bool gt_checkflankrallies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() >= (4 * 60)))) {
            return false;
        }

        if (!((GameGetMissionTime() <= (24 * 60)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gf_is_pvp() == true) || (gf_is_3v3() == true))) {
    }
    else {
        gf_check_flank_rallies();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_checkflankrallies_Init () {
    gt_checkflankrallies = TriggerCreate("gt_checkflankrallies_Func");
    TriggerAddEventTimePeriodic(gt_checkflankrallies, 61.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit enters sector
//--------------------------------------------------------------------------------------------------
bool gt_Unitenterssector_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_region;
    int lv_ri;

    // Automatic Variable Declarations
    region auto08A264D0_val;

    // Variable Initialization
    lv_region = EventUnitRegion();

    // Conditions
    if (testConds) {
        if (!((gv_difficulty >= 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto08A264D0_val = lv_region;
    if (auto08A264D0_val == RegionFromId(23)) {
        lv_ri = 1;
    }
    else if (auto08A264D0_val == RegionFromId(20)) {
        lv_ri = 2;
    }
    else if (auto08A264D0_val == RegionFromId(24)) {
        lv_ri = 3;
    }
    else if (auto08A264D0_val == RegionFromId(22)) {
        lv_ri = 4;
    }
    else if (auto08A264D0_val == RegionFromId(21)) {
        lv_ri = 5;
    }
    else if (auto08A264D0_val == RegionFromId(25)) {
        lv_ri = 6;
    }
    else {
    }
    if ((UnitGetOwner(EventUnit()) != 0) && (UnitGetOwner(EventUnit()) != 7) && (UnitGetType(EventUnit()) != "ImmortalShakurasStasisCannonMissile") && (UnitGetType(EventUnit()) != "IonStorm")) {
        UnitGroupAdd(gv_heatmap[lv_ri].lv_terran_units, EventUnit());
    }
    else {
        if ((UnitGetOwner(EventUnit()) == 7) && (UnitGetType(EventUnit()) == "KerriganVoid") && (UnitGetType(EventUnit()) == "HydraliskLevel2") && (UnitGetType(EventUnit()) == "WizardMinion")) {
            UnitGroupAdd(gv_heatmap[lv_ri].lv_zerg_orderable, EventUnit());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Unitenterssector_Init () {
    gt_Unitenterssector = TriggerCreate("gt_Unitenterssector_Func");
    TriggerEnable(gt_Unitenterssector, false);
    TriggerAddEventUnitRegion(gt_Unitenterssector, null, RegionFromId(23), true);
    TriggerAddEventUnitRegion(gt_Unitenterssector, null, RegionFromId(20), true);
    TriggerAddEventUnitRegion(gt_Unitenterssector, null, RegionFromId(24), true);
    TriggerAddEventUnitRegion(gt_Unitenterssector, null, RegionFromId(22), true);
    TriggerAddEventUnitRegion(gt_Unitenterssector, null, RegionFromId(21), true);
    TriggerAddEventUnitRegion(gt_Unitenterssector, null, RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit leaves sector
//--------------------------------------------------------------------------------------------------
bool gt_Unitleavessector_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_region;
    int lv_ri;

    // Automatic Variable Declarations
    region autoF9CDE190_val;

    // Variable Initialization
    lv_region = EventUnitRegion();

    // Conditions
    if (testConds) {
        if (!((gv_difficulty >= 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF9CDE190_val = lv_region;
    if (autoF9CDE190_val == RegionFromId(23)) {
        lv_ri = 1;
    }
    else if (autoF9CDE190_val == RegionFromId(20)) {
        lv_ri = 2;
    }
    else if (autoF9CDE190_val == RegionFromId(24)) {
        lv_ri = 3;
    }
    else if (autoF9CDE190_val == RegionFromId(22)) {
        lv_ri = 4;
    }
    else if (autoF9CDE190_val == RegionFromId(21)) {
        lv_ri = 5;
    }
    else if (autoF9CDE190_val == RegionFromId(25)) {
        lv_ri = 6;
    }
    else {
    }
    UnitGroupRemove(gv_heatmap[lv_ri].lv_terran_units, EventUnit());
    UnitGroupRemove(gv_heatmap[lv_ri].lv_zerg_orderable, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Unitleavessector_Init () {
    gt_Unitleavessector = TriggerCreate("gt_Unitleavessector_Func");
    TriggerEnable(gt_Unitleavessector, false);
    TriggerAddEventUnitRegion(gt_Unitleavessector, null, RegionFromId(23), false);
    TriggerAddEventUnitRegion(gt_Unitleavessector, null, RegionFromId(20), false);
    TriggerAddEventUnitRegion(gt_Unitleavessector, null, RegionFromId(24), false);
    TriggerAddEventUnitRegion(gt_Unitleavessector, null, RegionFromId(22), false);
    TriggerAddEventUnitRegion(gt_Unitleavessector, null, RegionFromId(21), false);
    TriggerAddEventUnitRegion(gt_Unitleavessector, null, RegionFromId(25), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: update threat score every 5s
//--------------------------------------------------------------------------------------------------
bool gt_updatethreatscoreevery5s_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_difficulty >= 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_process_sector_data();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_updatethreatscoreevery5s_Init () {
    gt_updatethreatscoreevery5s = TriggerCreate("gt_updatethreatscoreevery5s_Func");
    TriggerEnable(gt_updatethreatscoreevery5s, false);
    TriggerAddEventTimePeriodic(gt_updatethreatscoreevery5s, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: defend lane with kerrigan
//--------------------------------------------------------------------------------------------------
bool gt_defendlanewithkerrigan_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_difficulty >= 8))) {
            return false;
        }

        if (!((UnitIsAlive(gv_kerrigan_unit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_is_pvp() == true)) {
    }
    else {
        gf_kerrigan_go_to_lane(gf_get_hottest_sector());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_defendlanewithkerrigan_Init () {
    gt_defendlanewithkerrigan = TriggerCreate("gt_defendlanewithkerrigan_Func");
    TriggerEnable(gt_defendlanewithkerrigan, false);
    TriggerAddEventTimePeriodic(gt_defendlanewithkerrigan, 11.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan gets attacked
//--------------------------------------------------------------------------------------------------
bool gt_Kerrigangetsattacked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_kerrigan;
    int lv_kerrigan_energy;
    int lv_kerrigan_hp;
    unit lv_attacking_unit;
    point lv_damage_source_position;
    fixed lv_distance_to_dsp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_kerrigan = gv_kerrigan_unit;
    lv_kerrigan_energy = UnitGetPropertyInt(lv_kerrigan, c_unitPropEnergy, c_unitPropCurrent);
    lv_kerrigan_hp = UnitGetPropertyInt(lv_kerrigan, c_unitPropLife, c_unitPropCurrent);
    lv_attacking_unit = EventUnitTarget();
    lv_damage_source_position = UnitGetPosition(lv_attacking_unit);
    lv_distance_to_dsp = DistanceBetweenPoints(UnitGetPosition(lv_kerrigan), lv_damage_source_position);

    // Conditions
    if (testConds) {
        if (!((gv_difficulty >= 8))) {
            return false;
        }

        if (!((UnitIsAlive(gv_kerrigan_unit) == true))) {
            return false;
        }

        if (!((gv_kerrigan_unit != null))) {
            return false;
        }

        if (!((gv_kerrigan_unit == EventUnit()))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "KerriganVoid"))) {
            return false;
        }

        if (!((gv_kerrigan_action_cd == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_kerrigan_hp <= 50)) {
        gf_kerrigan_jump_towards_position(PointFromId(1910508930));
        gv_kerrigan_action_cd = 20;
    }

    if ((lv_kerrigan_energy >= 50) && (lv_distance_to_dsp <= 8.0) && (gv_crushing_grip_cd == 0)) {
        UnitIssueOrder(lv_kerrigan, OrderTargetingPoint(AbilityCommand("PsionicLift", 0), lv_damage_source_position), c_orderQueueReplace);
        gv_kerrigan_action_cd = 2;
        gv_crushing_grip_cd = 10;
    }

    if ((gv_difficulty >= 9) && (lv_kerrigan_energy >= 100) && (lv_distance_to_dsp <= 13.0) && (gv_zerg_drop_cd == 0)) {
        UnitIssueOrder(lv_kerrigan, OrderTargetingPoint(AbilityCommand("K5DropPods", 0), lv_damage_source_position), c_orderQueueReplace);
        gv_kerrigan_action_cd = 2;
        gv_zerg_drop_cd = 180;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kerrigangetsattacked_Init () {
    gt_Kerrigangetsattacked = TriggerCreate("gt_Kerrigangetsattacked_Func");
    TriggerEnable(gt_Kerrigangetsattacked, false);
    TriggerAddEventUnitAttacked2(gt_Kerrigangetsattacked, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reduce Kerrigan Cooldowns
//--------------------------------------------------------------------------------------------------
bool gt_ReduceKerriganCooldowns_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_difficulty >= 8))) {
            return false;
        }

        if (!((UnitIsAlive(gv_kerrigan_unit) == true))) {
            return false;
        }

        if (!((gv_kerrigan_unit != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_kerrigan_action_cd > 0)) {
        gv_kerrigan_action_cd = (gv_kerrigan_action_cd - 1);
    }

    if ((gv_crushing_grip_cd > 0)) {
        gv_crushing_grip_cd = (gv_crushing_grip_cd - 1);
    }

    if ((gv_zerg_drop_cd > 0)) {
        gv_zerg_drop_cd = (gv_zerg_drop_cd - 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReduceKerriganCooldowns_Init () {
    gt_ReduceKerriganCooldowns = TriggerCreate("gt_ReduceKerriganCooldowns_Func");
    TriggerEnable(gt_ReduceKerriganCooldowns, false);
    TriggerAddEventTimePeriodic(gt_ReduceKerriganCooldowns, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: defend sector with kerrigan
//--------------------------------------------------------------------------------------------------
bool gt_defendsectorwithkerrigan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_unit) == 7))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_outer_tumors, lv_unit) == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_outer_smallspines, lv_unit) == false))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "ZergBuildingNotOnCreepDamage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "ZergBuildingNotOnCreepDamage"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) != "IonBeam"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) != "IonStorm"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) != "ImmortalShakurasStasisCannonMissile"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) != "TechLab3"))) {
            return false;
        }

        if (!((gv_difficulty >= 8))) {
            return false;
        }

        if (!((UnitIsAlive(gv_kerrigan_unit) == true))) {
            return false;
        }

        if (!((gv_kerrigan_unit != null))) {
            return false;
        }

        if (!((gv_kerrigan_action_cd == 0))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_kerrigan_unit, RegionFromName(("zergbase " + IntToString(gf_get_closest_position(EventUnitDamageSourcePoint()))))) == true))) {
            return false;
        }

        if (!(((UnitGetType(lv_unit) == "SpineCrawler") || (UnitGetType(lv_unit) == "SlowlingSpawner") || (UnitGetType(lv_unit) == "CreeperSpawner") || (UnitGetType(lv_unit) == "StrikelingSpawner") || (UnitGetType(lv_unit) == "TanklingSpawner") || (UnitGetType(lv_unit) == "RoachSpawner") || (UnitGetType(lv_unit) == "PrimalRoachSpawner") || (UnitGetType(lv_unit) == "UltraliskSpawner") || (UnitGetType(lv_unit) == "BrutaliskSpawner") || (UnitGetType(lv_unit) == "BanelingSpawner") || (UnitGetType(lv_unit) == "BeastlingSpawner") || (UnitGetType(lv_unit) == "InfusedRoachSpawner") || (UnitGetType(lv_unit) == "RavatorSpawner") || (UnitGetType(lv_unit) == "TorraliskSpawner") || (UnitGetType(lv_unit) == "MineralExtractor") || (UnitGetType(lv_unit) == "CreepTumor2") || (UnitGetType(lv_unit) == "LargeSpineCrawler") || (UnitGetType(lv_unit) == "Nest2") || (UnitGetType(lv_unit) == "Hellfort")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_kerrigan_unit, OrderTargetingPoint(AbilityCommand("attack", 0), EventUnitDamageSourcePoint()), c_orderQueueReplace);
    gv_kerrigan_action_cd = 5;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_defendsectorwithkerrigan_Init () {
    gt_defendsectorwithkerrigan = TriggerCreate("gt_defendsectorwithkerrigan_Func");
    TriggerEnable(gt_defendsectorwithkerrigan, false);
    TriggerAddEventUnitDamaged(gt_defendsectorwithkerrigan, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cocoon Countdown happend
//--------------------------------------------------------------------------------------------------
bool gt_CocoonCountdownhappend_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cocoon;
    point lv_position;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cocoon = EventUnit();
    lv_position = UnitGetPosition(lv_cocoon);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_cocoon) == "KerriganReviveCocoon"))) {
            return false;
        }

        if (!((gv_difficulty > 7))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganVoid", 0, 7, lv_position);
    gv_kerrigan_unit = UnitLastCreated();
    UnitKill(lv_cocoon);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CocoonCountdownhappend_Init () {
    gt_CocoonCountdownhappend = TriggerCreate("gt_CocoonCountdownhappend_Func");
    TriggerEnable(gt_CocoonCountdownhappend, false);
    TriggerAddEventUnitBehaviorChange(gt_CocoonCountdownhappend, null, "CocoonReviveTimer", c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan died
//--------------------------------------------------------------------------------------------------
bool gt_Kerrigandied_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_kerrigan_unit != null))) {
            return false;
        }

        if (!((UnitGetType(gv_kerrigan_unit) == "KerriganVoid"))) {
            return false;
        }

        if (!((gv_difficulty > 7))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_kerrigan_unit = null;
    gv_kerrigan_respawn_cooldown_timer = (gv_kerrigan_respawn_cooldown_timer + 30);
    CatalogReferenceSet("Behavior,CocoonReviveTimer,Duration", 7, IntToString(gv_kerrigan_respawn_cooldown_timer));
    if (((UnitIsAlive(gv_kerrigan_cocoon) == false) || (gv_kerrigan_cocoon == null)) && ((UnitIsAlive(gv_kerrigan_unit) == false) || (gv_kerrigan_unit == null))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganReviveCocoon", 0, 7, PointFromId(1910508930));
        gv_kerrigan_cocoon = UnitLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kerrigandied_Init () {
    gt_Kerrigandied = TriggerCreate("gt_Kerrigandied_Func");
    TriggerEnable(gt_Kerrigandied, false);
    TriggerAddEventUnitDied(gt_Kerrigandied, UnitRefFromVariable("gv_kerrigan_unit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan cocoon died
//--------------------------------------------------------------------------------------------------
bool gt_Kerrigancocoondied_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_kerrigan_cocoon != null))) {
            return false;
        }

        if (!((UnitGetType(gv_kerrigan_cocoon) == "KerriganReviveCocoon"))) {
            return false;
        }

        if (!((gv_difficulty > 7))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_kerrigan_cocoon = null;
    if (((UnitIsAlive(gv_kerrigan_unit) == false) || (gv_kerrigan_unit == null))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganReviveCocoon", 0, 7, PointFromId(1910508930));
        gv_kerrigan_cocoon = UnitLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kerrigancocoondied_Init () {
    gt_Kerrigancocoondied = TriggerCreate("gt_Kerrigancocoondied_Func");
    TriggerEnable(gt_Kerrigancocoondied, false);
    TriggerAddEventUnitDied(gt_Kerrigancocoondied, UnitRefFromVariable("gv_kerrigan_cocoon"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: instantly upgrade the spawner
//--------------------------------------------------------------------------------------------------
bool gt_instantlyupgradethespawner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    point lv_position;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = EventPlayer();
    lv_position = UnitGetPosition(EventUnitProgressUnit());

    // Conditions
    if (testConds) {
        if (!((lv_owner == 7))) {
            return false;
        }

        if (!((gv_difficulty >= 12))) {
            return false;
        }

        if (!((UnitAbilityExists(EventUnitProgressUnit(), "Rally") == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "Nest2"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "CreepTumor2"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "MineralExtractor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "GreaterMineralExtractor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_upgrade_a_spawner_instant_t5(EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_instantlyupgradethespawner_Init () {
    gt_instantlyupgradethespawner = TriggerCreate("gt_instantlyupgradethespawner_Func");
    TriggerEnable(gt_instantlyupgradethespawner, false);
    TriggerAddEventUnitConstructProgress(gt_instantlyupgradethespawner, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gap Generation Dummy Effect happend
//--------------------------------------------------------------------------------------------------
bool gt_GapGenerationDummyEffecthappend_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_viper;
    point lv_viper_position;
    point lv_next_position;

    // Automatic Variable Declarations
    playergroup auto77046DB3_g;
    int auto77046DB3_var;

    // Variable Initialization
    lv_viper = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_viper_position = UnitGetPosition(lv_viper);

    // Conditions
    if (testConds) {
        if (!((gv_difficulty >= 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto77046DB3_g = gv_terrans;
    auto77046DB3_var = -1;
    while (true) {
        auto77046DB3_var = PlayerGroupNextPlayer(auto77046DB3_g, auto77046DB3_var);
        if (auto77046DB3_var < 0) { break; }
        VisFillArea(auto77046DB3_var, RegionCircle(lv_viper_position, 5.0), c_fillTypeHidden, false);
    }
    while (true) {
        lv_next_position = RegionRandomPoint(RegionCircle(lv_viper_position, 10.0));
        if ((DistanceBetweenPoints(lv_viper_position, lv_next_position) > 5.0) && (DistanceBetweenPoints(PointFromId(1910508930), lv_next_position) < 50.0)) {
            break;
        }

    }
    UnitIssueOrder(lv_viper, OrderTargetingPoint(AbilityCommand("move", 0), lv_next_position), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GapGenerationDummyEffecthappend_Init () {
    gt_GapGenerationDummyEffecthappend = TriggerCreate("gt_GapGenerationDummyEffecthappend_Func");
    TriggerEnable(gt_GapGenerationDummyEffecthappend, false);
    TriggerAddEventPlayerEffectUsed(gt_GapGenerationDummyEffecthappend, 7, "GapGenerationDummyEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Viper gets attacked
//--------------------------------------------------------------------------------------------------
bool gt_Vipergetsattacked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_dsp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dsp = UnitGetPosition(EventUnitTarget());

    // Conditions
    if (testConds) {
        if (!((gv_difficulty >= 10))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Viper"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), lv_dsp) <= 9.0)) {
        if ((gv_viper_cloud_cd == 0)) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("DisablingCloud", 0), lv_dsp), c_orderQueueReplace);
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), 13.0, PointFromId(1910508930))), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), 13.0, PointFromId(1910508930))), c_orderQueueReplace);
        }
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), 13.0, PointFromId(1910508930))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Vipergetsattacked_Init () {
    gt_Vipergetsattacked = TriggerCreate("gt_Vipergetsattacked_Func");
    TriggerEnable(gt_Vipergetsattacked, false);
    TriggerAddEventUnitAttacked2(gt_Vipergetsattacked, UnitRefFromVariable("gv_kerrigan_unit"), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Viper Cloud got used
//--------------------------------------------------------------------------------------------------
bool gt_ViperCloudgotused_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Viper"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_viper_cloud_cd = 10;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ViperCloudgotused_Init () {
    gt_ViperCloudgotused = TriggerCreate("gt_ViperCloudgotused_Func");
    TriggerEnable(gt_ViperCloudgotused, false);
    TriggerAddEventUnitAbility(gt_ViperCloudgotused, null, AbilityCommand("DisablingCloud", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Supply Upgrade
//--------------------------------------------------------------------------------------------------
bool gt_ZergSupplyUpgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = 7;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUpgrade() == "ZergSupplyIncrease"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogReferenceModify("Abil,ZergResearch,InfoArray[Research10].Charge.CountMax", lv_player, "1", c_upgradeOperationAdd);
    CatalogReferenceModify("Abil,ZergResearch,InfoArray[Research10].Resource[Minerals]", lv_player, "60", c_upgradeOperationAdd);
    PlayerModifyPropertyInt(lv_player, c_playerPropSuppliesLimit, c_playerPropOperAdd, 45);
    PlayerModifyPropertyInt(lv_player, c_playerPropSuppliesMade, c_playerPropOperAdd, 45);
    gv_supply_upgrades = (gv_supply_upgrades + 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergSupplyUpgrade_Init () {
    gt_ZergSupplyUpgrade = TriggerCreate("gt_ZergSupplyUpgrade_Func");
    TriggerAddEventUnitResearchProgress(gt_ZergSupplyUpgrade, UnitRefFromUnit(UnitFromId(706616818)), c_unitProgressStageComplete);
    TriggerAddEventUnitResearchProgress(gt_ZergSupplyUpgrade, UnitRefFromUnit(UnitFromId(478555519)), c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Armor
//--------------------------------------------------------------------------------------------------
bool gt_ZergArmor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    string auto1EE7D13E_val;

    // Variable Initialization
    lv_player = 7;

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "ZergArmor1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergArmor2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergArmor3") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergArmor4") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergArmor5")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1EE7D13E_val = libNtve_gf_TriggeringProgressUpgrade();
    if (auto1EE7D13E_val == "ZergArmor1") {
        gv_armor_level = 1;
    }
    else if (auto1EE7D13E_val == "ZergArmor2") {
        gv_armor_level = 2;
    }
    else if (auto1EE7D13E_val == "ZergArmor3") {
        gv_armor_level = 3;
        CatalogReferenceModify("Unit,Corroslash,LifeArmor", 7, "1", c_upgradeOperationAdd);
    }
    else if (auto1EE7D13E_val == "ZergArmor4") {
        gv_armor_level = 4;
    }
    else if (auto1EE7D13E_val == "ZergArmor5") {
        gv_armor_level = 5;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergArmor_Init () {
    gt_ZergArmor = TriggerCreate("gt_ZergArmor_Func");
    TriggerAddEventUnitResearchProgress(gt_ZergArmor, UnitRefFromUnit(UnitFromId(706616818)), c_unitProgressStageComplete);
    TriggerAddEventUnitResearchProgress(gt_ZergArmor, UnitRefFromUnit(UnitFromId(478555519)), c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -add defenseup
//--------------------------------------------------------------------------------------------------
bool gt_adddefenseup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_practice_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(7, "ZergDefenseDamage", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_adddefenseup_Init () {
    gt_adddefenseup = TriggerCreate("gt_adddefenseup_Func");
    TriggerAddEventChatMessage(gt_adddefenseup, c_playerAny, "-add defenseup", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: entry point
//--------------------------------------------------------------------------------------------------
bool gt_entrypoint_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_d;

    // Automatic Variable Declarations
    playergroup autoE17CD697_g;
    int autoE17CD697_var;
    playergroup autoAE518202_g;
    int autoAE518202_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libLbty_gf_EnableDisablePingPanel(true, PlayerGroupAll());
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Terr", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Zerg", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnit_Zerg", false);
    gf_Disable_timed_triggers();
    autoE17CD697_g = PlayerGroupActive();
    autoE17CD697_var = -1;
    while (true) {
        autoE17CD697_var = PlayerGroupNextPlayer(autoE17CD697_g, autoE17CD697_var);
        if (autoE17CD697_var < 0) { break; }
        if ((PlayerRace(autoE17CD697_var) == "Terr")) {
            PlayerGroupAdd(gv_terrans, autoE17CD697_var);
            if ((PlayerStatus(autoE17CD697_var) == c_playerStatusLeft)) {
                gv_players[autoE17CD697_var].lv_left_the_game = true;
            }

        }
        else {
            PlayerGroupAdd(gv_zerg, autoE17CD697_var);
        }
    }
    gf_Game_Banks_handler("load", 0, 0, 0, 0);
    gf_AnalysePlayerDifficultyVotes();
    gv_difficulty = gf_get_real_difficulty();
    if ((gv_difficulty >= 5)) {
        lv_d = gf_roll_dice();
        if (((lv_d == 1) || (lv_d == 2))) {
            gf_mgc_set_crisis_type(1);
        }
        else {
            if (((lv_d == 3) || (lv_d == 4))) {
                gf_mgc_set_crisis_type(2);
            }
            else {
                gf_mgc_set_crisis_type(3);
            }
        }
    }
    else {
        gf_mgc_set_crisis_type(0);
    }
    gf_set_build();
    TriggerExecute(gt_tbp_create, true, true);
    gf_Enable_timed_triggers();
    if ((gv_difficulty < 8) && (gv_difficulty > 4)) {
        if ((gf_tbp_mgc_get_vote_result() == 1)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringToText("") + (StringExternal("Param/Value/625E967F") + StringToText(""))));
            gf_mgc_set_crisis_type(0);
        }

    }

    autoAE518202_g = gv_terrans;
    autoAE518202_var = -1;
    while (true) {
        autoAE518202_var = PlayerGroupNextPlayer(autoAE518202_g, autoAE518202_var);
        if (autoAE518202_var < 0) { break; }
        gf_Game_Banks_handler("addgame", autoAE518202_var, (gv_players[autoAE518202_var].lv_elo - 0), 0, 0);
    }
    UISetFrameVisible(gv_terrans, c_syncFrameTypeSupply, false);
    GameSetPauseable(false);
    gv_game_timer_setting = gf_get_timer_setting();
    if ((gv_game_timer_setting != 1)) {
        gf_create_timer_countdown_dialog();
    }

    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ConsoleUIContainer/MissionTimePanel/TimeLabelCustom");
    gv_timelabel = DialogControlLastCreated();
    GameSetSpeedValue(c_gameSpeedNormal);
    gf_create_creep_source_groups();
    gf_get_possible_positions();
    gv_is_setup_phase = false;
    gf_Create_game();
    gf_Game_create_leaderboard();
    gf_init_weather();
    gf_add_default_rallies();
    gf_set_up_variables_init();
    gf_set_up_visibility();
    gf_init_event();
    if ((gv_difficulty >= 7)) {
        CatalogReferenceSet("Unit,Eroder,LifeMax", 7, IntToString(1250));
        CatalogReferenceSet("Unit,Eroder,LifeStart", 7, IntToString(1250));
        CatalogReferenceSet("Unit,Eroder,LifeArmor", 7, IntToString(5));
    }

    if ((gv_difficulty >= 8)) {
        if ((gf_tbp_get_tv_winner_vote() > 0)) {
            gv_difficulty = (gv_difficulty + gf_tbp_get_tv_winner_vote());
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringToText(gf_get_difficulty_label()) + (StringExternal("Param/Value/8EC3F5CE") + StringToText(""))));
            gf_torment_special_units_refresh(gv_difficulty);
        }

    }
    else {
        if ((gf_tbp_get_difficulty_offset_vote_result() == 1)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/95BEBB37") + StringToText("")));
            gv_difficulty = (gv_difficulty + 1);
            gf_torment_special_units_refresh(gv_difficulty);
        }

        if ((gf_tbp_get_difficulty_offset_vote_result() == 2)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/5FBB9A1C") + StringToText("")));
            gv_difficulty = (gv_difficulty - 1);
            gf_torment_special_units_refresh(gv_difficulty);
        }

    }
    if ((gv_difficulty >= 7)) {
        gf_banelings_init_vars();
        TechTreeUpgradeAddLevel(7, "BattleFrenzy", 1);
    }

    gf_set_up_difficulty_init_modifiers();
    if ((gf_is_sunday() == true)) {
        if ((gf_tbp_get_mutator_vote_result() == 1)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/DCD7F7B1") + StringToText("")));
        }
        else {
            gf_apply_mutator(gf_get_mutator_id_for_today());
        }
    }
    else {
        if ((gf_tbp_get_mutator_vote_result() == 1)) {
            gf_apply_mutator(gf_roll_dice());
        }

    }
    if ((gf_is_winter() == true) && (gv_difficulty >= 5)) {
        gv_is_winter = true;
        gf_winter_make_snow();
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/0A0266CB") + StringToText("")));
    }

    gf_set_up_modify_players_init();
    gf_create_income_dialog();
    gf_init_tgai_players();
    gf_spawn_critter();
    gf_fill_fw_grid();
    libNtve_gf_SetAllianceAspectForPlayerGroup(PlayerGroupAll(), c_allianceIdTrade, false);
    libNtve_gf_SetAllianceAspectForPlayerGroup(gv_terrans, c_allianceIdTrade, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_entrypoint_Init () {
    gt_entrypoint = TriggerCreate("gt_entrypoint_Func");
    TriggerAddEventMapInit(gt_entrypoint);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Smith doing stuff Trigger Dummy
//--------------------------------------------------------------------------------------------------
bool gt_SmithdoingstuffTriggerDummy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    point lv_pos;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    if ((gv_smith_last_used_effect_id > 0)) {
        gf_smith_remove_last_used_effect(lv_unit);
    }

    lv_owner = UnitGetOwner(lv_unit);
    if ((lv_owner > 0) && (lv_owner < 7)) {
        lv_pos = UnitGetPosition(lv_unit);
        gf_smith_doing_stuff(lv_unit, lv_owner, lv_pos);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SmithdoingstuffTriggerDummy_Init () {
    gt_SmithdoingstuffTriggerDummy = TriggerCreate("gt_SmithdoingstuffTriggerDummy_Func");
    TriggerEnable(gt_SmithdoingstuffTriggerDummy, false);
    TriggerAddEventPlayerEffectUsed(gt_SmithdoingstuffTriggerDummy, c_playerAny, "SmithDoingStuffTriggerDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: -test dev 55
//--------------------------------------------------------------------------------------------------
bool gt_testdev55_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gv_practice_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_zerg, PlayerGroupSingle(lv_player), libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_testdev55_Init () {
    gt_testdev55 = TriggerCreate("gt_testdev55_Func");
    TriggerAddEventChatMessage(gt_testdev55, c_playerAny, "-test dev 55", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -wantkarax
//--------------------------------------------------------------------------------------------------
bool gt_wantkarax_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_players[lv_player].lv_alive == false)) {
        if ((gv_players[lv_player].lv_support_type != "Karax")) {
            if ((gv_players[lv_player].lv_wantkarax == false)) {
                gv_players[lv_player].lv_wantkarax = true;
                UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/0BE0E6F9"));
            }
            else {
                gv_players[lv_player].lv_wantkarax = false;
                UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/D3633ECB"));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/31607E4B"));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/3EEF9943"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_wantkarax_Init () {
    gt_wantkarax = TriggerCreate("gt_wantkarax_Func");
    TriggerAddEventChatMessage(gt_wantkarax, c_playerAny, "-wantkarax", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -test dev nova equipment
//--------------------------------------------------------------------------------------------------
bool gt_testdevnovaequipment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_players[lv_player].lv_alive == true))) {
            return false;
        }

        if (!((gv_practice_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(lv_player, "NovaArmorApolloInfantrySuit", 1);
    TechTreeUpgradeAddLevel(lv_player, "NovaGadgetHolographicDecoy", 1);
    TechTreeUpgradeAddLevel(lv_player, "NovaWeaponBlazefireBlade", 1);
    TechTreeUpgradeAddLevel(lv_player, "NovaHelmetRangefinderOculus", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_testdevnovaequipment_Init () {
    gt_testdevnovaequipment = TriggerCreate("gt_testdevnovaequipment_Func");
    TriggerAddEventChatMessage(gt_testdevnovaequipment, c_playerAny, "-test dev nova equipment", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: afterlife_hero_died
//--------------------------------------------------------------------------------------------------
bool gt_afterlife_hero_died_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    point lv_no_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owner = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UIDisplayMessage(PlayerGroupSingle(lv_owner), c_messageAreaChat, StringExternal("Param/Value/5ACFED61"));
    UIDisplayMessage(PlayerGroupSingle(lv_owner), c_messageAreaChat, StringExternal("Param/Value/ED4F3D03"));
    Wait(10.0, c_timeGame);
    UIDisplayMessage(PlayerGroupSingle(lv_owner), c_messageAreaChat, StringExternal("Param/Value/D8E24CAD"));
    Wait(10.0, c_timeGame);
    gf_create_karax_for_player(lv_owner, lv_no_point);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_afterlife_hero_died_Init () {
    gt_afterlife_hero_died = TriggerCreate("gt_afterlife_hero_died_Func");
    TriggerAddEventPlayerEffectUsed(gt_afterlife_hero_died, c_playerAny, "AfterlifeHeroDiedTriggerDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spore Crawler wants to shoot
//--------------------------------------------------------------------------------------------------
bool gt_SporeCrawlerwantstoshoot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RavagerArtilleryCP", PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), RandomFixed(0.0, 5.0), libNtve_gf_RandomAngle()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SporeCrawlerwantstoshoot_Init () {
    gt_SporeCrawlerwantstoshoot = TriggerCreate("gt_SporeCrawlerwantstoshoot_Func");
    TriggerAddEventPlayerEffectUsed(gt_SporeCrawlerwantstoshoot, c_playerAny, "RavagerFireDummyTriggerEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestor died
//--------------------------------------------------------------------------------------------------
bool gt_Infestordied_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_infestor_dead_count += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Infestordied_Init () {
    gt_Infestordied = TriggerCreate("gt_Infestordied_Func");
    TriggerAddEventPlayerEffectUsed(gt_Infestordied, c_playerAny, "InfestorDeathTriggerNoticeDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: tbp_dialog_minimap_interaction
//--------------------------------------------------------------------------------------------------
bool gt_tbp_dialog_minimap_interaction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_former_position;
    int lv_picked_position;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_tbp_minimap_button_random) || (EventDialogControl() == gv_tbp_minimap_buttons[1]) || (EventDialogControl() == gv_tbp_minimap_buttons[2]) || (EventDialogControl() == gv_tbp_minimap_buttons[3]) || (EventDialogControl() == gv_tbp_minimap_buttons[4]) || (EventDialogControl() == gv_tbp_minimap_buttons[5]) || (EventDialogControl() == gv_tbp_minimap_buttons[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_former_position = gv_tbp_minimap_position_picks[EventPlayer()];
    lv_picked_position = gf_tbp_get_used_button_pos_id(EventDialogControl());
    gf_disable_all_buttons_for_player(EventPlayer());
    if ((lv_picked_position == 0)) {
        DialogControlSetEnabled(gv_tbp_minimap_button_random, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        gf_disable_button_for_all_players(lv_picked_position);
        DialogControlSetEnabled(gv_tbp_minimap_button_random, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemText(gv_tbp_minimap_buttons[lv_picked_position], PlayerName(EventPlayer()), PlayerGroupAll());
        DialogControlSetSize(gv_tbp_minimap_buttons[lv_picked_position], PlayerGroupAll(), 200, 60);
    }
    if ((lv_former_position != 0)) {
        libNtve_gf_SetDialogItemText(gv_tbp_minimap_buttons[lv_former_position], IntToText(lv_former_position), PlayerGroupAll());
        DialogControlSetSize(gv_tbp_minimap_buttons[lv_former_position], PlayerGroupAll(), 60, 60);
        DialogControlSetEnabled(gv_tbp_minimap_buttons[lv_former_position], PlayerGroupAll(), true);
    }

    gv_tbp_minimap_position_picks[EventPlayer()] = lv_picked_position;
    gv_tbp_minimap_position_picks_cross[lv_picked_position] = EventPlayer();
    gv_tbp_minimap_position_picks_cross[lv_former_position] = 0;
    while ((lv_i <= 6)) {
        if ((gv_tbp_minimap_position_picks_cross[lv_i] == 0)) {
            DialogControlSetEnabled(gv_tbp_minimap_buttons[lv_i], PlayerGroupSingle(EventPlayer()), true);
        }

        lv_i += 1;
    }
    gf_tbp_refresh_dialog_labels();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tbp_dialog_minimap_interaction_Init () {
    gt_tbp_dialog_minimap_interaction = TriggerCreate("gt_tbp_dialog_minimap_interaction_Func");
    TriggerAddEventDialogControl(gt_tbp_dialog_minimap_interaction, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tbp_dialog_minimap_add_archon_button_interaction
//--------------------------------------------------------------------------------------------------
bool gt_tbp_dialog_minimap_add_archon_button_interaction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_position;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_tbp_minimap_add_archon_buttons[1]) || (EventDialogControl() == gv_tbp_minimap_add_archon_buttons[2]) || (EventDialogControl() == gv_tbp_minimap_add_archon_buttons[3]) || (EventDialogControl() == gv_tbp_minimap_add_archon_buttons[4]) || (EventDialogControl() == gv_tbp_minimap_add_archon_buttons[5]) || (EventDialogControl() == gv_tbp_minimap_add_archon_buttons[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_position = gf_tbp_get_used_add_archon_button_pos_id(EventDialogControl());
    gf_tbp_archon_remove_add_player_slot(lv_position, EventPlayer());
    gf_tbp_archon_create_remove_player_slot(lv_position, EventPlayer());
    gf_tbp_archon_create_player_slot(lv_position, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tbp_dialog_minimap_add_archon_button_interaction_Init () {
    gt_tbp_dialog_minimap_add_archon_button_interaction = TriggerCreate("gt_tbp_dialog_minimap_add_archon_button_interaction_Func");
    TriggerAddEventDialogControl(gt_tbp_dialog_minimap_add_archon_button_interaction, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tbp_dialog_minimap_remove_archon_button_interaction
//--------------------------------------------------------------------------------------------------
bool gt_tbp_dialog_minimap_remove_archon_button_interaction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_position;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_tbp_minimap_remove_archon_buttons[1]) || (EventDialogControl() == gv_tbp_minimap_remove_archon_buttons[2]) || (EventDialogControl() == gv_tbp_minimap_remove_archon_buttons[3]) || (EventDialogControl() == gv_tbp_minimap_remove_archon_buttons[4]) || (EventDialogControl() == gv_tbp_minimap_remove_archon_buttons[5]) || (EventDialogControl() == gv_tbp_minimap_remove_archon_buttons[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_position = gf_tbp_get_used_remove_archon_button_pos_id(EventDialogControl());
    gf_tbp_archon_remove_player_slot(lv_position, EventPlayer());
    gf_tbp_make_player_position_random(gv_tbp_minimap_position_picks_cross[(lv_position + 6)]);
    gf_tbp_archon_remove_remove_player_slot(lv_position, EventPlayer());
    gf_tbp_archon_create_add_player_slot(lv_position, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tbp_dialog_minimap_remove_archon_button_interaction_Init () {
    gt_tbp_dialog_minimap_remove_archon_button_interaction = TriggerCreate("gt_tbp_dialog_minimap_remove_archon_button_interaction_Func");
    TriggerAddEventDialogControl(gt_tbp_dialog_minimap_remove_archon_button_interaction, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tbp_dialog_minimap_archon_slot_button_interaction
//--------------------------------------------------------------------------------------------------
bool gt_tbp_dialog_minimap_archon_slot_button_interaction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_position;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_tbp_minimap_archon_slot_buttons[1]) || (EventDialogControl() == gv_tbp_minimap_archon_slot_buttons[2]) || (EventDialogControl() == gv_tbp_minimap_archon_slot_buttons[3]) || (EventDialogControl() == gv_tbp_minimap_archon_slot_buttons[4]) || (EventDialogControl() == gv_tbp_minimap_archon_slot_buttons[5]) || (EventDialogControl() == gv_tbp_minimap_archon_slot_buttons[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_position = gf_tbp_get_used_archon_slot_button_pos_id(EventDialogControl());
    gf_tbp_archon_remove_player_slot(lv_position, EventPlayer());
    gf_tbp_make_player_position_random(gv_tbp_minimap_position_picks_cross[(lv_position + 6)]);
    gf_tbp_archon_remove_remove_player_slot(lv_position, EventPlayer());
    gf_tbp_archon_create_add_player_slot(lv_position, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tbp_dialog_minimap_archon_slot_button_interaction_Init () {
    gt_tbp_dialog_minimap_archon_slot_button_interaction = TriggerCreate("gt_tbp_dialog_minimap_archon_slot_button_interaction_Func");
    TriggerAddEventDialogControl(gt_tbp_dialog_minimap_archon_slot_button_interaction, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tbp_create
//--------------------------------------------------------------------------------------------------
bool gt_tbp_create_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;
    int lv_i;
    int lv_ev_dialog_size_height;

    // Automatic Variable Declarations
    playergroup auto2240D553_g;
    int auto2240D553_var;
    playergroup autoC1308021_g;
    int autoC1308021_var;
    playergroup auto8606355D_g;
    int auto8606355D_var;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();
    lv_ev_dialog_size_height = 300;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_players = PlayerGroupAll();
    auto2240D553_g = lv_players;
    auto2240D553_var = -1;
    while (true) {
        auto2240D553_var = PlayerGroupNextPlayer(auto2240D553_g, auto2240D553_var);
        if (auto2240D553_var < 0) { break; }
        CameraPan(auto2240D553_var, PointFromId(304274518), 0.0, -1, 10.0, false);
        CameraLockInput(auto2240D553_var, true);
    }
    UnitPauseAll(true);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    DialogCreate(420, 700, c_anchorTopLeft, 100, 100, true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/5EDCD2AE"));
    gv_tbp_dialog_info = DialogLastCreated();
    lv_i = 1;
    if ((gv_difficulty < 5)) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 370, 50, c_anchorTopLeft, 55, (60 + (1 * 20)), ((StringExternal("Param/Value/6C709FC7") + StringToText(gf_get_difficulty_label())) + StringToText("")), Color(100.00, 0.00, 0.00), false, 2.0);
    }
    else {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 370, 50, c_anchorTopLeft, 55, (60 + (1 * 20)), ((StringExternal("Param/Value/A8980647") + StringToText(gf_get_difficulty_label())) + (StringExternal("Param/Value/E31B502F") + StringToText(gf_mgc_get_crisis_name_by_type(gv_mgc_type)))), Color(100.00, 0.00, 0.00), false, 2.0);
    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 370, 25, c_anchorTopLeft, 55, (50 + (2 * 35)), (StringExternal("Param/Value/40A406A6") + StringToText("")), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tbp_zerg_flags = DialogControlLastCreated();
    while ((lv_i <= 12)) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 370, 25, c_anchorTopLeft, 55, (40 + ((3 + lv_i) * 35)), StringExternal("Param/Value/29478174"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_tbp_labels_terran[lv_i] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 370, 25, c_anchorTopLeft, 55, (40 + (((3 + lv_i) * 35) + 22)), StringExternal("Param/Value/80B29AB2"), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_i = (lv_i + 1);
        gv_tbp_labels_terran[lv_i] = DialogControlLastCreated();
        lv_i = (lv_i + 1);
    }
    lv_players = PlayerGroupActive();
    PlayerGroupRemove(lv_players, 7);
    autoC1308021_g = lv_players;
    autoC1308021_var = -1;
    while (true) {
        autoC1308021_var = PlayerGroupNextPlayer(autoC1308021_g, autoC1308021_var);
        if (autoC1308021_var < 0) { break; }
        gv_tbp_player_picked_terran_count = (gv_tbp_player_picked_terran_count + 1);
        gv_tbp_player_picked_terran[gv_tbp_player_picked_terran_count] = autoC1308021_var;
        gv_tbp_player_bonus_picks[gv_tbp_player_picked_terran[gv_tbp_player_picked_terran_count]] = 1;
    }
    DialogSetVisible(gv_tbp_dialog_info, PlayerGroupAll(), true);
    DialogCreate(900, 440, c_anchorTopLeft, 520, 100, true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/B50B193C"));
    gv_tbp_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 190, 60, c_anchorTopLeft, 60, 95, StringExternal("Param/Value/A1F0D249"), Color(22*100/255,128*100/255,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 160, 80, c_anchorTopLeft, 190, 75, StringToText("At the start of the game three Medivacs with infinite energy drop Elite Marines in each zerg path. After the early game the Medivacs disappear."), StringExternal("Param/Value/FFAF0AAB"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_button_terran_raynor = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 160, 80, c_anchorTopLeft, 360, 75, StringToText("Cash Transporters drop resources in your base in regular intervals. Adds upgrades to the construction to further improve this behaviour."), StringExternal("Param/Value/54A95DC9"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_button_terran_cash = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 160, 80, c_anchorTopLeft, 530, 75, StringToText("Replaces your start units with Karax. He is a versatile hero with strong crowd control, generates energy and passively buffs neaby structures efficiency by 50%."), StringExternal("Param/Value/07755624"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_button_terran_karax = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 190, 60, c_anchorTopLeft, 60, 185, StringExternal("Param/Value/505FBFE9"), Color(150*100/255,150*100/255,30*100/255), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 160, 80, c_anchorTopLeft, 190, 165, StringToText("Adds Operation Center Tech Building, Large Chemical Plant, Advanced Shock-Troopers, Combat Suit Reapers and an Improved Generator."), StringExternal("Param/Value/C41EEAA0"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_button_terran_ht = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 160, 80, c_anchorTopLeft, 360, 165, StringToText("At the start of the game a large amount of Marauders clears the outer zerg base, increasing the travel distance from rebuilt spawners. Adds a Titan Marauder to your start units which can be useful in various scenarios. Buggos are replaced by Oggubs which have a greatly increased gas generation rate."), StringExternal("Param/Value/CDA9DFBE"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_button_terran_marauder = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 160, 80, c_anchorTopLeft, 530, 165, StringToText("Adds a Siege Tank and a High Density Battery to your start units, giving you the opportunity to gather Expertise Stacks in the early game and deny Spawners for an extended amount of time."), StringExternal("Param/Value/615E49F9"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_button_terran_tank = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 160, 80, c_anchorTopLeft, 700, 165, StringToText("Replaces Builders with Infested Builders which have access to different structures. Unable to build Refineries and instead relies on Gas Vents for gas production. Has no access to Wall or Sentry Gun and instead builds Bunkers. Those spawn Infested Marines which serve as \"Meatwall\". Infested Marines profit from many upgrades such as Fortification or Tier Upgrade."), StringExternal("Param/Value/B845E20A"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_button_terran_infested = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 190, 60, c_anchorTopLeft, 60, 275, StringExternal("Param/Value/6522E4AA"), Color(100.00, 0.00, 0.00), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 160, 80, c_anchorTopLeft, 190, 255, StringToText("Adds Probius to your start Units. Probius is extremely tanky and fast, can deal with Spawner Units in the very early game and build Pylons and Cannons. Probius Pylons can turn into a Long Range Cannons and provide different auras which increase in strength with their related upgrade level."), StringExternal("Param/Value/43440836"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_button_terran_probius = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 160, 80, c_anchorTopLeft, 360, 255, StringToText("Improved Version of the classic Zerg Hex experience. Adds Chemical Plant, and tanky Firebats which use gas to their flamethrowers and carries Napalm Bombs from the Chemical Plants. Can build non-heroic Tanks and has cheaper Marines. Removes Gas Extraction."), StringExternal("Param/Value/795B13EC"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_button_terran_v3x = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 160, 80, c_anchorTopLeft, 530, 255, StringToText("Replaces your start units with Chaos Forces. Chaos Forces generate blood drops which need to get collected by slaves to recruit the Lord and greatly improve Chaos Space Marines. Has no early access to strong Shatter Damage. Falls off in the late game due to limited opportunity to gather blood."), StringExternal("Param/Value/1041A1C4"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_button_terran_chaos = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 160, 80, c_anchorTopLeft, 700, 255, StringToText(""), StringExternal("Param/Value/6ADFE20E"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_button_terran_random = DialogControlLastCreated();
    DialogControlSetEnabled(gv_tbp_button_terran_random, PlayerGroupAll(), false);
    lv_i = 1;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeProgressBar);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 240.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 240.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 40);
    gv_tbp_progress_bar = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 350, 25);
    if ((gv_difficulty >= 5) && (gv_difficulty <= 7)) {
        lv_ev_dialog_size_height = (lv_ev_dialog_size_height + 60);
    }

    DialogCreate(900, lv_ev_dialog_size_height, c_anchorTopLeft, 520, 550, true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/AA9DC100"));
    if ((gv_difficulty <= 7)) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 190, 60, c_anchorTopLeft, 40, 100, StringExternal("Param/Value/C7EDCF26"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 385, 80, StringToText(""), StringExternal("Param/Value/9F6EE008"), "Assets\\Textures\\ui_emoticons_random.dds");
        gv_tbp_extra_vote_dialog_difficulty_offset_minus = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 450, 80, StringToText(""), StringExternal("Param/Value/32EBF7B9"), "Assets\\Textures\\ui_emoticons_random.dds");
        gv_tbp_extra_vote_dialog_difficulty_offset_neutral = DialogControlLastCreated();
        DialogControlSetEnabled(gv_tbp_extra_vote_dialog_difficulty_offset_neutral, PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 515, 80, StringToText(""), StringExternal("Param/Value/303A6F94"), "Assets\\Textures\\ui_emoticons_random.dds");
        gv_tbp_extra_vote_dialog_difficulty_offset_plus = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 275, 60, c_anchorTopLeft, 590, 85, StringExternal("Param/Value/B73C9E4C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    else {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 190, 60, c_anchorTopLeft, 40, 100, StringExternal("Param/Value/8294A17E"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 255, 80, StringToText("Greatly increased off-map income."), StringExternal("Param/Value/C6DEF3C4"), "Assets\\Textures\\ui_emoticons_random.dds");
        gv_tbp_tv_p5 = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 320, 80, StringToText("Every Spawner gets upgrades instantly for free."), StringExternal("Param/Value/52FEC950"), "Assets\\Textures\\ui_emoticons_random.dds");
        gv_tbp_tv_p4 = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 385, 80, StringToText("Every Spawner Unit gets +5 HP."), StringExternal("Param/Value/BE7A5AFD"), "Assets\\Textures\\ui_emoticons_random.dds");
        gv_tbp_tv_p3 = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 450, 80, StringToText("Adds Speed 4 Upgrade."), StringExternal("Param/Value/DF8A5B7A"), "Assets\\Textures\\ui_emoticons_random.dds");
        gv_tbp_tv_p2 = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 515, 80, StringToText("Adds Improved Kerrigan."), StringExternal("Param/Value/6D5AD9B7"), "Assets\\Textures\\ui_emoticons_random.dds");
        gv_tbp_tv_p1 = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 275, 60, c_anchorTopLeft, 590, 85, StringExternal("Param/Value/FB02E5E3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    if ((gf_is_sunday() == true)) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 190, 60, c_anchorTopLeft, 40, 160, StringExternal("Param/Value/F9406FFA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    else {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 255, 60, c_anchorTopLeft, 40, 160, StringExternal("Param/Value/AEB0ACA3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 450, 140, StringToText(""), StringExternal("Param/Value/BE23D86C"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_extra_vote_dialog_mutator_vote_yes = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 515, 140, StringToText(""), StringExternal("Param/Value/8497B802"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_extra_vote_dialog_mutator_vote_no = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 275, 60, c_anchorTopLeft, 590, 145, StringExternal("Param/Value/D018C08E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 255, 60, c_anchorTopLeft, 40, 215, StringExternal("Param/Value/18808CD8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 450, 200, StringToText(""), StringExternal("Param/Value/2A0C4817"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_extra_vote_dialog_zterran_vote_yes = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 515, 200, StringToText(""), StringExternal("Param/Value/4B25A17B"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_extra_vote_dialog_zterran_vote_no = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 275, 60, c_anchorTopLeft, 590, 200, StringExternal("Param/Value/94B4C808"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tbp_extra_vote_dialog = DialogLastCreated();
    DialogSetVisible(gv_tbp_extra_vote_dialog, PlayerGroupAll(), true);
    if ((gv_difficulty >= 5) && (gv_difficulty <= 7)) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 255, 60, c_anchorTopLeft, 40, 270, StringExternal("Param/Value/9F8B195E"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 450, 260, StringToText(""), StringExternal("Param/Value/A88BECFD"), "Assets\\Textures\\ui_emoticons_random.dds");
        gv_tbp_mgc_vote_dialog_yes = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 515, 260, StringToText(""), StringExternal("Param/Value/A7295820"), "Assets\\Textures\\ui_emoticons_random.dds");
        gv_tbp_mgc_vote_dialog_no = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 275, 60, c_anchorTopLeft, 590, 275, StringExternal("Param/Value/16D50D1C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    }

    gv_tbp_extra_vote_dialog = DialogLastCreated();
    DialogSetVisible(gv_tbp_extra_vote_dialog, PlayerGroupAll(), true);
    DialogCreate(570, 605, c_anchorTopLeft, 1420, 100, true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/9753C624"));
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 512, 512, c_anchorTopLeft, 30, 70, StringToText(""), "assets\\dialog\\minimap.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 180, StringToText(""), StringExternal("Param/Value/AEA22F25"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_minimap_buttons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTop, 5, 70, StringToText(""), StringExternal("Param/Value/149D5C46"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_minimap_buttons[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 85, 180, StringToText(""), StringExternal("Param/Value/EDDBE1A1"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_minimap_buttons[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorBottomLeft, 90, 195, StringToText(""), StringExternal("Param/Value/F9440A32"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_minimap_buttons[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorBottom, 5, 75, StringToText(""), StringExternal("Param/Value/97629A9E"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_minimap_buttons[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorBottomRight, 85, 195, StringToText(""), StringExternal("Param/Value/ED2886E8"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_minimap_buttons[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 120, 60, c_anchorCenter, 5, 20, StringToText(""), StringExternal("Param/Value/CDB3F065"), "Assets\\Textures\\ui_emoticons_random.dds");
    gv_tbp_minimap_button_random = DialogControlLastCreated();
    DialogControlSetEnabled(gv_tbp_minimap_button_random, PlayerGroupAll(), false);
    gv_tbp_minimap_dialog = DialogLastCreated();
    DialogSetVisible(gv_tbp_minimap_dialog, PlayerGroupAll(), true);
    gf_tbp_refresh_dialog_labels();
    DialogSetVisible(gv_tbp_dialog, PlayerGroupAll(), true);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    lv_i = 240;
    while ((lv_i >= 0)) {
        libNtve_gf_SetDialogItemCurrentValue(gv_tbp_progress_bar, IntToFixed(lv_i), PlayerGroupAll());
        lv_i = (lv_i - 1);
        Wait(0.0625, c_timeReal);
    }
    DialogDestroy(gv_tbp_dialog);
    DialogDestroy(gv_tbp_dialog_info);
    DialogDestroy(gv_tbp_extra_vote_dialog);
    DialogDestroy(gv_tbp_toplist_frame_dialog);
    DialogDestroy(gv_tbp_minimap_dialog);
    UnitPauseAll(false);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    auto8606355D_g = lv_players;
    auto8606355D_var = -1;
    while (true) {
        auto8606355D_var = PlayerGroupNextPlayer(auto8606355D_g, auto8606355D_var);
        if (auto8606355D_var < 0) { break; }
        CameraLockInput(auto8606355D_var, false);
    }
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tbp_create_Init () {
    gt_tbp_create = TriggerCreate("gt_tbp_create_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: tbp_dialog_interaction
//--------------------------------------------------------------------------------------------------
bool gt_tbp_dialog_interaction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoA0AD69A2_val;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_tbp_button_terran_random) || (EventDialogControl() == gv_tbp_button_terran_chaos) || (EventDialogControl() == gv_tbp_button_terran_ht) || (EventDialogControl() == gv_tbp_button_terran_v3x) || (EventDialogControl() == gv_tbp_button_terran_cash) || (EventDialogControl() == gv_tbp_button_terran_infested) || (EventDialogControl() == gv_tbp_button_terran_raynor) || (EventDialogControl() == gv_tbp_button_terran_marauder) || (EventDialogControl() == gv_tbp_button_terran_tank) || (EventDialogControl() == gv_tbp_button_terran_probius) || (EventDialogControl() == gv_tbp_button_terran_karax)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_tbp_button_terran_random, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_tbp_button_terran_chaos, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_tbp_button_terran_ht, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_tbp_button_terran_v3x, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_tbp_button_terran_cash, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_tbp_button_terran_infested, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_tbp_button_terran_raynor, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_tbp_button_terran_marauder, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_tbp_button_terran_tank, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_tbp_button_terran_probius, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_tbp_button_terran_karax, PlayerGroupSingle(EventPlayer()), true);
    autoA0AD69A2_val = EventDialogControl();
    if (autoA0AD69A2_val == gv_tbp_button_terran_random) {
        gv_tbp_player_bonus_picks[EventPlayer()] = 1;
        DialogControlSetEnabled(gv_tbp_button_terran_random, PlayerGroupSingle(EventPlayer()), false);
    }
    else if (autoA0AD69A2_val == gv_tbp_button_terran_chaos) {
        gv_tbp_player_bonus_picks[EventPlayer()] = 2;
        DialogControlSetEnabled(gv_tbp_button_terran_chaos, PlayerGroupSingle(EventPlayer()), false);
    }
    else if (autoA0AD69A2_val == gv_tbp_button_terran_ht) {
        gv_tbp_player_bonus_picks[EventPlayer()] = 3;
        DialogControlSetEnabled(gv_tbp_button_terran_ht, PlayerGroupSingle(EventPlayer()), false);
    }
    else if (autoA0AD69A2_val == gv_tbp_button_terran_v3x) {
        gv_tbp_player_bonus_picks[EventPlayer()] = 4;
        DialogControlSetEnabled(gv_tbp_button_terran_v3x, PlayerGroupSingle(EventPlayer()), false);
    }
    else if (autoA0AD69A2_val == gv_tbp_button_terran_cash) {
        gv_tbp_player_bonus_picks[EventPlayer()] = 5;
        DialogControlSetEnabled(gv_tbp_button_terran_cash, PlayerGroupSingle(EventPlayer()), false);
    }
    else if (autoA0AD69A2_val == gv_tbp_button_terran_infested) {
        gv_tbp_player_bonus_picks[EventPlayer()] = 6;
        DialogControlSetEnabled(gv_tbp_button_terran_infested, PlayerGroupSingle(EventPlayer()), false);
    }
    else if (autoA0AD69A2_val == gv_tbp_button_terran_raynor) {
        gv_tbp_player_bonus_picks[EventPlayer()] = 7;
        DialogControlSetEnabled(gv_tbp_button_terran_raynor, PlayerGroupSingle(EventPlayer()), false);
    }
    else if (autoA0AD69A2_val == gv_tbp_button_terran_marauder) {
        gv_tbp_player_bonus_picks[EventPlayer()] = 8;
        DialogControlSetEnabled(gv_tbp_button_terran_marauder, PlayerGroupSingle(EventPlayer()), false);
    }
    else if (autoA0AD69A2_val == gv_tbp_button_terran_tank) {
        gv_tbp_player_bonus_picks[EventPlayer()] = 10;
        DialogControlSetEnabled(gv_tbp_button_terran_tank, PlayerGroupSingle(EventPlayer()), false);
    }
    else if (autoA0AD69A2_val == gv_tbp_button_terran_probius) {
        gv_tbp_player_bonus_picks[EventPlayer()] = 11;
        DialogControlSetEnabled(gv_tbp_button_terran_probius, PlayerGroupSingle(EventPlayer()), false);
    }
    else if (autoA0AD69A2_val == gv_tbp_button_terran_karax) {
        gv_tbp_player_bonus_picks[EventPlayer()] = 12;
        DialogControlSetEnabled(gv_tbp_button_terran_karax, PlayerGroupSingle(EventPlayer()), false);
    }
    else if (autoA0AD69A2_val == gv_tbp_button_terran_genetron) {
        gv_tbp_player_bonus_picks[EventPlayer()] = 14;
        DialogControlSetEnabled(gv_tbp_button_terran_genetron, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
    }
    gf_tbp_refresh_dialog_labels();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tbp_dialog_interaction_Init () {
    gt_tbp_dialog_interaction = TriggerCreate("gt_tbp_dialog_interaction_Func");
    TriggerAddEventDialogControl(gt_tbp_dialog_interaction, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tbp_dialog_extra_vote_difficulty_offset_interaction
//--------------------------------------------------------------------------------------------------
bool gt_tbp_dialog_extra_vote_difficulty_offset_interaction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto54B932E9_val;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_tbp_extra_vote_dialog_difficulty_offset_plus) || (EventDialogControl() == gv_tbp_extra_vote_dialog_difficulty_offset_minus) || (EventDialogControl() == gv_tbp_extra_vote_dialog_difficulty_offset_neutral)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_tbp_extra_vote_dialog_difficulty_offset_plus, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_tbp_extra_vote_dialog_difficulty_offset_neutral, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_tbp_extra_vote_dialog_difficulty_offset_minus, PlayerGroupSingle(EventPlayer()), false);
    auto54B932E9_val = EventDialogControl();
    if (auto54B932E9_val == gv_tbp_extra_vote_dialog_difficulty_offset_neutral) {
        gv_difficulty_offset_votes[EventPlayer()] = 0;
        DialogControlSetEnabled(gv_tbp_extra_vote_dialog_difficulty_offset_plus, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tbp_extra_vote_dialog_difficulty_offset_minus, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (auto54B932E9_val == gv_tbp_extra_vote_dialog_difficulty_offset_plus) {
        gv_difficulty_offset_votes[EventPlayer()] = 1;
        DialogControlSetEnabled(gv_tbp_extra_vote_dialog_difficulty_offset_neutral, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tbp_extra_vote_dialog_difficulty_offset_minus, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (auto54B932E9_val == gv_tbp_extra_vote_dialog_difficulty_offset_minus) {
        gv_difficulty_offset_votes[EventPlayer()] = 2;
        DialogControlSetEnabled(gv_tbp_extra_vote_dialog_difficulty_offset_neutral, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tbp_extra_vote_dialog_difficulty_offset_plus, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
    }
    gf_tbp_refresh_dialog_labels();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tbp_dialog_extra_vote_difficulty_offset_interaction_Init () {
    gt_tbp_dialog_extra_vote_difficulty_offset_interaction = TriggerCreate("gt_tbp_dialog_extra_vote_difficulty_offset_interaction_Func");
    TriggerAddEventDialogControl(gt_tbp_dialog_extra_vote_difficulty_offset_interaction, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tbp_dialog_extra_vote_torment_level_interaction
//--------------------------------------------------------------------------------------------------
bool gt_tbp_dialog_extra_vote_torment_level_interaction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto4D45DA46_val;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_tbp_tv_p1) || (EventDialogControl() == gv_tbp_tv_p2) || (EventDialogControl() == gv_tbp_tv_p3) || (EventDialogControl() == gv_tbp_tv_p4) || (EventDialogControl() == gv_tbp_tv_p5)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_tbp_tv_p1, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_tbp_tv_p2, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_tbp_tv_p3, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_tbp_tv_p4, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_tbp_tv_p5, PlayerGroupSingle(EventPlayer()), false);
    auto4D45DA46_val = EventDialogControl();
    if (auto4D45DA46_val == gv_tbp_tv_p1) {
        gv_tbp_torment_votes[EventPlayer()] = 1;
        DialogControlSetEnabled(gv_tbp_tv_p2, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tbp_tv_p3, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tbp_tv_p4, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tbp_tv_p5, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (auto4D45DA46_val == gv_tbp_tv_p2) {
        gv_tbp_torment_votes[EventPlayer()] = 2;
        DialogControlSetEnabled(gv_tbp_tv_p1, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tbp_tv_p3, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tbp_tv_p4, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tbp_tv_p5, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (auto4D45DA46_val == gv_tbp_tv_p3) {
        gv_tbp_torment_votes[EventPlayer()] = 3;
        DialogControlSetEnabled(gv_tbp_tv_p1, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tbp_tv_p2, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tbp_tv_p4, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tbp_tv_p5, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (auto4D45DA46_val == gv_tbp_tv_p4) {
        gv_tbp_torment_votes[EventPlayer()] = 4;
        DialogControlSetEnabled(gv_tbp_tv_p1, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tbp_tv_p2, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tbp_tv_p3, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tbp_tv_p5, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (auto4D45DA46_val == gv_tbp_tv_p5) {
        gv_tbp_torment_votes[EventPlayer()] = 5;
        DialogControlSetEnabled(gv_tbp_tv_p1, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tbp_tv_p2, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tbp_tv_p3, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tbp_tv_p4, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
    }
    gf_tbp_refresh_dialog_labels();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tbp_dialog_extra_vote_torment_level_interaction_Init () {
    gt_tbp_dialog_extra_vote_torment_level_interaction = TriggerCreate("gt_tbp_dialog_extra_vote_torment_level_interaction_Func");
    TriggerAddEventDialogControl(gt_tbp_dialog_extra_vote_torment_level_interaction, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tbp_dialog_extra_vote_mutator_vote
//--------------------------------------------------------------------------------------------------
bool gt_tbp_dialog_extra_vote_mutator_vote_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoD5529626_val;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_tbp_extra_vote_dialog_mutator_vote_no) || (EventDialogControl() == gv_tbp_extra_vote_dialog_mutator_vote_yes)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_tbp_extra_vote_dialog_mutator_vote_yes, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_tbp_extra_vote_dialog_mutator_vote_no, PlayerGroupSingle(EventPlayer()), false);
    autoD5529626_val = EventDialogControl();
    if (autoD5529626_val == gv_tbp_extra_vote_dialog_mutator_vote_yes) {
        gv_tbp_mutator_votes[EventPlayer()] = 1;
        DialogControlSetEnabled(gv_tbp_extra_vote_dialog_mutator_vote_no, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (autoD5529626_val == gv_tbp_extra_vote_dialog_mutator_vote_no) {
        gv_tbp_mutator_votes[EventPlayer()] = 2;
        DialogControlSetEnabled(gv_tbp_extra_vote_dialog_mutator_vote_yes, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
    }
    gf_tbp_refresh_dialog_labels();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tbp_dialog_extra_vote_mutator_vote_Init () {
    gt_tbp_dialog_extra_vote_mutator_vote = TriggerCreate("gt_tbp_dialog_extra_vote_mutator_vote_Func");
    TriggerAddEventDialogControl(gt_tbp_dialog_extra_vote_mutator_vote, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tbp_dialog_extra_vote_zterran_vote
//--------------------------------------------------------------------------------------------------
bool gt_tbp_dialog_extra_vote_zterran_vote_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoF1C85A83_val;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_tbp_extra_vote_dialog_zterran_vote_no) || (EventDialogControl() == gv_tbp_extra_vote_dialog_zterran_vote_yes)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_tbp_extra_vote_dialog_zterran_vote_yes, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_tbp_extra_vote_dialog_zterran_vote_no, PlayerGroupSingle(EventPlayer()), false);
    autoF1C85A83_val = EventDialogControl();
    if (autoF1C85A83_val == gv_tbp_extra_vote_dialog_zterran_vote_yes) {
        gv_tbp_zterran_votes[EventPlayer()] = 1;
        DialogControlSetEnabled(gv_tbp_extra_vote_dialog_zterran_vote_no, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (autoF1C85A83_val == gv_tbp_extra_vote_dialog_zterran_vote_no) {
        gv_tbp_zterran_votes[EventPlayer()] = 2;
        DialogControlSetEnabled(gv_tbp_extra_vote_dialog_zterran_vote_yes, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
    }
    gf_tbp_refresh_dialog_labels();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tbp_dialog_extra_vote_zterran_vote_Init () {
    gt_tbp_dialog_extra_vote_zterran_vote = TriggerCreate("gt_tbp_dialog_extra_vote_zterran_vote_Func");
    TriggerAddEventDialogControl(gt_tbp_dialog_extra_vote_zterran_vote, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tbp_dialog_extra_vote_mgc_vote
//--------------------------------------------------------------------------------------------------
bool gt_tbp_dialog_extra_vote_mgc_vote_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto79135AB5_val;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_tbp_mgc_vote_dialog_no) || (EventDialogControl() == gv_tbp_mgc_vote_dialog_yes)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_tbp_mgc_vote_dialog_yes, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_tbp_mgc_vote_dialog_no, PlayerGroupSingle(EventPlayer()), false);
    auto79135AB5_val = EventDialogControl();
    if (auto79135AB5_val == gv_tbp_mgc_vote_dialog_yes) {
        gv_tbp_mgc_votes[EventPlayer()] = 1;
        DialogControlSetEnabled(gv_tbp_mgc_vote_dialog_no, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (auto79135AB5_val == gv_tbp_mgc_vote_dialog_no) {
        gv_tbp_mgc_votes[EventPlayer()] = 2;
        DialogControlSetEnabled(gv_tbp_mgc_vote_dialog_yes, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
    }
    gf_tbp_refresh_dialog_labels();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tbp_dialog_extra_vote_mgc_vote_Init () {
    gt_tbp_dialog_extra_vote_mgc_vote = TriggerCreate("gt_tbp_dialog_extra_vote_mgc_vote_Func");
    TriggerAddEventDialogControl(gt_tbp_dialog_extra_vote_mgc_vote, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: every second
//--------------------------------------------------------------------------------------------------
bool gt_everysecond_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_portrait_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_update_timer();
    gf_get_armor();
    gf_get_attackup();
    gf_get_speed();
    gf_get_unit_upgrades();
    gf_handle_player_tutorial_stages();
    gf_handle_dead_player_areas();
    if ((GameGetMissionTime() >= (1 + (5 * 60))) && (GameGetMissionTime() < (1 + (26 * 60)))) {
        gf_update_pet_score();
    }

    if ((gv_difficulty > 3)) {
        if ((GameGetMissionTime() == (1 + (17 * 60)))) {
            gf_inject_extra_nest_positions();
        }

    }

    if ((gv_difficulty >= 7)) {
        if ((GameGetMissionTime() == (35 + ((22 - gv_banelings_activation_offset) * 60)))) {
            gf_banelings_activate_spawners();
        }

    }

    if ((gv_difficulty >= 5)) {
        if ((gv_difficulty == 5)) {
            if ((GameGetMissionTime() == (35 + (14 * 60)))) {
                gf_scale_zerg_start_init();
            }

        }
        else {
            if ((GameGetMissionTime() == (35 + (9 * 60)))) {
                gf_scale_zerg_start_init();
            }

        }
    }

    if ((gv_viper_cloud_cd > 0)) {
        gv_viper_cloud_cd = (gv_viper_cloud_cd - 1);
    }

    if ((gv_defensive_egg_spawn_cooldown > 0)) {
        gv_defensive_egg_spawn_cooldown = (gv_defensive_egg_spawn_cooldown - 1);
    }

    gf_increase_hydra_stock();
    gf_attack_highground_invaders();
    if ((gv_mgc_type > 0)) {
        gf_mgc_handle_midgame_crisis_position_creation();
    }

    gf_remove_transmission_units();
    gf_marauder_timed_event();
    gf_handle_defensive_egg_cluster_markers();
    gf_artanis_timed_event();
    gf_kill_banned_player();
    gf_end_raynor_support();
    gf_timer_terran_death();
    if ((gf_is_game_over() == true)) {
        gf_end_game(gf_get_winning_team());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_everysecond_Init () {
    gt_everysecond = TriggerCreate("gt_everysecond_Func");
    TriggerAddEventTimePeriodic(gt_everysecond, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: every two seconds
//--------------------------------------------------------------------------------------------------
bool gt_everytwoseconds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_min_supply;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_add_zerg_income();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_everytwoseconds_Init () {
    gt_everytwoseconds = TriggerCreate("gt_everytwoseconds_Func");
    TriggerAddEventTimePeriodic(gt_everytwoseconds, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: every three seconds
//--------------------------------------------------------------------------------------------------
bool gt_everythreeseconds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7B868DAD_g;
    int auto7B868DAD_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto7B868DAD_g = gv_terrans;
    auto7B868DAD_var = -1;
    while (true) {
        auto7B868DAD_var = PlayerGroupNextPlayer(auto7B868DAD_g, auto7B868DAD_var);
        if (auto7B868DAD_var < 0) { break; }
        gf_update_reward_panel(auto7B868DAD_var);
    }
    if ((gf_is_3v3() == false)) {
        if ((gv_nest_snipe_cd == 1)) {
            gv_nest_snipe_cd = 0;
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_everythreeseconds_Init () {
    gt_everythreeseconds = TriggerCreate("gt_everythreeseconds_Func");
    TriggerAddEventTimePeriodic(gt_everythreeseconds, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: every five seconds
//--------------------------------------------------------------------------------------------------
bool gt_everyfiveseconds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cloud_cd == 1)) {
        gv_cloud_cd = 0;
    }

    if ((gv_hydra_action_cooldown == true)) {
        gv_hydra_action_cooldown = false;
    }

    if ((gv_difficulty > 1) && (gv_armor_level > 0) && (gv_dead_creep_count > 0) && (gf_get_drone() != null)) {
        gf_try_regrow_creep();
    }

    gf_build_spawners_fast_e2s();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_everyfiveseconds_Init () {
    gt_everyfiveseconds = TriggerCreate("gt_everyfiveseconds_Func");
    TriggerAddEventTimePeriodic(gt_everyfiveseconds, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: every ten seconds
//--------------------------------------------------------------------------------------------------
bool gt_everytenseconds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB76A211F_g;
    int autoB76A211F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB76A211F_g = gv_terrans;
    autoB76A211F_var = -1;
    while (true) {
        autoB76A211F_var = PlayerGroupNextPlayer(autoB76A211F_g, autoB76A211F_var);
        if (autoB76A211F_var < 0) { break; }
        gf_update_income_for_player(autoB76A211F_var);
    }
    if ((GameGetMissionTime() >= (1 + (7 * 60)))) {
        gf_generate_heatmap_results();
        if ((gv_is_af_event == false)) {
            gf_handle_strikelings();
        }

    }

    if ((gv_armor_level >= 1)) {
        gf_get_infestors();
    }

    gf_gather_infestor_groups();
    if ((gv_armor_level >= 5) && (gv_difficulty >= 4) && (PlayerGetPropertyInt(7, c_playerPropMinerals) >= 20000) && (gv_omega_placement_cooldown == 0) && (gv_omega_active == false)) {
        gv_omega_placement_cooldown = 3;
        gf_buy_omega();
    }
    else {
        if ((gv_omega_placement_cooldown > 0)) {
            gv_omega_placement_cooldown = (gv_omega_placement_cooldown - 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_everytenseconds_Init () {
    gt_everytenseconds = TriggerCreate("gt_everytenseconds_Func");
    TriggerAddEventTimePeriodic(gt_everytenseconds, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: every 15 seconds
//--------------------------------------------------------------------------------------------------
bool gt_every15seconds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_refresh_bonus_gasses_data();
    if ((gv_difficulty > 1)) {
        gf_scout_bonus_gasses();
    }

    if ((gv_difficulty > 3)) {
        gf_try_prefuse();
    }

    gf_gather_infestor_groups();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_every15seconds_Init () {
    gt_every15seconds = TriggerCreate("gt_every15seconds_Func");
    TriggerAddEventTimePeriodic(gt_every15seconds, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: every 30 seconds
//--------------------------------------------------------------------------------------------------
bool gt_every30seconds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA0501AE3_g;
    int autoA0501AE3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_upgrade_start_spawners();
    if ((gv_banelings_enabled == true)) {
        gf_banelings_manage();
    }

    if ((FixedToInt(GameGetMissionTime()) >= ((60 * 18) + 59)) && (gv_difficulty > 4)) {
        if ((gv_zhg_recruit_phase == 0)) {
            if ((UnitGroupCount(gv_zhg_hydras, c_unitCountAlive) < 30)) {
                gf_recruit_defensive_hg_hydras();
            }

            gv_zhg_recruit_phase = 1;
        }
        else {
            if ((gv_difficulty > 5)) {
                if ((UnitGroupCount(gv_zhg_prefuse_infestors, c_unitCountAlive) < 30)) {
                    gf_recruit_defensive_hg_infestors();
                }

            }

            gv_zhg_recruit_phase = 0;
        }
    }

    autoA0501AE3_g = gv_terrans;
    autoA0501AE3_var = -1;
    while (true) {
        autoA0501AE3_var = PlayerGroupNextPlayer(autoA0501AE3_g, autoA0501AE3_var);
        if (autoA0501AE3_var < 0) { break; }
        if ((gv_players[autoA0501AE3_var].lv_alive == true)) {
            if ((gv_restored == 1)) {
                gf_manage_spawners(gv_players[autoA0501AE3_var].lv_position);
            }

        }

    }
    if ((gv_difficulty > 4) && (gv_armor_level >= 1)) {
        gf_upgrade_a_spawner();
    }

    if (((gv_req_ravs + (gv_req_infused + gv_req_torra)) > 0) && (UnitGroupCount(gv_reserved_infestors, c_unitCountAlive) < (gv_req_ravs + (gv_req_infused + gv_req_torra)))) {
        gf_reserve_infestors();
    }

    if ((gv_difficulty > 2)) {
        gf_attack_a_bonus_gas();
    }

    gf_handle_yard_exception();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_every30seconds_Init () {
    gt_every30seconds = TriggerCreate("gt_every30seconds_Func");
    TriggerAddEventTimePeriodic(gt_every30seconds, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: every minute
//--------------------------------------------------------------------------------------------------
bool gt_everyminute_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random_player;
    int lv_random_position;

    // Automatic Variable Declarations
    playergroup auto7A9744BF_g;
    int auto7A9744BF_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_update_terrandata();
    gf_run_cash_bonus_check();
    if ((gv_start_scale_zerg == true)) {
        if ((gv_scale_zerg_stage < gv_scale_zerg_max)) {
            gv_scale_zerg_stage = (gv_scale_zerg_stage + 2);
            gf_scale_zerg(gv_scale_zerg_stage);
        }

    }

    if ((FixedToInt(GameGetMissionTime()) >= ((60 * 4) + 59))) {
        gv_mass_infestor_death_exception = gf_check_infestor_dead_directive_override();
        gv_infestor_dead_count = 0;
        if ((gv_mass_infestor_death_exception == true)) {
            if ((gv_mass_infestor_death_exception_cooldown > 0)) {
                gv_mass_infestor_death_exception_cooldown -= 1;
            }
            else {
                gv_mass_infestor_death_exception = false;
            }
        }

    }

    if ((FixedToInt(GameGetMissionTime()) >= ((60 * 12) + 59))) {
    }

    if ((FixedToInt(GameGetMissionTime()) >= ((60 * 20) + 59))) {
        gv_ic_unit_count = (gf_ic_all_Zerg_unit_count() + gf_ic_update_terran_combat_unit_counts());
        if ((gv_ic_unit_count >= 700)) {
            gf_ic_check_zerg_units();
            gf_ic_check_terran_units();
        }

    }

    if ((gv_placement_mode == 2)) {
        gv_supply_target_player_position = gf_get_rr_target_position();
    }

    if ((gv_difficulty <= 4) && (gv_armor_level >= 1)) {
        if ((gv_difficulty == 0)) {
        }
        else {
            gf_upgrade_a_spawner();
        }
    }

    if ((gv_strikeling_build_failure_count >= 10)) {
        gf_strikeling_build_failure_directive();
    }

    auto7A9744BF_g = gv_terrans;
    auto7A9744BF_var = -1;
    while (true) {
        auto7A9744BF_var = PlayerGroupNextPlayer(auto7A9744BF_g, auto7A9744BF_var);
        if (auto7A9744BF_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto7A9744BF_var, "MinuteUpgrade", 1);
        if ((gf_is_3v3() == true)) {
            TechTreeUpgradeAddLevel(gv_players[auto7A9744BF_var].lv__3v3_zerg_pid, "MinuteUpgrade", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_everyminute_Init () {
    gt_everyminute = TriggerCreate("gt_everyminute_Func");
    TriggerAddEventTimePeriodic(gt_everyminute, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: every 90 seconds
//--------------------------------------------------------------------------------------------------
bool gt_every90seconds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_restore_improved_default_rallies();
    if ((gv_mutator_overlords == true)) {
        gf_create_overlord_wave();
    }

    if ((gv_difficulty > 4)) {
        gf_focus_weakest();
    }

    if ((gv_difficulty > 5)) {
        if ((GameGetMissionTime() >= (1 + (13 * 60)))) {
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_every90seconds_Init () {
    gt_every90seconds = TriggerCreate("gt_every90seconds_Func");
    TriggerAddEventTimePeriodic(gt_every90seconds, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: every 3 minutes
//--------------------------------------------------------------------------------------------------
bool gt_every3minutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_every3minutes_Init () {
    gt_every3minutes = TriggerCreate("gt_every3minutes_Func");
    TriggerAddEventTimePeriodic(gt_every3minutes, (60.0 * 3.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: every 15 minutes
//--------------------------------------------------------------------------------------------------
bool gt_every15minutes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_all_structures_count;
    int lv_hive_count;
    int lv_hg_spine_count;
    int lv_spire_count;
    unit lv_t;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() > (32 * 60)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_all_structures_count = UnitGroupCount(UnitGroup(null, 7, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_hive_count = UnitGroupCount(UnitGroup("Hive2", 7, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_hg_spine_count = UnitGroupCount(UnitGroup("LargeSpineCrawler", 7, RegionFromId(1), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_spire_count = UnitGroupCount(UnitGroup("MineralExtractor", 7, RegionFromId(1), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_spire_count = (lv_spire_count + UnitGroupCount(UnitGroup("GreaterMineralExtractor", 7, RegionFromId(1), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
    if ((lv_hive_count == 1) && (lv_hg_spine_count == 0) && (lv_spire_count == 0) && (lv_all_structures_count < 5)) {
        lv_t = gf_get_hive();
        UnitKill(lv_t);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_every15minutes_Init () {
    gt_every15minutes = TriggerCreate("gt_every15minutes_Func");
    TriggerAddEventTimePeriodic(gt_every15minutes, (60.0 * 15.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_tgaievery6s_Init();
    gt_TombstoneMineralUpgradeFinished_Init();
    gt_StoptherainUpgradefinished_Init();
    gt_transporterbecameidle_Init();
    gt_disable_transporter_trigger_Init();
    gt_Cashtransporterbecameidle_Init();
    gt_MoreCashPickupResearchFinished_Init();
    gt_choaslordcreated_Init();
    gt_choasmarinecreated_Init();
    gt_cultistcreated_Init();
    gt_playercollectsblood_Init();
    gt_playercollectsbloodbig_Init();
    gt_Manufacturerdies_Init();
    gt_Manufacturerfinished_Init();
    gt_SelectBomberAbilityUsed_Init();
    gt_SelectInfestedMarineAbilityUsed_Init();
    gt_Infestedbuildingfinished_Init();
    gt_Infestedmaybestuck_Init();
    gt_PowerAuraGotClicked_Init();
    gt_AttackAuraGotClicked_Init();
    gt_DefenseAuraGotClicked_Init();
    gt_InactiveStateGotClicked_Init();
    gt_use_tank_ability_Init();
    gt_use_tank_attack_Init();
    gt_aftestpublic_Init();
    gt_rtv_Init();
    gt_rtvhalloween_Init();
    gt_rtvxmas_Init();
    gt_rtvhny_Init();
    gt_rtvvday_Init();
    gt_rtvthxg_Init();
    gt_clear_Init();
    gt_debug_Init();
    gt_debug_elo_Init();
    gt_debug_lag_Init();
    gt_energy_Init();
    gt_help_Init();
    gt_karax_Init();
    gt_drone_Init();
    gt_money_Init();
    gt_money_zerg_Init();
    gt_reveal_Init();
    gt_italis_Init();
    gt_inf_Init();
    gt_immortal_Init();
    gt_eggclustertest_Init();
    gt_createfrostyspawners_Init();
    gt_makemegenetron_Init();
    gt_cheat_Init();
    gt_disabletutorial_Init();
    gt_tutorial_Init();
    gt_Playerbindsunits_Init();
    gt_Techlabfinished_Init();
    gt_KaraxDeathTimer_Init();
    gt_testforced_mid_buff_Init();
    gt_Veterangetspromoted_Init();
    gt_SkinJimmygotselected_Init();
    gt_SkinMadaxegotselected_Init();
    gt_SkinUltimategotselected_Init();
    gt_Skinmarshallgotselected_Init();
    gt_TechLabWarpItalisCost_Init();
    gt_TechLabChargeApply_Init();
    gt_IonCannonNotification_Init();
    gt_GasExtractionFinished_Init();
    gt_probiusincreasedincomefinished_Init();
    gt_probiuspylonfinished_Init();
    gt_EnergyUpgradeFinished_Init();
    gt_PickupLocatorUpgradeFinished_Init();
    gt_PickupDoublerUpgradeFinished_Init();
    gt_ConyardFinished_Init();
    gt_NoWeathergotselected_Init();
    gt_Raingotselected_Init();
    gt_Snowgotselected_Init();
    gt_Ashgotselected_Init();
    gt_hive_top_killed_Init();
    gt_hive_bottom_killed_Init();
    gt_testfw_Init();
    gt_remove_invalid_ion_Init();
    gt_protect_top_hive_from_allies_Init();
    gt_protect_bottom_hive_from_allies_Init();
    gt_firewall_kill_Init();
    gt_update_3v3_objectives_Init();
    gt_CocoonorOmegadies3v3_Init();
    gt_Cocoongotspawned3v3_Init();
    gt_Cocoonspawnfinished3v3_Init();
    gt_TerrazineIncome_Init();
    gt_zagara_death_timer_Init();
    gt_MechaUpgradefinished_Init();
    gt_Larvadies_Init();
    gt_Larvamutatesintobuilding_Init();
    gt_zccbuilt_Init();
    gt_zccdies_Init();
    gt_PeriodicZCCSpawn_Init();
    gt_SpawnZCCUnit3v3_Init();
    gt_ZCCupgrades_Init();
    gt_Nydusfinished_Init();
    gt_Nydusdied_Init();
    gt_zerg_rally_center_Init();
    gt_zerg_rally_left_Init();
    gt_zerg_rally_right_Init();
    gt_zerg_rally_equal_on_Init();
    gt_zerg_rally_minus_on_Init();
    gt_zerg_rally_plus_on_Init();
    gt_relocate_spawners_rally_action_Init();
    gt__3v3test_Init();
    gt_CCdestroyed_Init();
    gt_playerleavesgame_Init();
    gt_af_relevant_building_finished_Init();
    gt_spawnturkey_Init();
    gt_turkeydies_Init();
    gt_spawnheart_Init();
    gt_playercollectsheart_Init();
    gt_grabaheart_Init();
    gt_killapumpkin_Init();
    gt_spawnpumpkin_Init();
    gt_pumpkindies_Init();
    gt_playercollectsbonuscard_Init();
    gt_spawnpresent_Init();
    gt_playercollectspresent_Init();
    gt_grabapresent_Init();
    gt_spawnhappynewyeargift_Init();
    gt_playercollectshappynewyeargift_Init();
    gt_grabahnygift_Init();
    gt_removeallfireworks_Init();
    gt_spawnhellforces_Init();
    gt_buildinggetsattackedtrydefendwithwizards_Init();
    gt_resetwizardactioncooldown_Init();
    gt_removefortdebrisactorfix_Init();
    gt_changedaytime_Init();
    gt_SolarWeaponsfinished_Init();
    gt_Overlorddies_Init();
    gt_timer_Init();
    gt_sendbuggohome_Init();
    gt_nestislowhealth_Init();
    gt_creepsourcedied_Init();
    gt_creepsourcerebuildstarted_Init();
    gt_checkhazardzones_Init();
    gt_stasisgotused_Init();
    gt_drone_finished_Init();
    gt_EggSpawnTriggerDummy_Init();
    gt_Checkbridgesevery45s_Init();
    gt_spinegetsattacked_Init();
    gt_buildinggetsattacked_Init();
    gt_checkplayerseveryminute_Init();
    gt_Terranenterszerghighground_Init();
    gt_invaderleaveszerghighground_Init();
    gt_invaderdies_Init();
    gt_specialunitgotborn_Init();
    gt_everyfiveminutes_Init();
    gt_every45seconds_Init();
    gt_useidleunits_Init();
    gt_f2triggerevery5s_Init();
    gt_IonCannonApplyPermaDamage_Init();
    gt_hydragotborn_Init();
    gt_hydragetsattacked_Init();
    gt_buildinggetsattackedtrydefendwithhydras_Init();
    gt_checkhydras_Init();
    gt_nestdied_Init();
    gt_add_infestor_to_group_Init();
    gt_spinedies_Init();
    gt_infestorgetsattacked_Init();
    gt_Feedidleinfestorsevery21s_Init();
    gt_spawnwarfieldforces_Init();
    gt_EggClusterTriggerDummy_Init();
    gt_Cocoongotspawned_Init();
    gt_Cocoonspawnfinished_Init();
    gt_CocoonorOmegadies_Init();
    gt_TryOmegaOrderRefresh_Init();
    gt_extractordies_Init();
    gt_spawner_started_Init();
    gt_spawnerdies_Init();
    gt_spawner_finished_Init();
    gt_checkflankrallies_Init();
    gt_Unitenterssector_Init();
    gt_Unitleavessector_Init();
    gt_updatethreatscoreevery5s_Init();
    gt_defendlanewithkerrigan_Init();
    gt_Kerrigangetsattacked_Init();
    gt_ReduceKerriganCooldowns_Init();
    gt_defendsectorwithkerrigan_Init();
    gt_CocoonCountdownhappend_Init();
    gt_Kerrigandied_Init();
    gt_Kerrigancocoondied_Init();
    gt_instantlyupgradethespawner_Init();
    gt_GapGenerationDummyEffecthappend_Init();
    gt_Vipergetsattacked_Init();
    gt_ViperCloudgotused_Init();
    gt_ZergSupplyUpgrade_Init();
    gt_ZergArmor_Init();
    gt_adddefenseup_Init();
    gt_entrypoint_Init();
    gt_SmithdoingstuffTriggerDummy_Init();
    gt_testdev55_Init();
    gt_wantkarax_Init();
    gt_testdevnovaequipment_Init();
    gt_afterlife_hero_died_Init();
    gt_SporeCrawlerwantstoshoot_Init();
    gt_Infestordied_Init();
    gt_tbp_dialog_minimap_interaction_Init();
    gt_tbp_dialog_minimap_add_archon_button_interaction_Init();
    gt_tbp_dialog_minimap_remove_archon_button_interaction_Init();
    gt_tbp_dialog_minimap_archon_slot_button_interaction_Init();
    gt_tbp_create_Init();
    gt_tbp_dialog_interaction_Init();
    gt_tbp_dialog_extra_vote_difficulty_offset_interaction_Init();
    gt_tbp_dialog_extra_vote_torment_level_interaction_Init();
    gt_tbp_dialog_extra_vote_mutator_vote_Init();
    gt_tbp_dialog_extra_vote_zterran_vote_Init();
    gt_tbp_dialog_extra_vote_mgc_vote_Init();
    gt_everysecond_Init();
    gt_everytwoseconds_Init();
    gt_everythreeseconds_Init();
    gt_everyfiveseconds_Init();
    gt_everytenseconds_Init();
    gt_every15seconds_Init();
    gt_every30seconds_Init();
    gt_everyminute_Init();
    gt_every90seconds_Init();
    gt_every3minutes_Init();
    gt_every15minutes_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
